{"version":3,"sources":["VisualsData.js","../ts/visualsData/semanticQuery/sqExprVisitor.ts","../ts/visualsData/types/enumType.ts","../ts/visualsData/types/fill.ts","../ts/visualsData/types/image.ts","../ts/visualsData/types/structuralType.ts","../ts/visualsData/types/valueType.ts","../ts/visualsData/contracts/dataShapeBinding.ts","../ts/visualsData/contracts/dataShapeBindingDataReduction.ts","../ts/visualsData/contracts/federatedConceptualSchema.ts","../ts/visualsData/contracts/selector.ts","../ts/visualsData/contracts/query.ts","../ts/visualsData/contracts/queryProjection.ts","../ts/visualsData/contracts/visualData.ts","../ts/visualsData/dataView/dataRoleHelper.ts","../ts/visualsData/dataView/dataViewCategoricalReader.ts","../ts/visualsData/dataView/dataViewConcatenateCategoricalColumns.ts","../ts/visualsData/dataView/dataViewMappingVisitor.ts","../ts/visualsData/dataView/dataViewNormalizeValues.ts","../ts/visualsData/dataView/dataViewObject.ts","../ts/visualsData/dataView/dataViewObjectDefinition.ts","../ts/visualsData/dataView/dataViewObjectDescriptor.ts","../ts/visualsData/dataView/dataViewObjectEvaluationUtils.ts","../ts/visualsData/dataView/dataViewObjectEvaluator.ts","../ts/visualsData/dataView/dataViewPivotCategorical.ts","../ts/visualsData/dataView/dataViewPivotMatrix.ts","../ts/visualsData/dataView/dataViewSelfCrossJoin.ts","../ts/visualsData/dataView/dataViewPivotCategoricalToPrimaryGroups.ts","../ts/visualsData/dataView/dataViewTransform.ts","../ts/visualsData/displayNameGetter.ts","../ts/visualsData/iFormattingService.ts","../ts/visualsData/semanticQuery/exprPatterns/fieldExprPattern.ts","../ts/visualsData/dataView/dataViewAnalysis.ts","../ts/visualsData/dataView/dataViewScopeIdentity.ts","../ts/visualsData/dataView/dataViewScopeWildcard.ts","../ts/visualsData/dataView/dataViewRegression.ts","../ts/visualsData/dataView/dataViewSelectTransform.ts","../ts/visualsData/dataView/rules/categoricalEvalContext.ts","../ts/visualsData/dataView/rules/tableEvalContext.ts","../ts/visualsData/dataView/rules/ruleEvaluation.ts","../ts/visualsData/dataView/rules/colorRuleEvaluation.ts","../ts/visualsData/dataView/utils/dataViewMatrixUtils.ts","../ts/visualsData/contracts/conceptualSchema.ts","../ts/visualsData/dataView/scriptResultUtil.ts","../ts/visualsData/segmentation/dataViewMerger.ts","../ts/visualsData/semanticQuery/sqExprRewriter.ts","../ts/visualsData/semanticQuery/exprPatterns/equalsToInRewriter.ts","../ts/visualsData/semanticQuery/exprPatterns/filterScopeIdsCollector.ts","../ts/visualsData/semanticQuery/exprPatterns/scopeIdentityExtractor.ts","../ts/visualsData/semanticQuery/primitiveValueEncoding.ts","../ts/visualsData/semanticQuery/sqHierarchyExprUtils.ts","../ts/visualsData/semanticQuery/sqExprGroupUtils.ts","../ts/visualsData/semanticQuery/sqExpr.ts","../ts/visualsData/semanticQuery/sqExprUtils.ts","../ts/visualsData/semanticQuery/semanticQueryRewriter.ts","../ts/visualsData/semanticQuery/semanticQuery.ts","../ts/visualsData/dataView/dataViewBuilder.ts","../ts/visualsData/dataView/rules/staticEvalContext.ts","../ts/visualsData/dataView/rules/matrixEvalContext.ts","../ts/visualsData/services/formattingService.ts","../ts/visualsData/services/serialization/sqExprShortSerializer.ts"],"names":["__extends","this","d","b","__","constructor","p","hasOwnProperty","prototype","Object","create","powerbi","powerbi.data","powerbi.data.DefaultSQExprVisitorWithArg","powerbi.data.DefaultSQExprVisitorWithArg.visitEntity","powerbi.data.DefaultSQExprVisitorWithArg.visitColumnRef","powerbi.data.DefaultSQExprVisitorWithArg.visitMeasureRef","powerbi.data.DefaultSQExprVisitorWithArg.visitAggr","powerbi.data.DefaultSQExprVisitorWithArg.visitHierarchy","powerbi.data.DefaultSQExprVisitorWithArg.visitHierarchyLevel","powerbi.data.DefaultSQExprVisitorWithArg.visitPropertyVariationSource","powerbi.data.DefaultSQExprVisitorWithArg.visitBetween","powerbi.data.DefaultSQExprVisitorWithArg.visitIn","powerbi.data.DefaultSQExprVisitorWithArg.visitAnd","powerbi.data.DefaultSQExprVisitorWithArg.visitOr","powerbi.data.DefaultSQExprVisitorWithArg.visitCompare","powerbi.data.DefaultSQExprVisitorWithArg.visitContains","powerbi.data.DefaultSQExprVisitorWithArg.visitExists","powerbi.data.DefaultSQExprVisitorWithArg.visitNot","powerbi.data.DefaultSQExprVisitorWithArg.visitStartsWith","powerbi.data.DefaultSQExprVisitorWithArg.visitConstant","powerbi.data.DefaultSQExprVisitorWithArg.visitDateSpan","powerbi.data.DefaultSQExprVisitorWithArg.visitDateAdd","powerbi.data.DefaultSQExprVisitorWithArg.visitNow","powerbi.data.DefaultSQExprVisitorWithArg.visitDefaultValue","powerbi.data.DefaultSQExprVisitorWithArg.visitAnyValue","powerbi.data.DefaultSQExprVisitor","powerbi.data.DefaultSQExprVisitor.constructor","powerbi.data.DefaultSQExprVisitorWithTraversal","powerbi.data.DefaultSQExprVisitorWithTraversal.visitEntity","powerbi.data.DefaultSQExprVisitorWithTraversal.visitColumnRef","powerbi.data.DefaultSQExprVisitorWithTraversal.visitMeasureRef","powerbi.data.DefaultSQExprVisitorWithTraversal.visitAggr","powerbi.data.DefaultSQExprVisitorWithTraversal.visitHierarchy","powerbi.data.DefaultSQExprVisitorWithTraversal.visitHierarchyLevel","powerbi.data.DefaultSQExprVisitorWithTraversal.visitPropertyVariationSource","powerbi.data.DefaultSQExprVisitorWithTraversal.visitBetween","powerbi.data.DefaultSQExprVisitorWithTraversal.visitIn","powerbi.data.DefaultSQExprVisitorWithTraversal.visitAnd","powerbi.data.DefaultSQExprVisitorWithTraversal.visitOr","powerbi.data.DefaultSQExprVisitorWithTraversal.visitCompare","powerbi.data.DefaultSQExprVisitorWithTraversal.visitContains","powerbi.data.DefaultSQExprVisitorWithTraversal.visitExists","powerbi.data.DefaultSQExprVisitorWithTraversal.visitNot","powerbi.data.DefaultSQExprVisitorWithTraversal.visitStartsWith","powerbi.data.DefaultSQExprVisitorWithTraversal.visitConstant","powerbi.data.DefaultSQExprVisitorWithTraversal.visitDateSpan","powerbi.data.DefaultSQExprVisitorWithTraversal.visitDateAdd","powerbi.data.DefaultSQExprVisitorWithTraversal.visitNow","powerbi.data.DefaultSQExprVisitorWithTraversal.visitDefaultValue","powerbi.data.DefaultSQExprVisitorWithTraversal.visitAnyValue","powerbi.createEnumType","powerbi.EnumType","powerbi.EnumType.constructor","powerbi.EnumType.members","powerbi.FillSolidColorTypeDescriptor","powerbi.FillSolidColorTypeDescriptor.nullable","powerbi.ImageDefinition","powerbi.StructuralTypeDescriptor","powerbi.StructuralTypeDescriptor.isValid","powerbi.getPrimitiveType","powerbi.isPrimitiveType","powerbi.getCategoryFromExtendedType","powerbi.toExtendedType","powerbi.matchesExtendedTypeWithAnyPrimitive","powerbi.ValueType","powerbi.ValueType.constructor","powerbi.ValueType.fromDescriptor","powerbi.ValueType.fromExtendedType","powerbi.ValueType.fromPrimitiveTypeAndCategory","powerbi.ValueType.fromEnum","powerbi.ValueType.isCompatibleFrom","get","powerbi.ValueType.primitiveType","enumerable","configurable","powerbi.ValueType.extendedType","powerbi.ValueType.categoryString","powerbi.ValueType.text","powerbi.ValueType.numeric","powerbi.ValueType.integer","powerbi.ValueType.bool","powerbi.ValueType.dateTime","powerbi.ValueType.duration","powerbi.ValueType.binary","powerbi.ValueType.none","powerbi.ValueType.temporal","powerbi.ValueType.geography","powerbi.ValueType.misc","powerbi.ValueType.formatting","powerbi.ValueType.enum","powerbi.ValueType.scripting","powerbi.ScriptType","powerbi.ScriptType.constructor","powerbi.ScriptType.source","powerbi.TemporalType","powerbi.TemporalType.constructor","powerbi.TemporalType.year","powerbi.TemporalType.month","powerbi.GeographyType","powerbi.GeographyType.constructor","powerbi.GeographyType.address","powerbi.GeographyType.city","powerbi.GeographyType.continent","powerbi.GeographyType.country","powerbi.GeographyType.county","powerbi.GeographyType.region","powerbi.GeographyType.postalCode","powerbi.GeographyType.stateOrProvince","powerbi.GeographyType.place","powerbi.GeographyType.latitude","powerbi.GeographyType.longitude","powerbi.MiscellaneousType","powerbi.MiscellaneousType.constructor","powerbi.MiscellaneousType.image","powerbi.MiscellaneousType.imageUrl","powerbi.MiscellaneousType.webUrl","powerbi.FormattingType","powerbi.FormattingType.constructor","powerbi.FormattingType.color","powerbi.FormattingType.formatString","powerbi.FormattingType.alignment","powerbi.FormattingType.labelDisplayUnits","powerbi.FormattingType.fontSize","powerbi.FormattingType.labelDensity","powerbi.PrimitiveType","powerbi.ExtendedType","powerbi.data.DataShapeBindingLimitType","powerbi.data.SubtotalType","powerbi.data.DataShapeBindingDataReduction","powerbi.data.DataShapeBindingDataReduction.createFrom","powerbi.data.FederatedConceptualSchema","powerbi.data.FederatedConceptualSchema.constructor","powerbi.data.FederatedConceptualSchema.schema","powerbi.data.Selector","powerbi.data.Selector.filterFromSelector","powerbi.data.Selector.matchesData","powerbi.data.Selector.matchesKeys","powerbi.data.Selector.equals","powerbi.data.Selector.equalsDataArray","powerbi.data.Selector.equalsData","powerbi.data.Selector.getKey","powerbi.data.Selector.containsWildcard","powerbi.data.EntitySourceType","powerbi.data.TimeUnit","powerbi.data.QueryAggregateFunction","powerbi.data.QueryComparisonKind","powerbi.data.SemanticType","powerbi.data.FilterKind","powerbi.data.QueryProjectionCollection","powerbi.data.QueryProjectionCollection.constructor","powerbi.data.QueryProjectionCollection.all","powerbi.data.QueryProjectionCollection.activeProjectionRefs","set","powerbi.data.QueryProjectionCollection.showAll","powerbi.data.QueryProjectionCollection.addActiveQueryReference","powerbi.data.QueryProjectionCollection.getLastActiveQueryReference","powerbi.data.QueryProjectionCollection.clone","powerbi.data.QueryProjectionsByRole","powerbi.data.QueryProjectionsByRole.clone","powerbi.data.QueryProjectionsByRole.getRole","powerbi.DisplayUnitSystemType","powerbi.data.DataRoleHelper","powerbi.data.DataRoleHelper.getMeasureIndexOfRole","powerbi.data.DataRoleHelper.getCategoryIndexOfRole","powerbi.data.DataRoleHelper.hasRole","powerbi.data.DataRoleHelper.hasRoleInDataView","powerbi.data.createIDataViewCategoricalReader","powerbi.data.DataViewCategoricalReader","powerbi.data.DataViewCategoricalReader.constructor","powerbi.data.DataViewCategoricalReader.hasCategories","powerbi.data.DataViewCategoricalReader.getCategoryCount","powerbi.data.DataViewCategoricalReader.getCategoryValues","powerbi.data.DataViewCategoricalReader.getCategoryValue","powerbi.data.DataViewCategoricalReader.getCategoryColumn","powerbi.data.DataViewCategoricalReader.getCategoryMetadataColumn","powerbi.data.DataViewCategoricalReader.getCategoryDisplayName","powerbi.data.DataViewCategoricalReader.hasCompositeCategories","powerbi.data.DataViewCategoricalReader.hasCategoryWithRole","powerbi.data.DataViewCategoricalReader.getCategoryObjects","powerbi.data.DataViewCategoricalReader.getCategoryFromRole","powerbi.data.DataViewCategoricalReader.hasValues","powerbi.data.DataViewCategoricalReader.getValues","powerbi.data.DataViewCategoricalReader.getValue","powerbi.data.DataViewCategoricalReader.getFirstNonNullValueForCategory","powerbi.data.DataViewCategoricalReader.getMeasureQueryName","powerbi.data.DataViewCategoricalReader.getValueColumn","powerbi.data.DataViewCategoricalReader.getValueMetadataColumn","powerbi.data.DataViewCategoricalReader.getValueDisplayName","powerbi.data.DataViewCategoricalReader.getMeasureIndex","powerbi.data.DataViewCategoricalReader.hasDynamicSeries","powerbi.data.DataViewCategoricalReader.getSeriesCount","powerbi.data.DataViewCategoricalReader.getSeriesObjects","powerbi.data.DataViewCategoricalReader.getSeriesColumn","powerbi.data.DataViewCategoricalReader.getSeriesColumns","powerbi.data.DataViewCategoricalReader.getSeriesMetadataColumn","powerbi.data.DataViewCategoricalReader.getSeriesColumnIdentifier","powerbi.data.DataViewCategoricalReader.getSeriesName","powerbi.data.DataViewCategoricalReader.getSeriesDisplayName","powerbi.data.DataViewConcatenateCategoricalColumns","powerbi.data.DataViewConcatenateCategoricalColumns.detectAndApply","powerbi.data.DataViewConcatenateCategoricalColumns.detectCategoricalRoleForHierarchicalGroup","powerbi.data.DataViewConcatenateCategoricalColumns.getAllRolesInCategories","powerbi.data.DataViewConcatenateCategoricalColumns.applyConcatenation","powerbi.data.DataViewConcatenateCategoricalColumns.concatenateValues","powerbi.data.DataViewConcatenateCategoricalColumns.sortColumnsByProjectionOrdering","powerbi.data.DataViewConcatenateCategoricalColumns.createConcatenatedColumnMetadata","powerbi.data.DataViewConcatenateCategoricalColumns.addToMetadata","powerbi.data.DataViewConcatenateCategoricalColumns.createConcatenatedCategoryColumn","powerbi.DataViewMapping","powerbi.DataViewMapping.visitMapping","powerbi.DataViewMapping.visitCategorical","powerbi.DataViewMapping.visitCategoricalCategories","powerbi.DataViewMapping.visitCategoricalValues","powerbi.DataViewMapping.visitTable","powerbi.DataViewMapping.visitMatrix","powerbi.DataViewMapping.visitMatrixItems","powerbi.DataViewMapping.visitTree","powerbi.DataViewMapping.visitTreeNodes","powerbi.DataViewMapping.visitTreeValues","powerbi.DataViewMapping.visitBind","powerbi.DataViewMapping.visitFor","powerbi.DataViewMapping.visitList","powerbi.DataViewMapping.visitGrouped","powerbi.DataViewMapping.visitReduction","powerbi.DataViewMapping.visitSingle","powerbi.data.DataViewNormalizeValues","powerbi.data.DataViewNormalizeValues.apply","powerbi.data.DataViewNormalizeValues.filterVariantMeasures","powerbi.data.DataViewNormalizeValues.generateMetadataColumnFilter","powerbi.data.DataViewNormalizeValues.generateValueFilter","powerbi.data.DataViewNormalizeValues.generateColumnValueFilter","powerbi.data.DataViewNormalizeValues.getColumnRequiredTypes","powerbi.data.DataViewNormalizeValues.filterVariantMeasuresCategorical","powerbi.data.DataViewNormalizeValues.filterVariantMeasuresTable","powerbi.data.DataViewNormalizeValues.filterVariantMeasuresTreeNode","powerbi.data.DataViewNormalizeValues.filterVariantMeasuresMatrix","powerbi.data.DataViewNormalizeValues.filterVariantMeasuresMatrixRecursive","powerbi.data.DataViewNormalizeValues.filterVariantMeasuresSingle","powerbi.data.DataViewNormalizeValues.normalizeVariant","powerbi.data.DataViewNormalizeValues.doesValueMatchTypes","powerbi.data.DataViewNormalizeValues.firstColumnByRoleName","powerbi.DataViewObjects","powerbi.DataViewObjects.getValue","powerbi.DataViewObjects.getObject","powerbi.DataViewObjects.getUserDefinedObjects","powerbi.DataViewObjects.getFillColor","powerbi.DataViewObjects.isUserDefined","powerbi.DataViewObject","powerbi.DataViewObject.getValue","powerbi.DataViewObject.getFillColorByPropertyName","powerbi.data.DataViewObjectDefinitions","powerbi.data.DataViewObjectDefinitions.ensure","powerbi.data.DataViewObjectDefinitions.deleteProperty","powerbi.data.DataViewObjectDefinitions.setValue","powerbi.data.DataViewObjectDefinitions.getValue","powerbi.data.DataViewObjectDefinitions.getPropertyContainer","powerbi.data.DataViewObjectDefinitions.getObjectDefinition","powerbi.data.DataViewObjectDefinitions.propertiesAreEqual","powerbi.data.DataViewObjectDefinitions.allPropertiesAreEqual","powerbi.data.DataViewObjectDefinitions.encodePropertyValue","powerbi.data.DataViewObjectDefinitions.clone","powerbi.data.DataViewObjectDefinitions.cloneProperties","powerbi.data.DataViewObjectDefinition","powerbi.data.DataViewObjectDefinition.deleteSingleProperty","powerbi.data.DataViewObjectDescriptors","powerbi.data.DataViewObjectDescriptors.findFormatString","powerbi.data.DataViewObjectDescriptors.findFilterOutput","powerbi.data.DataViewObjectDescriptors.findDefaultValue","powerbi.data.DataViewObjectDescriptors.findProperty","powerbi.data.DataViewObjectEvaluationUtils","powerbi.data.DataViewObjectEvaluationUtils.evaluateDataViewObjects","powerbi.data.DataViewObjectEvaluationUtils.groupObjectsBySelector","powerbi.data.DataViewObjectEvaluationUtils.ensureDefinitionListForSelector","powerbi.data.DataViewObjectEvaluationUtils.addImplicitObjects","powerbi.data.DataViewObjectEvaluationUtils.addDefaultFormatString","powerbi.data.DataViewObjectEvaluationUtils.addDefaultValue","powerbi.data.DataViewObjectEvaluationUtils.getColumnFormatForIndex","powerbi.data.DataViewObjectEvaluationUtils.applyFormatString","powerbi.data.DataViewObjectEvaluationUtils.applyDefaultValue","powerbi.data.DataViewObjectEvaluationUtils.applyMetadataProperty","powerbi.data.DataViewObjectEvaluationUtils.findWithMatchingSelector","powerbi.data.DataViewObjectEvaluationUtils.findExistingObject","powerbi.data.DataViewObjectEvaluator","powerbi.data.DataViewObjectEvaluator.run","powerbi.data.DataViewObjectEvaluator.evaluateProperty","powerbi.data.DataViewObjectEvaluator.evaluateFill","powerbi.data.DataViewObjectEvaluator.evaluateFillRule","powerbi.data.DataViewObjectEvaluator.evaluateColorStop","powerbi.data.DataViewObjectEvaluator.evaluateImage","powerbi.data.DataViewObjectEvaluator.evaluateParagraphs","powerbi.data.DataViewObjectEvaluator.evaluateParagraph","powerbi.data.DataViewObjectEvaluator.evaluateTextRun","powerbi.data.DataViewObjectEvaluator.evaluateArrayCopyOnChange","powerbi.data.DataViewObjectEvaluator.evaluateValue","powerbi.data.DataViewObjectEvaluator.ExpressionEvaluator","powerbi.data.DataViewObjectEvaluator.ExpressionEvaluator.constructor","powerbi.data.DataViewObjectEvaluator.ExpressionEvaluator.evaluate","powerbi.data.DataViewObjectEvaluator.ExpressionEvaluator.visitColumnRef","powerbi.data.DataViewObjectEvaluator.ExpressionEvaluator.visitConstant","powerbi.data.DataViewObjectEvaluator.ExpressionEvaluator.visitMeasureRef","powerbi.data.DataViewObjectEvaluator.ExpressionEvaluator.visitAggr","powerbi.data.DataViewPivotCategorical","powerbi.data.DataViewPivotCategorical.apply","powerbi.data.DataViewPivotMatrix","powerbi.data.DataViewPivotMatrix.apply","node","values","pivotedRowNode","i","columnCount","index","level","children","j","measureHeaderLeaf","columnLeafNode","columnLeafNodes","levelSourceIndex","isSubtotal","push","powerbi.data.DataViewPivotMatrix.forEachLeaf","powerbi.data.DataViewPivotMatrix.cloneTree","powerbi.data.DataViewPivotMatrix.cloneTreeExecuteOnLeaf","powerbi.data.createNullValues","powerbi.data.inheritArrayWithValue","powerbi.data.DataViewSelfCrossJoin","powerbi.data.DataViewSelfCrossJoin.apply","powerbi.data.DataViewSelfCrossJoin.applyCategorical","powerbi.data.DataViewSelfCrossJoin.createGroupedValues","powerbi.data.DataViewPivotCategoricalToPrimaryGroups","powerbi.data.DataViewPivotCategoricalToPrimaryGroups.pivotBinding","powerbi.data.DataViewPivotCategoricalToPrimaryGroups.isPivotableAxis","powerbi.data.DataViewPivotCategoricalToPrimaryGroups.canPivotCategorical","powerbi.data.DataViewPivotCategoricalToPrimaryGroups.unpivotResult","powerbi.data.DataViewPivotCategoricalToPrimaryGroups.getRolesInRoleMapping","powerbi.data.DataViewPivotCategoricalToPrimaryGroups.getRolesInRoleMappings","powerbi.data.DataViewPivotCategoricalToPrimaryGroups.inferUnpivotTransform","powerbi.data.DataViewPivotCategoricalToPrimaryGroups.unpivotMatrix","powerbi.data.DataViewPivotCategoricalToPrimaryGroups.categoricalFromUnpivotedMatrix","powerbi.data.DataViewTransform","powerbi.data.DataViewTransform.apply","powerbi.data.DataViewTransform.transformQueryToVisualDataView","powerbi.data.DataViewTransform.transformEmptyDataView","powerbi.data.DataViewTransform.transformDataView","powerbi.data.DataViewTransform.getTargetKinds","powerbi.data.DataViewTransform.transformSelects","powerbi.data.DataViewTransform.applyTransformsToColumns","powerbi.data.DataViewTransform.getFormatForColumn","powerbi.data.DataViewTransform.applyRewritesToCategorical","powerbi.data.DataViewTransform.applyRewritesToCategorical.override","powerbi.data.DataViewTransform.applyRewritesToTable","powerbi.data.DataViewTransform.createTableColumnPositionMapping","powerbi.data.DataViewTransform.applyRewritesToMatrix","powerbi.data.DataViewTransform.applyRewritesToMatrix.override","powerbi.data.DataViewTransform.applyRewritesToMatrix.overrideHierarchy","powerbi.data.DataViewTransform.reorderChildNodes","powerbi.data.DataViewTransform.createMatrixValuesPositionMapping","powerbi.data.DataViewTransform.createMatrixValuesPositionMapping.matchValueSource","powerbi.data.DataViewTransform.createOrderMapping","powerbi.data.DataViewTransform.forEachNodeAtLevel","powerbi.data.DataViewTransform.findOverride","powerbi.data.DataViewTransform.ensureRewritten","powerbi.data.DataViewTransform.transformObjects","powerbi.data.DataViewTransform.evaluateUserDefinedObjects","powerbi.data.DataViewTransform.evaluateMetadataObjects","powerbi.data.DataViewTransform.createRuleEvaluationInstance","powerbi.data.DataViewTransform.createRuleEvaluationInstanceFillRule","powerbi.data.DataViewTransform.createColorAllocatorLinearGradient2","powerbi.data.DataViewTransform.createColorAllocatorLinearGradient3","powerbi.data.DataViewTransform.evaluateDataRepetition","powerbi.data.DataViewTransform.evaluateDataRepetitionCategoricalCategory","powerbi.data.DataViewTransform.evaluateDataRepetitionCategoricalValueGrouping","powerbi.data.DataViewTransform.evaluateDataRepetitionMatrix","powerbi.data.DataViewTransform.evaluateDataRepetitionMatrixHierarchy","powerbi.data.DataViewTransform.evaluateDataRepetitionMatrixNode","powerbi.data.DataViewTransform.inheritNodeAndChildren","powerbi.data.DataViewTransform.evaluateDataRepetitionTable","powerbi.data.DataViewTransform.evaluateDataRepetitionTableRows","powerbi.data.DataViewTransform.evaluateMetadataRepetition","powerbi.data.DataViewTransform.findSelectedCategoricalColumn","powerbi.data.DataViewTransform.findSelectorForRuleInput","powerbi.data.DataViewTransform.findRuleInputColumnNumberRange","powerbi.data.DataViewTransform.createValueColumns","powerbi.data.DataViewTransform.setGrouped","powerbi.data.DataViewTransform.groupValues","powerbi.data.DataViewTransform.pivotIfNecessary","powerbi.data.DataViewTransform.determineCategoricalTransformation","powerbi.data.DataViewTransform.shouldPivotMatrix","powerbi.data.DataViewTransform.hasRolesBind","powerbi.data.DataViewTransform.hasRolesFor","powerbi.data.DataViewTransform.hasRolesGrouped","powerbi.data.createDisplayNameGetter","powerbi.data.getDisplayName","powerbi.DateTimeUnit","powerbi.data.SQExprBuilder","powerbi.data.SQExprBuilder.fieldExpr","powerbi.data.SQExprBuilder.wrapColumnAggr","powerbi.data.SQExprBuilder.wrapHierarchyLevel","powerbi.data.SQExprBuilder.wrapHierarchy","powerbi.data.SQExprBuilder.wrapPropertyVariationSource","powerbi.data.SQExprBuilder.wrapColumn","powerbi.data.SQExprBuilder.wrapMeasure","powerbi.data.SQExprBuilder.wrapEntityAggr","powerbi.data.SQExprBuilder.wrapEntity","powerbi.data.SQExprConverter","powerbi.data.SQExprConverter.asFieldPattern","powerbi.data.FieldExprPatternBuilder","powerbi.data.FieldExprPatternBuilder.constructor","powerbi.data.FieldExprPatternBuilder.visitColumnRef","powerbi.data.FieldExprPatternBuilder.visitMeasureRef","powerbi.data.FieldExprPatternBuilder.visitAggr","powerbi.data.FieldExprPatternBuilder.visitHierarchy","powerbi.data.FieldExprPatternBuilder.visitHierarchyLevel","powerbi.data.SourceExprPatternBuilder","powerbi.data.SourceExprPatternBuilder.constructor","powerbi.data.SourceExprPatternBuilder.visitEntity","powerbi.data.SourceExprPatternBuilder.visitPropertyVariationSource","powerbi.data.HierarchyExprPatternBuiler","powerbi.data.HierarchyExprPatternBuiler.constructor","powerbi.data.HierarchyExprPatternBuiler.visitHierarchy","powerbi.data.FieldExprPattern","powerbi.data.FieldExprPattern.hasFieldExprName","powerbi.data.FieldExprPattern.getPropertyName","powerbi.data.FieldExprPattern.getHierarchyName","powerbi.data.FieldExprPattern.getColumnRef","powerbi.data.FieldExprPattern.getFieldExprName","powerbi.data.FieldExprPattern.toFieldExprEntityItemPattern","powerbi.DataViewAnalysis","powerbi.DataViewAnalysis.validateAndReshape","powerbi.DataViewAnalysis.reshapeCategorical","powerbi.DataViewAnalysis.reshapeSingle","powerbi.DataViewAnalysis.reshapeTree","powerbi.DataViewAnalysis.reshapeTable","powerbi.DataViewAnalysis.countGroups","powerbi.DataViewAnalysis.countMeasures","powerbi.DataViewAnalysis.supports","powerbi.DataViewAnalysis.supportsCategorical","powerbi.DataViewAnalysis.supportsSingle","powerbi.DataViewAnalysis.supportsTree","powerbi.DataViewAnalysis.supportsTable","powerbi.DataViewAnalysis.supportsScriptResult","powerbi.DataViewAnalysis.validateRange","powerbi.DataViewAnalysis.validateKind","powerbi.DataViewAnalysis.chooseDataViewMappings","powerbi.DataViewAnalysis.checkForConditionErrors","powerbi.DataViewAnalysis.areAllPropertiesValid","powerbi.DataViewAnalysis.getPropertyCount","powerbi.DataViewAnalysis.hasSameCategoryIdentity","powerbi.DataViewAnalysis.getLengthOptional","powerbi.DataViewAnalysis.areMetadataColumnsEquivalent","powerbi.DataViewAnalysis.isMetadataEquivalent","powerbi.DataViewAnalysis.DataViewMappingMatchErrorCode","powerbi.DataViewScopeIdentity","powerbi.DataViewScopeIdentity.equals","powerbi.DataViewScopeIdentity.filterFromIdentity","powerbi.DataViewScopeIdentity.filterFromExprs","powerbi.data.createDataViewScopeIdentity","powerbi.data.DataViewScopeIdentityImpl","powerbi.data.DataViewScopeIdentityImpl.constructor","powerbi.data.DataViewScopeIdentityImpl.expr","powerbi.data.DataViewScopeIdentityImpl.key","powerbi.data.DataViewScopeWildcard","powerbi.data.DataViewScopeWildcard.matches","powerbi.data.DataViewScopeWildcard.fromExprs","powerbi.data.DataViewScopeWildcard.DataViewScopeWildcardImpl","powerbi.data.DataViewScopeWildcard.DataViewScopeWildcardImpl.constructor","powerbi.data.DataViewScopeWildcard.DataViewScopeWildcardImpl.exprs","powerbi.data.DataViewScopeWildcard.DataViewScopeWildcardImpl.key","powerbi.data.DataViewRegression","powerbi.data.DataViewRegression.run","powerbi.data.DataViewRegression.linearRegressionTransform","powerbi.data.DataViewRegression.findRoleWithCartesianAxis","powerbi.data.DataViewRegression.getColumnForCategoricalRole","powerbi.data.DataViewRegression.getRoleFromColumn","powerbi.data.DataViewRegression.getDataType","powerbi.data.DataViewRegression.sortValues","powerbi.data.DataViewRegression.normalizeDateValues","powerbi.data.DataViewRegression.computeRegressionLine","powerbi.data.DataViewRegression.createRegressionDataView","powerbi.data.DataViewSelectTransform","powerbi.data.DataViewSelectTransform.projectionsFromSelects","powerbi.data.DataViewSelectTransform.createRoleKindFromMetadata","powerbi.data.createCategoricalEvalContext","powerbi.data.findRuleInputColumn","powerbi.data.findRuleInputInColumns","powerbi.data.CategoricalEvalContext","powerbi.data.CategoricalEvalContext.constructor","powerbi.data.CategoricalEvalContext.getRoleValue","powerbi.data.CategoricalEvalContext.setCurrentRowIndex","powerbi.data.createTableEvalContext","powerbi.data.TableEvalContext","powerbi.data.TableEvalContext.constructor","powerbi.data.TableEvalContext.getExprValue","powerbi.data.TableEvalContext.setCurrentRowIndex","powerbi.data.RuleEvaluation","powerbi.data.ColorRuleEvaluation","powerbi.data.ColorRuleEvaluation.constructor","powerbi.data.ColorRuleEvaluation.evaluate","powerbi.data.utils","powerbi.data.utils.DataViewMatrixUtils","powerbi.data.utils.DataViewMatrixUtils.visitLeafNodes","powerbi.data.utils.DataViewMatrixUtils.visitLeafNodesRecursive","powerbi.data.ConceptualSchema","powerbi.data.ConceptualSchema.findProperty","powerbi.data.ConceptualSchema.findHierarchy","powerbi.data.ConceptualSchema.findHierarchyByVariation","powerbi.data.ConceptualSchema.findPropertyWithKpi","powerbi.data.ConceptualDataCategory","powerbi.ScriptResultUtil","powerbi.ScriptResultUtil.findScriptResult","powerbi.ScriptResultUtil.extractScriptResult","powerbi.ScriptResultUtil.extractScriptResultFromVisualConfig","powerbi.ScriptResultUtil.getScriptInput","powerbi.ScriptResultUtil.ScriptInputColumnNameVisitor","powerbi.ScriptResultUtil.ScriptInputColumnNameVisitor.constructor","powerbi.ScriptResultUtil.ScriptInputColumnNameVisitor.visitEntity","powerbi.ScriptResultUtil.ScriptInputColumnNameVisitor.visitColumnRef","powerbi.ScriptResultUtil.ScriptInputColumnNameVisitor.visitMeasureRef","powerbi.ScriptResultUtil.ScriptInputColumnNameVisitor.visitAggr","powerbi.ScriptResultUtil.ScriptInputColumnNameVisitor.visitHierarchy","powerbi.ScriptResultUtil.ScriptInputColumnNameVisitor.visitHierarchyLevel","powerbi.ScriptResultUtil.ScriptInputColumnNameVisitor.getNameForProperty","powerbi.ScriptResultUtil.ScriptInputColumnNameVisitor.getNameForAggregate","powerbi.ScriptResultUtil.ScriptInputColumnNameVisitor.getNameForHierarchy","powerbi.ScriptResultUtil.ScriptInputColumnNameVisitor.getNameForHierarchyLevel","powerbi.ScriptResultUtil.ScriptInputColumnNameVisitor.getVariationLevelName","powerbi.data.segmentation","powerbi.data.segmentation.DataViewMerger","powerbi.data.segmentation.DataViewMerger.mergeDataViews","powerbi.data.segmentation.DataViewMerger.mergeTables","powerbi.data.segmentation.DataViewMerger.mergeCategorical","powerbi.data.segmentation.DataViewMerger.merge","powerbi.data.segmentation.DataViewMerger.mergeTreeNodes","powerbi.data.segmentation.DataViewMerger.findFirstAppendIndex","powerbi.data.SQExprRewriter","powerbi.data.SQExprRewriter.visitColumnRef","powerbi.data.SQExprRewriter.visitMeasureRef","powerbi.data.SQExprRewriter.visitAggr","powerbi.data.SQExprRewriter.visitHierarchy","powerbi.data.SQExprRewriter.visitHierarchyLevel","powerbi.data.SQExprRewriter.visitPropertyVariationSource","powerbi.data.SQExprRewriter.visitEntity","powerbi.data.SQExprRewriter.visitAnd","powerbi.data.SQExprRewriter.visitBetween","powerbi.data.SQExprRewriter.visitIn","powerbi.data.SQExprRewriter.rewriteAll","powerbi.data.SQExprRewriter.visitOr","powerbi.data.SQExprRewriter.visitCompare","powerbi.data.SQExprRewriter.visitContains","powerbi.data.SQExprRewriter.visitExists","powerbi.data.SQExprRewriter.visitNot","powerbi.data.SQExprRewriter.visitStartsWith","powerbi.data.SQExprRewriter.visitConstant","powerbi.data.SQExprRewriter.visitDateSpan","powerbi.data.SQExprRewriter.visitDateAdd","powerbi.data.SQExprRewriter.visitNow","powerbi.data.SQExprRewriter.visitDefaultValue","powerbi.data.SQExprRewriter.visitAnyValue","powerbi.data.EqualsToInRewriter","powerbi.data.EqualsToInRewriter.run","powerbi.data.EqualsToInRewriter.Rewriter","powerbi.data.EqualsToInRewriter.Rewriter.constructor","powerbi.data.EqualsToInRewriter.Rewriter.visitCompare","powerbi.data.EqualsToInRewriter.Rewriter.visitOr","powerbi.data.EqualsToInRewriter.Rewriter.visitAnd","powerbi.data.EqualsToInRewriter.Rewriter.visitUnsupported","powerbi.data.EqualsToInRewriter.Rewriter.isSupported","powerbi.data.EqualsToInRewriter.Rewriter.isComparand","powerbi.data.EqualsToInRewriter.InBuilder","powerbi.data.EqualsToInRewriter.InBuilder.add","powerbi.data.EqualsToInRewriter.InBuilder.cancel","powerbi.data.EqualsToInRewriter.InBuilder.complete","powerbi.data.SQExprConverter.asScopeIdsContainer","powerbi.data.SQExprConverter.getFirstComparandValue","powerbi.data.FilterScopeIdsCollectorVisitor","powerbi.data.FilterScopeIdsCollectorVisitor.constructor","powerbi.data.FilterScopeIdsCollectorVisitor.getResult","powerbi.data.FilterScopeIdsCollectorVisitor.getScopeIdentity","powerbi.data.FilterScopeIdsCollectorVisitor.visitOr","powerbi.data.FilterScopeIdsCollectorVisitor.visitNot","powerbi.data.FilterScopeIdsCollectorVisitor.visitConstant","powerbi.data.FilterScopeIdsCollectorVisitor.visitCompare","powerbi.data.FilterScopeIdsCollectorVisitor.visitIn","powerbi.data.FilterScopeIdsCollectorVisitor.visitColumnRef","powerbi.data.FilterScopeIdsCollectorVisitor.visitDefaultValue","powerbi.data.FilterScopeIdsCollectorVisitor.visitAnyValue","powerbi.data.FilterScopeIdsCollectorVisitor.visitDefault","powerbi.data.FilterScopeIdsCollectorVisitor.unsupportedSQExpr","powerbi.data.FindComparandVisitor","powerbi.data.FindComparandVisitor.constructor","powerbi.data.FindComparandVisitor.visitAnd","powerbi.data.FindComparandVisitor.visitCompare","powerbi.data.ScopeIdentityExtractor","powerbi.data.ScopeIdentityExtractor.getKeys","powerbi.data.ScopeIdentityExtractor.getInExpr","powerbi.data.ScopeIdentityExtractor.ScopeIdExtractorImpl","powerbi.data.ScopeIdentityExtractor.ScopeIdExtractorImpl.constructor","powerbi.data.ScopeIdentityExtractor.ScopeIdExtractorImpl.visitAnd","powerbi.data.ScopeIdentityExtractor.ScopeIdExtractorImpl.visitCompare","powerbi.data.ScopeIdentityExtractor.ScopeIdExtractorImpl.visitColumnRef","powerbi.data.ScopeIdentityExtractor.ScopeIdExtractorImpl.visitHierarchyLevel","powerbi.data.ScopeIdentityExtractor.ScopeIdExtractorImpl.visitConstant","powerbi.data.ScopeIdentityExtractor.ScopeIdExtractorImpl.visitDefault","powerbi.data.PrimitiveValueEncoding","powerbi.data.PrimitiveValueEncoding.decimal","powerbi.data.PrimitiveValueEncoding.double","powerbi.data.PrimitiveValueEncoding.integer","powerbi.data.PrimitiveValueEncoding.dateTime","powerbi.data.PrimitiveValueEncoding.text","powerbi.data.PrimitiveValueEncoding.nullEncoding","powerbi.data.PrimitiveValueEncoding.boolean","powerbi.data.SQHierarchyExprUtils","powerbi.data.SQHierarchyExprUtils.getConceptualHierarchyLevelFromExpr","powerbi.data.SQHierarchyExprUtils.getConceptualHierarchyLevel","powerbi.data.SQHierarchyExprUtils.getConceptualHierarchy","powerbi.data.SQHierarchyExprUtils.expandExpr","powerbi.data.SQHierarchyExprUtils.isHierarchyOrVariation","powerbi.data.SQHierarchyExprUtils.getSourceVariationExpr","powerbi.data.SQHierarchyExprUtils.getSourceHierarchy","powerbi.data.SQHierarchyExprUtils.getHierarchySourceAsVariationSource","powerbi.data.SQHierarchyExprUtils.areHierarchyLevelsOrdered","powerbi.data.SQHierarchyExprUtils.getInsertionIndex","powerbi.data.SQExprHierarchyToHierarchyLevelConverter","powerbi.data.SQExprHierarchyToHierarchyLevelConverter.convert","powerbi.data.SQExprHierarchyLevelConverter","powerbi.data.SQExprHierarchyLevelConverter.expand","powerbi.data.SQExprVariationConverter","powerbi.data.SQExprVariationConverter.expand","powerbi.data.SQExprGroupUtils","powerbi.data.SQExprGroupUtils.groupExprs","powerbi.data.SQExprGroupUtils.addChildToGroup","powerbi.data.defaultAggregateForDataType","powerbi.data.defaultAggregateToQueryAggregateFunction","powerbi.data.SQExpr","powerbi.data.SQExpr.constructor","powerbi.data.SQExpr.equals","powerbi.data.SQExpr.validate","powerbi.data.SQExpr.kind","powerbi.data.SQExpr.isColumn","powerbi.data.SQExpr.isConstant","powerbi.data.SQExpr.isEntity","powerbi.data.SQExpr.isHierarchy","powerbi.data.SQExpr.isHierarchyLevel","powerbi.data.SQExpr.getMetadata","powerbi.data.SQExpr.getDefaultAggregate","powerbi.data.SQExpr.getKeyColumns","powerbi.data.SQExpr.hasGroupOnKeys","powerbi.data.SQExpr.getPropertyKeys","powerbi.data.SQExpr.getConceptualProperty","powerbi.data.SQExpr.getTargetEntityForVariation","powerbi.data.SQExpr.getHierarchyLevelConceptualProperty","powerbi.data.SQExpr.getMetadataForVariation","powerbi.data.SQExpr.getMetadataForHierarchyLevel","powerbi.data.SQExpr.getPropertyMetadata","powerbi.data.SQExpr.getMetadataForProperty","powerbi.data.SQExpr.getMetadataForEntity","powerbi.data.SQEntityExpr","powerbi.data.SQEntityExpr.constructor","powerbi.data.SQEntityExpr.accept","powerbi.data.SQPropRefExpr","powerbi.data.SQPropRefExpr.constructor","powerbi.data.SQColumnRefExpr","powerbi.data.SQColumnRefExpr.constructor","powerbi.data.SQColumnRefExpr.accept","powerbi.data.SQMeasureRefExpr","powerbi.data.SQMeasureRefExpr.constructor","powerbi.data.SQMeasureRefExpr.accept","powerbi.data.SQAggregationExpr","powerbi.data.SQAggregationExpr.constructor","powerbi.data.SQAggregationExpr.accept","powerbi.data.SQPropertyVariationSourceExpr","powerbi.data.SQPropertyVariationSourceExpr.constructor","powerbi.data.SQPropertyVariationSourceExpr.accept","powerbi.data.SQHierarchyExpr","powerbi.data.SQHierarchyExpr.constructor","powerbi.data.SQHierarchyExpr.accept","powerbi.data.SQHierarchyLevelExpr","powerbi.data.SQHierarchyLevelExpr.constructor","powerbi.data.SQHierarchyLevelExpr.accept","powerbi.data.SQAndExpr","powerbi.data.SQAndExpr.constructor","powerbi.data.SQAndExpr.accept","powerbi.data.SQBetweenExpr","powerbi.data.SQBetweenExpr.constructor","powerbi.data.SQBetweenExpr.accept","powerbi.data.SQInExpr","powerbi.data.SQInExpr.constructor","powerbi.data.SQInExpr.accept","powerbi.data.SQOrExpr","powerbi.data.SQOrExpr.constructor","powerbi.data.SQOrExpr.accept","powerbi.data.SQCompareExpr","powerbi.data.SQCompareExpr.constructor","powerbi.data.SQCompareExpr.accept","powerbi.data.SQContainsExpr","powerbi.data.SQContainsExpr.constructor","powerbi.data.SQContainsExpr.accept","powerbi.data.SQStartsWithExpr","powerbi.data.SQStartsWithExpr.constructor","powerbi.data.SQStartsWithExpr.accept","powerbi.data.SQExistsExpr","powerbi.data.SQExistsExpr.constructor","powerbi.data.SQExistsExpr.accept","powerbi.data.SQNotExpr","powerbi.data.SQNotExpr.constructor","powerbi.data.SQNotExpr.accept","powerbi.data.SQConstantExpr","powerbi.data.SQConstantExpr.constructor","powerbi.data.SQConstantExpr.accept","powerbi.data.SQConstantExpr.getMetadata","powerbi.data.SQDateSpanExpr","powerbi.data.SQDateSpanExpr.constructor","powerbi.data.SQDateSpanExpr.accept","powerbi.data.SQDateAddExpr","powerbi.data.SQDateAddExpr.constructor","powerbi.data.SQDateAddExpr.accept","powerbi.data.SQNowExpr","powerbi.data.SQNowExpr.constructor","powerbi.data.SQNowExpr.accept","powerbi.data.SQDefaultValueExpr","powerbi.data.SQDefaultValueExpr.constructor","powerbi.data.SQDefaultValueExpr.accept","powerbi.data.SQAnyValueExpr","powerbi.data.SQAnyValueExpr.constructor","powerbi.data.SQAnyValueExpr.accept","powerbi.data.SQExprBuilder.entity","powerbi.data.SQExprBuilder.columnRef","powerbi.data.SQExprBuilder.measureRef","powerbi.data.SQExprBuilder.aggregate","powerbi.data.SQExprBuilder.hierarchy","powerbi.data.SQExprBuilder.propertyVariationSource","powerbi.data.SQExprBuilder.hierarchyLevel","powerbi.data.SQExprBuilder.and","powerbi.data.SQExprBuilder.between","powerbi.data.SQExprBuilder.inExpr","powerbi.data.SQExprBuilder.or","powerbi.data.SQExprBuilder.tryUseInExprs","powerbi.data.SQExprBuilder.compare","powerbi.data.SQExprBuilder.contains","powerbi.data.SQExprBuilder.exists","powerbi.data.SQExprBuilder.equal","powerbi.data.SQExprBuilder.not","powerbi.data.SQExprBuilder.startsWith","powerbi.data.SQExprBuilder.nullConstant","powerbi.data.SQExprBuilder.now","powerbi.data.SQExprBuilder.defaultValue","powerbi.data.SQExprBuilder.anyValue","powerbi.data.SQExprBuilder.boolean","powerbi.data.SQExprBuilder.dateAdd","powerbi.data.SQExprBuilder.dateTime","powerbi.data.SQExprBuilder.dateSpan","powerbi.data.SQExprBuilder.decimal","powerbi.data.SQExprBuilder.double","powerbi.data.SQExprBuilder.integer","powerbi.data.SQExprBuilder.text","powerbi.data.SQExprBuilder.typedConstant","powerbi.data.SQExprBuilder.setAggregate","powerbi.data.SQExprBuilder.removeAggregate","powerbi.data.SQExprBuilder.removeEntityVariables","powerbi.data.SQExprBuilder.createExprWithAggregate","powerbi.data.SQExprInfo","powerbi.data.SQExprInfo.getAggregate","powerbi.data.SQExprEqualityVisitor","powerbi.data.SQExprEqualityVisitor.constructor","powerbi.data.SQExprEqualityVisitor.run","powerbi.data.SQExprEqualityVisitor.visitColumnRef","powerbi.data.SQExprEqualityVisitor.visitMeasureRef","powerbi.data.SQExprEqualityVisitor.visitAggr","powerbi.data.SQExprEqualityVisitor.visitHierarchy","powerbi.data.SQExprEqualityVisitor.visitHierarchyLevel","powerbi.data.SQExprEqualityVisitor.visitPropertyVariationSource","powerbi.data.SQExprEqualityVisitor.visitBetween","powerbi.data.SQExprEqualityVisitor.visitIn","powerbi.data.SQExprEqualityVisitor.visitEntity","powerbi.data.SQExprEqualityVisitor.visitAnd","powerbi.data.SQExprEqualityVisitor.visitOr","powerbi.data.SQExprEqualityVisitor.visitCompare","powerbi.data.SQExprEqualityVisitor.visitContains","powerbi.data.SQExprEqualityVisitor.visitDateSpan","powerbi.data.SQExprEqualityVisitor.visitDateAdd","powerbi.data.SQExprEqualityVisitor.visitExists","powerbi.data.SQExprEqualityVisitor.visitNot","powerbi.data.SQExprEqualityVisitor.visitNow","powerbi.data.SQExprEqualityVisitor.visitDefaultValue","powerbi.data.SQExprEqualityVisitor.visitAnyValue","powerbi.data.SQExprEqualityVisitor.visitStartsWith","powerbi.data.SQExprEqualityVisitor.visitConstant","powerbi.data.SQExprEqualityVisitor.optionalEqual","powerbi.data.SQExprEqualityVisitor.equals","powerbi.data.SQExprEqualityVisitor.equalsAll","powerbi.data.SQExprRootRewriter","powerbi.data.SQExprRootRewriter.constructor","powerbi.data.SQExprRootRewriter.visitDefault","powerbi.data.SQExprValidationVisitor","powerbi.data.SQExprValidationVisitor.constructor","powerbi.data.SQExprValidationVisitor.visitIn","powerbi.data.SQExprValidationVisitor.visitCompare","powerbi.data.SQExprValidationVisitor.visitColumnRef","powerbi.data.SQExprValidationVisitor.visitMeasureRef","powerbi.data.SQExprValidationVisitor.visitAggr","powerbi.data.SQExprValidationVisitor.visitHierarchy","powerbi.data.SQExprValidationVisitor.visitHierarchyLevel","powerbi.data.SQExprValidationVisitor.visitEntity","powerbi.data.SQExprValidationVisitor.visitContains","powerbi.data.SQExprValidationVisitor.visitStartsWith","powerbi.data.SQExprValidationVisitor.validateOperandsAndTypeForStartOrContains","powerbi.data.SQExprValidationVisitor.validateCompatibleType","powerbi.data.SQExprValidationVisitor.validateEntity","powerbi.data.SQExprValidationVisitor.validateHierarchy","powerbi.data.SQExprValidationVisitor.validateHierarchyLevel","powerbi.data.SQExprValidationVisitor.register","powerbi.data.SQExprValidationVisitor.isQueryable","powerbi.data.SQExprAggregateInfoVisitor","powerbi.data.SQExprAggregateInfoVisitor.constructor","powerbi.data.SQExprAggregateInfoVisitor.visitAggr","powerbi.data.SQExprAggregateInfoVisitor.getAggregate","powerbi.data.SQExprColumnRefInfoVisitor","powerbi.data.SQExprColumnRefInfoVisitor.constructor","powerbi.data.SQExprColumnRefInfoVisitor.visitColumnRef","powerbi.data.SQExprColumnRefInfoVisitor.visitHierarchyLevel","powerbi.data.SQExprColumnRefInfoVisitor.visitHierarchy","powerbi.data.SQExprColumnRefInfoVisitor.visitPropertyVariationSource","powerbi.data.SQExprColumnRefInfoVisitor.getColumnRefSQExpr","powerbi.data.SQExprChangeAggregateRewriter","powerbi.data.SQExprChangeAggregateRewriter.constructor","powerbi.data.SQExprChangeAggregateRewriter.visitAggr","powerbi.data.SQExprChangeAggregateRewriter.visitColumnRef","powerbi.data.SQExprChangeAggregateRewriter.rewrite","powerbi.data.SQExprRemoveAggregateRewriter","powerbi.data.SQExprRemoveAggregateRewriter.constructor","powerbi.data.SQExprRemoveAggregateRewriter.visitAggr","powerbi.data.SQExprRemoveAggregateRewriter.rewrite","powerbi.data.SQExprRemoveEntityVariablesRewriter","powerbi.data.SQExprRemoveEntityVariablesRewriter.constructor","powerbi.data.SQExprRemoveEntityVariablesRewriter.visitEntity","powerbi.data.SQExprRemoveEntityVariablesRewriter.rewrite","powerbi.data.SQExprUtils","powerbi.data.SQExprUtils.getSupportedAggregates","powerbi.data.SQExprUtils.isSupportedAggregate","powerbi.data.SQExprUtils.indexOfExpr","powerbi.data.SQExprUtils.sequenceEqual","powerbi.data.SQExprUtils.uniqueName","powerbi.data.SQExprUtils.defaultName","powerbi.data.SQExprUtils.isMeasure","powerbi.data.SQExprUtils.isAnyValue","powerbi.data.SQExprUtils.isDefaultValue","powerbi.data.SQExprUtils.discourageAggregation","powerbi.data.SQExprUtils.getAggregateBehavior","powerbi.data.SQExprUtils.getSchemaCapabilities","powerbi.data.SQExprUtils.getKpiMetadata","powerbi.data.SQExprUtils.getKpiStatusProperty","powerbi.data.SQExprUtils.getKpiTrendProperty","powerbi.data.SQExprUtils.getMetadataForUnderlyingType","powerbi.data.SQExprUtils.getDefaultValue","powerbi.data.SQExprUtils.getConceptualColumn","powerbi.data.SQExprUtils.getDefaultValues","powerbi.data.SQExprUtils.getDataViewScopeIdentityComparisonExpr","powerbi.data.SQExprUtils.getActiveTablesNames","powerbi.data.SQExprUtils.SQExprDefaultNameGenerator","powerbi.data.SQExprUtils.SQExprDefaultNameGenerator.constructor","powerbi.data.SQExprUtils.SQExprDefaultNameGenerator.visitEntity","powerbi.data.SQExprUtils.SQExprDefaultNameGenerator.visitColumnRef","powerbi.data.SQExprUtils.SQExprDefaultNameGenerator.visitMeasureRef","powerbi.data.SQExprUtils.SQExprDefaultNameGenerator.visitAggr","powerbi.data.SQExprUtils.SQExprDefaultNameGenerator.visitConstant","powerbi.data.SQExprUtils.SQExprDefaultNameGenerator.visitDefault","powerbi.data.SQExprUtils.IsMeasureVisitor","powerbi.data.SQExprUtils.IsMeasureVisitor.constructor","powerbi.data.SQExprUtils.IsMeasureVisitor.visitMeasureRef","powerbi.data.SQExprUtils.IsMeasureVisitor.visitAggr","powerbi.data.SQExprUtils.IsMeasureVisitor.visitDefault","powerbi.data.SQExprUtils.IsDefaultValueVisitor","powerbi.data.SQExprUtils.IsDefaultValueVisitor.constructor","powerbi.data.SQExprUtils.IsDefaultValueVisitor.visitCompare","powerbi.data.SQExprUtils.IsDefaultValueVisitor.visitAnd","powerbi.data.SQExprUtils.IsDefaultValueVisitor.visitDefaultValue","powerbi.data.SQExprUtils.IsDefaultValueVisitor.visitDefault","powerbi.data.SQExprUtils.IsAnyValueVisitor","powerbi.data.SQExprUtils.IsAnyValueVisitor.constructor","powerbi.data.SQExprUtils.IsAnyValueVisitor.visitCompare","powerbi.data.SQExprUtils.IsAnyValueVisitor.visitAnd","powerbi.data.SQExprUtils.IsAnyValueVisitor.visitAnyValue","powerbi.data.SQExprUtils.IsAnyValueVisitor.visitDefault","powerbi.data.SemanticQueryRewriter","powerbi.data.SemanticQueryRewriter.constructor","powerbi.data.SemanticQueryRewriter.rewriteFrom","powerbi.data.SemanticQueryRewriter.rewriteSelect","powerbi.data.SemanticQueryRewriter.rewriteGroupBy","powerbi.data.SemanticQueryRewriter.rewriteNamedSQExpressions","powerbi.data.SemanticQueryRewriter.rewriteOrderBy","powerbi.data.SemanticQueryRewriter.rewriteWhere","powerbi.data.SemanticQuery","powerbi.data.SemanticQuery.constructor","powerbi.data.SemanticQuery.create","powerbi.data.SemanticQuery.createWithTrimmedFrom","powerbi.data.SemanticQuery.from","powerbi.data.SemanticQuery.select","powerbi.data.SemanticQuery.getSelect","powerbi.data.SemanticQuery.createNamedExpressionArray","powerbi.data.SemanticQuery.setSelect","powerbi.data.SemanticQuery.rewriteExpressionsWithSourceRenames","powerbi.data.SemanticQuery.removeSelect","powerbi.data.SemanticQuery.removeOrderBy","powerbi.data.SemanticQuery.selectNameOf","powerbi.data.SemanticQuery.setSelectAt","powerbi.data.SemanticQuery.addSelect","powerbi.data.SemanticQuery.groupBy","powerbi.data.SemanticQuery.getGroupBy","powerbi.data.SemanticQuery.setGroupBy","powerbi.data.SemanticQuery.orderBy","powerbi.data.SemanticQuery.getOrderBy","powerbi.data.SemanticQuery.setOrderBy","powerbi.data.SemanticQuery.where","powerbi.data.SemanticQuery.getWhere","powerbi.data.SemanticQuery.setWhere","powerbi.data.SemanticQuery.addWhere","powerbi.data.SemanticQuery.rewrite","powerbi.data.SemanticFilter","powerbi.data.SemanticFilter.constructor","powerbi.data.SemanticFilter.fromSQExpr","powerbi.data.SemanticFilter.getDefaultValueFilter","powerbi.data.SemanticFilter.getAnyValueFilter","powerbi.data.SemanticFilter.getDataViewScopeIdentityComparisonFilters","powerbi.data.SemanticFilter.from","powerbi.data.SemanticFilter.conditions","powerbi.data.SemanticFilter.where","powerbi.data.SemanticFilter.rewrite","powerbi.data.SemanticFilter.validate","powerbi.data.SemanticFilter.merge","powerbi.data.SemanticFilter.isDefaultFilter","powerbi.data.SemanticFilter.isAnyFilter","powerbi.data.SemanticFilter.isSameFilter","powerbi.data.SemanticFilter.applyFilter","powerbi.data.SQFrom","powerbi.data.SQFrom.constructor","powerbi.data.SQFrom.keys","powerbi.data.SQFrom.entity","powerbi.data.SQFrom.ensureEntity","powerbi.data.SQFrom.remove","powerbi.data.SQFrom.candidateName","powerbi.data.SQFrom.clone","powerbi.data.SQExprRewriterWithSourceRenames","powerbi.data.SQExprRewriterWithSourceRenames.constructor","powerbi.data.SQExprRewriterWithSourceRenames.visitEntity","powerbi.data.SQExprRewriterWithSourceRenames.rewriteFilter","powerbi.data.SQExprRewriterWithSourceRenames.rewriteArray","powerbi.data.SQExprRewriterWithSourceRenames.rewrite","powerbi.data.QuerySourceRenameDetector","powerbi.data.QuerySourceRenameDetector.constructor","powerbi.data.QuerySourceRenameDetector.run","powerbi.data.QuerySourceRenameDetector.visitEntity","powerbi.data.UnreferencedKeyFinder","powerbi.data.UnreferencedKeyFinder.constructor","powerbi.data.UnreferencedKeyFinder.visitEntity","powerbi.data.UnreferencedKeyFinder.result","powerbi.data.createCategoricalDataViewBuilder","powerbi.data.getScopeIdentity","powerbi.data.pushIfNotExists","powerbi.data.applySeriesData","powerbi.data.CategoricalDataViewBuilder","powerbi.data.CategoricalDataViewBuilder.constructor","powerbi.data.CategoricalDataViewBuilder.withCategory","powerbi.data.CategoricalDataViewBuilder.withCategories","powerbi.data.CategoricalDataViewBuilder.withValues","powerbi.data.CategoricalDataViewBuilder.withGroupedValues","powerbi.data.CategoricalDataViewBuilder.fillData","powerbi.data.CategoricalDataViewBuilder.build","powerbi.data.createStaticEvalContext","powerbi.data.getExprValueFromTable","powerbi.data.StaticEvalContext","powerbi.data.StaticEvalContext.constructor","powerbi.data.StaticEvalContext.getExprValue","powerbi.data.createMatrixEvalContext","powerbi_1","powerbi.FormattingEncoder","powerbi.FormattingEncoder.preserveEscaped","powerbi.FormattingEncoder.restoreEscaped","powerbi.FormattingEncoder.preserveLiterals","powerbi.FormattingEncoder.restoreLiterals","powerbi.FormattingService","powerbi.FormattingService.formatValue","powerbi.FormattingService.format","powerbi.FormattingService.isStandardNumberFormat","powerbi.FormattingService.formatNumberWithCustomOverride","powerbi.FormattingService.dateFormatString","powerbi.FormattingService.setCurrentCulture","powerbi.FormattingService.getCulture","powerbi.FormattingService.initialize","powerbi.FormattingService.getCurrentCulture","powerbi.FormattingService.getUrlParam","powerbi.DateTimeFormat","powerbi.DateTimeFormat.canFormat","powerbi.DateTimeFormat.format","powerbi.DateTimeFormat.formatDateStandard","powerbi.DateTimeFormat.formatDateCustom","powerbi.DateTimeFormat.processCustomDateTimeFormat","powerbi.DateTimeFormat.localize","powerbi.DateTimeFormat.ensurePatterns","powerbi.NumberFormat","powerbi.NumberFormat.getNonScientificFormatWithPrecision","powerbi.NumberFormat.getNumericFormat","powerbi.NumberFormat.getNumericFormatFromComponent","powerbi.NumberFormat.addDecimalsToFormat","powerbi.NumberFormat.addDecimalsToFormatComponent","powerbi.NumberFormat.hasFormatComponents","powerbi.NumberFormat.getComponents","powerbi.NumberFormat.canFormat","powerbi.NumberFormat.isStandardFormat","powerbi.NumberFormat.format","powerbi.NumberFormat.formatWithCustomOverride","powerbi.NumberFormat.formatNumberStandard","powerbi.NumberFormat.formatNumberCustom","powerbi.NumberFormat.toNonScientific","powerbi.NumberFormat.getCustomFormatMetadata","powerbi.NumberFormat.getCustomFormatPrecision","powerbi.NumberFormat.getCustomFormatScale","powerbi.NumberFormat.fuseNumberWithCustomFormat","powerbi.NumberFormat.fuseNumberWithCustomFormatLeft","powerbi.NumberFormat.fuseNumberWithCustomFormatRight","powerbi.NumberFormat.localize","powerbi.DateTimeScaleFormatInfo","powerbi.DateTimeScaleFormatInfo.constructor","powerbi.DateTimeScaleFormatInfo.getFormatString","powerbi.data.SQExprShortSerializer","powerbi.data.SQExprShortSerializer.serialize","powerbi.data.SQExprShortSerializer.serializeArray","powerbi.data.SQExprShortSerializer.SQExprSerializer","powerbi.data.SQExprShortSerializer.SQExprSerializer.constructor","powerbi.data.SQExprShortSerializer.SQExprSerializer.visitColumnRef","powerbi.data.SQExprShortSerializer.SQExprSerializer.visitMeasureRef","powerbi.data.SQExprShortSerializer.SQExprSerializer.visitAggr","powerbi.data.SQExprShortSerializer.SQExprSerializer.visitEntity","powerbi.data.SQExprShortSerializer.SQExprSerializer.visitAnd","powerbi.data.SQExprShortSerializer.SQExprSerializer.visitCompare","powerbi.data.SQExprShortSerializer.SQExprSerializer.visitConstant"],"mappings":"AAqDA,GAAIA,WAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAII,KAAKH,GAAOA,EAAEI,eAAeD,KAAIJ,EAAEI,GAAKH,EAAEG,GAEnDJ,GAAEM,UAAkB,OAANL,EAAaM,OAAOC,OAAOP,IAAMC,EAAGI,UAAYL,EAAEK,UAAW,GAAIJ,KC9B5EO,SAAP,SAAOA,GAAQA,GAAAA,IAAAA,SAAAA,GAgCXC,GAAAA,GAAAA,WAAAC,QAAAA,MA4FAA,MA3FWA,GAAAA,UAAAA,YAAPA,SAAmBA,EAAoBA,GACnCC,MAAOA,MAAKA,aAAaA,EAAMA,IAG5BD,EAAAA,UAAAA,eAAPA,SAAsBA,EAAuBA,GACzCE,MAAOA,MAAKA,aAAaA,EAAMA,IAG5BF,EAAAA,UAAAA,gBAAPA,SAAuBA,EAAwBA,GAC3CG,MAAOA,MAAKA,aAAaA,EAAMA,IAG5BH,EAAAA,UAAAA,UAAPA,SAAiBA,EAAyBA,GACtCI,MAAOA,MAAKA,aAAaA,EAAMA,IAG5BJ,EAAAA,UAAAA,eAAPA,SAAsBA,EAAuBA,GACzCK,MAAOA,MAAKA,aAAaA,EAAMA,IAG5BL,EAAAA,UAAAA,oBAAPA,SAA2BA,EAA4BA,GACnDM,MAAOA,MAAKA,aAAaA,EAAMA,IAG5BN,EAAAA,UAAAA,6BAAPA,SAAoCA,EAAqCA,GACrEO,MAAOA,MAAKA,aAAaA,EAAMA,IAG5BP,EAAAA,UAAAA,aAAPA,SAAoBA,EAAqBA,GACrCQ,MAAOA,MAAKA,aAAaA,EAAMA,IAG5BR,EAAAA,UAAAA,QAAPA,SAAeA,EAAgBA,GAC3BS,MAAOA,MAAKA,aAAaA,EAAMA,IAG5BT,EAAAA,UAAAA,SAAPA,SAAgBA,EAAiBA,GAC7BU,MAAOA,MAAKA,aAAaA,EAAMA,IAG5BV,EAAAA,UAAAA,QAAPA,SAAeA,EAAgBA,GAC3BW,MAAOA,MAAKA,aAAaA,EAAMA,IAG5BX,EAAAA,UAAAA,aAAPA,SAAoBA,EAAqBA,GACrCY,MAAOA,MAAKA,aAAaA,EAAMA,IAG5BZ,EAAAA,UAAAA,cAAPA,SAAqBA,EAAsBA,GACvCa,MAAOA,MAAKA,aAAaA,EAAMA,IAG5Bb,EAAAA,UAAAA,YAAPA,SAAmBA,EAAoBA,GACnCc,MAAOA,MAAKA,aAAaA,EAAMA,IAG5Bd,EAAAA,UAAAA,SAAPA,SAAgBA,EAAiBA,GAC7Be,MAAOA,MAAKA,aAAaA,EAAMA,IAG5Bf,EAAAA,UAAAA,gBAAPA,SAAuBA,EAAwBA,GAC3CgB,MAAOA,MAAKA,aAAaA,EAAMA,IAG5BhB,EAAAA,UAAAA,cAAPA,SAAqBA,EAAsBA,GACvCiB,MAAOA,MAAKA,aAAaA,EAAMA,IAG5BjB,EAAAA,UAAAA,cAAPA,SAAqBA,EAAsBA,GACvCkB,MAAOA,MAAKA,aAAaA,EAAMA,IAG5BlB,EAAAA,UAAAA,aAAPA,SAAoBA,EAAqBA,GACrCmB,MAAOA,MAAKA,aAAaA,EAAMA,IAG5BnB,EAAAA,UAAAA,SAAPA,SAAgBA,EAAiBA,GAC7BoB,MAAOA,MAAKA,aAAaA,EAAMA,IAG5BpB,EAAAA,UAAAA,kBAAPA,SAAyBA,EAA0BA,GAC/CqB,MAAOA,MAAKA,aAAaA,EAAMA,IAG5BrB,EAAAA,UAAAA,cAAPA,SAAqBA,EAAsBA,GACvCsB,MAAOA,MAAKA,aAAaA,EAAMA,IAG5BtB,EAAAA,UAAAA,aAAPA,SAAoBA,EAAcA,KAGtCA,IA5FaD,GAAAA,4BAA2BA,CA+FxCA,IAAAA,GAAAA,SAAAA,GAAAwB,QAAAA,KAA6CC,EAAAA,MAAAA,KAAAA,WAC7CD,MAD6CA,WAAAA,EAAAA,GAC7CA,GAD6CxB,EAAhCA,GAAAA,qBAAoBA,CAIjCA,IAAAA,GAAAA,WAAA0B,QAAAA,MA4GAA,MA3GWA,GAAAA,UAAAA,YAAPA,SAAmBA,GACfC,KAAKA,aAAaA,IAGfD,EAAAA,UAAAA,eAAPA,SAAsBA,GAClBE,EAAKA,OAAOA,OAAOA,OAGhBF,EAAAA,UAAAA,gBAAPA,SAAuBA,GACnBG,EAAKA,OAAOA,OAAOA,OAGhBH,EAAAA,UAAAA,UAAPA,SAAiBA,GACbI,EAAKA,IAAIA,OAAOA,OAGbJ,EAAAA,UAAAA,eAAPA,SAAsBA,GAClBK,EAAKA,IAAIA,OAAOA,OAGbL,EAAAA,UAAAA,oBAAPA,SAA2BA,GACvBM,EAAKA,IAAIA,OAAOA,OAGbN,EAAAA,UAAAA,6BAAPA,SAAoCA,GAChCO,EAAKA,IAAIA,OAAOA,OAGbP,EAAAA,UAAAA,aAAPA,SAAoBA,GAChBQ,EAAKA,IAAIA,OAAOA,MAChBA,EAAKA,MAAMA,OAAOA,MAClBA,EAAKA,MAAMA,OAAOA,OAGfR,EAAAA,UAAAA,QAAPA,SAAeA,GAEXS,IAAKA,GADDA,GAAOA,EAAKA,KACPA,EAAIA,EAAGA,EAAMA,EAAKA,OAAYA,EAAJA,EAASA,IACxCA,EAAKA,GAAGA,OAAOA,KAGnBA,KAAKA,GADDA,GAASA,EAAKA,OACTA,EAAIA,EAAGA,EAAMA,EAAOA,OAAYA,EAAJA,EAASA,IAE1CA,IAAKA,GADDA,GAAaA,EAAOA,GACfA,EAAIA,EAAGA,EAAOA,EAAWA,OAAYA,EAAJA,EAAUA,IAChDA,EAAWA,GAAGA,OAAOA,OAI1BT,EAAAA,UAAAA,SAAPA,SAAgBA,GACZU,EAAKA,KAAKA,OAAOA,MACjBA,EAAKA,MAAMA,OAAOA,OAGfV,EAAAA,UAAAA,QAAPA,SAAeA,GACXW,EAAKA,KAAKA,OAAOA,MACjBA,EAAKA,MAAMA,OAAOA,OAGfX,EAAAA,UAAAA,aAAPA,SAAoBA,GAChBY,EAAKA,KAAKA,OAAOA,MACjBA,EAAKA,MAAMA,OAAOA,OAGfZ,EAAAA,UAAAA,cAAPA,SAAqBA,GACjBa,EAAKA,KAAKA,OAAOA,MACjBA,EAAKA,MAAMA,OAAOA,OAGfb,EAAAA,UAAAA,YAAPA,SAAmBA,GACfc,EAAKA,IAAIA,OAAOA,OAGbd,EAAAA,UAAAA,SAAPA,SAAgBA,GACZe,EAAKA,IAAIA,OAAOA,OAGbf,EAAAA,UAAAA,gBAAPA,SAAuBA,GACnBgB,EAAKA,KAAKA,OAAOA,MACjBA,EAAKA,MAAMA,OAAOA,OAGfhB,EAAAA,UAAAA,cAAPA,SAAqBA,GACjBiB,KAAKA,aAAaA,IAGfjB,EAAAA,UAAAA,cAAPA,SAAqBA,GACjBkB,EAAKA,IAAIA,OAAOA,OAGblB,EAAAA,UAAAA,aAAPA,SAAoBA,GAChBmB,EAAKA,IAAIA,OAAOA,OAGbnB,EAAAA,UAAAA,SAAPA,SAAgBA,GACZoB,KAAKA,aAAaA,IAGfpB,EAAAA,UAAAA,kBAAPA,SAAyBA,GACrBqB,KAAKA,aAAaA,IAGfrB,EAAAA,UAAAA,cAAPA,SAAqBA,GACjBsB,KAAKA,aAAaA,IAGftB,EAAAA,UAAAA,aAAPA,SAAoBA,KAGxBA,IA5Ga1B,GAAAA,kCAAiCA,GAnInCD,EAAAA,EAAAA,OAAAA,EAAAA,WAARA,UAAAA,YCAP,IAAOA,UAAP,SAAOA,GAOHA,QAAAA,GAA+BA,GAC3BkD,MAAOA,IAAIA,GAASA,GADRlD,EAAAA,eAAcA,CAI9BA,IAAAA,GAAAA,WAGImD,QAAAA,GAAYA,GAGRC,KAAKA,WAAaA,EAe1BD,MAZWA,GAAAA,UAAAA,QAAPA,SAAeA,GACXE,GAAIA,GAAaA,KAAKA,UACtBA,KAAKA,EACDA,MAAOA,EAGXA,KAAmBA,GADfA,MACeA,EAAAA,EAAdA,EAAAA,EAAAA,OAAAA,IAAyBA,CAAzBA,GAAIA,GAAUA,EAAUA,EACrBA,GAAEA,SAASA,EAAcA,EAAOA,QAChCA,EAAgBA,KAAKA,GAE7BA,MAAOA,IAEfF,MAhCGnD,UAAAA,YCAP,IAAOA,UAAP,SAAOA,GAiBHA,GAAcA,IAAdA,SAAcA,GAEVsD,QAAAA,GAAyBA,GAGrBC,GAAIA,KAAeA,EACfA,OAAOA,CAEXA,IAAIA,GAA2DA,CAC/DA,SAASA,EAAmBA,SAPhBD,EAAAA,SAAQA,GAFdtD,EAAAA,EAAAA,+BAAAA,EAAAA,mCAjBXA,UAAAA,YCAP,IAAOA,UAAP,SAAOA,GAQHA,GAAcA,IAAdA,SAAcA,GACGwD,EAAAA,SAAiCA,MAAQA,UAAUA,KADtDxD,EAAAA,EAAAA,kBAAAA,EAAAA,sBARXA,UAAAA,YCAP,IAAOA,UAAP,SAAOA,GAWHA,GAAcA,IAAdA,SAAcA,GACVyD,QAAAA,GAAwBA,GAGpBC,MAAIA,GAAKA,MACLA,EAAKA,UACLA,EAAKA,QACLA,EAAKA,YACLA,EAAKA,OACLA,EAAKA,YACEA,GAGJA,EAZKD,EAAAA,QAAOA,GADbzD,EAAAA,EAAAA,2BAAAA,EAAAA,+BAXXA,UAAAA,YCAP,IAAOA,UAAP,SAAOA,GA6cHA,QAAAA,GAA0BA,GACtB2D,MAAOA,GAAeA,EAG1B3D,QAAAA,GAAyBA,GACrB4D,OAAQA,EAAeA,KAAgCA,EAG3D5D,QAAAA,GAAqCA,GACjC6D,GAAIA,EAAgBA,GAChBA,MAAOA,KAEXA,IAAIA,GAAWA,EAAaA,EAC5BA,IAAIA,EAAUA,CAIVA,GAAIA,GAAWA,EAASA,YAAYA,IACpCA,IAAIA,EAAWA,EAAGA,CACdA,GAAIA,GAAeA,EAASA,MAAMA,EAAGA,EACjCA,GAAaA,KAIbA,EAAWA,IAIvBA,MAAOA,IAAYA,KAGvB7D,QAAAA,GAAwBA,EAA8BA,GAClD8D,GAAIA,GAAkBA,EAAcA,GAChCA,EAAIA,EAAaA,EAMrBA,IALSA,MAALA,IAEAA,EAAIA,EAAaA,MAGjBA,GAAiBA,EAAUA,CAC3BA,GAAIA,GAA6BA,EAAaA,EAC9CA,IAAIA,EAAcA,CACdA,GAAIA,GAAwBA,EAAiBA,EACzCA,KAA0BA,EAAcA,MAGxCA,EAAeA,EAAIA,EACfA,EAAaA,KAIbA,EAAIA,IAGHA,IAA0BA,IAE/BA,EAAIA,IAKhBA,MAAOA,GAGX9D,QAAAA,GAA6CA,EAAiBA,GAC1D+D,OAAQA,EAAIA,MAAqCA,EAAIA,GA7gBzD/D,GAAOA,GAAiBA,SAASA,eAOjCA,EAAAA,WAcIgE,QAAAA,GAAYA,EAAoBA,EAAmBA,GAK/CC,KAAKA,eAAiBA,EACtBA,KAAKA,SAAWA,EAEZA,EAAeA,QAAQA,EAAMA,EAAaA,YAC1CA,KAAKA,aAAeA,GAAIA,GAAaA,IAErCA,EAAeA,QAAQA,EAAMA,EAAaA,aAC1CA,KAAKA,cAAgBA,GAAIA,GAAcA,IAEvCA,EAAeA,QAAQA,EAAMA,EAAaA,iBAC1CA,KAAKA,SAAWA,GAAIA,GAAkBA,IAEtCA,EAAeA,QAAQA,EAAMA,EAAaA,cAC1CA,KAAKA,eAAiBA,GAAIA,GAAeA,IAEzCA,EAAeA,QAAQA,EAAMA,EAAaA,eAC1CA,KAAKA,SAAWA,GAEhBA,EAAeA,QAAQA,EAAMA,EAAaA,aAC1CA,KAAKA,cAAgBA,GAAIA,GAAWA,IAgMhDD,MA3LkBA,GAAAA,eAAdA,SAA6BA,GAIzBE,GAHAA,EAAaA,MAGTA,EAAWA,KAAMA,MAAOA,GAAUA,iBAAiBA,EAAaA,KACpEA,IAAIA,EAAWA,QAASA,MAAOA,GAAUA,iBAAiBA,EAAaA,QACvEA,IAAIA,EAAWA,QAASA,MAAOA,GAAUA,iBAAiBA,EAAaA,OACvEA,IAAIA,EAAWA,KAAMA,MAAOA,GAAUA,iBAAiBA,EAAaA,QACpEA,IAAIA,EAAWA,SAAUA,MAAOA,GAAUA,iBAAiBA,EAAaA,SACxEA,IAAIA,EAAWA,SAAUA,MAAOA,GAAUA,iBAAiBA,EAAaA,SACxEA,IAAIA,EAAWA,OAAQA,MAAOA,GAAUA,iBAAiBA,EAAaA,OACtEA,IAAIA,EAAWA,KAAMA,MAAOA,GAAUA,iBAAiBA,EAAaA,KAGpEA,IAAIA,EAAWA,WACPA,EAAWA,UAAUA,OAAQA,MAAOA,GAAUA,iBAAiBA,EAAaA,aAEpFA,IAAIA,EAAWA,YAAaA,MAAOA,GAAUA,SAASA,EAAWA,YACjEA,IAAIA,EAAWA,SAAUA,CACrBA,GAAIA,EAAWA,SAASA,KAAMA,MAAOA,GAAUA,iBAAiBA,EAAaA,aAC7EA,IAAIA,EAAWA,SAASA,MAAOA,MAAOA,GAAUA,iBAAiBA,EAAaA,eAElFA,GAAIA,EAAWA,UAAWA,CACtBA,GAAIA,EAAWA,UAAUA,QAASA,MAAOA,GAAUA,iBAAiBA,EAAaA,QACjFA,IAAIA,EAAWA,UAAUA,KAAMA,MAAOA,GAAUA,iBAAiBA,EAAaA,KAC9EA,IAAIA,EAAWA,UAAUA,UAAWA,MAAOA,GAAUA,iBAAiBA,EAAaA,UACnFA,IAAIA,EAAWA,UAAUA,QAASA,MAAOA,GAAUA,iBAAiBA,EAAaA,QACjFA,IAAIA,EAAWA,UAAUA,OAAQA,MAAOA,GAAUA,iBAAiBA,EAAaA,OAChFA,IAAIA,EAAWA,UAAUA,OAAQA,MAAOA,GAAUA,iBAAiBA,EAAaA,OAChFA,IAAIA,EAAWA,UAAUA,WAAYA,MAAOA,GAAUA,iBAAiBA,EAAaA,gBACpFA,IAAIA,EAAWA,UAAUA,gBAAiBA,MAAOA,GAAUA,iBAAiBA,EAAaA,gBACzFA,IAAIA,EAAWA,UAAUA,MAAOA,MAAOA,GAAUA,iBAAiBA,EAAaA,MAC/EA,IAAIA,EAAWA,UAAUA,SAAUA,MAAOA,GAAUA,iBAAiBA,EAAaA,gBAClFA,IAAIA,EAAWA,UAAUA,UAAWA,MAAOA,GAAUA,iBAAiBA,EAAaA,kBAEvFA,GAAIA,EAAWA,KAAMA,CACjBA,GAAIA,EAAWA,KAAKA,MAAOA,MAAOA,GAAUA,iBAAiBA,EAAaA,MAC1EA,IAAIA,EAAWA,KAAKA,SAAUA,MAAOA,GAAUA,iBAAiBA,EAAaA,SAC7EA,IAAIA,EAAWA,KAAKA,OAAQA,MAAOA,GAAUA,iBAAiBA,EAAaA,QAE/EA,GAAIA,EAAWA,WAAYA,CACvBA,GAAIA,EAAWA,WAAWA,MAAOA,MAAOA,GAAUA,iBAAiBA,EAAaA,MAChFA,IAAIA,EAAWA,WAAWA,aAAcA,MAAOA,GAAUA,iBAAiBA,EAAaA,aACvFA,IAAIA,EAAWA,WAAWA,UAAWA,MAAOA,GAAUA,iBAAiBA,EAAaA,UACpFA,IAAIA,EAAWA,WAAWA,kBAAmBA,MAAOA,GAAUA,iBAAiBA,EAAaA,kBAC5FA,IAAIA,EAAWA,WAAWA,SAAUA,MAAOA,GAAUA,iBAAiBA,EAAaA,SACnFA,IAAIA,EAAWA,WAAWA,aAAcA,MAAOA,GAAUA,iBAAiBA,EAAaA,cAE3FA,MAAIA,GAAWA,aACJA,EAAUA,iBAAiBA,EAAWA,cAG1CA,EAAUA,iBAAiBA,EAAaA,OAIrCF,EAAAA,iBAAdA,SAA+BA,GAC3BG,EAAeA,GAAgBA,EAAaA,IAE5CA,IAAIA,GAAgBA,EAAiBA,GACjCA,EAAWA,EAA4BA,EAI3CA,OAAOA,GAAUA,6BAA6BA,EAAeA,IAInDH,EAAAA,6BAAdA,SAA2CA,EAA8BA,GACrEI,EAAgBA,GAAiBA,EAAcA,KAC/CA,EAAWA,GAAYA,IAEvBA,IAAIA,GAAKA,EAAcA,UAIvBA,OAHIA,KACAA,GAAMA,IAAMA,GAETA,EAAUA,UAAUA,KAAQA,EAAUA,UAAUA,GAAMA,GAAIA,GAAUA,EAAeA,EAAeA,GAAWA,KAI1GJ,EAAAA,SAAdA,SAAuBA,GAGnBK,MAAOA,IAAIA,GAAUA,EAAaA,YAAaA,KAAMA,IAIlDL,EAAAA,UAAAA,iBAAPA,SAAwBA,GAGpBM,GAAIA,GAAqBA,EAAMA,aAC/BA,OAAIA,QAASA,GACTA,KAAKA,gBAAkBA,GACvBA,IAAuBA,EAAcA,MAC9BA,GACJA,GAIXN,OAAAA,eAAWA,EAAAA,UAAAA,iBNscPO,IMtcJP,WACIQ,MAAOA,GAAiBA,KAAKA,iBNwc7BC,YAAY,EACZC,cAAc,IMrclBV,OAAAA,eAAWA,EAAAA,UAAAA,gBNycPO,IMzcJP,WACIW,MAAOA,MAAKA,gBN2cZF,YAAY,EACZC,cAAc,IMxclBV,OAAAA,eAAWA,EAAAA,UAAAA,kBN4cPO,IM5cJP,WACIY,MAAOA,MAAKA,UN8cZH,YAAY,EACZC,cAAc,IMzclBV,OAAAA,eAAWA,EAAAA,UAAAA,QN8cPO,IM9cJP,WACIa,MAAOA,MAAKA,gBAAkBA,EAAcA,MNgd5CJ,YAAY,EACZC,cAAc,IM7clBV,OAAAA,eAAWA,EAAAA,UAAAA,WNidPO,IMjdJP,WACIc,MAAOA,GAAeA,QAAQA,KAAKA,eAAgBA,EAAaA,UNmdhEL,YAAY,EACZC,cAAc,IMhdlBV,OAAAA,eAAWA,EAAAA,UAAAA,WNodPO,IMpdJP,WACIe,MAAOA,MAAKA,gBAAkBA,EAAcA,SNsd5CN,YAAY,EACZC,cAAc,IMndlBV,OAAAA,eAAWA,EAAAA,UAAAA,QNudPO,IMvdJP,WACIgB,MAAOA,MAAKA,gBAAkBA,EAAcA,SNyd5CP,YAAY,EACZC,cAAc,IMtdlBV,OAAAA,eAAWA,EAAAA,UAAAA,YN0dPO,IM1dJP,WACIiB,MAAOA,MAAKA,gBAAkBA,EAAcA,UACxCA,KAAKA,gBAAkBA,EAAcA,MACrCA,KAAKA,gBAAkBA,EAAcA,MN4dzCR,YAAY,EACZC,cAAc,IMzdlBV,OAAAA,eAAWA,EAAAA,UAAAA,YN6dPO,IM7dJP,WACIkB,MAAOA,MAAKA,gBAAkBA,EAAcA,UN+d5CT,YAAY,EACZC,cAAc,IM5dlBV,OAAAA,eAAWA,EAAAA,UAAAA,UNgePO,IMheJP,WACImB,MAAOA,MAAKA,gBAAkBA,EAAcA,QNke5CV,YAAY,EACZC,cAAc,IM/dlBV,OAAAA,eAAWA,EAAAA,UAAAA,QNmePO,IMneJP,WACIoB,MAAOA,MAAKA,gBAAkBA,EAAcA,MNqe5CX,YAAY,EACZC,cAAc,IMhelBV,OAAAA,eAAWA,EAAAA,UAAAA,YNqePO,IMreJP,WACIqB,MAAOA,MAAKA,cNueZZ,YAAY,EACZC,cAAc,IMpelBV,OAAAA,eAAWA,EAAAA,UAAAA,aNwePO,IMxeJP,WACIsB,MAAOA,MAAKA,eN0eZb,YAAY,EACZC,cAAc,IMvelBV,OAAAA,eAAWA,EAAAA,UAAAA,QN2ePO,IM3eJP,WACIuB,MAAOA,MAAKA,UN6eZd,YAAY,EACZC,cAAc,IM1elBV,OAAAA,eAAWA,EAAAA,UAAAA,cN8ePO,IM9eJP,WACIwB,MAAOA,MAAKA,gBNgfZf,YAAY,EACZC,cAAc,IM7elBV,OAAAA,eAAWA,EAAAA,UAAAA,QNifPO,IMjfJP,WACIyB,MAAOA,MAAKA,UNmfZhB,YAAY,EACZC,cAAc,IMjflBV,OAAAA,eAAWA,EAAAA,UAAAA,aNofPO,IMpfJP,WACI0B,MAAOA,MAAKA,eNsfZjB,YAAY,EACZC,cAAc,IM1tBHV,EAAAA,aAqOnBA,IAtOahE,GAAAA,UAASA,CAwOtBA,IAAAA,GAAAA,WAGI2F,QAAAA,GAAYA,GAERC,KAAKA,eAAiBA,EAM9BD,MAHIA,QAAAA,eAAWA,EAAAA,UAAAA,UNufPpB,IMvfJoB,WACIE,MAAOA,GAAoCA,KAAKA,eAAgBA,EAAaA,eNyf7EpB,YAAY,EACZC,cAAc,IMxftBiB,IAXa3F,GAAAA,WAAUA,CAavBA,IAAAA,GAAAA,WAGI8F,QAAAA,GAAYA,GAERC,KAAKA,eAAiBA,EAS9BD,MANIA,QAAAA,eAAWA,EAAAA,UAAAA,QNyfPvB,IMzfJuB,WACIE,MAAOA,GAAoCA,KAAKA,eAAgBA,EAAaA,ON2f7EvB,YAAY,EACZC,cAAc,IM1flBoB,OAAAA,eAAWA,EAAAA,UAAAA,SN6fPvB,IM7fJuB,WACIG,MAAOA,GAAoCA,KAAKA,eAAgBA,EAAaA,QN+f7ExB,YAAY,EACZC,cAAc,IM9ftBoB,IAda9F,GAAAA,aAAYA,CAgBzBA,IAAAA,GAAAA,WAGIkG,QAAAA,GAAYA,GAERC,KAAKA,eAAiBA,EAoC9BD,MAjCIA,QAAAA,eAAWA,EAAAA,UAAAA,WN+fP3B,IM/fJ2B,WACIE,MAAOA,GAAoCA,KAAKA,eAAgBA,EAAaA,UNigB7E3B,YAAY,EACZC,cAAc,IMhgBlBwB,OAAAA,eAAWA,EAAAA,UAAAA,QNmgBP3B,IMngBJ2B,WACIG,MAAOA,GAAoCA,KAAKA,eAAgBA,EAAaA,ONqgB7E5B,YAAY,EACZC,cAAc,IMpgBlBwB,OAAAA,eAAWA,EAAAA,UAAAA,aNugBP3B,IMvgBJ2B,WACII,MAAOA,GAAoCA,KAAKA,eAAgBA,EAAaA,YNygB7E7B,YAAY,EACZC,cAAc,IMxgBlBwB,OAAAA,eAAWA,EAAAA,UAAAA,WN2gBP3B,IM3gBJ2B,WACIK,MAAOA,GAAoCA,KAAKA,eAAgBA,EAAaA,UN6gB7E9B,YAAY,EACZC,cAAc,IM5gBlBwB,OAAAA,eAAWA,EAAAA,UAAAA,UN+gBP3B,IM/gBJ2B,WACIM,MAAOA,GAAoCA,KAAKA,eAAgBA,EAAaA,SNihB7E/B,YAAY,EACZC,cAAc,IMhhBlBwB,OAAAA,eAAWA,EAAAA,UAAAA,UNmhBP3B,IMnhBJ2B,WACIO,MAAOA,GAAoCA,KAAKA,eAAgBA,EAAaA,SNqhB7EhC,YAAY,EACZC,cAAc,IMphBlBwB,OAAAA,eAAWA,EAAAA,UAAAA,cNuhBP3B,IMvhBJ2B,WACIQ,MAAOA,GAAoCA,KAAKA,eAAgBA,EAAaA,aNyhB7EjC,YAAY,EACZC,cAAc,IMxhBlBwB,OAAAA,eAAWA,EAAAA,UAAAA,mBN2hBP3B,IM3hBJ2B,WACIS,MAAOA,GAAoCA,KAAKA,eAAgBA,EAAaA,kBN6hB7ElC,YAAY,EACZC,cAAc,IM5hBlBwB,OAAAA,eAAWA,EAAAA,UAAAA,SN+hBP3B,IM/hBJ2B,WACIU,MAAOA,GAAoCA,KAAKA,eAAgBA,EAAaA,QNiiB7EnC,YAAY,EACZC,cAAc,IMhiBlBwB,OAAAA,eAAWA,EAAAA,UAAAA,YNmiBP3B,IMniBJ2B,WACIW,MAAOA,GAAoCA,KAAKA,eAAgBA,EAAaA,WNqiB7EpC,YAAY,EACZC,cAAc,IMpiBlBwB,OAAAA,eAAWA,EAAAA,UAAAA,aNuiBP3B,IMviBJ2B,WACIY,MAAOA,GAAoCA,KAAKA,eAAgBA,EAAaA,YNyiB7ErC,YAAY,EACZC,cAAc,IMxiBtBwB,IAzCalG,GAAAA,cAAaA,CA2C1BA,IAAAA,GAAAA,WAGI+G,QAAAA,GAAYA,GAERC,KAAKA,eAAiBA,EAY9BD,MATIA,QAAAA,eAAWA,EAAAA,UAAAA,SNyiBPxC,IMziBJwC,WACIE,MAAOA,GAAoCA,KAAKA,eAAgBA,EAAaA,QN2iB7ExC,YAAY,EACZC,cAAc,IM1iBlBqC,OAAAA,eAAWA,EAAAA,UAAAA,YN6iBPxC,IM7iBJwC,WACIG,MAAOA,GAAoCA,KAAKA,eAAgBA,EAAaA,WN+iB7EzC,YAAY,EACZC,cAAc,IM9iBlBqC,OAAAA,eAAWA,EAAAA,UAAAA,UNijBPxC,IMjjBJwC,WACII,MAAOA,GAAoCA,KAAKA,eAAgBA,EAAaA,SNmjB7E1C,YAAY,EACZC,cAAc,IMljBtBqC,IAjBa/G,GAAAA,kBAAiBA,CAmB9BA,IAAAA,GAAAA,WAGIoH,QAAAA,GAAYA,GAERC,KAAKA,eAAiBA,EA0B9BD,MAvBIA,QAAAA,eAAWA,EAAAA,UAAAA,SNmjBP7C,IMnjBJ6C,WACIE,MAAOA,GAAoCA,KAAKA,eAAgBA,EAAaA,QNqjB7E7C,YAAY,EACZC,cAAc,IMnjBlB0C,OAAAA,eAAWA,EAAAA,UAAAA,gBNsjBP7C,IMtjBJ6C,WACIG,MAAOA,GAAoCA,KAAKA,eAAgBA,EAAaA,eNwjB7E9C,YAAY,EACZC,cAAc,IMtjBlB0C,OAAAA,eAAWA,EAAAA,UAAAA,aNyjBP7C,IMzjBJ6C,WACII,MAAOA,GAAoCA,KAAKA,eAAgBA,EAAaA,YN2jB7E/C,YAAY,EACZC,cAAc,IMzjBlB0C,OAAAA,eAAWA,EAAAA,UAAAA,qBN4jBP7C,IM5jBJ6C,WACIK,MAAOA,GAAoCA,KAAKA,eAAgBA,EAAaA,oBN8jB7EhD,YAAY,EACZC,cAAc,IM5jBlB0C,OAAAA,eAAWA,EAAAA,UAAAA,YN+jBP7C,IM/jBJ6C,WACIM,MAAOA,GAAoCA,KAAKA,eAAgBA,EAAaA,WNikB7EjD,YAAY,EACZC,cAAc,IM/jBlB0C,OAAAA,eAAWA,EAAAA,UAAAA,gBNkkBP7C,IMlkBJ6C,WACIO,MAAOA,GAAoCA,KAAKA,eAAgBA,EAAaA,eNokB7ElD,YAAY,EACZC,cAAc,IMnkBtB0C,IA/BapH,GAAAA,eAAcA,EAkC3BA,SAAYA,GACR4H,EAAAA,EAAAA,KAAAA,GAAAA,OACAA,EAAAA,EAAAA,KAAAA,GAAAA,OACAA,EAAAA,EAAAA,QAAAA,GAAAA,UACAA,EAAAA,EAAAA,OAAAA,GAAAA,SACAA,EAAAA,EAAAA,QAAAA,GAAAA,UACAA,EAAAA,EAAAA,QAAAA,GAAAA,UACAA,EAAAA,EAAAA,KAAAA,GAAAA,OACAA,EAAAA,EAAAA,SAAAA,GAAAA,WACAA,EAAAA,EAAAA,aAAAA,GAAAA,eACAA,EAAAA,EAAAA,KAAAA,GAAAA,OACAA,EAAAA,EAAAA,SAAAA,IAAAA,WACAA,EAAAA,EAAAA,OAAAA,IAAAA,SACAA,EAAAA,EAAAA,KAAAA,IAAAA,QAbQ5H,EAAAA,gBAAAA,EAAAA,kBAAZA,IAAYA,GAAAA,EAAAA,eAiBZA,SAAYA,GAGR6H,EAAAA,EAAAA,QAAAA,KAAAA,UACAA,EAAAA,EAAAA,SAAAA,KAAAA,WACAA,EAAAA,EAAAA,UAAAA,MAAAA,YACAA,EAAAA,EAAAA,cAAAA,MAAAA,gBACAA,EAAAA,EAAAA,WAAAA,MAAAA,aACAA,EAAAA,EAAAA,UAAAA,MAAAA,YAIAA,EAAAA,EAAAA,KAAAA,GAAAA,OACAA,EAAAA,EAAAA,KAAAA,GAAAA,OACAA,EAAAA,EAAAA,QAAAA,KAAAA,UACAA,EAAAA,EAAAA,OAAAA,KAAAA,SACAA,EAAAA,EAAAA,QAAAA,KAAAA,UACAA,EAAAA,EAAAA,QAAAA,GAAAA,UACAA,EAAAA,EAAAA,KAAAA,KAAAA,OACAA,EAAAA,EAAAA,SAAAA,KAAAA,WACAA,EAAAA,EAAAA,aAAAA,KAAAA,eACAA,EAAAA,EAAAA,KAAAA,KAAAA,OACAA,EAAAA,EAAAA,SAAAA,IAAAA,WACAA,EAAAA,EAAAA,OAAAA,IAAAA,SACAA,EAAAA,EAAAA,KAAAA,IAAAA,OAIAA,EAAAA,EAAAA,KAAAA,OAAAA,OACAA,EAAAA,EAAAA,UAAAA,OAAAA,YACAA,EAAAA,EAAAA,aAAAA,OAAAA,eACAA,EAAAA,EAAAA,UAAAA,OAAAA,YACAA,EAAAA,EAAAA,cAAAA,OAAAA,gBACAA,EAAAA,EAAAA,MAAAA,QAAAA,QACAA,EAAAA,EAAAA,WAAAA,QAAAA,aACAA,EAAAA,EAAAA,cAAAA,QAAAA,gBACAA,EAAAA,EAAAA,WAAAA,QAAAA,aACAA,EAAAA,EAAAA,eAAAA,QAAAA,iBAEAA,EAAAA,EAAAA,QAAAA,SAAAA,UACAA,EAAAA,EAAAA,KAAAA,SAAAA,OACAA,EAAAA,EAAAA,UAAAA,SAAAA,YACAA,EAAAA,EAAAA,QAAAA,SAAAA,UACAA,EAAAA,EAAAA,OAAAA,SAAAA,SACAA,EAAAA,EAAAA,OAAAA,SAAAA,SACAA,EAAAA,EAAAA,WAAAA,SAAAA,aACAA,EAAAA,EAAAA,gBAAAA,SAAAA,kBACAA,EAAAA,EAAAA,mBAAAA,SAAAA,qBACAA,EAAAA,EAAAA,gBAAAA,SAAAA,kBACAA,EAAAA,EAAAA,MAAAA,SAAAA,QACAA,EAAAA,EAAAA,SAAAA,SAAAA,WACAA,EAAAA,EAAAA,iBAAAA,SAAAA,mBACAA,EAAAA,EAAAA,gBAAAA,SAAAA,kBACAA,EAAAA,EAAAA,UAAAA,SAAAA,YACAA,EAAAA,EAAAA,kBAAAA,SAAAA,oBACAA,EAAAA,EAAAA,iBAAAA,SAAAA,mBAEAA,EAAAA,EAAAA,MAAAA,UAAAA,QACAA,EAAAA,EAAAA,SAAAA,UAAAA,WACAA,EAAAA,EAAAA,OAAAA,UAAAA,SAEAA,EAAAA,EAAAA,MAAAA,UAAAA,QACAA,EAAAA,EAAAA,aAAAA,UAAAA,eACAA,EAAAA,EAAAA,UAAAA,UAAAA,YACAA,EAAAA,EAAAA,kBAAAA,UAAAA,oBACAA,EAAAA,EAAAA,SAAAA,UAAAA,WACAA,EAAAA,EAAAA,aAAAA,UAAAA,eAEAA,EAAAA,EAAAA,YAAAA,UAAAA,cAEAA,EAAAA,EAAAA,aAAAA,UAAAA,gBAtEQ7H,EAAAA,eAAAA,EAAAA,iBAAZA,IAAYA,GAAAA,EAAAA,aA2ENA,EAAoBA,IACpBA,EAA6BA,MAC7BA,EAAiCA,YA3cpCA,UAAAA,YCAP,IAAOA,UAAP,SAAOA,GAAQA,GAAAA,IAAAA,SAAAA,IAiBXC,SAAYA,GACR6H,EAAAA,EAAAA,IAAAA,GAAAA,MACAA,EAAAA,EAAAA,MAAAA,GAAAA,QACAA,EAAAA,EAAAA,KAAAA,GAAAA,OACAA,EAAAA,EAAAA,OAAAA,GAAAA,SACAA,EAAAA,EAAAA,OAAAA,GAAAA,UALQ7H,EAAAA,4BAAAA,EAAAA,8BAAAA,GAAAA,2BA2DZA,SAAYA,GACR8H,EAAAA,EAAAA,KAAAA,GAAAA,OACAA,EAAAA,EAAAA,OAAAA,GAAAA,SACAA,EAAAA,EAAAA,MAAAA,GAAAA,SAHQ9H,EAAAA,eAAAA,EAAAA,iBAAAA,GAAAA,cA5EDD,EAAAA,EAAAA,OAAAA,EAAAA,WAARA,UAAAA,YCAP,IAAOA,UAAP,SAAOA,GAAQA,GAAAA,IAAAA,SAAAA,GACXC,GAAcA,IAAdA,SAAcA,GAEV+H,QAAAA,GAA2BA,GACvBC,GAAKA,EAALA,CAGAA,GAAIA,EAqCJA,OApCIA,GAAUA,MACVA,GACIA,QAGAA,EAAUA,IAAIA,QACdA,EAAOA,IAAIA,MAAQA,EAAUA,IAAIA,QAGrCA,EAAUA,SACVA,GACIA,WAGAA,EAAUA,OAAOA,QACjBA,EAAOA,OAAOA,MAAQA,EAAUA,OAAOA,QAG3CA,EAAUA,SACVA,GACIA,WAGAA,EAAUA,OAAOA,QACjBA,EAAOA,OAAOA,MAAQA,EAAUA,OAAOA,QAG3CA,EAAUA,SACVA,GACIA,WAGAA,EAAUA,OAAOA,QACjBA,EAAOA,OAAOA,MAAQA,EAAUA,OAAOA,QAGxCA,GAzCKD,EAAAA,WAAUA,GAFhB/H,EAAAA,EAAAA,gCAAAA,EAAAA,oCADHD,EAAAA,EAAAA,OAAAA,EAAAA,WAARA,UAAAA,YCAP,IAAOA,UAAP,SAAOA,GAAQA,GAAAA,IAAAA,SAAAA,GAOXC,GAAAA,GAAAA,WAIIiI,QAAAA,GAAYA,GAGRC,KAAKA,QAAUA,EAAQA,QACnBA,EAAQA,QACRA,KAAKA,MAAQA,EAAQA,OAMjCD,MAHWA,GAAAA,UAAAA,OAAPA,SAAcA,GACVE,MAAOA,MAAKA,QAAQA,IAE5BF,IAfajI,GAAAA,0BAAyBA,GAP3BD,EAAAA,EAAAA,OAAAA,EAAAA,WAARA,UAAAA,YCAP,IAAOA,UAAP,SAAOA,GAAQA,GAAAA,IAAAA,SAAAA,GAEXC,GAAcA,IAAdA,SAAcA,GACVoI,QAAAA,GAAmCA,EAAuBA,GACtDC,IAAIA,EAAEA,QAAQA,GAAdA,CAIAA,IAAKA,GADDA,MACKA,EAAIA,EAAGA,EAAOA,EAAUA,OAAYA,EAAJA,EAAUA,IAAKA,CACpDA,GAAIA,GAAWA,EAAUA,GACrBA,EAAOA,EAASA,KAChBA,EAAoBA,MACxBA,IAAIA,GAAQA,EAAKA,OACbA,IAAKA,GAAIA,GAAIA,EAAGA,EAAOA,EAAKA,OAAYA,EAAJA,EAAUA,IAC1CA,EAAYA,EAAAA,cAAcA,IAAIA,EAA2CA,EAASA,KAAKA,GAAIA,KAI/FA,IACAA,EAAMA,KAAKA,GAGnBA,MAAKA,GAAEA,QAAQA,GAAfA,OACWA,EAAAA,sBAAsBA,gBAAgBA,EAAOA,IAG5DD,QAAAA,GAA4BA,EAAoBA,GAK5CE,GAAIA,GAAeA,EAASA,IAC5BA,IAAIA,EAAaA,SAAWA,EAAWA,OACnCA,OAAOA,CAEXA,KAAKA,GAAIA,GAAIA,EAAGA,EAAMA,EAAaA,OAAYA,EAAJA,EAASA,IAAKA,CACrDA,GAAIA,GAAWA,EAASA,KAAKA,GACzBA,EAA0CA,CAC9CA,IAAIA,EAAiBA,MACjBA,IAAKA,EAAAA,sBAAsBA,OAAOA,EAAkBA,EAAWA,IAC3DA,OAAOA,MAGXA,KAAKA,EAAAA,sBAAsBA,QAA+BA,EAAUA,EAAWA,IAC3EA,OAAOA,EAInBA,OAAOA,EAGXF,QAAAA,GAA4BA,EAAoBA,GAK5CG,GAAIA,GAAeA,EAASA,KACxBA,EAAqBA,EAAaA,MACtCA,IAAIA,IAAuBA,EAASA,OAChCA,OAAOA,CAEXA,KAAKA,GAAIA,GAAIA,EAAOA,EAAJA,EAAwBA,IAAKA,CACzCA,GAAIA,GAAmBA,EAASA,KAAKA,GACjCA,EAAiBA,MASrBA,IANIA,EADwBA,EAAkBA,KACtBA,EAAAA,uBAAuBA,QAAwCA,EAAkBA,MAG/CA,EAAkBA,MAGvEA,IAEAA,EAAAA,YAAYA,cAAcA,EAASA,GAAIA,GACxCA,OAAOA,EAGfA,OAAOA,EAIXH,QAAAA,GAAuBA,EAAaA,GAKhCI,MAHAA,GAAIA,GAAKA,KACTA,EAAIA,GAAKA,KAELA,IAAMA,GACCA,GAENA,IAAOA,GACDA,EAKPA,EAAEA,KAAOA,EAAEA,IACJA,EACPA,EAAEA,WAAaA,EAAEA,UACVA,EACNA,EAAgBA,EAAEA,KAAMA,EAAEA,OAGxBA,GAFIA,EAKfJ,QAAAA,GAAyBA,EAA6BA,GAKlDK,GAHAA,EAAIA,GAAKA,KACTA,EAAIA,GAAKA,KAELA,IAAMA,EACNA,OAAOA,CAEXA,KAAKA,IAAOA,EACRA,OAAOA,CAEXA,IAAIA,EAAEA,SAAWA,EAAEA,OACfA,OAAOA,CAEXA,KAAKA,GAAIA,GAAIA,EAAGA,EAAMA,EAAEA,OAAYA,EAAJA,EAASA,IACrCA,IAAKA,EAAWA,EAAEA,GAAIA,EAAEA,IACpBA,OAAOA,CAGfA,QAAOA,EAGXL,QAAAA,GAAoBA,EAA2BA,GAC3CM,OAA6BA,EAAGA,MAAgCA,EAAGA,MAExDA,EAGJA,EAAAA,sBAAsBA,OAA8BA,EAA0BA,GAGzFN,QAAAA,GAAuBA,GACnBO,GAAIA,KACJA,IAAIA,EAASA,KAAMA,CAEfA,IAAKA,GADDA,MACKA,EAAIA,EAAGA,EAAOA,EAASA,KAAKA,OAAYA,EAAJA,EAAUA,IACnDA,EAAKA,KAAKA,EAASA,KAAKA,GAAGA,IAE/BA,GAAYA,KAAOA,EAMvBA,MAJIA,GAASA,WACTA,EAAYA,SAAWA,EAASA,UAChCA,EAASA,KACTA,EAAYA,GAAKA,EAASA,IACvBA,KAAKA,UAAUA,GAG1BP,QAAAA,GAAiCA,GAG7BQ,GAAIA,GAAYA,EAASA,IACzBA,KAAKA,EACDA,OAAOA,CAEXA,KAAKA,GAAIA,GAAIA,EAAGA,EAAMA,EAAUA,OAAYA,EAAJA,EAASA,IAAKA,CAClDA,GAAIA,GAAkCA,EAAUA,EAChDA,IAAIA,EAASA,MACTA,OAAOA,EAGfA,OAAOA,EAnKKR,EAAAA,mBAAkBA,EAuBlBA,EAAAA,YAAWA,EAyBXA,EAAAA,YAAWA,EA+BXA,EAAAA,OAAMA,EAuDNA,EAAAA,OAAMA,EAgBNA,EAAAA,iBAAgBA,GAvJtBpI,EAAAA,EAAAA,WAAAA,EAAAA,eAFHD,EAAAA,EAAAA,OAAAA,EAAAA,WAARA,UAAAA,YCAP,IAAOA,UAAP,SAAOA,GAAQA,GAAAA,IAAAA,SAAAA,IAiBXC,SAAYA,GACR6I,EAAAA,EAAAA,MAAAA,GAAAA,QACAA,EAAAA,EAAAA,IAAAA,GAAAA,OAFQ7I,EAAAA,mBAAAA,EAAAA,qBAAAA,GAAAA,kBA0KZA,SAAYA,GACR8I,EAAAA,EAAAA,IAAAA,GAAAA,MACAA,EAAAA,EAAAA,KAAAA,GAAAA,OACAA,EAAAA,EAAAA,MAAAA,GAAAA,QACAA,EAAAA,EAAAA,KAAAA,GAAAA,OACAA,EAAAA,EAAAA,OAAAA,GAAAA,SACAA,EAAAA,EAAAA,OAAAA,GAAAA,SACAA,EAAAA,EAAAA,OAAAA,GAAAA,SACAA,EAAAA,EAAAA,KAAAA,GAAAA,QARQ9I,EAAAA,WAAAA,EAAAA,aAAAA,GAAAA,UAWZA,SAAYA,GACR+I,EAAAA,EAAAA,IAAAA,GAAAA,MACAA,EAAAA,EAAAA,IAAAA,GAAAA,MACAA,EAAAA,EAAAA,MAAAA,GAAAA,QACAA,EAAAA,EAAAA,IAAAA,GAAAA,MACAA,EAAAA,EAAAA,IAAAA,GAAAA,MACAA,EAAAA,EAAAA,aAAAA,GAAAA,eACAA,EAAAA,EAAAA,OAAAA,GAAAA,SACAA,EAAAA,EAAAA,kBAAAA,GAAAA,oBACAA,EAAAA,EAAAA,SAAAA,GAAAA,YATQ/I,EAAAA,yBAAAA,EAAAA,2BAAAA,GAAAA,wBAYZA,SAAYA,GACRgJ,EAAAA,EAAAA,MAAAA,GAAAA,QACAA,EAAAA,EAAAA,YAAAA,GAAAA,cACAA,EAAAA,EAAAA,mBAAAA,GAAAA,qBACAA,EAAAA,EAAAA,SAAAA,GAAAA,WACAA,EAAAA,EAAAA,gBAAAA,GAAAA,mBALQhJ,EAAAA,sBAAAA,EAAAA,wBAAAA,GAAAA,qBASZA,SAAYA,GACRiJ,EAAAA,EAAAA,KAAAA,GAAAA,OACAA,EAAAA,EAAAA,OAAAA,GAAAA,SACAA,EAAAA,EAAAA,QAAAA,GAAAA,UACAA,EAAAA,EAAAA,SAAAA,GAAAA,WACAA,EAAAA,EAAAA,KAAAA,GAAAA,OACAA,EAAAA,EAAAA,KAAAA,IAAAA,OACAA,EAAAA,EAAAA,MAAAA,IAAAA,QACAA,EAAAA,EAAAA,KAAAA,IAAAA,OACAA,EAAAA,EAAAA,aAAAA,KAAAA,eACAA,EAAAA,EAAAA,YAAAA,KAAAA,cACAA,EAAAA,EAAAA,OAAAA,KAAAA,SACAA,EAAAA,EAAAA,YAAAA,MAAAA,cACAA,EAAAA,EAAAA,OAAAA,MAAAA,SACAA,EAAAA,EAAAA,QAAAA,MAAAA,UACAA,EAAAA,EAAAA,MAAAA,MAAAA,QACAA,EAAAA,EAAAA,MAAAA,OAAAA,SAhBQjJ,EAAAA,eAAAA,EAAAA,iBAAAA,GAAAA,cAiDZA,SAAYA,GACRkJ,EAAAA,EAAAA,QAAAA,GAAAA,UACAA,EAAAA,EAAAA,OAAAA,GAAAA,UAFQlJ,EAAAA,aAAAA,EAAAA,eAAAA,GAAAA,YA5QDD,EAAAA,EAAAA,OAAAA,EAAAA,WAARA,UAAAA,YCAP,IAAOA,UAAP,SAAOA,GAAQA,GAAAA,IAAAA,SAAAA,GAgBXC,GAAAA,GAAAA,WAWImJ,QAAAA,GAAmBA,EAA0BA,EAAiCA,GAG1EC,KAAKA,MAAQA,EACbA,KAAKA,sBAAwBA,EAC7BA,KAAKA,SAAWA,EAiDxBD,MA7CWA,GAAAA,UAAAA,IAAPA,WACIE,MAAOA,MAAKA,OAGhBF,OAAAA,eAAWA,EAAAA,UAAAA,wBZ8+CH7E,IY9+CR6E,WACIG,MAAOA,MAAKA,uBZg/CRC,IY7+CRJ,SAAgCA,GAC5BG,IAAKA,EAAEA,QAAQA,GAAkBA,CAG7BA,IAA2BA,GAFvBA,GAAYA,KAAKA,MAAMA,IAAIA,SAAAA,GAAOA,MAAAA,GAAIA,WAEfA,EAAAA,EAAtBA,EAAAA,EAAAA,OAAAA,IAAsCA,CAAtCA,GAAIA,GAAkBA,EAAeA,EACtCA,KAAKA,EAAEA,SAASA,EAAWA,GACvBA,OAGRA,KAAKA,sBAAwBA,IZ++C7B9E,YAAY,EACZC,cAAc,IY5+CtB0E,OAAAA,eAAWA,EAAAA,UAAAA,WZ++CH7E,IY/+CR6E,WACIK,MAAOA,MAAKA,UZi/CRD,IY9+CRJ,SAAmBA,GACfK,KAAKA,SAAWA,GZg/CZhF,YAAY,EACZC,cAAc,IY9+Cf0E,EAAAA,UAAAA,wBAAPA,SAA+BA,GACtBM,KAAKA,sBAGNA,KAAKA,sBAAsBA,KAAKA,GAFhCA,KAAKA,uBAAyBA,IAK/BN,EAAAA,UAAAA,4BAAPA,WACIO,MAAKA,GAAEA,QAAQA,KAAKA,uBAApBA,OACWA,KAAKA,sBAAsBA,KAAKA,sBAAsBA,OAASA,IAIvEP,EAAAA,UAAAA,MAAPA,WACIQ,MAAOA,IAAIA,GAA0BA,EAAEA,MAAMA,KAAKA,OAAQA,EAAEA,MAAMA,KAAKA,uBAAwBA,KAAKA,WAE5GR,IAjEanJ,GAAAA,0BAAyBA,CAmEtCA,IAAcA,IAAdA,SAAcA,GAEV4J,QAAAA,GAAsBA,GAClBC,IAAKA,EACDA,MAAOA,EAEXA,IAAIA,KAEJA,KAAKA,GAAIA,KAAYA,GACjBA,EAAYA,GAAYA,EAAMA,GAAUA,OAE5CA,OAAOA,GAIXD,QAAAA,GAAwBA,EAA+BA,GAInDE,MAAKA,GAGEA,EAAMA,GAHbA,OAjBYF,EAAAA,MAAKA,EAaLA,EAAAA,QAAOA,GAfb5J,EAAAA,EAAAA,yBAAAA,EAAAA,6BAnFHD,EAAAA,EAAAA,OAAAA,EAAAA,WAARA,UAAAA,YCAP,IAAOA,UAAP,SAAOA,IAmBHA,SAAYA,GAERgK,EAAAA,EAAAA,QAAAA,GAAAA,UAGAA,EAAAA,EAAAA,QAAAA,GAAAA,UAMAA,EAAAA,EAAAA,WAAAA,GAAAA,aAGAA,EAAAA,EAAAA,WAAAA,GAAAA,cAdQhK,EAAAA,wBAAAA,EAAAA,0BAAAA,GAAAA,uBAnBTA,UAAAA,YCAP,IAAOA,UAAP,SAAOA,GAAQA,GAAAA,IAAAA,SAAAA,GACXC,GAAcA,IAAdA,SAAcA,GACVgK,QAAAA,GAAsCA,EAAqCA,GACvEC,IAAKA,EAAEA,QAAQA,GAAUA,CACrBA,GAAIA,GAAaA,EAAQA,EACzBA,IAAIA,EAAWA,QAAUA,EAAWA,OAAOA,OAASA,EAChDA,IAAKA,GAAIA,GAAIA,EAAGA,EAAMA,EAAWA,OAAOA,OAAYA,EAAJA,IAAWA,EAAGA,CAC1DA,GAAIA,GAAQA,EAAWA,OAAOA,EAC9BA,IAAIA,GAASA,EAAMA,QACXA,EAAQA,EAAMA,OAAQA,GACtBA,MAAOA,IAK3BA,MAAOA,GAGXD,QAAAA,GAAuCA,EAAsCA,GACzEE,IAAKA,EAAEA,QAAQA,GACXA,IAAKA,GAAIA,GAAIA,EAAGA,EAAOA,EAAWA,OAAYA,EAAJA,EAAUA,IAChDA,GAAIA,EAAQA,EAAWA,GAAGA,OAAQA,GAC9BA,MAAOA,EAGnBA,OAAOA,GAGXF,QAAAA,GAAwBA,EAAgCA,GACpDG,GAAIA,GAAQA,EAAOA,KACnBA,OAAOA,IAASA,EAAMA,GAG1BH,QAAAA,GAAkCA,EAAoBA,GAClDI,MAAmBA,OAAZA,GACqBA,MAArBA,EAASA,UACTA,EAASA,SAASA,SAClBA,EAAEA,IAAIA,EAASA,SAASA,QAASA,SAAAA,GAAKA,MAAAA,GAAEA,OAA2BA,SAAlBA,EAAEA,MAAMA,KAnCpDJ,EAAAA,sBAAqBA,EAgBrBA,EAAAA,uBAAsBA,EAUtBA,EAAAA,QAAOA,EAKPA,EAAAA,kBAAiBA,GAhCvBhK,EAAAA,EAAAA,iBAAAA,EAAAA,qBADHD,EAAAA,EAAAA,OAAAA,EAAAA,WAARA,UAAAA,YCAP,IAAOA,UAAP,SAAOA,GAAQA,GAAAA,IAAAA,SAAAA,GAGXC,QAAAA,GAAiDA,GAC7CqK,MAAOA,IAAIA,GAA0BA,GAHzCrK,GAAOA,GAAiBA,EAAQA,KAAKA,cAErBA,GAAAA,iCAAgCA,CA0ChDA,IAAAA,GAAAA,WAWIsK,QAAAA,GAAYA,GAERC,KAAKA,SAAWA,CAEhBA,IAAIA,EACAA,KACAA,EAAcA,EAASA,YAC3BA,IAAIA,EACAA,KACAA,EAAaA,KAAKA,WAAaA,EAAYA,YAC/CA,KAAKA,oBAAsBA,EAAEA,QAAQA,GACjCA,KAAKA,qBACLA,KAAKA,qBAAwBA,EAAWA,GAAUA,QAItDA,IAAIA,EACAA,KACAA,EAASA,EAAYA,OACzBA,IAAIA,GAAoBA,KAAKA,mBAAqBA,EAAEA,QAAQA,EACxDA,KACAA,KAAKA,QAAUA,EAASA,YAAYA,OAAOA,WAE3CA,KAAKA,oBACLA,KAAKA,uBAAyBA,KAAKA,SAASA,YAAYA,OAAOA,QAqL3ED,MAhLWA,GAAAA,UAAAA,cAAPA,WACIE,MAAOA,MAAKA,oBAGTF,EAAAA,UAAAA,iBAAPA,WACIG,MAAIA,MAAKA,mBACEA,KAAKA,WAAWA,GAAGA,OAAOA,OAE1BA,GAGRH,EAAAA,UAAAA,kBAAPA,SAAyBA,GACrBI,GAAIA,KAAKA,mBAAoBA,CACzBA,GAAIA,GAAaA,KAAKA,oBAAoBA,EAC1CA,OAAOA,GAAaA,EAAWA,OAASA,SAIzCJ,EAAAA,UAAAA,iBAAPA,SAAwBA,EAAuBA,GAC3CK,GAAIA,KAAKA,mBAAoBA,CACzBA,GAAIA,GAAaA,KAAKA,oBAAoBA,EAC1CA,OAAOA,GAAaA,EAAWA,OAAOA,GAAiBA,SAIxDL,EAAAA,UAAAA,kBAAPA,SAAyBA,GACrBM,MAAIA,MAAKA,mBACEA,KAAKA,oBAAoBA,GADpCA,QAIGN,EAAAA,UAAAA,0BAAPA,SAAiCA,GAC7BO,GAAIA,KAAKA,mBAAoBA,CACzBA,GAAIA,GAAaA,KAAKA,oBAAoBA,EAC1CA,OAAOA,GAAaA,EAAWA,OAASA,SAIzCP,EAAAA,UAAAA,uBAAPA,SAA8BA,GAC1BQ,GAAIA,KAAKA,mBAAoBA,CACzBA,GAAIA,GAAeA,KAAKA,kBAAkBA,EAC1CA,IAAIA,GAAgBA,EAAaA,OAC7BA,MAAOA,GAAaA,OAAOA,cAKhCR,EAAAA,UAAAA,uBAAPA,WACIS,MAAIA,MAAKA,mBACEA,KAAKA,WAAWA,OAASA,EADpCA,QAIGT,EAAAA,UAAAA,oBAAPA,SAA2BA,GACvBU,MAA4EA,KAArEA,EAAeA,uBAAuBA,KAAKA,WAAYA,IAG3DV,EAAAA,UAAAA,mBAAPA,SAA0BA,EAAuBA,GAC7CW,MAAIA,MAAKA,oBAAsBA,KAAKA,mBACzBA,KAAKA,oBAAoBA,GAAUA,QAAQA,GADtDA,QAIIX,EAAAA,UAAAA,oBAARA,SAA4BA,GACxBY,GAAIA,GAAaA,KAAKA,UACtBA,OAAOA,GAAWA,EAAeA,uBAAuBA,EAAYA,KAKjEZ,EAAAA,UAAAA,UAAPA,SAAiBA,GACba,MAA0CA,KAAnCA,KAAKA,gBAAgBA,IAGzBb,EAAAA,UAAAA,UAAPA,SAAiBA,EAAkBA,GAAAc,SAAAA,IAAAA,EAAAA,EAC/BA,IAAIA,GAAeA,KAAKA,gBAAgBA,EACxCA,OAAIA,MAAKA,mBAAsCA,KAAjBA,EACnBA,KAAKA,QAAQA,GAAaA,OAAOA,GAAcA,OAD1DA,QAIGd,EAAAA,UAAAA,SAAPA,SAAgBA,EAAkBA,EAAuBA,GACrDe,GAAIA,KAAKA,kBAAmBA,CACxBA,GAAIA,GAASA,KAAKA,UAAUA,EAAUA,EACtCA,OAAOA,GAASA,EAAOA,GAAiBA,SAIzCf,EAAAA,UAAAA,gCAAPA,SAAuCA,EAAkBA,GACrDgB,GAAIA,KAAKA,kBAAmBA,CACxBA,IAAKA,KAAKA,qBAENA,MAAOA,MAAKA,SAASA,EAAUA,EAEnCA,KAAKA,GAAIA,GAAcA,EAAGA,EAAcA,KAAKA,QAAQA,OAAsBA,EAAdA,EAA2BA,IAAeA,CACnGA,GAAIA,GAASA,KAAKA,UAAUA,EAAUA,GAClCA,EAASA,EAAEA,QAAQA,GAAkCA,OAAxBA,EAAOA,EACxCA,IAAaA,MAATA,EACAA,MAAOA,MAMhBhB,EAAAA,UAAAA,oBAAPA,SAA2BA,GACvBiB,GAAIA,GAAeA,KAAKA,gBAAgBA,EACxCA,OAAIA,MAAKA,mBAAsCA,KAAjBA,EACnBA,KAAKA,QAAQA,GAAGA,OAAOA,GAAcA,OAAOA,UADvDA,QAIGjB,EAAAA,UAAAA,eAAPA,SAAsBA,EAAkBA,GAAAkB,SAAAA,IAAAA,EAAAA,EACpCA,IAAIA,GAAeA,KAAKA,gBAAgBA,EACxCA,OAAIA,MAAKA,mBAAsCA,KAAjBA,EACnBA,KAAKA,QAAQA,GAAaA,OAAOA,GAD5CA,QAIGlB,EAAAA,UAAAA,uBAAPA,SAA8BA,EAAkBA,GAAAmB,SAAAA,IAAAA,EAAAA,EAC5CA,IAAIA,GAAeA,KAAKA,gBAAgBA,EACxCA,OAAIA,MAAKA,mBAAsCA,KAAjBA,EACnBA,KAAKA,QAAQA,GAAaA,OAAOA,GAAcA,OAD1DA,QAIGnB,EAAAA,UAAAA,oBAAPA,SAA2BA,EAAkBA,GACzCoB,GAAIA,KAAKA,kBAAmBA,CACxBA,GAAIA,GAAeA,KAAKA,eAAeA,EAAUA,EACjDA,IAAIA,GAAgBA,EAAaA,OAC7BA,MAAOA,GAAaA,OAAOA,cAK/BpB,EAAAA,UAAAA,gBAARA,SAAwBA,GACpBqB,MAAOA,GAAeA,sBAAsBA,KAAKA,QAASA,IAKvDrB,EAAAA,UAAAA,iBAAPA,WACIsB,MAAOA,MAAKA,sBAGTtB,EAAAA,UAAAA,eAAPA,WACIuB,MAAIA,MAAKA,kBACEA,KAAKA,QAAQA,OADxBA,QAIGvB,EAAAA,UAAAA,iBAAPA,SAAwBA,GACpBwB,MAAIA,MAAKA,kBACEA,KAAKA,QAAQA,GAAaA,QADrCA,QAIGxB,EAAAA,UAAAA,gBAAPA,SAAuBA,GACnByB,MAAIA,MAAKA,kBACEA,KAAKA,SAASA,YAAYA,OAAOA,GAD5CA,QAIGzB,EAAAA,UAAAA,iBAAPA,WACI0B,MAAIA,MAAKA,kBACEA,KAAKA,SAASA,YAAYA,OADrCA,QAIG1B,EAAAA,UAAAA,wBAAPA,WACI2B,MAAIA,MAAKA,kBACEA,KAAKA,SAASA,YAAYA,OAAOA,OAD5CA,QAIG3B,EAAAA,UAAAA,0BAAPA,WACI4B,MAAIA,MAAKA,kBACEA,KAAKA,SAASA,YAAYA,OAAOA,eAD5CA,QAIG5B,EAAAA,UAAAA,cAAPA,SAAqBA,GACjB6B,MAAIA,MAAKA,kBACEA,KAAKA,QAAQA,GAAaA,KADrCA,QAIG7B,EAAAA,UAAAA,qBAAPA,WACI8B,MAAIA,MAAKA,mBAAqBA,KAAKA,qBACxBA,KAAKA,SAASA,YAAYA,OAAOA,OAAOA,YADnDA,QAGR9B,MArQWvK,EAAAA,EAAAA,OAAAA,EAAAA,WAARA,UAAAA,YCAP,IAAOA,UAAP,SAAOA,GAAQA,GAAAA,IAAAA,SAAAA,GACXC,GAGcA,GAHPA,EAAgBA,EAAAA,UAAUA,eAGjCA,SAAcA,GAcVqM,QAAAA,GAA+BA,EAAoBA,EAAiCA,EAAgDA,EAAoCA,GAKpKC,GAAIA,GAASA,EACTA,EAA2CA,EAASA,WAExDA,IAAIA,EAAqBA,CACrBA,GAAIA,GAA6CA,EAA0CA,EAAqBA,EAASA,SAAUA,EAAcA,EAASA,EAE1JA,IAAIA,EAAqBA,CACrBA,GAAIA,GAAoCA,EAAgCA,EAAoBA,EAAoBA,SAAUA,EAAoBA,WAC1IA,GAAkCA,QAAUA,IAC5CA,EAASA,EAAmBA,EAAUA,EAAoBA,SAAUA,KAKhFA,MAAOA,GAUXD,QAAAA,GAAmDA,EAA0CA,EAA4BA,EAAqCA,EAAoCA,GAI9LE,GAAIA,GAKAA,EAAgCA,EAAAA,wBAAwBA,2BAA2BA,EAASA,GAC5FA,EAAcA,EAAAA,wBAAwBA,uBAAuBA,EAASA,GACtEA,EAAeA,EAAAA,iBAAiBA,uBAAuBA,EAAaA,EAAkBA,GAAWA,kBAEjGA,EAA8CA,GAAwCA,IAAxBA,EAAaA,QAAkBA,EAAaA,GAAGA,YAAeA,EAAaA,GAAKA,MAClJA,IAAIA,EAA2BA,CAC3BA,GAAIA,GAAiCA,EAAwBA,EAA0BA,YAKvFA,IAAIA,GAAwDA,IAAhCA,EAAqBA,OAAcA,CAC3DA,GAAIA,GAAiBA,EAAqBA,GAEtCA,GACCA,EAAEA,QAAQA,EAA0BA,aACrCA,EAAEA,MAAMA,EAA0BA,WAAYA,SAAAA,GAAaA,MAAAA,GAAUA,IAAqDA,IAAlCA,EAAUA,GAAgBA,KAEtHA,IAAIA,EAAuCA,CACvCA,GAAIA,GAAoDA,EAAEA,OACtDA,EAAoBA,WACpBA,SAACA,GAA2CA,MAAAA,GAAeA,OAAOA,SAAWA,EAAeA,OAAOA,MAAMA,KAIzGA,EAAgCA,EAAEA,MAClCA,EACAA,SAACA,GAA2CA,MAAAA,GAAeA,OAAOA,SAAWA,EAAwBA,GAAGA,OAAOA,QAG/GA,IACAA,EAAwBA,QAAUA,IAClCA,GACIA,SAAUA,EACVA,WAAYA,MAOhCA,MAAOA,GAOXF,QAAAA,GAAiCA,GAG7BG,GAAIA,KASJA,OARAA,GAAAA,gBAAgBA,2BACZA,EAAuBA,YAEnBA,UAAWA,SAACA,GACRA,EAAUA,KAAKA,MAIpBA,EAGXH,QAAAA,GAA4BA,EAAoBA,EAAkBA,GAK9DI,GAAIA,GAA+BA,EAAkBA,GAEjDA,EAAqDA,EAAiCA,EAAUA,GAChGA,EAAsBA,EAAcA,EACxCA,GAAcA,EAAqBA,EAEnCA,IAAIA,GAAqDA,EACrDA,EACAA,EACAA,GAEAA,EAA2CA,EAASA,YAEpDA,EAA6DA,EAAEA,WAAWA,EAAoBA,WAAYA,EAC9GA,GAAiCA,KAAKA,EAEtCA,IAAIA,GAA8CA,EAAcA,EAIhEA,OAHAA,GAAuBA,WAAaA,EACpCA,EAAoBA,YAAcA,EAE3BA,EAGXJ,QAAAA,GAA2BA,GAMvBK,IAA2BA,GAHvBA,MAGuBA,EAAAA,EAAtBA,EAAAA,EAAAA,OAAAA,IACDA,IAAKA,GADAA,GAAkBA,EAAiCA,GAC/CA,EAAIA,EAAGA,EAAMA,EAAeA,OAAOA,OAAYA,EAAJA,EAASA,IAAKA,CAI9DA,GAAIA,GAAgBA,EAAeA,QAAUA,EAAeA,OAAOA,EACnEA,GAAmBA,GAAgCA,SAA1BA,EAAmBA,GAAqBA,EAAgBA,GAAOA,EAAgBA,IAAMA,EAAmBA,GAIzIA,MAAOA,GAMXL,QAAAA,GAAyCA,EAAgDA,EAAkBA,GAKvGM,GAAIA,EAEJA,IAAIA,EAAoBA,CAGpBA,IAAmBA,GADfA,MACeA,EAAAA,EAAdA,EAAAA,EAAAA,OAAAA,IAAsBA,CAAtBA,GAAIA,GAAUA,EAAOA,EAClBA,GAAOA,OAAOA,MAAMA,KAEpBA,EAAeA,EAAOA,OAAOA,OAASA,GAI9CA,GAAIA,GAA8CA,EAAmBA,EAErEA,GAA8BA,EAAEA,MAAMA,GACjCA,IAAIA,SAAAA,GAAeA,MAAAA,GAAeA,KAClCA,OAAOA,SAACA,GAAsCA,QAAEA,IAChDA,YAILA,GAA8BA,EAAEA,OAAOA,EAASA,SAAAA,GAAUA,MAAAA,GAAOA,OAAOA,MAAMA,IAGlFA,OAAOA,GAMXN,QAAAA,GAA0CA,EAAkBA,GAcxDO,IAA2BA,GAVvBA,GAEAA,EAA6BA,EAAEA,KAAKA,GAMpCA,EAA+BA,EAA2BA,OAAOA,UAE1CA,EAAAA,EAAtBA,EAAAA,EAAAA,OAAAA,IAAwDA,CAAxDA,GAAIA,GAAkBA,EAAiCA,GACpDA,EAAuCA,EAAeA,MAE1DA,GAAsDA,MAA3BA,EAAmCA,EAAaA,YAAeA,EAAaA,YAAcA,IAAMA,EAEvHA,IAAwBA,EAAaA,YACrCA,EAAsBA,QAI9BA,GAAIA,KACJA,GAASA,IAAYA,CAErBA,IAAIA,IACAA,YAAaA,EACbA,MAAOA,EACPA,KAAMA,EAAAA,UAAUA,6BAA6BA,EAAAA,cAAcA,MAY/DA,OAT4BA,UAAxBA,IACAA,EAAkBA,UAAYA,GAMlCA,EAAkBA,UAAYA,EAA2BA,OAAOA,UAEzDA,EAGXP,QAAAA,GAAuBA,EAA+BA,GAIlDQ,GAAIA,GAAqBA,EAAcA,EAAoBA,SAASA,QACpEA,GAAmBA,KAAKA,EAExBA,IAAIA,GAAsBA,EAAcA,EAAoBA,SAC5DA,GAAoBA,QAAUA,EAE9BA,EAAoBA,SAAWA,EAGnCR,QAAAA,GACIA,EACAA,EACAA,GAGAS,GAAIA,IACAA,OAAQA,EACRA,OAAQA,GAKRA,EAAcA,EAAwCA,EAa1DA,OAXIA,GAAYA,WACZA,EAAkBA,SAAWA,EAAYA,UAGzCA,EAAYA,iBACZA,EAAkBA,eAAiBA,EAAYA,gBAM5CA,EA9QKT,EAAAA,eAAcA,GAdpBrM,EAAAA,EAAAA,wCAAAA,EAAAA,4CAJHD,EAAAA,EAAAA,OAAAA,EAAAA,WAARA,UAAAA,YCAP,IAAOA,UAAP,SAAOA,GAWHA,GAAcA,IAAdA,SAAcA,GACVgN,QAAAA,GAA6BA,EAA0BA,GAInDC,GAAIA,GAAcA,EAAQA,WACtBA,IACAA,EAAiBA,EAAaA,EAElCA,IAAIA,GAAQA,EAAQA,KAChBA,IACAA,EAAWA,EAAOA,EAEtBA,IAAIA,GAASA,EAAQA,MACjBA,IACAA,EAAYA,EAAQA,EAExBA,IAAIA,GAAOA,EAAQA,IACfA,IACAA,EAAUA,EAAMA,EAEpBA,IAAIA,GAASA,EAAQA,MACjBA,IACAA,EAAYA,EAAQA,GAG5BD,QAAAA,GAAiCA,EAAqCA,GAIlEE,EAA2BA,EAAQA,WAAYA,EAE/CA,IAAIA,GAASA,EAAQA,MACrBA,GAAuBA,EAAQA,GAC/BA,EAAyCA,EAAQA,GAGrDF,QAAAA,GAA2CA,EAAkFA,GAIrHG,IACAA,EAAmCA,EAASA,GAC5CA,EAAiCA,EAASA,GAC1CA,EAAmCA,EAASA,GAE5CA,EAAeA,EAASA,IAIhCH,QAAAA,GAAuCA,EAAqFA,GAIxHI,GAAIA,EAASA,CACTA,EAAmCA,EAASA,EAASA,GACrDA,EAAiCA,EAASA,EAASA,GACnDA,EAAmCA,EAASA,EAASA,EAErDA,IAAIA,GAAqCA,EAASA,KAClDA,IAAIA,EACAA,IAAiBA,GAAAA,GAAAA,EAAAA,EAAAA,EAAMA,OAAlBA,EAAAA,EAAAA,OAAAA,IAAyBA,CAAzBA,GAAIA,GAAIA,EAAAA,EACTA,GAAmCA,EAAMA,EAASA,GAClDA,EAAiCA,EAAMA,EAASA,KAMhEJ,QAAAA,GAA2BA,EAA+BA,GAItDK,GAAIA,GAAOA,EAAQA,IACnBA,GAAmCA,EAAMA,GACzCA,EAAiCA,EAAMA,GACvCA,EAAmCA,EAAMA,GAEzCA,EAAeA,EAAMA,GAGzBL,QAAAA,GAAqBA,EAAgCA,GAIjDM,EAAiBA,EAAQA,KAAMA,GAC/BA,EAAiBA,EAAQA,QAASA,GAClCA,EAAiBA,EAAQA,OAAQA,GAGrCN,QAAAA,GAAiCA,EAAqFA,GAI9GO,IACAA,EAAiCA,EAASA,GAC1CA,EAAmCA,EAASA,GAE5CA,EAAeA,EAASA,IAIhCP,QAAAA,GAAmBA,EAA8BA,GAI7CQ,EAAeA,EAAQA,MAAOA,GAC9BA,EAAgBA,EAAQA,OAAQA,GAGpCR,QAAAA,GAA+BA,EAA8CA,GAIrES,IACAA,EAASA,EAASA,GAElBA,EAAeA,EAASA,IAIhCT,QAAAA,GAAgCA,EAAiCA,GAIzDU,GACAA,EAASA,EAASA,GAI1BV,QAAAA,GAAmBA,EAAkCA,EAAkCA,GAInFW,GAAIA,GAAOA,EAAQA,IACfA,KACeA,MAAXA,EACAA,EAAQA,UAAUA,EAAKA,GAAIA,GAE3BA,EAAQA,UAAUA,EAAKA,KAInCX,QAAAA,GAAkBA,EAAiCA,EAAkCA,GAIjFY,GAAIA,GAAWA,EAAAA,MACXA,KACeA,MAAXA,EACAA,EAAQA,UAAUA,EAAAA,MAAaA,GAE/BA,EAAQA,UAAUA,EAAAA,QAI9BZ,QAAAA,GAAmBA,EAAkCA,EAAkCA,GAInFa,GAAIA,GAASA,EAAQA,MACrBA,IAAIA,EACAA,IAAiBA,GAAAA,GAAAA,EAAZA,EAAAA,EAAAA,OAAAA,IAAmBA,CAAnBA,GAAIA,GAAQA,EAAMA,EACnBA,GAAmCA,EAAMA,EAASA,GAClDA,EAAiCA,EAAMA,EAASA,IAK5Db,QAAAA,GAA6BA,EAAqCA,GAI9Dc,GAAKA,EAALA,CAGAA,GAAIA,GAAQA,EAAQA,KAChBA,KACAA,EAAQA,UAAUA,EAAMA,IAExBA,EAAeA,EAAOA,KAI9Bd,QAAAA,GAAwBA,EAAgCA,GAIpDe,GAAIA,EAAQA,eAAgBA,CACxBA,GAAIA,GAAqBA,EAAQA,sBAC7BA,IACAA,EAAQA,eAAeA,IAKnCf,QAAAA,GAAqBA,EAAgCA,GAIjDgB,EAAQA,UAAUA,EAAQA,MAvMdhB,EAAAA,aAAYA,EAyBZA,EAAAA,iBAAgBA,EAWhBA,EAAAA,2BAA0BA,EAa1BA,EAAAA,uBAAsBA,EAmBtBA,EAAAA,WAAUA,EAqBVA,EAAAA,iBAAgBA,EAoBhBA,EAAAA,eAAcA,EAWdA,EAAAA,gBAAeA,EAgDfA,EAAAA,aAAYA,GAzKlBhN,EAAAA,EAAAA,kBAAAA,EAAAA,sBAXXA,UAAAA,YCAP,IAAOA,UAAP,SAAOA,GAAQA,GAAAA,IAAAA,SAAAA,GACXC,GAmCcA,GAnCPA,EAAgBA,EAAAA,UAAUA,eAmCjCA,SAAcA,GACVgO,QAAAA,GAAsBA,GAGlBC,GAAIA,GAAmBA,EAAEA,OAAOA,EAAQA,UAAWA,SAAAA,GAAQA,OAACA,EAAEA,QAAQA,EAAKA,gBAE3EA,GAAsBA,EAAQA,SAAUA,EAAQA,iBAAkBA,GAGtED,QAAAA,GAAsCA,EAAoBA,EAAqCA,GAK3FE,IAAIA,EAAEA,QAAQA,KAAqBA,EAAEA,QAAQA,GAA7CA,CAOAA,IAA4BA,GAJxBA,GAAeA,EAA6BA,EAASA,SAASA,QAASA,GACvEA,EAAcA,EAAoBA,EAASA,SAASA,QAASA,GAE7DA,KACwBA,EAAAA,EAAvBA,EAAAA,EAAAA,OAAAA,IAAwCA,CAAxCA,GAAIA,GAAmBA,EAAgBA,EAExCA,KAAKA,GAAIA,KAAuBA,GACSA,MAAjCA,EAASA,KACTA,EAAaA,IAAuBA,GAI5CA,EAA0BA,aAC1BA,EAAiCA,EAASA,YAAaA,EAAcA,GACrEA,EAAoBA,OACpBA,EAA2BA,EAASA,MAAOA,EAAcA,GACzDA,EAAmBA,MACnBA,EAA8BA,EAASA,KAAKA,KAAMA,EAAcA,GAChEA,EAAqBA,QACrBA,EAA4BA,EAASA,OAAQA,EAAcA,GAC3DA,EAAqBA,QACrBA,EAA4BA,EAAUA,EAAkBA,EAAkBA,IAGlFF,QAAAA,GAA6CA,EAAmCA,GAC5EG,IAAKA,IAAYA,EACbA,MAAOA,YAAMA,OAAAA,EAGjBA,KAAmBA,GADfA,MACeA,EAAAA,EAAdA,EAAAA,EAAAA,OAAAA,IAAsBA,CAAtBA,GAAIA,GAAUA,EAAOA,GAClBA,EAAQA,EAAOA,KACnBA,IAAKA,EAELA,IAAiBA,GAAAA,GAAAA,EAAZA,EAAAA,EAAAA,OAAAA,IAA6BA,CAA7BA,GAAIA,GAAQA,EAAgBA,EAC7BA,IAAKA,EAAMA,EAAKA,MAAhBA,CAEAA,EAAmBA,EAAOA,QAASA,CACnCA,SAIRA,MAAOA,UAACA,GACJA,MAAIA,OAAMA,IACCA,IAEFA,EAAmBA,IAIpCH,QAAAA,GAAoCA,EAAmCA,GACnEI,IAAKA,IAAYA,EACbA,MAAOA,YAAMA,OAAAA,EAKjBA,KAAmBA,GAHfA,MAGeA,EAAAA,EAAdA,EAAAA,EAAAA,OAAAA,IAAsBA,CAAtBA,GAAIA,GAAUA,EAAOA,GAClBA,EAAoBA,EAA0BA,EAAQA,EAEtDA,KACAA,EAAmBA,EAAOA,OAASA;CAG3CA,MAAOA,UAAeA,EAAqBA,GACvCA,MAAIA,GAAmBA,GACZA,EAAmBA,GAAaA,IAEpCA,GAIfJ,QAAAA,GAAmCA,EAAgCA,GAC/DK,GAAIA,GAAgBA,EAAuBA,EAAQA,EAEnDA,KAAIA,EAAEA,QAAQA,GAGdA,MAAOA,UAACA,GACJA,MAAOA,GAAoBA,EAAOA,IAI1CL,QAAAA,GAAuCA,EAAgCA,GACnEM,GAAIA,MACAA,EAAcA,GAAUA,EAAOA,KAEnCA,KAAKA,EACDA,MAAOA,EAEXA,KAAiBA,GAAAA,GAAAA,EAAZA,EAAAA,EAAAA,OAAAA,IAA6BA,CAA7BA,GAAIA,GAAQA,EAAgBA,EAC7BA,IAAKA,EAAYA,EAAKA,MAEtBA,IAA2BA,GAAAA,GAAAA,EAAAA,EAAAA,EAAKA,cAA3BA,EAAAA,EAAAA,OAAAA,IAAyCA,CAAzCA,GAAIA,GAAcA,EAAAA,GACfA,EAAOA,EAAAA,UAAUA,eAAeA,EACpCA,GAAcA,KAAKA,IAI3BA,MAAOA,GAGXN,QAAAA,GAA0CA,EAA+BA,EAAqCA,GAC1GO,GAAIA,GAASA,GAAYA,EAASA,MAClCA,IAAKA,EAALA,CAGAA,GAAIA,GAAgBA,EAAOA,SAC3BA,IAAKA,EAGLA,IAAuBA,GAAAA,GAAAA,EAAlBA,EAAAA,EAAAA,OAAAA,IAEDA,IAAwBA,GAFnBA,GAAcA,EAAaA,GAC5BA,EAAgBA,EAAWA,OACPA,EAAAA,EAAnBA,EAAAA,EAAAA,OAAAA,IAAiCA,CAAjCA,GAAIA,GAAeA,EAAaA,GAC7BA,EAAcA,EAAYA,OAAOA,KACrCA,IAAKA,EAAaA,GAGlBA,IAAKA,GAAIA,GAAIA,EAAGA,EAAOA,EAAYA,OAAOA,OAAYA,EAAJA,EAAUA,IACxDA,EAAYA,OAASA,EAAiBA,EAAYA,OAAQA,EAAGA,EAAaA,KAM1FP,QAAAA,GAAoCA,EAAyBA,EAAqCA,GAC9FQ,GAAIA,GAAUA,GAAYA,EAASA,OAEnCA,IAAKA,EAALA,CAIAA,IAAmBA,GADfA,MACeA,EAAAA,EAAdA,EAAAA,EAAAA,OAAAA,IAAsBA,CAAtBA,GAAIA,GAAUA,EAAOA,EAClBA,GAAaA,EAAOA,QACpBA,EAAgBA,KAAKA,EAAOA,OAIpCA,IAAKA,GADDA,GAAOA,EAASA,KACXA,EAAIA,EAAGA,EAAOA,EAAKA,OAAYA,EAAJA,EAAUA,IAC1CA,IAAkBA,GAAAA,GAAAA,EAAbA,EAAAA,EAAAA,OAAAA,IAA6BA,CAA7BA,GAAIA,GAASA,EAAeA,EAC7BA,GAAKA,GAAKA,EAAiBA,EAAKA,GAAIA,EAAOA,EAAOA,KAK9DR,QAAAA,GAAuCA,EAAwBA,EAAqCA,GAChGS,GAAIA,EAAKA,OACLA,IAAKA,GAAIA,KAAeA,GAAKA,OAErBA,EAAaA,KAE6BA,gBAA9BA,GAAKA,OAAOA,IAA+BA,SAAWA,GAAKA,OAAOA,GAC1EA,EAAKA,OAAOA,GAAeA,EAAiBA,EAAKA,OAAOA,GAAcA,QAASA,EAAaA,GAE5FA,EAAKA,OAASA,EAAiBA,EAAKA,OAAQA,EAAaA,EAAaA,QAIjFA,IAAIA,EAAKA,SACVA,IAAkBA,GAAAA,GAAAA,EAAAA,EAAAA,EAAKA,SAAlBA,EAAAA,EAAAA,OAAAA,IAA2BA,CAA3BA,GAAIA,GAAKA,EAAAA,EACVA,GAA8BA,EAAOA,EAAcA,IAK/DT,QAAAA,GAAqCA,EAA0BA,EAAqCA,GAChGU,GAAIA,GAAOA,GAAYA,EAASA,MAAQA,EAASA,KAAKA,IAEjDA,IAKLA,EAAqCA,EAAUA,EAAMA,EAAcA,GAGvEV,QAAAA,GAA8CA,EAAgCA,EAAwBA,EAAqCA,GACvIW,GAAIA,EAAKA,OACLA,IAAKA,GAAIA,KAAMA,GAAKA,OAAQA,CAExBA,GAAIA,GAAqCA,EAAKA,OAAOA,GAGjDA,EAA2BA,EAAUA,kBAAoBA,EAGzDA,EAAcA,EAAeA,aAAaA,GAAkBA,KAE5DA,GAAEA,SAASA,IAAgBA,EAAaA,KACxCA,EAAKA,OAAOA,GAAMA,EAAiBA,EAAWA,QAASA,EAAaA,QAI3EA,IAAIA,EAAKA,SACVA,IAAkBA,GAAAA,GAAAA,EAAAA,EAAAA,EAAKA,SAAlBA,EAAAA,EAAAA,OAAAA,IAA2BA,CAA3BA,GAAIA,GAAKA,EAAAA,EACVA,GAAqCA,EAAgBA,EAAOA,EAAcA,IAKtFX,QAAAA,GAAqCA,EAAoBA,EAAqCA,EAAoCA,GAC9HY,GAAKA,EAASA,OAAdA,CAIAA,IAAiBA,GADbA,MACaA,EAAAA,EAAZA,EAAAA,EAAAA,OAAAA,IAA6BA,CAA7BA,GAAIA,GAAQA,EAAgBA,EACzBA,GAAKA,MACLA,EAAUA,KAAKA,EAAKA,MAI5BA,IAA4BA,GADxBA,GAAUA,EAASA,SAASA,QACJA,EAAAA,EAAvBA,EAAAA,EAAAA,OAAAA,IAAwCA,CAAxCA,GAAIA,GAAmBA,EAAgBA,GACpCA,EAAWA,EAAgBA,OAAOA,IACtCA,IAAoCA,KAAhCA,EAAUA,QAAQA,GAAkBA,CACpCA,GAAIA,GAASA,EAAsBA,EAASA,EAG5CA,aAFIA,IACAA,EAASA,OAASA,EAAiBA,EAASA,OAAQA,QAASA,EAAOA,MAAOA,QAM3FZ,QAAAA,GAAoCA,EAAWA,EAAoBA,EAAqBA,GACpFa,GAAKA,EAALA,CAGAA,GAAIA,GAAQA,EAAOA,EAMnBA,OALcA,QAAVA,GAAmBA,EAAYA,EAAaA,KAC5CA,EAASA,EAAcA,GACvBA,EAAOA,GAAOA,MAGXA,GAGXb,QAAAA,GAAgCA,EAAUA,GACtCc,IAAiBA,GAAAA,GAAAA,EAAZA,EAAAA,EAAAA,OAAAA,IAAkBA,CAAlBA,GAAIA,GAAQA,EAAKA,EAClBA,IAAIA,EAAKA,SAAWA,EAAKA,QACrBA,MAA0BA,gBAAZA,GAGtBA,OAAOA,EAGXd,QAAAA,GAA+BA,EAAmCA,GAC9De,IAAmBA,GAAAA,GAAAA,EAAdA,EAAAA,EAAAA,OAAAA,IAAsBA,CAAtBA,GAAIA,GAAUA,EAAOA,GAClBA,EAAcA,GAAUA,EAAOA,KACnCA,IAAIA,GAAeA,EAAYA,GAC3BA,MAAOA,IAvQHf,EAAAA,MAAKA,EAQLA,EAAAA,sBAAqBA,EAgCrBA,EAAAA,6BAA4BA,EAyB5BA,EAAAA,oBAAmBA,EAiCnBA,EAAAA,uBAAsBA,EA2ItBA,EAAAA,iBAAgBA,GA9OtBhO,EAAAA,EAAAA,0BAAAA,EAAAA,8BApCHD,EAAAA,EAAAA,OAAAA,EAAAA,WAARA,UAAAA,YCAP,IAAOA,UAAP,SAAOA,GAEHA,GAAcA,IAAdA,SAAcA,GAEViP,QAAAA,GAA4BA,EAA0BA,EAA8CA,GAIhGC,IAAKA,EACDA,MAAOA,EAEXA,IAAIA,GAAcA,EAAQA,EAAWA,YAGjCA,EAAyBA,CAC7BA,OAAOA,GAAeA,SAASA,EAAQA,EAAWA,aAAcA,GAIpED,QAAAA,GAA0BA,EAA0BA,EAAoBA,GACpEE,GAAIA,GAAWA,EAAQA,GAAaA,CAChCA,GAAIA,GAAyBA,EAAQA,EAErCA,OAAOA,GAGPA,MAAOA,GAKfF,QAAAA,GAAsCA,EAA0BA,GAC5DG,GAAIA,GAAWA,EAAQA,GAAaA,CAChCA,GAAIA,GAAyBA,EAAQA,EAErCA,OAAOA,IAKfH,QAAAA,GAA6BA,EAA0BA,EAA8CA,GACjGI,GAAIA,GAAcA,EAASA,EAASA,EACpCA,OAAKA,IAAUA,EAAMA,MAGdA,EAAMA,MAAMA,MAFRA,EAMfJ,QAAAA,GAA8BA,GAC1BK,MAAOA,GAAEA,QAAQA,GA9CLL,EAAAA,SAAQA,EAeRA,EAAAA,UAASA,EAYTA,EAAAA,sBAAqBA,EASrBA,EAAAA,aAAYA,EASZA,EAAAA,cAAaA,GA/CnBjP,EAAAA,EAAAA,kBAAAA,EAAAA,oBAoDdA,IAAcA,IAAdA,SAAcA,GACVuP,QAAAA,GAA4BA,EAAwBA,EAAsBA,GAItEC,IAAKA,EACDA,MAAOA,EAEXA,IAAIA,GAAmBA,EAAOA,EAC9BA,OAAsBA,UAAlBA,EACOA,EAEJA,EAIXD,QAAAA,GAA2CA,EAA0BA,EAAsBA,GACvFE,GAAIA,GAAcA,EAAeA,SAASA,EAASA,EACnDA,OAAKA,IAAUA,EAAMA,MAGdA,EAAMA,MAAMA,MAFRA,EAlBCF,EAAAA,SAAQA,EAeRA,EAAAA,2BAA0BA,GAhBhCvP,EAAAA,EAAAA,iBAAAA,EAAAA,qBAtDXA,UAAAA,YCAP,IAAOA,UAAP,SAAOA,GAAQA,GAAAA,IAAAA,SAAAA,GACXC,GAkBcA,GAlBPA,EAAeA,SAASA,cAkB/BA,SAAcA,GAGVyP,QAAAA,GACIA,EACAA,EACAA,GAGAC,GAAIA,GAAiBA,EAAMA,EACtBA,KACDA,EAAMA,GAAcA,KAExBA,KAAKA,GAAIA,GAAIA,EAAGA,EAAMA,EAAeA,OAAYA,EAAJA,EAASA,IAAKA,CACvDA,GAAIA,GAAOA,EAAeA,EAC1BA,IAAIA,EAAAA,SAASA,OAAOA,EAAKA,SAAUA,GAC/BA,MAAOA,GAGfA,GAAIA,IACAA,SAAUA,EACVA,cAIJA,OAFAA,GAAeA,KAAKA,GAEbA,EAGXD,QAAAA,GACIA,EACAA,EACAA,EACAA,GAGAE,GAAIA,GAAOA,EAAoBA,EAAOA,EAAYA,EAC7CA,IAGLA,EAAyBA,qBAAqBA,EAAMA,GAGxDF,QAAAA,GACIA,EACAA,EACAA,EACAA,GAIAG,EAAOA,EAAOA,EAAWA,WAAYA,GAAUA,WAAWA,EAAWA,cAAgBA,EAGzFH,QAAAA,GACIA,EACAA,EACAA,GAEAI,GAAIA,GAAaA,EAAqBA,EAAOA,EAAYA,EACzDA,IAAKA,EAGLA,MAAOA,GAAWA,EAAWA,cAGjCJ,QAAAA,GACIA,EACAA,EACAA,GAEAK,GAAIA,GAAOA,EAAoBA,EAAOA,EAAWA,WAAYA,EAC7DA,IAAKA,EAGLA,MAAOA,GAAKA,WAGhBL,QAAAA,GACIA,EACAA,EACAA,GAKAM,GAAKA,EAALA,CAGAA,GAAIA,GAAiBA,EAAMA,EAC3BA,IAAKA,EAGLA,IAAKA,GAAIA,GAAIA,EAAGA,EAAMA,EAAeA,OAAYA,EAAJA,EAASA,IAAKA,CACvDA,GAAIA,GAAOA,EAAeA,EAC1BA,IAAIA,EAAAA,SAASA,OAAOA,EAAKA,SAAUA,GAC/BA,MAAOA,KAInBN,QAAAA,GAAmCA,EAAqCA,GACpEO,MAAIA,aAAaA,GAAAA,gBAAkBA,YAAaA,GAAAA,eACrCA,EAAAA,eAAeA,aAA6BA,EAAmBA,GAGnEA,EAAaA,OAAOA,EAAGA,GAGlCP,QAAAA,GAAsCA,EAAsCA,GAIxEQ,GAAIA,OAAOA,KAAKA,GAAGA,SAAWA,OAAOA,KAAKA,GAAGA,OACzCA,OAAOA,CAEXA,KAAKA,GAAIA,KAAYA,GACjBA,IAAKA,EAAmBA,EAAEA,GAAWA,EAAEA,IACnCA,OAAOA,CAGfA,QAAOA,EAGXR,QAAAA,GAAoCA,EAA8BA,GAI9DS,GAAIA,EAAoBA,KAIpBA,MAHuBA,iBAAZA,KACPA,GAAQA,GAELA,EAAAA,cAAAA,WAA+BA,EAErCA,IAAIA,EAAoBA,MAASA,EAAoBA,WAAaA,EAAoBA,UAAUA,OACjGA,MAAOA,GAAAA,cAAcA,KAAaA,EAEjCA,IAAIA,EAAoBA,SACzBA,GAAIA,EAAEA,UAAUA,GACZA,MAAOA,GAAAA,cAAAA,WAAsBA,OAEhCA,IAA+BA,EAAqBA,MACrDA,GAAIA,EACAA,OACIA,OAASA,MAAOA,EAAAA,cAAcA,KAAaA,SAIlDA,CAAAA,GAAIA,EAAoBA,WACzBA,MAAIA,GAAoBA,WAAWA,kBACxBA,EAAAA,cAAAA,WAAsBA,GAGtBA,EAAAA,cAAcA,KAAaA,EAGrCA,IAAIA,EAAoBA,YACzBA,MAAIA,GAAEA,UAAUA,GACLA,EAAAA,cAAAA,WAAsBA,GAEtBA,EAAAA,cAAcA,KAAaA,EAErCA,IAAIA,EAAoBA,KAErBA,EADAA,EACQA,EAAAA,cAAcA,KAAaA,GAE3BA,SAGXA,IAA+BA,EAAqBA,OACjDA,EAAOA,CACPA,GAAIA,GAAyBA,EACzBA,GACAA,KAAMA,EAAAA,cAAcA,KAAKA,EAAWA,MACpCA,IAAKA,EAAAA,cAAcA,KAAKA,EAAWA,KAMvCA,OAHIA,GAAWA,UACXA,EAAgBA,QAAUA,EAAAA,cAAcA,KAAKA,EAAWA,UAErDA,GAIfA,MAAOA,GAGXT,QAAAA,GAAsBA,GAGlBU,GAAIA,KAEJA,KAAKA,GAAIA,KAAcA,GAAUA,CAC7BA,GAAIA,GAAgBA,EAASA,EAC7BA,KAAIA,EAAEA,QAAQA,GAAdA,CAIAA,IAAyBA,GADrBA,MACqBA,EAAAA,EAApBA,EAAAA,EAAAA,OAAAA,IAAkCA,CAAlCA,GAAIA,GAAgBA,EAAaA,EAClCA,GAAYA,MACRA,WAAYA,EAAgBA,EAAaA,YACzCA,SAAUA,EAAaA,WAG/BA,EAAOA,GAAcA,GAGzBA,MAAOA,GAGXV,QAAAA,GAAyBA,GAIrBW,MAAOA,GAAEA,MAAMA,GAjNHX,EAAAA,OAAMA,EAyBNA,EAAAA,eAAcA,EAcdA,EAAAA,SAAQA,EAWRA,EAAAA,SAAQA,EAYRA,EAAAA,qBAAoBA,EAYpBA,EAAAA,oBAAmBA,EAsBnBA,EAAAA,mBAAkBA,EAQlBA,EAAAA,sBAAqBA,EAerBA,EAAAA,oBAAmBA,EA+DnBA,EAAAA,MAAKA,GAzLXzP,EAAAA,EAAAA,4BAAAA,EAAAA,8BAwNdA,IAAcA,IAAdA,SAAcA,GAEVqQ,QAAAA,GACIA,EACAA,SAGOC,GAAKA,WAAWA,GALXD,EAAAA,qBAAoBA,GAF1BrQ,EAAAA,EAAAA,2BAAAA,EAAAA,+BA3OHD,EAAAA,EAAAA,OAAAA,EAAAA,WAARA,UAAAA,YCAP,IAAOA,UAAP,SAAOA,GAAQA,GAAAA,IAAAA,SAAAA,GAEXC,GAAcA,IAAdA,SAAcA,GAEVuQ,QAAAA,GAAiCA,GAC7BC,MAAOA,GACHA,EACAA,SAACA,GACGA,GAAIA,GAAqBA,EAAAA,UAAUA,eAAeA,EAASA,MAAMA,UACjEA,OAAOA,IAAsBA,EAAmBA,eAK5DD,QAAAA,GAAiCA,GAC7BE,MAAOA,GACHA,EACAA,SAACA,GACGA,GAAIA,GAAqCA,EAASA,IAClDA,OAAOA,MAAcA,EAASA,SAK1CF,QAAAA,GAAiCA,GAC7BG,MAAOA,GACHA,EACAA,SAACA,GACGA,GAAIA,GAAqCA,EAASA,IAClDA,OAAOA,MAAcA,EAASA,YAAcA,EAASA,WAAWA,eAI5EH,QAAAA,GAAsBA,EAAwCA,GAI1DI,GAAKA,EAGLA,IAAKA,GAAIA,KAAcA,GAAaA,CAChCA,GAAIA,GAAeA,EAAYA,GAAYA,UAE3CA,KAAKA,GAAIA,KAAgBA,GACrBA,GAAIA,EAAcA,EAAaA,IAC3BA,OACIA,WAAYA,EACZA,aAAcA,IA3ClBJ,EAAAA,iBAAgBA,EAUhBA,EAAAA,iBAAgBA,EAUhBA,EAAAA,iBAAgBA,GAtBtBvQ,EAAAA,EAAAA,4BAAAA,EAAAA,gCAFHD,EAAAA,EAAAA,OAAAA,EAAAA,WAARA,UAAAA,YCAP,IAAOA,UAAP,SAAOA,GAAQA,GAAAA,IAAAA,SAAAA,GAsBXC,GAAcA,IAAdA,SAAcA,GACV4Q,QAAAA,GACIA,EACAA,EACAA,GAOAC,IAAKA,GAFDA,GAEKA,EAAIA,EAAGA,EAAOA,EAAYA,OAAYA,EAAJA,EAAUA,IAAKA,CACtDA,GAAIA,GAAmBA,EAAYA,GAC/BA,EAAaA,EAAiBA,KAE9BA,EAAkCA,EAAAA,wBAAwBA,IAC1DA,EACAA,EAAkBA,GAClBA,EAAiBA,WAEhBA,KAGAA,IACDA,MAGJA,EAAQA,GAAcA,GAG1BA,MAAOA,GAGXD,QAAAA,GAAuCA,GAGnCE,GAAIA,IACAA,QAGJA,IAAIA,EACAA,IAAKA,GAAIA,KAAcA,GAGnBA,IAAKA,GAFDA,GAAiBA,EAAkBA,GAE9BA,EAAIA,EAAGA,EAAMA,EAAeA,OAAYA,EAAJA,EAASA,IAAKA,CACvDA,GAAIA,GAAaA,EAAeA,EAEhCA,GAAgCA,EAASA,EAAWA,UAAUA,QAAQA,MAClEA,KAAMA,EACNA,WAAYA,EAAWA,aAMvCA,MAAOA,GAGXF,QAAAA,GAAyCA,EAAgDA,GAIrFG,IAAKA,EAGDA,MAFKA,GAAQA,eACTA,EAAQA,cAAiBA,aACtBA,EAAQA,YAGnBA,IAAIA,EACAA,GAASA,KACTA,EAAiBA,EAAQA,KAEpBA,EAASA,UACTA,EAAQA,WACTA,EAAQA,aACZA,EAAiBA,EAAQA,UAEpBA,EAASA,KACTA,EAAQA,cACTA,EAAQA,gBACZA,EAAiBA,EAAQA,YAK7BA,KAAiBA,GAAAA,GAAAA,EAAZA,EAAAA,EAAAA,OAAAA,IAA2BA,CAA3BA,GAAIA,GAAQA,EAAcA,EAC3BA,IAAIA,EAAAA,SAASA,OAAOA,EAAUA,EAAKA,UAC/BA,MAAOA,GAGfA,GAAIA,IACAA,SAAUA,EACVA,WAIJA,OAFAA,GAAeA,KAAKA,GAEbA,EAGXH,QAAAA,GACIA,EACAA,EACAA,EACAA,GAMII,IACAA,EAAuBA,EAAwBA,EAAmBA,EAASA,GAC3EA,EAAgBA,EAAwBA,EAAmBA,EAASA,IAI5EJ,QAAAA,GACIA,EACAA,EACAA,EACAA,GAMAK,GAAIA,GAAmBA,EAAAA,0BAA0BA,iBAAiBA,EAClEA,IAAKA,EAGLA,IAAKA,GAAIA,GAAYA,EAAGA,EAAYA,EAAiBA,OAAoBA,EAAZA,EAAuBA,IAAaA,CAC7FA,GAAIA,GAAkBA,EAAiBA,EAClCA,IAILA,EACIA,EACAA,EACAA,EAAgBA,UAChBA,EAAgBA,QAAUA,EAAwBA,EAASA,KAKvEL,QAAAA,GACIA,EACAA,EACAA,EACAA,GAMAM,GAAIA,GAAmBA,EAAAA,0BAA0BA,iBAAiBA,EAClEA,IAAKA,EAGLA,IAA4BA,GAAAA,GAAAA,EAAvBA,EAAAA,EAAAA,OAAAA,IAAwCA,CAAxCA,GAAIA,GAAmBA,EAAgBA,EACnCA,IAILA,EACIA,EACAA,EACAA,EAAgBA,UAChBA,EAAgBA,eAI5BN,QAAAA,GAAiCA,EAAmCA,GAChEO,IAAKA,GAAIA,GAAYA,EAAGA,EAAYA,EAAQA,OAAoBA,EAAZA,EAAuBA,IAAaA,CACpFA,GAAIA,GAASA,EAAQA,EACrBA,IAAKA,GAAUA,EAAOA,QAAUA,EAGhCA,MAAOA,GAAOA,QAItBP,QAAAA,GACIA,EACAA,EACAA,EACAA,GACKQ,GAILA,EACIA,EACAA,GACEA,SAAUA,GACZA,EAAAA,cAAcA,KAAKA,IAG3BR,QAAAA,GACIA,EACAA,EACAA,EACAA,GACKS,GAILA,EACIA,EACAA,GACEA,SAAUA,GACZA,GAGRT,QAAAA,GACIA,EACAA,EACAA,EACAA,GAEAU,GAAIA,EACJA,IAAIA,EAAUA,CACVA,GAAIA,GAAkBA,EAAuBA,QACxCA,KACDA,EAAkBA,EAAuBA,aAC7CA,EAAcA,MAEbA,CACDA,GAAIA,GAAeA,EAAuBA,YACrCA,KACDA,EAAeA,EAAuBA,cAAiBA,SAAUA,EAAUA,aAC/EA,GAAeA,GAGnBA,GACIA,GADAA,EAAuBA,EAAyBA,EAAaA,EAEjEA,IAAIA,EAAsBA,CACtBA,GAAIA,GAAoBA,EAAqBA,OAE7CA,IADAA,EAAmBA,EAAmBA,EAAmBA,EAAWA,aAEhEA,GAAIA,EAAiBA,WAAWA,EAAWA,cACvCA,WAGJA,IACIA,KAAMA,EAAWA,WACjBA,eAEJA,EAAkBA,KAAKA,OAI3BA,IACIA,KAAMA,EAAWA,WACjBA,eAGJA,EAAYA,MACRA,SAAUA,EACVA,SAAUA,IAIlBA,GAAiBA,WAAWA,EAAWA,cAAgBA,EAG3DV,QAAAA,GAAkCA,EAAiDA,GAI/EW,IAAKA,GAAIA,GAAIA,EAAGA,EAAMA,EAAQA,OAAYA,EAAJA,EAASA,IAAKA,CAChDA,GAAIA,GAASA,EAAQA,EACrBA,IAAIA,EAAAA,SAASA,OAAOA,EAAOA,SAAUA,GACjCA,MAAOA,IAInBX,QAAAA,GAA4BA,EAA8CA,GAItEY,IAAKA,GAAIA,GAAIA,EAAGA,EAAMA,EAAYA,OAAYA,EAAJA,EAASA,IAAKA,CACpDA,GAAIA,GAAaA,EAAYA,EAE7BA,IAAIA,EAAWA,OAASA,EACpBA,MAAOA,IA3RHZ,EAAAA,wBAAuBA,EAgCvBA,EAAAA,uBAAsBA,EAkEtBA,EAAAA,mBAAkBA,GAnGxB5Q,EAAAA,EAAAA,gCAAAA,EAAAA,oCAtBHD,EAAAA,EAAAA,OAAAA,EAAAA,WAARA,UAAAA,YCCP,IAAOA,UAAP,SAAOA,GAAQA,GAAAA,IAAAA,SAAAA,GAEXC,GAAcA,IAAdA,SAAcA,GAKVyR,QAAAA,GACIA,EACAA,EACAA,GAKAC,GAAKA,EAALA,CAGAA,GAAIA,GACAA,EAAsBA,EAAiBA,UAC3CA,KAAKA,GAAIA,KAAgBA,GAAqBA,CAC1CA,GAAIA,GAAqBA,EAAoBA,GACzCA,EAAqBA,EAAoBA,EAE7CA,IAAKA,EAALA,CAGAA,GAAIA,GAAgBA,EAAiBA,EAAaA,EAAoBA,EAChDA,UAAlBA,IAGCA,IACDA,MACJA,EAAOA,GAAgBA,IAG3BA,MAAOA,IAIXD,QAAAA,GACIA,EACAA,EACAA,GAKAE,GAAIA,GAA2CA,EAAmBA,IAClEA,IAAIA,GAAkBA,EAAeA,WACjCA,MAAOA,EAEXA,IAAIA,GAAQA,EAAcA,EAAkBA,EAAoBA,EAAAA,UAAUA,eAAeA,EAAmBA,MAC5GA,OAAcA,UAAVA,GAAwBA,YAA8BA,GAAAA,eAC/CA,EAEJA,EAAaA,EAA6BA,EAAoBA,IAC9DA,EAAiBA,EAAiCA,EAAoBA,IACtEA,EAAcA,EAA8BA,EAAoBA,IAChEA,EAAmBA,EAAmCA,EAAoBA,IAC1EA,EAGXF,QAAAA,GAAsBA,EAA2BA,EAA0BA,GACvEG,GAAIA,GAAWA,EAAKA,IACpBA,IAAKA,EAGLA,MAAIA,IAAYA,EAASA,OAASA,EAASA,MAAMA,OAASA,EAASA,OAE3DA,OACIA,MAAOA,EAAcA,EAAaA,EAASA,MAAMA,MAAOA,EAAAA,UAAUA,iBAAiBA,EAAAA,aAAaA,UAH5GA,OASJH,QAAAA,GAA0BA,EAA2BA,EAAkCA,GACnFI,GAAKA,EAAKA,SAAVA,CAGAA,GAAIA,EAAaA,gBAAiBA,CAC9BA,GAAIA,GAAkBA,EAAaA,eACnCA,QACIA,iBACIA,IAAKA,EAAkBA,EAAaA,EAAgBA,KACpDA,IAAKA,EAAkBA,EAAaA,EAAgBA,OAKhEA,GAAIA,EAAaA,gBAAiBA,CAC9BA,GAAIA,GAAkBA,EAAaA,eACnCA,QACIA,iBACIA,IAAKA,EAAkBA,EAAaA,EAAgBA,KACpDA,IAAKA,EAAkBA,EAAaA,EAAgBA,KACpDA,IAAKA,EAAkBA,EAAaA,EAAgBA,SAMpEJ,QAAAA,GAA2BA,EAA2BA,GAIlDK,GAAIA,IACAA,MAAOA,EAAcA,EAAaA,EAAUA,MAAOA,IAGnDA,EAAQA,EAAcA,EAAaA,EAAUA,MAAOA,EAIxDA,OAHaA,OAATA,IACAA,EAAKA,MAAQA,GAEVA,EAGXL,QAAAA,GAAuBA,EAA2BA,EAA6BA,GAK3EM,GAAKA,EAAKA,OAAUA,EAApBA,CAGAA,GAAIA,IACAA,KAAMA,EAAcA,EAAaA,EAAWA,KAAMA,GAClDA,IAAKA,EAAcA,EAAaA,EAAWA,IAAKA,EAAAA,UAAUA,eAAeA,EAAAA,gBAAgBA,UAM7FA,OAHIA,GAAWA,UACXA,EAAMA,QAAUA,EAAcA,EAAaA,EAAWA,QAASA,IAE5DA,GAGXN,QAAAA,GAA4BA,EAA2BA,EAAkCA,GAKrFO,MAAKA,GAAKA,YAAeA,EAGlBA,EAA0BA,EAAaA,EAAYA,GAH1DA,OAMJP,QAAAA,GAA2BA,EAA2BA,GAIlDQ,GAAIA,GAEAA,EAAqBA,EAAWA,SAChCA,EAA+BA,EAA0BA,EAAaA,EAAoBA,EAM9FA,OALIA,KAAuBA,IACvBA,EAAYA,EAAEA,MAAWA,GACzBA,EAAUA,SAAWA,GAGlBA,GAAwBA,EAGnCR,QAAAA,GAAyBA,EAA2BA,GAIhDS,GAAIA,GAEAA,EAAkBA,EAAWA,MAC7BA,EAAiBA,EAAcA,EAAmBA,EAAiBA,EAMvEA,OALuBA,UAAnBA,IACAA,EAAYA,EAAEA,MAAWA,GACzBA,EAAUA,MAAQA,GAGfA,GAAsBA,EAOjCT,QAAAA,GACIA,EACAA,EACAA,GAOAU,IAAKA,GAFDA,GAEKA,EAAIA,EAAGA,EAAMA,EAAYA,OAAYA,EAAJA,EAASA,IAAKA,CACpDA,GAAIA,GAAaA,EAAYA,GACzBA,EAAwBA,EAAUA,EAAaA,EAI9CA,IAAwBA,IAAeA,IACxCA,EAAkBA,EAAEA,KAAwBA,EAAaA,IAGzDA,GACAA,EAAgBA,KAAKA,GAI7BA,MAAOA,IAAsCA,EAGjDV,QAAAA,GAAuBA,EAA2BA,EAAqCA,GACnFW,MAAIA,aAAsBA,GAAAA,OACfA,EAAoBA,SAAiBA,EAAYA,GAExDA,YAAsBA,GAAAA,eACEA,EAAYA,SAASA,GADjDA,OArNJX,GAAMA,GAA4BA,EAAAA,UAAUA,gBAAiBA,YAAcA,OAAOA,KAC5EA,EAAyBA,EAAAA,UAAUA,gBAAiBA,SAASA,IAC7DA,EAAsBA,EAAAA,UAAUA,gBAAiBA,MAAMA,GAE7CA,GAAAA,IAAGA,EAiCHA,EAAAA,iBAAgBA,CAqLhCA,IAAAA,GAAAA,SAAAA,GAAAY,QAAAA,KAAkCC,EAAAA,MAAAA,KAAAA,WAyBlCD,MAzBkCA,WAAAA,EAAAA,GAGhBA,EAAAA,SAAdA,SAAuBA,EAAcA,GACjCE,MAAYA,OAARA,EAGGA,EAAKA,OAAOA,EAAoBA,SAAUA,GAHjDA,QAMGF,EAAAA,UAAAA,eAAPA,SAAsBA,EAAuBA,GACzCG,MAAOA,GAAYA,aAAaA,IAG7BH,EAAAA,UAAAA,cAAPA,SAAqBA,EAAsBA,GACvCI,MAAOA,GAAKA,OAGTJ,EAAAA,UAAAA,gBAAPA,SAAuBA,EAAwBA,GAC3CK,MAAOA,GAAYA,aAAaA,IAG7BL,EAAAA,UAAAA,UAAPA,SAAiBA,EAAyBA,GACtCM,MAAOA,GAAYA,aAAaA,IAtBrBN,EAAAA,SAAgCA,GAAIA,GAwBvDA,GAzBkCZ,EAAAA,8BA3NxBzR,EAAAA,EAAAA,0BAAAA,EAAAA,8BAFHD,EAAAA,EAAAA,OAAAA,EAAAA,WAARA,UAAAA,YCDP,IAAOA,UAAP,SAAOA,GAAQA,GAAAA,IAAAA,SAAAA,GACXC,GAEcA,GAFPA,EAAUA,EAAAA,UAAUA,SAE3BA,SAAcA,GAKV4S,QAAAA,GAAsBA,GAGlBC,GAAIA,GAAcA,EAASA,WAC3BA,KAAKA,EACDA,MAAOA,KAEXA,IAAIA,GAAaA,EAAYA,UAC7BA,KAAKA,GAAoCA,IAAtBA,EAAWA,OAC1BA,MAAOA,KAEXA,IAAIA,GAASA,EAAYA,MACzBA,IAAIA,EAAEA,QAAQA,IAAWA,EAAOA,OAC5BA,MAAOA,KAOXA,KAAKA,GALDA,GAAWA,EAAWA,GACtBA,EAAqBA,EAASA,SAC9BA,EAAiBA,EAASA,OAC1BA,KACAA,KACKA,EAASA,EAAGA,EAAWA,EAAeA,OAAiBA,EAATA,EAAmBA,IAGtEA,IAAKA,GAFDA,GAAgBA,EAAeA,GAC/BA,EAAmBA,EAAmBA,GACjCA,EAASA,EAAGA,EAAWA,EAAOA,OAAiBA,EAATA,EAAmBA,IAAUA,CACxEA,GAAIA,GAAQA,EAAOA,GACfA,EAAgBA,EAAQA,EAAMA,OAGlCA,IAAIA,EAAMA,SACNA,MAAOA,KAEXA,GAAcA,UAAYA,CAC1BA,IAAIA,IACAA,OAAQA,EACRA,QAASA,EAAMA,OAAOA,IACtBA,SAAUA,EACVA,IAAKA,EAAMA,IACXA,IAAKA,EAAMA,IACXA,SAAUA,EAAMA,UAGhBA,EAAaA,EAAMA,UACnBA,KACAA,EAAaA,YAAcA,EAAWA,KAG1CA,EAAeA,KAAKA,GACpBA,EAAcA,KAAKA,GAI3BA,GAAIA,GAAkBA,EAAQA,EAASA,SAIvCA,OAHAA,GAAgBA,QAAUA,EAE1BA,EAASA,EAAAA,kBAAkBA,mBAAmBA,EAAyBA,EAASA,eAAgBA,EAASA,SAErGA,SAAUA,EACVA,aACIA,OAAQA,GAEZA,OAAQA,EAASA,QA5DTD,EAAAA,MAAKA,GALX5S,EAAAA,EAAAA,2BAAAA,EAAAA,+BAHHD,EAAAA,EAAAA,OAAAA,EAAAA,WAARA,UAAAA,YCAP,IAAOA,UAAP,SAAOA,GAAQA,GAAAA,IAAAA,SAAAA,GACXC,GAAcA,IAAdA,SAAcA,GAEV8S,QAAAA,GAAsBA,EAAgCA,GAG7CC,EAAQA,2BACTA,EAAeA,QAAUA,EAAAA,UAAUA,QAAQA,EAAeA,SAC9DA,IAAIA,GAAUA,EAAeA,OAExBA,GAAQA,wBACTA,EAAeA,KAAOA,EAAAA,UAAUA,QAAQA,EAAeA,MAC3DA,IAAIA,GAAOA,EAAeA,IAE1BA,MAAIA,EAAQA,OAAOA,OAASA,GAA5BA,CAGAA,GAAIA,IACAA,MAAOA,GAGPA,EAAwCA,EAAQA,KAAKA,SACrDA,EAAcA,EAAgBA,MAElCA,IAAIA,EAAcA,EAAGA,CACjBA,GAAIA,GAAQA,EACRA,EAAWA,SAAUA,GAErB,GAAIC,EAAKC,OAAQ,CACRC,EAAeD,SAChBC,EAAeD,UAEnB,KAAK,GAAIE,GAAI,EAAOC,EAAJD,EAAiBA,IAC7BD,EAAeD,OAAOI,KAAWL,EAAKC,OAAOE,SAE1CH,GAAKC,OAIhB,GAAIG,EAAc,EAAG,CACjB,GAAIE,GAAQN,EAAKM,MAAQ,CACpBN,GAAKO,WACNP,EAAKO,YAET,KAAK,GAAIC,GAAI,EAAOJ,EAAJI,EAAiBA,IAAK,CAClC,GAAIC,IAA0CH,MAAOA,GAGjDI,EAAiBC,EAAgBH,EACrCC,GAAkBG,iBAAmBF,EAAeE,iBAEhDZ,EAAKa,aACLJ,EAAkBI,YAAa,GAEnCb,EAAKO,SAASO,KAAKL,KAK3BV,GAAQA,wBACRA,EAAYA,EAAKA,KAAMA,GAGvBA,EAAeA,QAAQA,KAAOA,EAAuBA,EAAKA,KAAMA,OAI/DA,GAAQA,0BACTA,EAAeA,QAAQA,KAAOA,EAAUA,EAAKA,MAIrDA,IAAIA,EAAcA,EAAGA,CAEjBA,GAAIA,IAAkCA,QAASA,EAAQA,OAAOA,GAAGA,QACjEA,GAAKA,OAAOA,KAAKA,GAEjBA,EAAQA,OAAOA,OAASA,EAG5BA,GAAIA,EAAQA,wBACRA,EAAeA,QAAQA,KAAOA,EAAKA,KACnCA,EAAeA,KAAKA,MAChBA,UAAWA,QAGdA,CACDA,GAAIA,GAAiBA,EAAAA,UAAUA,QAAQA,EAAeA,KAAKA,KAC3DA,GAAeA,UAAYA,GAC3BA,EAAeA,KAAKA,KAAOA,EAG/BA,EAAeA,QAAQA,OAASA,EAAKA,OACrCA,EAAeA,KAAKA,WAGxBD,QAAAA,GAAqBA,EAA0BA,GAC3CiB,GAAIA,GAAWA,EAAKA,QACpBA,IAAIA,GAAYA,EAASA,OAASA,EAC9BA,IAAKA,GAAIA,GAAIA,EAAGA,EAAOA,EAASA,OAAYA,EAAJA,EAAUA,IAC9CA,EAAYA,EAASA,GAAIA,OAKjCA,GAASA,GAGbjB,QAAAA,GAA0BA,GACtBkB,MAAOA,GAAuBA,GAGlClB,QAAAA,GAAuCA,EAA0BA,GAC7DmB,GAAIA,GAAcA,EAAAA,UAAUA,QAAQA,GAEhCA,EAAWA,EAAKA,QACpBA,IAAIA,GAAYA,EAASA,OAASA,EAAGA,CAGjCA,IAAKA,GAFDA,MAEKA,EAAIA,EAAGA,EAAOA,EAASA,OAAYA,EAAJA,EAAUA,IAAKA,CACnDA,GAAIA,GAAeA,EAAuBA,EAASA,GAAIA,EACvDA,GAAYA,KAAKA,GAErBA,EAAYA,SAAWA,MAGnBA,IACAA,EAASA,EAGjBA,OAAOA,GA/HKnB,EAAAA,MAAKA,EAyGLA,EAAAA,UAASA,EAITA,EAAAA,uBAAsBA,GA/G5B9S,EAAAA,EAAAA,sBAAAA,EAAAA,0BADHD,EAAAA,EAAAA,OAAAA,EAAAA,WAARA,UAAAA,YCAP,IAAOA,UAAP,SAAOA,GAAQA,GAAAA,IAAAA,SAAAA,GA+FXC,QAAAA,GAA0BA,GAItBkU,IAAKA,GADDA,GAAQA,GAAIA,OAAMA,GACbA,EAAIA,EAAOA,EAAJA,EAAYA,IACxBA,EAAMA,GAAKA,IACfA,OAAOA,GAGXlU,QAAAA,GAA+BA,EAAmBA,EAAiBA,GAC/DmU,GAAIA,GAAYA,EAAAA,UAAUA,QAAQA,EAGlCA,OAFAA,GAAUA,GAASA,EAASA,GAErBA,EA3GXnU,GAAcA,IAAdA,SAAcA,GAMVoU,QAAAA,GAAsBA,GAGlBC,GAAKA,EAASA,YAAdA,CAEAA,GAAIA,GAAsBA,EAASA,WACnCA,IAAKA,EAAoBA,YAAwDA,IAA1CA,EAAoBA,WAAWA,UAElEA,EAAoBA,SAAUA,EAAoBA,OAAOA,QAG7DA,MAAOA,GAAiBA,EAASA,SAAUA,IAG/CD,QAAAA,GAA0BA,EAAoCA,GAK1DE,GAAIA,GAAWA,EAAoBA,WAAWA,GAC1CA,EAAiBA,EAASA,OAC1BA,EAAiBA,EAAeA,MAEpCA,IAAuBA,IAAnBA,EAAJA,CAGAA,GAAIA,GAAqCA,EAAoBA,OACvDA,EAAoBA,OAAOA,UAAUA,GAAGA,UAE1CA,EAAsBA,EAAAA,mCACrBA,eAAeA,EAAoBA,YACnCA,kBAAkBA,EAAoBA,EAAUA,EAAgBA,EAAgBA,IAChFA,OAKLA,OAHAA,GAAmBA,EAAAA,UAAUA,QAAQA,GACrCA,EAAiBA,QAAUA,EAAoBA,SAASA,SAGpDA,SAAUA,EACVA,YAAaA,EAAoBA,cAIzCF,QAAAA,GACIA,EACAA,EACAA,EACAA,GAUAG,IAAKA,GAJDA,GAAyBA,EAAiBA,GAC1CA,EAAiBA,EAAYA,OAC7BA,KAEKA,EAAIA,EAAOA,EAAJA,EAAoBA,IAAKA,CAGrCA,IAAKA,GAFDA,MAEKA,EAAIA,EAAOA,EAAJA,EAAoBA,IAAKA,CACrCA,GAAIA,GAAsBA,EAAYA,GAClCA,EAA0BA,EAAoBA,WAE9CA,GACAA,OAAQA,EAAsBA,EAAiBA,EAAoBA,OAAQA,GAE3EA,KACAA,EAAuBA,WAAaA,EAAsBA,EAAiBA,EAAyBA,IAExGA,EAAeA,KAAKA,GAGxBA,EAAWA,KAAKA,GAGpBA,OACIA,aACIA,OAAQA,EAASA,OACjBA,cAAgBA,OAAkBA,EAASA,eAAgBA,WAAYA,EAASA,UAChFA,OAAQA,EAASA,QAErBA,aAAcA,EAAEA,IAAIA,EAAaA,SAAAA,GAAKA,OAAgCA,OAAQA,EAAEA,UAChFA,KAAMA,GAnFEH,EAAAA,MAAKA,GANXpU,EAAAA,EAAAA,wBAAAA,EAAAA,4BADHD,EAAAA,EAAAA,OAAAA,EAAAA,WAARA,UAAAA,YCAP,IAAOA,UAAP,SAAOA,GAAQA,GAAAA,IAAAA,SAAAA,GACXC,GAIcA,GAJPA,EAAkBA,SAASA,gBAC3BA,EAAgCA,EAAQA,KAAKA,+BAGpDA,SAAcA,GAMVwU,QAAAA,GAA6BA,EAA2BA,EAAwCA,EAAuCA,GAK9HC,GAAsCA,IAAvBA,EAAYA,QAG3BA,EAAaA,aAAgBA,EAAaA,YAAYA,wBAGtDA,GAGAA,EAAoBA,EAASA,KAIlCA,EAAQA,QAAQA,WAAaA,EAAQA,UAAUA,UAAUA,GAAIA,EAAQA,QAAQA,UAAUA,IAEvFA,EAAQA,UAAYA,OAGpBA,EAAQA,eACJA,QAASA,EAA8BA,WAAWA,EAAaA,YAAYA,wBAC3EA,WAAYA,EAAaA,YAAYA,YAAcA,IAK3DD,QAAAA,GAAyBA,GACrBE,MAAOA,IACAA,EAAKA,WACqBA,IAA1BA,EAAKA,UAAUA,SACdA,EAAEA,QAAQA,EAAKA,UAAUA,GAAGA,eAC5BA,EAAKA,UAAUA,GAAGA,UACnBA,EAAEA,QAAQA,EAAKA,UAAUA,GAAGA,uBAGvCF,QAAAA,GAA6BA,EAA2BA,GACpDG,MAAKA,GAAgBA,EAAQA,UAExBA,EAAgBA,EAAQA,YAAoEA,IAAtDA,EAAQA,UAAUA,UAAUA,GAAGA,YAAYA,OAIlFA,EAAQA,gBAAkBA,EAAQA,cAAcA,SAAWA,EAAQA,cAAcA,YAC1EA,GAEJA,GARIA,EAWfH,QAAAA,GAA8BA,EAAuBA,EAAoCA,EAAqCA,GAC1HI,IAAKA,EAAsBA,EAASA,EAAkBA,EAAaA,GAC/DA,MAAOA,EAMXA,IAAIA,IACAA,UACIA,QAASA,EAAgBA,KAAKA,EAAYA,SAASA,UAW3DA,IANIA,EAAYA,SACZA,EAAYA,OAASA,EAAYA,QACjCA,EAAYA,QACZA,EAAYA,MAAQA,EAAYA,OAGhCA,EAAYA,OAAQA,CACpBA,GAAIA,GAAoBA,EAAcA,EAAYA,OAG7CA,GAAEA,QAAQA,EAAkBA,gBAC7BA,EAAYA,YAAcA,EAA+BA,EAAmBA,EAAYA,SAASA,UAGzGA,MAAOA,GAIXJ,QAAAA,GAA+BA,EAAkCA,GACxDK,IAGyBA,EAAaA,MACvCA,EAA+BA,EAAaA,KAAKA,IAExBA,EAAAA,QACzBA,EAA8BA,EAAAA,OAAAA,OAEDA,EAAaA,QAC1CA,EAAkCA,EAAaA,MAAMA,IACrDA,EAAuBA,EAAmCA,EAAaA,MAAMA,SAGjFA,EAAuBA,EAAgCA,EAAaA,SAIxEL,QAAAA,GAAgCA,EAAkCA,GAC9DM,IAAKA,EAAEA,QAAQA,GACXA,IAAwBA,GAAAA,GAAAA,EAAnBA,EAAAA,EAAAA,OAAAA,IAAgCA,CAAhCA,GAAIA,GAAeA,EAAYA,EAChCA,GAAsBA,EAAMA,IAQxCN,QAAAA,GAA+BA,EAAoCA,EAAqCA,EAAoBA,GACxHO,IAAKA,IAAYA,IAAqBA,EAClCA,OAAOA,CAGXA,IAAIA,GAAgCA,EAAAA,wBAAwBA,2BAA2BA,EAASA,EAASA,UACrGA,EAAsCA,EAAAA,wBAAwBA,uBAAuBA,EAASA,EAIlGA,IAHAA,EAAmBA,EAAAA,iBAAiBA,uBAAuBA,EAAaA,EAAkBA,GAAWA,mBAGhGA,GAAgDA,IAA5BA,EAAiBA,OACtCA,OAAOA,CAEXA,IAAIA,GAAqBA,EAAiBA,GAAGA,WAC7CA,KAAKA,EACDA,OAAOA,CAGXA,IAAIA,GAAiBA,EAASA,MAC9BA,KAAKA,EACDA,OAAOA,CAGXA,KAAKA,EAAeA,OAASA,EAAeA,KAAKA,QAAgDA,IAAtCA,EAAeA,KAAKA,OAAOA,OAClFA,OAAOA,CAGXA,IAAIA,MACAA,KAEAA,EAAkBA,SAACA,EAAkBA,GACrCA,GAAIA,GAA6CA,EAAYA,EAC7DA,IAAKA,EAGLA,IAA2BA,GAAAA,GAAAA,EAAAA,EAAAA,EAAgBA,MAAtCA,EAAAA,EAAAA,OAAAA,IAA4CA,CAA5CA,GAAIA,GAAcA,EAAAA,EACfA,GAAUA,EAAeA,YAAcA,EAAAA,mBAAmBA,UAC1DA,EAAOA,KAAKA,EAAeA,WAQvCA,IAJAA,EAAsBA,SAACA,GAAuBA,EAAgBA,EAAUA,IAAoBA,EAAmBA,YAC/GA,EAAsBA,SAACA,GAAuBA,EAAgBA,EAAUA,IAAiBA,EAAmBA,QAGxGA,EAAEA,QAAQA,IAAmBA,EAAEA,QAAQA,GACvCA,OAAOA,CAGXA,KAAkBA,GAAAA,GAAAA,EAAAA,EAAAA,EAAeA,QAAQA,OAApCA,EAAAA,EAAAA,OAAAA,IACDA,IAAmBA,GADdA,GAAKA,EAAAA,GACSA,EAAAA,EAAAA,EAAAA,EAAMA,QAApBA,EAAAA,EAAAA,OAAAA,IAA4BA,CAA5BA,GAAIA,GAAMA,EAAAA,EACXA,KAAKA,EAAOA,UACRA,OAAOA,EAInBA,OAAOA,EAgBXP,QAAAA,GAAuBA,GAwBnBQ,IAAuBA,GAvBnBA,GAAUA,EAAUA,KACpBA,EAAUA,EAAQA,KAClBA,EAAcA,EAAQA,SAGtBA,KACAA,EAAgBA,EAAQA,OAAOA,GAC/BA,EAAiBA,EAAQA,oBAGzBA,KACAA,EAAkBA,EAAQA,OAAOA,GACjCA,EAAmBA,EAAYA,GAAGA,oBAElCA,EAAeA,EAAUA,aAAaA,OAItCA,EAAUA,SAACA,GACXA,MAAOA,GAAEA,UAAUA,EAAYA,SAAAA,GAAQA,MAAAA,GAAAA,sBAAsBA,OAAOA,EAAKA,SAAUA,MAIhEA,EAAAA,EAAlBA,EAAAA,EAAAA,OAAAA,IAA8BA,CAA9BA,GAAIA,GAAcA,EAAWA,EAC9BA,GAAOA,MAAOA,MAAOA,EAAWA,MAAOA,SAAUA,EAAWA,UAE5DA,KAAyBA,GAAAA,GAAAA,EAAAA,EAAAA,EAAWA,SAA/BA,EAAAA,EAAAA,OAAAA,IAAwCA,CAAxCA,GAAIA,GAAYA,EAAAA,GACbA,EAAWA,EAAQA,EAAaA,SACnBA,MAAbA,GACAA,EAAWA,MAAOA,MAAOA,EAAaA,MAAOA,SAAUA,EAAaA,YAOhFA,IAAKA,GADDA,GAA6CA,GAAIA,OAAkCA,EAAWA,QACzFA,EAAIA,EAAGA,EAAIA,EAAOA,SAAUA,EAEjCA,IAAyBA,GADrBA,GAAaA,EAAYA,GACJA,EAAAA,EAAAA,EAAAA,EAAWA,SAA/BA,EAAAA,EAAAA,OAAAA,IAAwCA,CAAxCA,GAAIA,GAAYA,EAAAA,GACbA,EAAIA,EAAQA,EAAaA,SAExBA,GAAaA,KACdA,EAAaA,GAAKA,GAAIA,OAAgCA,EAAOA,SAEjEA,EAAaA,GAAGA,GAAKA,EAAaA,OAK1CA,GAAIA,IACAA,MACIA,SAAUA,EAAEA,IAAIA,EAAQA,SAACA,GACrBA,OACIA,MAAOA,EACPA,MAAOA,EAAEA,MACTA,SAAUA,EAAEA,YAGpBA,oBAAqBA,GAEzBA,QACIA,GAIRA,IAAIA,EAAeA,EAAGA,CAQlBA,IAAKA,GAPDA,GAAuCA,EAAEA,IAAIA,EAAUA,QAAQA,KAAKA,SAAUA,SAACA,GAC/EA,GAAIA,IAAgCA,MAAOA,EAG3CA,OAFIA,GAAQA,mBACRA,EAAQA,iBAAmBA,EAAQA,kBAChCA,IAGFA,EAAIA,EAAGA,EAAIA,EAAWA,KAAKA,SAASA,SAAUA,EACnDA,EAAWA,KAAKA,SAASA,GAAGA,SAAWA,CAE3CA,GAAWA,OAAOA,KAAKA,EAAUA,QAAQA,OAAOA,IAIpDA,GAAIA,IACAA,MACIA,SAAUA,EAAEA,IAAIA,EAAYA,SAACA,GAAoBA,OAASA,MAAOA,EAAGA,MAAOA,EAAEA,MAAOA,SAAUA,EAAEA,YAChGA,oBAAqBA,GAEzBA,QACIA,GAKRA,IAAIA,EAAeA,EACfA,IAAKA,GAAIA,GAAIA,EAAGA,EAAIA,EAAWA,SAAUA,EAAGA,CAIxCA,IAAKA,GAHDA,GAAMA,EAAQA,KAAKA,SAASA,GAC5BA,KAEKA,EAAIA,EAAGA,EAAIA,EAAOA,SAAUA,EAEjCA,IAAKA,GADDA,GAAUA,EAAaA,GAAGA,GACrBA,EAAIA,EAAOA,EAAJA,IAAoBA,EAAGA,CACnCA,GAAIA,GAAIA,EAAIA,EAAeA,CAC3BA,GAAUA,GAAMA,EAEVA,EAAQA,GADAA,IAANA,GAAYA,MAAOA,OAAWA,MAAOA,KAAMA,iBAAkBA,GAK7EA,EAAIA,OAASA,EAIrBA,GAAIA,IACAA,KAAMA,EACNA,QAASA,EACTA,aAAcA,EAAUA,aAG5BA,OAAOA,GAIXR,QAAAA,GAAwCA,EAAwBA,GAiB5DS,IAAKA,GAhBDA,GAAcA,EAAOA,QAAQA,KAAKA,SAASA,OAC3CA,EAAkBA,EAAOA,aACzBA,EAAeA,EAAgBA,OAG/BA,IAEIA,OAAQA,EAAOA,KAAKA,OAAOA,GAAGA,QAAQA,GACtCA,OAAQA,EAAEA,IAAIA,EAAOA,KAAKA,KAAKA,SAAUA,SAAAA,GAAKA,MAAAA,GAAEA,QAChDA,SAAUA,EAAEA,IAAIA,EAAOA,KAAKA,KAAKA,SAAUA,SAAAA,GAAKA,MAAAA,GAAEA,WAClDA,eAAgBA,EAAOA,KAAKA,KAAKA,sBAKrCA,KACKA,EAAIA,EAAOA,EAAJA,IAAmBA,EAAGA,CAClCA,GAAIA,GAAeA,EAAOA,QAAQA,KAAKA,SAASA,GAC5CA,GACAA,UACAA,SAAUA,EAAaA,SACvBA,KAAMA,EAAaA,OAASA,KAGhCA,GAAOA,KAAKA,EAEZA,KAAKA,GAAIA,GAAIA,EAAOA,EAAJA,IAAoBA,EAAGA,CACnCA,GAAIA,GAAyBA,EAAgBA,GACzCA,IACJA,KAAKA,GAAIA,KAAOA,GACZA,EAAuBA,GAAOA,EAAuBA,EACzDA,GAAuBA,UAAYA,EAAMA,KAEzCA,EAAeA,KAAKA,EAEpBA,IAAIA,IACAA,OAAQA,EACRA,UACAA,SAAUA,EAAMA,SAGpBA,GAAMA,OAAOA,KAAKA,EAKlBA,KAAyBA,GAFrBA,GAAQA,EAAIA,EAAIA,EAEKA,EAAAA,EAAAA,EAAAA,EAAOA,KAAKA,KAAKA,SAArCA,EAAAA,EAAAA,OAAAA,IAA8CA,CAA9CA,GAAIA,GAAYA,EAAAA,GACbA,EAAQA,EAAaA,OAAOA,GAAOA,KAEvCA,GAAYA,OAAOA,KAAKA,KAOpCA,IAAkBA,GADdA,MACcA,EAAAA,EAAbA,EAAAA,EAAAA,OAAAA,IACDA,IAAKA,GADAA,GAASA,EAAMA,GACXA,EAAIA,EAAOA,EAAJA,IAAoBA,EAChCA,EAAOA,KAAKA,EAAMA,OAAOA,GAIjCA,GAAOA,QAAUA,WAAMA,MAAAA,IACvBA,EAAOA,eAAiBA,EAAOA,QAAQA,KAAKA,oBAC5CA,EAAOA,OAASA,EAAOA,QAAQA,OAAOA,GAAGA,QAAQA,EAGjDA,IAAIA,IACAA,WAAYA,EACZA,OAAQA,EAGZA,OAAOA,GA7XKT,EAAAA,aAAYA,EAoDZA,EAAAA,cAAaA,GA1DnBxU,EAAAA,EAAAA,0CAAAA,EAAAA,8CALHD,EAAAA,EAAAA,OAAAA,EAAAA,WAARA,UAAAA,YCAP,IAAOA,UAAP,SAAOA,GAAQA,GAAAA,IAAAA,SAAAA,GACXC,GAiFcA,GAjFPA,EAAUA,EAAAA,UAAUA,QACpBA,EAAgBA,EAAAA,UAAUA,cAC1BA,EAAkBA,SAASA,gBAC3BA,EAAiBA,SAASA,gBA8EjCA,SAAcA,GACVkV,QAAAA,GAAsBA,GAKlBC,GAAIA,GAAYA,EAAQA,UACpBA,EAAoBA,EAAQA,kBAC5BA,EAAmBA,EAAQA,iBAC3BA,EAAaA,EAAQA,WACrBA,EAAwBA,GAAcA,EAAWA,OAASA,EAAWA,MAAMA,YAC3EA,EAAwBA,EAAQA,sBAChCA,EAAYA,EAAQA,SAExBA,KAAKA,EACDA,MAAOA,GAAuBA,EAAmBA,EAAYA,EAEjEA,KAAKA,EACDA,OAAQA,EAGZA,GAAYA,EAAAA,wCAAwCA,cAAcA,EAAWA,EAAWA,QAASA,EAAkBA,EACnHA,IAAIA,GAAmCA,EAA+BA,EAAWA,EAAYA,EAAmBA,EAAkBA,EAAuBA,EAezJA,OAZAA,GAAuBA,EAAAA,mBAAmBA,KACtCA,iBAAkBA,EAClBA,qBAAsBA,EACtBA,UAAWA,EACXA,kBAAmBA,EACnBA,kBAAmBA,EAAWA,QAC9BA,sBAAuBA,EACvBA,iBAAkBA,EAAWA,QAC7BA,SAAUA,EACVA,sBAAuBA,IAM/BD,QAAAA,GACIA,EACAA,EACAA,EACAA,EACAA,EACAA,GACAE,GAAIA,MACAA,EAASA,EAAWA,MACxBA,IAAIA,EAAEA,QAAQA,GACVA,EAAqBA,KAAKA,EAAkBA,EAAWA,EAAmBA,EAAkBA,EAAYA,EAAuBA,QAE/HA,KAAkBA,GAAAA,GAAAA,EAAbA,EAAAA,EAAAA,OAAAA,IAAoBA,CAApBA,GAAIA,GAASA,EAAMA,GAChBA,EAAcA,EAAkBA,EAAWA,EAAmBA,EAAkBA,EAAYA,EAAuBA,EAAWA,EAAMA,QACxIA,GAAqBA,KAAKA,GAGlCA,MAAOA,GAGXF,QAAAA,GAAgCA,EAA8CA,EAAsCA,GAChHG,GAAIA,GAAcA,EAAWA,QAASA,CAClCA,GAAIA,IACAA,UACIA,YAYRA,OARAA,GACIA,EACAA,EACAA,EACAA,EAAWA,QACXA,EAAWA,QACXA,IAEIA,GAGZA,SAGJH,QAAAA,GACIA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,GAGAI,GAAIA,GAAcA,EAAeA,GAC7BA,EAAcA,EAAQA,EAC1BA,GAAYA,SAAWA,EAAQA,EAAUA,SAEzCA,IAAIA,GAAqBA,EAAWA,OAASA,EAAWA,MAAMA,SAC1DA,EAAwBA,EAAWA,OAASA,EAAWA,MAAMA,WAajEA,OAZAA,GAAcA,EAAiBA,EAAaA,EAAcA,EAAWA,QAASA,EAAoBA,GAClGA,EAAiBA,EAAaA,EAAaA,EAAmBA,EAAWA,QAASA,EAAWA,QAASA,GAGtGA,EAAcA,EAAAA,sCAAsCA,eAAeA,EAAaA,EAAcA,EAAoBA,EAAWA,QAASA,GAEtIA,EAAAA,wBAAwBA,OACpBA,SAAUA,EACVA,iBAAkBA,EAClBA,UAAWA,IAGRA,EAGXJ,QAAAA,GAAwBA,GAGpBK,IAAKA,EACDA,MAAOA,EAGXA,KAAwBA,GADpBA,GAASA,EACWA,EAAAA,EAAnBA,EAAAA,EAAAA,OAAAA,IAAgCA,CAAhCA,GAAIA,GAAeA,EAAYA,EAC5BA,GAAYA,cACZA,GAAUA,GACVA,EAAYA,SACZA,GAAUA,GACVA,EAAYA,SACZA,GAAUA,GACVA,EAAYA,QACZA,GAAUA,GACVA,EAAYA,OACZA,GAAUA,IAElBA,MAAOA,GAGXL,QAAAA,GACIA,EACAA,EACAA,EACAA,EACAA,GAEAM,GAAIA,KAgBJA,IAfIA,IACAA,EAASA,SAASA,QAAUA,EACxBA,EAASA,SAASA,QAClBA,EACAA,IAIJA,EAASA,cACTA,EAASA,YAAcA,EAA2BA,EAASA,YAAaA,EAAgBA,GAGxFA,EAAWA,EAAiBA,EAAUA,IAGtCA,EAASA,OAAQA,CACjBA,GAAIA,IACAA,uBAAuBA,EACvBA,0BAA0BA,EAC1BA,yBAAyBA,EAE7BA,GAASA,OAASA,EAAsBA,EAASA,OAAQA,EAAgBA,EAAcA,EAAoBA,GAEvGA,EAAkBA,EAASA,OAAQA,IACnCA,EAAAA,oBAAoBA,MAAMA,EAASA,OAAQA,GAMnDA,MAHIA,GAASA,QACTA,EAASA,MAAQA,EAAqBA,EAASA,MAAOA,EAAgBA,EAAcA,IAEjFA,EAGXN,QAAAA,GACIA,EACAA,EACAA,GAGAO,IAAKA,EACDA,MAAOA,EAKXA,KAAKA,GAFDA,GAAUA,EAAQA,GAEbA,EAAIA,EAAGA,EAAMA,EAAiBA,OAAYA,EAAJA,EAASA,IAAKA,CACzDA,GAAIA,GAAkBA,EAAiBA,GACnCA,EAASA,EAAQA,EAAgBA,MACrCA,IAAKA,EAALA,CAGAA,GAAIA,GAAiCA,EAAQA,GAAKA,EAAQA,EAEtDA,GAAOA,QACPA,EAAOA,MAAQA,EAAOA,OACtBA,EAAOA,OACPA,EAAOA,KAAOA,EAAOA,MACzBA,EAAOA,OAASA,EAAmBA,EAAQA,GAEvCA,EAAOA,cACPA,EAAOA,YAAcA,EAAOA,aAC5BA,EAAOA,YACPA,EAAOA,UAAYA,EAAOA,WAC1BA,EAAOA,MACPA,EAAOA,IAAMA,EAAOA,KACpBA,EAAOA,OACPA,EAAOA,KAAOA,EAAOA,MACrBA,EAAOA,oCACPA,EAAOA,kCAAoCA,EAAOA,mCAEtDA,EAASA,MACLA,KAAMA,EACNA,GAAIA,KAIZA,MAAOA,GAQXP,QAAAA,GAA4BA,EAAiCA,GAEzDQ,MAAOA,GAAOA,QAAUA,EAAOA,OAGnCR,QAAAA,GAAoCA,EAAgCA,EAAwDA,GAMxHS,QAAAA,GAAkBA,GACdC,GAAIA,GAAkBA,EAAaA,EAAMA,OAAQA,EACjDA,IAAIA,EAAiBA,CACjBA,GAAIA,GAAYA,EAAQA,EAExBA,OADAA,GAAUA,OAASA,EACZA,GAPfD,GAAIA,GAAcA,EAAQA,GAWtBA,EAAaA,EAAAA,UAAUA,cAAcA,EAAUA,WAAYA,EAC3DA,KACAA,EAAYA,WAAaA,EAE7BA,IAAIA,GAASA,EAAAA,UAAUA,cAAcA,EAAUA,OAAQA,EAEvDA,IAAIA,EAAQA,CACRA,GAAIA,EACAA,IAAKA,GAAIA,GAAIA,EAAOA,OAASA,EAAGA,GAAKA,EAAGA,IAC/BA,EAAiBA,EAAOA,GAAGA,OAAOA,QACnCA,EAAOA,OAAOA,EAAGA,EAI7BA,IAAIA,EAAOA,OACPA,GAAIA,IAAqBA,EAAiBA,EAAOA,OAAOA,OACpDA,EAAOA,OAASA,WAEfA,CACDA,GAAIA,GAAwBA,EAAaA,EAAOA,OAAQA,EACpDA,KACAA,EAAOA,OAASA,GAI5BA,EAAYA,OAASA,EACrBA,EAAWA,GAGfA,MAAOA,GAGXT,QAAAA,GACIA,EACAA,EACAA,EACAA,GAMAW,IAAKA,GAAwCA,IAAxBA,EAAaA,SAAiBA,EAAaA,GAAGA,MAC/DA,MAAOA,EAEXA,IAAIA,GAAQA,EAAQA,GAGhBA,EAAWA,SAACA,GAAqCA,MAAAA,GAAaA,EAAUA,IACxEA,EAAUA,EAAAA,UAAUA,cAAcA,EAAUA,QAASA,EAIzDA,IAHIA,IACAA,EAAMA,QAAUA,IAEfA,EACDA,MAAOA,EAEXA,IAAIA,GAAoBA,EAAiCA,EAAoBA,EAC7EA,KAAKA,EACDA,MAAOA,EAKXA,KAAKA,GAFDA,GAAeA,EAAQA,MAAMA,GAC7BA,EAAOA,OAAOA,KAAKA,GACdA,EAAIA,EAAGA,EAAMA,EAAKA,OAAYA,EAAJA,EAASA,IAAKA,CAC7CA,GAAIA,GAAeA,EAAaA,EAAkBA,EAAKA,IAInDA,KAAMA,EAAQA,OACdA,EAAQA,KAAKA,GAGbA,EAAQA,GAAKA,EAKrBA,GAAIA,GAAOA,EAAAA,UAAUA,cAAcA,EAAMA,KACrCA,SAACA,GAEGA,IAAKA,GADDA,MACKA,EAAIA,EAAGA,EAAMA,EAAKA,OAAYA,EAAJA,IAAWA,EAC1CA,EAAOA,GAAKA,EAAIA,EAAkBA,EAAKA,IAE3CA,OAAOA,IAMfA,OAHIA,KACAA,EAAMA,KAAOA,GAEVA,EAIXX,QAAAA,GACIA,EACAA,GACAY,GAAIA,GAAQA,OAAOA,KAAKA,EAGxBA,IAAqBA,IAAjBA,EAAMA,OAAVA,CAGAA,GAAIA,GAAOA,EAAMA,GACbA,EAAgBA,EAAEA,IAAIA,EAAgBA,SAACA,GAAkDA,MAAAA,GAAQA,KAAKA,QACtGA,EAAWA,EAAmBA,EAGlCA,KAAIA,EAAgBA,cAAcA,EAAeA,EAAUA,SAACA,EAAWA,GAAcA,MAAAA,KAAMA,IAG3FA,MAAOA,GAAmBA,EAAeA,IAG7CZ,QAAAA,GACIA,EACAA,EACAA,EACAA,EACAA,GAYAa,QAAAA,GAAkBA,GACdC,MAAOA,GAAaA,EAAUA,GAGlCD,QAAAA,GAA2BA,GACvBE,GAAIA,GAAwCA,KAExCA,EAAYA,EAAAA,UAAUA,cACtBA,EAAUA,OACVA,SAACA,GACGA,GAAIA,GAAmCA,KACnCA,EAAeA,EAAAA,UAAUA,cAAcA,EAAMA,QAASA,EAI1DA,OAHIA,KACAA,EAAWA,EAAwCA,EAAUA,EAAOA,SAAAA,GAAKA,MAAAA,GAAEA,QAAUA,KAElFA,GAKfA,OAHIA,KACAA,EAAqBA,EAAmCA,EAAoBA,EAAWA,SAAAA,GAAKA,MAAAA,GAAEA,OAASA,KAEpGA,EA1BXF,IAAKA,GAAgBA,EAAaA,OAASA,KAAOA,EAAaA,GAAGA,QAAWA,EAAaA,IAAMA,EAAaA,GAAGA,QAC5GA,MAAOA,EAEXA,IAAIA,GAAgBA,EAAaA,GAAGA,QAAUA,EAAaA,GAAGA,OAC1DA,EAASA,EAAQA,GAyBjBA,EAAOA,EAAkBA,EAAOA,KAChCA,KACAA,EAAOA,KAAOA,EACdA,EAAQA,uBAAwBA,EAGpCA,IAAIA,GAAUA,EAAkBA,EAAOA,QACnCA,KACAA,EAAOA,QAAUA,EACjBA,EAAQA,0BAA2BA,EAGvCA,IAAIA,GAAeA,EAAAA,UAAUA,cAAcA,EAAOA,aAAcA,EAChEA,IAAIA,EAAcA,CACdA,EAAOA,aAAeA,CAGtBA,IAAIA,GAAuCA,EAAcA,MACzDA,IAAIA,GAAsBA,EAAaA,OAASA,GAAKA,GAAgBA,EAAAA,OAAkBA,CACnFA,GAAIA,GAAeA,EAAQA,OAAOA,MAClCA,IAAIA,EAAeA,EAAGA,CAClBA,GAAIA,GAAoBA,EAAkCA,EAAcA,EAAoBA,EAAcA,EAC1GA,IAAIA,EAAmBA,CACnBA,GAAIA,GAAOA,OAAOA,KAAKA,GACnBA,EAAUA,EAAKA,MAGnBA,GAAQA,KAAOA,EAAAA,oBAAoBA,UAAUA,EAAQA,MAChCA,IAAjBA,EACAA,EAAkBA,EAAQA,KAAMA,GAEhCA,EAAmBA,EAAQA,KAAMA,EAAeA,EAAGA,SAACA,GAA6BA,MAAAA,GAAkBA,EAAMA,KAG7GA,EAAOA,KAAKA,KAAOA,EAAAA,oBAAoBA,uBAAuBA,EAAOA,KAAKA,KAAMA,SAACA,GAE7EA,GAAKA,EAAKA,OAAVA,CAMAA,IAAKA,GAHDA,MAEAA,EAAaA,OAAOA,KAAKA,EAAKA,QAAQA,OAASA,EAC1CA,EAAIA,EAAGA,EAAMA,EAAgBA,EAAJA,EAASA,IAEvCA,IAAKA,GADDA,GAASA,EAAIA,EACRA,EAAYA,EAAeA,EAAZA,EAAqBA,IACzCA,EAAUA,EAASA,GAAaA,EAAKA,OAAOA,EAASA,EAAkBA,EAAKA,IAGpFA,GAAKA,OAASA,KAGlBA,EAAQA,yBAA0BA,KAMlDA,MAAOA,GAGXb,QAAAA,GAA2BA,EAA0BA,GAMjDgB,IAAKA,GALDA,GAAOA,OAAOA,KAAKA,GACnBA,EAAUA,EAAKA,OACfA,EAAWA,EAAKA,SAEhBA,EAAgBA,EAASA,MAAMA,GAC1BA,EAAIA,EAAGA,EAAMA,EAAaA,EAAJA,EAASA,IAAKA,CACzCA,GAAIA,GAAeA,EAAcA,EAAkBA,EAAKA,IAIpDA,KAAMA,EAASA,OACfA,EAASA,KAAKA,GAGdA,EAASA,GAAKA,GAM1BhB,QAAAA,GACIA,EACAA,EACAA,EACAA,GAIAiB,QAAAA,GAA0BA,GACtBC,IAAKA,GAAIA,GAAIA,EAAGA,EAAMA,EAAaA,OAAYA,EAAJA,EAASA,IAAKA,CACrDA,GAAIA,GAAcA,EAAaA,EAC/BA,IAAIA,IAAgBA,EAAcA,GAC9BA,MAAOA,IAKnBD,IAAKA,GAXDA,GAAOA,EAAAA,OAAAA,MAUPA,KACKA,EAAIA,EAAGA,EAAMA,EAAeA,OAAYA,EAAJA,EAASA,IAAKA,CACvDA,GAAIA,GAAgBA,EAAeA,EAC/BA,GAAiBA,IACjBA,EAAcA,KAAKA,GAG3BA,GAAIA,GAAWA,EAAmBA,GAC9BA,EAAgBA,EAAEA,IAAIA,EAAeA,SAACA,GAAkDA,MAAAA,GAAQA,KAAKA,OAGzGA,OAAIA,GAAgBA,cAAcA,EAAeA,EAAUA,SAACA,EAAWA,GAAcA,MAAAA,KAAMA,IAA3FA,OAGOA,EAAmBA,EAAeA,GAG7CjB,QAAAA,GAA4BA,EAAyBA,GAEjDmB,IAAKA,GADDA,MACKA,EAAIA,EAAGA,EAAMA,EAASA,OAAYA,EAAJA,IAAWA,EAAGA,CACjDA,GAAIA,GAAcA,EAASA,EAC3BA,GAAQA,GAAKA,EAAcA,QAAQA,GAGvCA,MAAOA,GAGXnB,QAAAA,GAA4BA,EAA0BA,EAAqBA,GACvEoB,GAAIA,EAAKA,QAAUA,EAEfA,WADAA,GAASA,EAIbA,IAAIA,GAAWA,EAAKA,QACpBA,IAAIA,GAAYA,EAASA,OAASA,EAC9BA,IAAKA,GAAIA,GAAIA,EAAGA,EAAOA,EAASA,OAAYA,EAAJA,EAAUA,IAC9CA,EAAmBA,EAASA,GAAIA,EAAaA,GAIzDpB,QAAAA,GAAsBA,EAAgCA,GAClDqB,IAAKA,GAAIA,GAAIA,EAAGA,EAAMA,EAAeA,OAAYA,EAAJA,EAASA,IAAKA,CACvDA,GAAIA,GAAgBA,EAAeA,EACnCA,IAAIA,EAAcA,OAASA,EACvBA,MAAOA,GAAcA,IAIjCrB,QAAAA,GAA4BA,EAAcA,EAAcA,GAOpDsB,MANKA,KACDA,EAAYA,EAAQA,IAEpBA,GACAA,EAASA,GAENA,EAGXtB,QAAAA,GACIA,EACAA,EACAA,EACAA,EACAA,EACAA,GAQAuB,GAAKA,EAALA,CAGAA,GAAIA,GAAyBA,EAAAA,8BAA8BA,uBAAuBA,EAClFA,GAAAA,8BAA8BA,mBAAmBA,EAAwBA,EAAmBA,EAASA,SAASA,QAASA,EAEvHA,IAAIA,GAAeA,EAAuBA,aACtCA,EAAcA,EAAuBA,IACrCA,IACAA,EAAwBA,EAAUA,EAAkBA,EAAmBA,EAAaA,QAASA,EAAaA,EAE9GA,IAAIA,GAAkBA,EAAuBA,QAC7CA,IAAIA,EACAA,IAAKA,GAAIA,GAAIA,EAAGA,EAAMA,EAAgBA,OAAYA,EAAJA,EAASA,IAAKA,CACxDA,GAAIA,GAAiBA,EAAgBA,EACrCA,GAA2BA,EAAUA,EAAkBA,EAAmBA,EAAeA,SAAUA,EAAeA,SAI1HA,IAAKA,GAAIA,GAAIA,EAAGA,EAAMA,EAAYA,OAAYA,EAAJA,EAASA,IAAKA,CACpDA,GAAIA,GAAaA,EAAYA,EAC7BA,GAAuBA,EAAUA,EAAqBA,EAAkBA,EAAmBA,EAAWA,SAAUA,EAAWA,MAAOA,EAAWA,SAGjJA,GAAIA,GAAcA,EAAuBA,WACrCA,IAEAA,EAA2BA,EAAUA,EAAkBA,EAAmBA,IAIlFvB,QAAAA,GACIA,EACAA,EACAA,EACAA,GAMAwB,GAAIA,GAAmCA,EAASA,SAASA,OACpDA,KACDA,EAAkBA,EAASA,SAASA,WAIxCA,KAAuBA,GAFnBA,GAAcA,EAAAA,wBAAwBA,EAAUA,GAE7BA,EAAAA,EAAlBA,EAAAA,EAAAA,OAAAA,IAA8BA,CAA9BA,GAAIA,GAAcA,EAAWA,GAC1BA,EAAKA,EAAWA,SAASA,GAEzBA,EAAUA,EAAAA,8BAA8BA,wBAAwBA,EAAaA,EAAmBA,EAAWA,QAE/GA,KAAKA,GAAIA,KAAcA,GAASA,CAC5BA,GAAIA,GAAyBA,EAAQA,GAEjCA,EAAyBA,EAAgBA,EACxCA,KACDA,EAAMA,EAAgBA,OAI1BA,EAAIA,MAAOA,GAAIA,EAAIA,OAAQA,MAMvCxB,QAAAA,GACIA,EACAA,EACAA,EACAA,EACAA,EACAA,GAQAyB,GAAIA,GAAcA,EAAAA,wBAAwBA,EAAUA,GAChDA,EAAUA,EAAAA,8BAA8BA,wBAAwBA,EAAaA,EAAmBA,EACpGA,IAAIA,EAASA,CACTA,EAASA,SAASA,QAAUA,CAE5BA,KAAKA,GAAIA,KAAcA,GAASA,CAC5BA,GAAIA,GAAyBA,EAAQA,GACjCA,EAAaA,EAAkBA,EAEnCA,KAAKA,GAAIA,KAAgBA,GAAQA,CAC7BA,GAAIA,GAAeA,EAAWA,WAAWA,GACrCA,EAAWA,EAAaA,IAC5BA,IAAKA,EAALA,CAGAA,GAAIA,GAAaA,EACbA,EACAA,EACAA,EACAA,EACAA,EAAOA,GACPA,EAAaA,KACZA,IAGLA,EAAYA,KAAKA,OAMjCzB,QAAAA,GACIA,EACAA,EACAA,EACAA,EACAA,EACAA,GAOA0B,GAAIA,GAAaA,EAASA,MAC1BA,IAAKA,EAALA,CAGAA,GAAIA,GAAmBA,EAAyBA,EAAUA,EAAWA,SACrEA,IAAKA,EAGLA,MAAIA,GAASA,SACFA,EAAqCA,EAAUA,EAAuBA,EAAUA,EAAkBA,EAAsBA,GADnIA,QAIJ1B,QAAAA,GACIA,EACAA,EACAA,EACAA,EACAA,EACAA,GAOA2B,GAAIA,EAMJA,IALIA,EAAcA,gBACdA,EAAiBA,EAAoCA,EAAUA,EAAuBA,EAAUA,EAAeA,EAAcA,iBACxHA,EAAcA,kBACnBA,EAAiBA,EAAoCA,EAAUA,EAAuBA,EAAUA,EAAeA,EAAcA,kBAE5HA,EAALA,CAGAA,GAAIA,GAAOA,GAAIA,GAAAA,oBAAoBA,EAASA,UAAWA,GACnDA,IAKJA,OAJAA,GAAmBA,EAASA,OAAOA,WAC/BA,OAASA,MAAOA,KAIhBA,SAAUA,EACVA,OAAQA,GACRA,UACIA,KAAMA,EACNA,WAAYA,MAKxB3B,QAAAA,GACIA,EACAA,EACAA,EACAA,EACAA,GAOA4B,GADAA,EAAkBA,EAAsBA,gBACNA,SAA9BA,EAAgBA,IAAIA,OACUA,SAA9BA,EAAgBA,IAAIA,MAAqBA,CACzCA,GAAIA,GAAaA,EAA+BA,EAAUA,EAASA,UACnEA,KAAKA,EACDA,MAE8BA,UAA9BA,EAAgBA,IAAIA,QACpBA,EAAgBA,IAAIA,MAAQA,EAAWA,KACTA,SAA9BA,EAAgBA,IAAIA,QACpBA,EAAgBA,IAAIA,MAAQA,EAAWA,KAG/CA,MAAOA,GAAsBA,gBAAgBA,EAAsBA,iBAGvE5B,QAAAA,GACIA,EACAA,EACAA,EACAA,EACAA,GAKA6B,GAAIA,GAAuBA,MAE3BA,IADAA,EAAkBA,EAAsBA,gBACNA,SAA9BA,EAAgBA,IAAIA,OACUA,SAA9BA,EAAgBA,IAAIA,OACUA,SAA9BA,EAAgBA,IAAIA,MAAqBA,CACzCA,GAAIA,GAAaA,EAA+BA,EAAUA,EAASA,UACnEA,KAAKA,EACDA,MAaJA,IAXAA,EAC8BA,SAA9BA,EAAgBA,IAAIA,OACUA,SAA9BA,EAAgBA,IAAIA,OACUA,SAA9BA,EAAgBA,IAAIA,MAEcA,SAA9BA,EAAgBA,IAAIA,QACpBA,EAAgBA,IAAIA,MAAQA,EAAWA,KAETA,SAA9BA,EAAgBA,IAAIA,QACpBA,EAAgBA,IAAIA,MAAQA,EAAWA,KAETA,SAA9BA,EAAgBA,IAAIA,MAAqBA,CACzCA,GAAIA,IAAoBA,EAAgBA,IAAIA,MAAQA,EAAgBA,IAAIA,OAASA,CACjFA,GAAgBA,IAAIA,MAAQA,GAIpCA,MAAOA,GAAsBA,gBAAgBA,EAAsBA,gBAAiBA,GAGxF7B,QAAAA,GACIA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,GASA8B,GAAIA,GAAmBA,EAAAA,SAASA,iBAAiBA,GAE7CA,EAAsBA,EAASA,WAC/BA,IAAuBA,EAAeA,QAAQA,EAAqBA,KAEnEA,EAA0CA,EAAqBA,EAAmBA,EAAUA,EAAOA,EAAkBA,GAGrHA,EAA+CA,EAAqBA,EAAmBA,EAAUA,EAAOA,EAAkBA,GAK9HA,IAAIA,GAAiBA,EAASA,MAC9BA,IAAIA,GAAkBA,EAAeA,QAAQA,EAAqBA,GAA+BA,CAC7FA,GAAIA,GAAkBA,EAA6BA,EAAgBA,EAAmBA,EAAUA,EAAOA,EAAkBA,EACrHA,KAGAA,EAASA,OAASA,GAM1BA,GAAIA,GAAgBA,EAASA,KAC7BA,IAAIA,GAAiBA,EAAeA,QAAQA,EAAqBA,GAA8BA,CAC3FA,GAAIA,GAAiBA,EAA4BA,EAAeA,EAAkBA,EAAmBA,EAAUA,EAAOA,EAAkBA,EACpIA,KAGAA,EAASA,MAAQA,IAO7B9B,QAAAA,GACIA,EACAA,EACAA,EACAA,EACAA,EACAA,GAQA+B,GAAKA,EAAoBA,YAAwDA,IAA1CA,EAAoBA,WAAWA,OAAtEA,CAGAA,GAAIA,GAAeA,EAA8BA,EAAqBA,EACtEA,IAAKA,EAALA,CAGAA,GACIA,GADAA,EAAaA,EAAaA,WAE1BA,EAAcA,EAAAA,6BAA6BA,EAE/CA,IAAKA,EAALA,CAKAA,IAAKA,GAAIA,GAAIA,EAAGA,EAAMA,EAAWA,OAAYA,EAAJA,EAASA,IAAKA,CACnDA,GAAIA,GAAWA,EAAWA,EAE1BA,IAAIA,GAAoBA,EAAAA,SAASA,YAAYA,GAAWA,IAAYA,CAChEA,EAAYA,mBAAmBA,EAE/BA,IAAIA,GAAUA,EAAAA,8BAA8BA,wBAAwBA,EAAaA,EAAmBA,EAWpGA,IAVIA,IAGKA,EAAaA,OAAOA,UACrBA,EAAaA,OAAOA,WACpBA,EAAaA,OAAOA,QAAQA,OAASA,GAEzCA,EAAaA,OAAOA,QAAQA,GAAKA,IAGhCA,EACDA,OAAOA,CAEXA,IAAaA,GAIrBA,MAAOA,MAGX/B,QAAAA,GACIA,EACAA,EACAA,EACAA,EACAA,EACAA,GAQAgC,GAAIA,GAA4BA,EAAoBA,MACpDA,IAAKA,GAA8BA,EAA0BA,gBAGxDA,EAAAA,SAASA,YAAYA,GAAuBA,EAA0BA,iBAA3EA,CAGAA,GAAIA,GAAgBA,EAA0BA,SAC9CA,IAAKA,EAALA,CAQAA,IAAKA,GADDA,GAFAA,EAAcA,EAAAA,6BAA6BA,GAGtCA,EAAIA,EAAGA,EAAMA,EAAcA,OAAYA,EAAJA,EAASA,IAAKA,CACtDA,GAAIA,GAAaA,EAAcA,GAC3BA,EAAmBA,EAASA,SAC5BA,EAAgBA,EAAWA,MAC/BA,IAAIA,GAAoBA,EAAAA,SAASA,YAAYA,GAAWA,EAAWA,WAAYA,CAC3EA,GAAIA,GAAUA,EAAAA,8BAA8BA,wBAAwBA,EAAaA,EAAmBA,EACpGA,IAAIA,EAIAA,GAAIA,EACAA,IAAKA,GAAIA,GAAIA,EAAGA,EAAOA,EAAcA,OAAYA,EAAJA,EAAUA,IAAKA,CACxDA,GAAIA,GAAcA,EAAcA,GAC5BA,EAAcA,EAAYA,MAC9BA,IAAIA,EAAYA,YAAcA,EAAkBA,CAC5CA,GAAIA,GAAuBA,EAAAA,UAAUA,QAAQA,EAC7CA,GAAqBA,QAAUA,EAC/BA,EAAYA,OAASA,EAErBA,GAAaA,CACbA,YAKRA,GAAWA,QAAUA,EACrBA,EAAWA,EAA2BA,GAEtCA,GAAaA,CAIrBA,KAAKA,EACDA,OAAOA,GAInBA,MAAOA,KAGXhC,QAAAA,GACIA,EACAA,EACAA,EACAA,EACAA,EACAA,GAEAiC,GAAIA,GAAcA,EAAAA,wBAAwBA,GACtCA,EAAgBA,EAAsCA,EAAaA,EAAeA,KAAMA,EAAmBA,EAAUA,EAAOA,EAAkBA,GAC9IA,EAAgBA,EAAsCA,EAAaA,EAAeA,QAASA,EAAmBA,EAAUA,EAAOA,EAAkBA,EAErJA,IAAIA,GAAiBA,EAAeA,CAChCA,GAAIA,GAAkBA,EAAcA,EAOpCA,OALIA,KACAA,EAAgBA,KAAOA,GACvBA,IACAA,EAAgBA,QAAUA,GAEvBA,GAIfjC,QAAAA,GACIA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,GAOAkC,GAAKA,EAALA,CAGAA,GAAIA,GAAOA,EAAwBA,IACnCA,IAAKA,EAALA,CAGAA,GAAIA,GAAgBA,EAAiCA,EAAaA,EAAMA,EAAmBA,EAAUA,EAAOA,EAAkBA,EAC9HA,IAAIA,EAAeA,CACfA,GAAIA,GAAqBA,EAAcA,EAGvCA,OAFAA,GAAmBA,KAAOA,EAEnBA,KAIflC,QAAAA,GACIA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,GAQAmC,GAAIA,GAAaA,EAAaA,QAC9BA,IAAKA,EAALA,CAGAA,GAAIA,GACAA,EACAA,EAAsBA,EAAaA,mBACnCA,KAEAA,EAAuBA,EAAAA,SAASA,YAAYA,GAAuBA,IAGvEA,KAAKA,GAAIA,GAAIA,EAAGA,EAAMA,EAAWA,OAAYA,EAAJA,EAASA,IAAKA,CACnDA,GAAIA,GAAYA,EAAWA,GACvBA,EAAWA,EAAUA,SACrBA,EAAyCA,IAE7CA,IAAIA,GACAA,GAAIA,GAAoBA,EAAAA,SAASA,YAAYA,GAAWA,IAAYA,CAIhEA,GAAIA,GAAUA,EAAAA,8BAA8BA,wBAAwBA,EAAaA,EAAmBA,EAChGA,KACAA,EAAqBA,EAAcA,GACnCA,EAAmBA,QAAUA,QAKrCA,GAAqBA,EACjBA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EAGRA,IAAIA,IACKA,IACDA,EAAgBA,EAAuBA,IAC3CA,EAAcA,SAASA,GAAKA,GAEvBA,GAEDA,MAKZA,MAAOA,IAGXnC,QAAAA,GAAgCA,GAC5BoC,GAAIA,OAAOA,eAAeA,KAAUA,OAAOA,UACvCA,MAAOA,EAGXA,IAAIA,GAAYA,EAAcA,EAE9BA,OADAA,GAAUA,SAAWA,EAAQA,EAAKA,UAC3BA,EAGXpC,QAAAA,GACIA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,GAQAqC,GAAIA,GAAcA,EAAAA,uBAAuBA,EAAeA,GACpDA,EAAgBA,EAChBA,EACAA,EAAcA,QACdA,EAAcA,KACdA,EAAcA,SACdA,EAAcA,eACdA,EACAA,EACAA,EACAA,EACAA,EAEJA,IAAIA,EAAeA,CACfA,GAAIA,GAAiBA,EAAcA,EAGnCA,OAFAA,GAAeA,KAAOA,EAEfA,GAIfrC,QAAAA,GACIA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,GAWAsC,IAAIA,EAAEA,QAAQA,KAAeA,EAAEA,QAAQA,KAGlCA,EAASA,UACTA,EAAAA,SAASA,YAAYA,GAAuBA,KADjDA,CAIAA,GAAIA,GAASA,EAAEA,UAAUA,EAASA,SAAAA,GAAOA,MAAAA,GAAIA,YAAcA,EAASA,UACpEA,MAAaA,EAATA,GAAJA,CAOAA,IAAKA,GAFDA,GADAA,EAASA,EAAQA,OAGZA,EAASA,EAAGA,EAASA,EAAWA,OAAiBA,EAATA,EAAiBA,IAAUA,CACxEA,GAAIA,GAAWA,EAAWA,EAE1BA,IAAIA,GAAoBA,EAAAA,SAASA,YAAYA,GAAWA,IAAYA,CAChEA,EAAYA,mBAAmBA,EAE/BA,IAAIA,GAAUA,EAAAA,8BAA8BA,wBAAwBA,EAAaA,EAAmBA,EACpGA,IAAIA,EAASA,CACJA,IACDA,EAAgBA,EAAcA,GAElCA,IAAIA,GAAeA,EAAcA,GAAUA,EAAcA,EAAcA,IACnEA,EAAoBA,EAAaA,OAChCA,KACDA,EAAaA,QAAUA,EAAoBA,GAAIA,OAAMA,IAEzDA,EAAkBA,GAAUA,EAGhCA,IAAKA,EACDA,OAIZA,MAAOA,KAGXtC,QAAAA,GACIA,EACAA,EACAA,EACAA,EACAA,GAYAuC,IAAKA,GAHDA,GAAUA,EAASA,SAASA,QAC5BA,EAAaA,EAASA,SACtBA,EAAcA,EAAAA,wBAAwBA,EAAUA,GAC3CA,EAAIA,EAAGA,EAAMA,EAAQA,OAAYA,EAAJA,EAASA,IAAKA,CAChDA,GAAIA,GAASA,EAAQA,EACrBA,IAAIA,EAAOA,YAAcA,EAAYA,CACjCA,GAAIA,GAAUA,EAAAA,8BAA8BA,wBAAwBA,EAAaA,EAAmBA,EAChGA,KACAA,EAAOA,QAAUA,KAMjCvC,QAAAA,GAAuCA,EAA0CA,GAG7EwC,GAAIA,GAAoBA,EAAoBA,WAAWA,EACvDA,IAAKA,EAAkBA,gBAElBA,EAAAA,SAASA,YAAYA,GAAuBA,EAAkBA,iBAAnEA,CAGAA,GAAIA,GAAaA,EAAkBA,SAC/BA,EAA0CA,EAE1CA,EAAqBA,EAASA,QAClCA,IAAIA,EAAoBA,CACpBA,GAAIA,GAAeA,EAAoBA,MACvCA,IAAIA,EACAA,IAAKA,GAAIA,GAAIA,EAAGA,EAAMA,EAAaA,OAAYA,EAAJA,EAASA,IAAKA,CACrDA,GAAIA,GAAcA,EAAaA,EAC/BA,IAAIA,EAAYA,OAAOA,YAAcA,EAAoBA,CACrDA,EAAeA,CACfA,SAMhBA,OACIA,OAAQA,EACRA,WAAYA,IAIpBxC,QAAAA,GAAkCA,EAAoBA,GAIlDyC,GAA6BA,IAAzBA,EAAcA,OAAlBA,CAGAA,GAAIA,GAAsBA,EAASA,WACnCA,IAAKA,EAALA,CAGAA,GAAIA,GAAaA,EAAoBA,UACrCA,IAAKA,GAAoCA,IAAtBA,EAAWA,OAA9BA,CAGAA,GAAIA,GAAiBA,EAAWA,GAC5BA,EAAgBA,EAAeA,OAAOA,MACtCA,EAAyBA,EAAeA,cAC5CA,IAAKA,GAAkBA,GAA2BA,EAAcA,EAAcA,IAG9EA,OAASA,MAAOA,EAAAA,sBAAsBA,UAAoBA,QAI9DzC,QAAAA,GAAwCA,EAAoBA,GAOxD0C,GAAIA,GAAsBA,EAASA,WACnCA,IAAKA,EAALA,CAGAA,GAAIA,GAASA,EAAoBA,MACjCA,IAAKA,EAGLA,IAAKA,GAAIA,GAAIA,EAAGA,EAAMA,EAAOA,OAAYA,EAAJA,EAASA,IAAKA,CAC/CA,GAAIA,GAAWA,EAAOA,GAClBA,EAAgBA,EAASA,OAAOA,KAEpCA,IAAKA,GAAkBA,EAAcA,GAArCA,CAGAA,GAAIA,GAAMA,EAASA,GAGnBA,IAFYA,SAARA,IACAA,EAAMA,EAASA,UACPA,SAARA,EAAJA,CAGAA,GAAIA,GAAMA,EAASA,GAGnBA,IAFYA,SAARA,IACAA,EAAMA,EAASA,UACPA,SAARA,EAGJA,OAASA,IAAKA,EAAKA,IAAKA,OAIhC1C,QAAAA,GACIA,EACAA,EACAA,GAFA2C,SAAAA,IAAAA,KAGAA,IAAIA,GAA+BA,CASnCA,OARAA,GAAiCA,GAE7BA,IACAA,EAAOA,eAAiBA,GAExBA,IACAA,EAAOA,OAASA,GAEbA,EAGX3C,QAAAA,GAAoBA,EAA8BA,GAC9C4C,EAAOA,QAAUA,EACXA,WAAMA,MAAAA,IACNA,WAAMA,MAAAA,GAAYA,IAI5B5C,QAAAA,GAAqBA,GAMjB6C,IAAKA,GAFDA,GADAA,KAGKA,EAAIA,EAAGA,EAAMA,EAAOA,OAAYA,EAAJA,EAASA,IAAKA,CAC/CA,GAAIA,GAAQA,EAAOA,EAEnBA,KAAKA,GAAgBA,EAAaA,WAAaA,EAAMA,SAAUA,CAK3DA,GAJAA,GACIA,WAGAA,EAAMA,SAAUA,CAChBA,EAAaA,SAAWA,EAAMA,QAE9BA,IAAIA,GAASA,EAAMA,MAGMA,UAArBA,EAAOA,UACPA,EAAaA,KAAOA,EAAOA,UACtBA,EAAOA,cACZA,EAAaA,KAAOA,EAAOA,aAGnCA,EAAOA,KAAKA,GAGhBA,EAAaA,OAAOA,KAAKA,GAG7BA,MAAOA,GAGX7C,QAAAA,GAA0BA,EAAoBA,GAG1C8C,GAAIA,EACJA,QAAQA,EAAmCA,EAASA,YAAaA,IAC7DA,IAAKA,GACDA,EAAsBA,EAAAA,yBAAyBA,MAAMA,EACrDA,MAEJA,KAAKA,GACDA,EAAsBA,EAAAA,sBAAsBA,MAAMA,GAI1DA,MAAOA,IAAuBA,EAGlC9C,QAAAA,GAA4CA,EAAkCA,GAC1E+C,GAAKA,IAAeA,EAAEA,QAAQA,GAA9BA,CAGAA,GAAIA,GAAaA,EAAYA,UAC7BA,IAAKA,GAAoCA,IAAtBA,EAAWA,OAA9BA,CAGAA,GAAIA,GAASA,EAAYA,MACzBA,KAAIA,EAAEA,QAAQA,KAGVA,EAAOA,UAAUA,KAAKA,SAAAA,GAAMA,QAAEA,EAAGA,WAMrCA,IAAKA,GAFDA,GAAgBA,EAAWA,GAAGA,OAAOA,MAEhCA,EAAIA,EAAGA,EAAMA,EAAiBA,OAAYA,EAAJA,EAASA,IAAKA,CACzDA,GAAIA,GAAyBA,EAAiBA,GAAGA,WACjDA,IAAKA,GAGAA,GAAgBA,EAA2CA,EAAuBA,QAAvFA,CAIAA,GAAIA,GAAoBA,EAAuBA,WAC3CA,EACAA,EAAaA,EAAqDA,IAClEA,EAAYA,EAAoDA,EAEpEA,OAAIA,GACOA,EAEJA,MAIf/C,QAAAA,GAA2BA,EAAwBA,GAC/CgD,GAAKA,IAAUA,EAAEA,QAAQA,GAAzBA,CAGAA,GAAIA,GAAYA,EAAOA,KAAKA,MAC5BA,MAAIA,EAAUA,OAASA,GAAvBA,CAGAA,GAAIA,GAAOA,EAAOA,KAAKA,KAAKA,QAC5BA,IAAKA,GAAwBA,IAAhBA,EAAKA,OAKlBA,IAAKA,GAFDA,GAAWA,EAAUA,GAAGA,QAAQA,GAAGA,MAE9BA,EAAIA,EAAGA,EAAMA,EAAiBA,OAAYA,EAAJA,EAASA,IAAKA,CACzDA,GAAIA,GAAoBA,EAAiBA,GAAGA,MAC5CA,IAAKA,IAGAA,EAAYA,EAA+CA,EAAkBA,OAC9EA,EAAYA,EAA+CA,EAAkBA,SAC7EA,OAAOA,KAKnBhD,QAAAA,GAAsBA,EAAoCA,GACtDiD,MAAIA,IAASA,GAAeA,EAAYA,KAC7BA,EAAMA,EAAYA,KAAKA,IADlCA,OAIJjD,QAAAA,GAAqBA,EAAoCA,GACrDkD,MAAIA,IAASA,GAAeA,EAAAA,OACjBA,EAAMA,EAAAA,OAAAA,OADjBA,OAIJlD,QAAAA,IAAyBA,EAAoCA,GACzDmD,MAAIA,IAASA,GAAeA,EAAYA,MAC7BA,EAAMA,EAAYA,MAAMA,IADnCA,OAz9CYnD,EAAAA,MAAKA,EA0iBLA,EAAAA,iBAAgBA,EAwxBhBA,EAAAA,mBAAkBA,GAn0CxBlV,EAAAA,EAAAA,oBAAAA,EAAAA,wBAlFHD,EAAAA,EAAAA,OAAAA,EAAAA,WAARA,UAAAA,YCAP,IAAOA,UAAP,SAAOA,GAAQA,GAAAA,IAAAA,SAAAA,GAGXC,QAAAA,GAAwCA,GACpCsY,MAAOA,UAACA,GAA8CA,MAAAA,GAAiBA,IAAIA,IAG/EtY,QAAAA,GAA+BA,EAA2CA,GACtEuY,MAAiCA,kBAAtBA,GACAA,EAAkBA,GAEIA,gBAAtBA,GACAA,EADXA,OARYvY,EAAAA,wBAAuBA,EAIvBA,EAAAA,eAAcA,GAPnBD,EAAAA,EAAAA,OAAAA,EAAAA,WAARA,UAAAA,YCAP,IAAOA,UAAP,SAAOA,IAGHA,SAAYA,GACRyY,EAAAA,EAAAA,KAAAA,GAAAA,OACAA,EAAAA,EAAAA,MAAAA,GAAAA,QACAA,EAAAA,EAAAA,KAAAA,GAAAA,OACAA,EAAAA,EAAAA,IAAAA,GAAAA,MACAA,EAAAA,EAAAA,KAAAA,GAAAA,OACAA,EAAAA,EAAAA,OAAAA,GAAAA,SACAA,EAAAA,EAAAA,OAAAA,GAAAA,SACAA,EAAAA,EAAAA,YAAAA,GAAAA,eARQzY,EAAAA,eAAAA,EAAAA,iBAAAA,GAAAA,cAHTA,UAAAA,YCAP,IAAOA,UAAP,SAAOA,GAAQA,GAAAA,IAAAA,SAAAA,GAiCXC,GAAcA,IAAdA,SAAcA,GACVyY,QAAAA,GAA0BA,GACtBC,MAAOA,GAAeA,IACfA,EAAWA,IACXA,EAAYA,IACZA,EAAmBA,IACnBA,EAAcA,IACdA,EAAeA,IACfA,EAA4BA,IAC5BA,EAAWA,GAGtBD,QAAAA,GAAwBA,GACpBE,GAAIA,GAAOA,EAAUA,UACrBA,IAAIA,EAAMA,CACNA,GAAIA,GAAaA,EAAWA,EAAUA,WACtCA,OAAOA,GAAAA,UAAUA,EAAAA,UAAUA,EAAYA,EAAKA,MAAOA,EAAKA,YAIhEF,QAAAA,GAA4BA,GACxBG,GAAIA,GAAwBA,EAAUA,cACtCA,IAAIA,EAAuBA,CACvBA,GAAIA,GAAgBA,EAAAA,UAAUA,EAAWA,GAAwBA,EAAsBA,KACvFA,OAAOA,GAAAA,eAAeA,EAAeA,EAAsBA,QAInEH,QAAAA,GAAuBA,GACnBI,GAAIA,GAAuBA,EAAUA,SACrCA,IAAIA,EAAsBA,CACtBA,GAAIA,GAAaA,EAAWA,EAC5BA,OAAOA,GAAAA,UAAUA,EAAYA,EAAqBA,OAI1DJ,QAAAA,GAAqCA;AACjCK,GAAIA,GAAYA,EAAUA,6BAC1BA,IAAIA,EAAWA,CACXA,GAAIA,GAAcA,EAAWA,EAAUA,OACvCA,OAAOA,GAAAA,wBAAwBA,EAAaA,EAAUA,OAAOA,KAAMA,EAAUA,MAAMA,OAI3FL,QAAAA,GAAoBA,GAChBM,GAAIA,GAASA,EAAUA,MACvBA,IAAIA,EAAQA,CACRA,GAAIA,GAAaA,EAAWA,EAAUA,OACtCA,OAAOA,GAAAA,UAAUA,EAAYA,EAAOA,OAI5CN,QAAAA,GAAqBA,GACjBO,GAAIA,GAAUA,EAAUA,OACxBA,IAAIA,EAASA,CACTA,GAAIA,GAAaA,EAAWA,EAAUA,QACtCA,OAAOA,GAAAA,WAAWA,EAAYA,EAAQA,OAI9CP,QAAAA,GAAwBA,GACpBQ,GAAIA,GAAkBA,EAAUA,UAEhCA,IAAIA,EAAiBA,CACjBA,GAAIA,GAAaA,EAAWA,EAAUA,WACtCA,OAAOA,GAAAA,UAAUA,EAAYA,EAAgBA,YAIrDR,QAAAA,GAAoBA,GAChBS,GAAIA,GAA6BA,EAAiBA,6BAA6BA,EAC/EA,OAAOA,GAAAA,OAAOA,EAA2BA,OAAQA,EAA2BA,OAAQA,EAA2BA,WAtEnGT,EAAAA,UAASA,GADfzY,EAAAA,EAAAA,gBAAAA,EAAAA,kBA+FdA,IAAcA,IAAdA,SAAcA,GACVmZ,QAAAA,GAA+BA,GAE3BC,MAAIA,aAAkBA,GAAKA,cAEnBA,OAAQA,EAAOA,OACfA,OAAQA,EAAOA,QAIhBA,EAAOA,OAAOA,EAAwBA,UATjCD,EAAAA,eAAcA,GADpBnZ,EAAAA,EAAAA,kBAAAA,EAAAA,oBAgCdA,IAoKcA,GApKdA,EAAAA,SAAAA,GAAAqZ,QAAAA,KAAsCC,EAAAA,MAAAA,KAAAA,WA+FtCD,MA/FsCA,WAAAA,EAAAA,GAG3BA,EAAAA,UAAAA,eAAPA,SAAsBA,GAClBE,GAAIA,GAAYA,EAAKA,OAAOA,OAAOA,EAAyBA,SAC5DA,IAAKA,GAGDA,EAAUA,OAAQA,CAClBA,GAAIA,GAAoCA,EAAUA,MAGlDA,OAFAA,GAAUA,KAAOA,EAAKA,KAEbA,OAAQA,KAIlBF,EAAAA,UAAAA,gBAAPA,SAAuBA,GACnBG,GAAIA,GAAYA,EAAKA,OAAOA,OAAOA,EAAyBA,SAC5DA,IAAKA,GAGDA,EAAUA,OAAQA,CAClBA,GAAIA,GAAsCA,EAAUA,MAGpDA,OAFAA,GAAWA,KAAOA,EAAKA,KAEdA,QAASA,KAInBH,EAAAA,UAAAA,UAAPA,SAAiBA,GACbI,GAAIA,GAAiCA,EAAKA,IAAIA,OAAOA,KACrDA,IAAIA,GAAgBA,EAAaA,OAAQA,CACrCA,GAAIA,GAAsCA,EAAaA,MAEvDA,OADAA,GAAQA,UAAYA,EAAKA,MAChBA,WAAYA,GAClBA,GAAIA,GAAgBA,EAAaA,WAAYA,CAChDA,GAAIA,GAAsCA,EAAaA,UAEvDA,OADAA,GAAQA,UAAYA,EAAKA,MAChBA,WAAYA,GAClBA,GAAIA,GAAgBA,EAAaA,eAAgBA,CACpDA,GAAIA,GAA8CA,EAAaA,cAE/DA,OADAA,GAAQA,UAAYA,EAAKA,MAChBA,mBAAoBA,GAGjCA,GAAIA,GAAgBA,EAAKA,IAAIA,OAAOA,EAAyBA,SAC7DA,IAAIA,GAAiBA,EAAcA,OAAQA,CACvCA,GAAIA,GAAsCA,EAAcA,MAGxDA,OAFAA,GAAQA,UAAYA,EAAKA,MAEhBA,WAAYA,KAItBJ,EAAAA,UAAAA,eAAPA,SAAsBA,GAClBK,GAAIA,GAAgBA,EAAKA,IAAIA,OAAOA,EAAyBA,SAE7DA,IAAIA,GAAiBA,EAAcA,OAAQA,CACvCA,GAAIA,GAA2CA,EAAoBA,MAEnEA,OADAA,GAAaA,KAAOA,EAAKA,WAChBA,UAAWA,KAIrBL,EAAAA,UAAAA,oBAAPA,SAA2BA,GACvBM,GAAIA,GAAyDA,EAAKA,IAAIA,OAAOA,EAA2BA,SACxGA,IAAKA,EAALA,CAGAA,GAAIA,EAUJA,OATIA,GAA2BA,YAC3BA,GACIA,OAAQA,EAA2BA,UAAUA,OAC7CA,OAAQA,EAA2BA,UAAUA,OAC7CA,KAAMA,EAA2BA,UAAUA,KAC3CA,MAAOA,EAAKA,QAIhBA,EAA2BA,WAEvBA,+BACIA,QACIA,OAAQA,EAA2BA,UAAUA,OAAOA,OACpDA,OAAQA,EAA2BA,UAAUA,OAAOA,OACpDA,KAAMA,EAA2BA,UAAUA,OAAOA,MAEtDA,MAAOA,EACPA,cAAeA,EAA2BA,UAAUA,iBAKvDA,eAAgBA,KA5FfN,EAAAA,SAAoCA,GAAIA,GA8F1DA,GA/FsCrZ,EAAAA,sBAiGtCA,EAAAA,SAAAA,GAAA4Z,QAAAA,KAAuCC,EAAAA,MAAAA,KAAAA,WAmCvCD,MAnCuCA,WAAAA,EAAAA,GAG5BA,EAAAA,UAAAA,YAAPA,SAAmBA,GACfE,GAAIA,IACAA,OAAQA,EAAKA,OACbA,OAAQA,EAAKA,OAKjBA,OAHIA,GAAKA,WACLA,EAAUA,UAAYA,EAAKA,WAEtBA,OAAQA,IAGdF,EAAAA,UAAAA,6BAAPA,SAAoCA,GAChCG,GAAIA,GAA2BA,EAAKA,GAEpCA,IAAIA,YAAsBA,GAAAA,aAAcA,CACpCA,GAAIA,IACAA,OAAQA,EAAWA,OACnBA,OAAQA,EAAWA,OACnBA,KAAMA,EAAKA,SAMfA,OAHIA,GAAWA,WACXA,EAAwBA,UAAYA,EAAWA,WAG/CA,WACIA,OAAQA,EACRA,cAAeA,EAAKA,SA7BtBH,EAAAA,SAAqCA,GAAIA,GAkC3DA,GAnCuC5Z,EAAAA,sBAqCvCA,EAAAA,SAAAA,GAAAga,QAAAA,KAAyCC,EAAAA,MAAAA,KAAAA,WA4BzCD,MA5ByCA,WAAAA,EAAAA,GAG9BA,EAAAA,UAAAA,eAAPA,SAAsBA,GAClBE,GACIA,GACAA,EAFAA,EAAcA,EAAKA,IAAIA,OAAOA,EAAyBA,SAmB3DA,OAfIA,GAAYA,WACZA,GACIA,KAAMA,EAAKA,UACXA,OAAQA,EAAYA,UAAUA,OAAOA,OACrCA,OAAQA,EAAYA,UAAUA,OAAOA,QAEzCA,EAAeA,EAAYA,WAG3BA,GACIA,KAAMA,EAAKA,UACXA,OAAQA,EAAYA,OAAOA,OAC3BA,OAAQA,EAAYA,OAAOA,SAI/BA,UAAWA,EACXA,UAAWA,IAxBLF,EAAAA,SAAuCA,GAAIA,GA2B7DA,GA5ByCha,EAAAA,uBA8BzCA,SAAcA,GACVma,QAAAA,GAAiCA,GAC7BC,MAE2BA,WAFnBA,EAAUA,QACdA,EAAUA,YACVA,EAAUA,SAGlBD,QAAAA,GAAgCA,GAC5BE,GAAIA,GAAUA,EAAUA,QACpBA,EAAUA,YACVA,EAAUA,OAEdA,OAAIA,GACOA,EAAOA,KADlBA,OAIJF,QAAAA,GAAiCA,GAC7BG,GAAIA,GAAYA,EAAUA,SAC1BA,OAAIA,GACOA,EAAUA,KADrBA,OAIJH,QAAAA,GAA6BA,GACzBI,MAAIA,GAAUA,8BACHA,EAAUA,8BAA8BA,OAE5CA,EAAUA,QAAUA,EAAUA,SAAWA,EAAUA,WAG9DJ,QAAAA,GAAiCA,GAC7BK,GAAIA,GAAOA,EAAgBA,EAE3BA,OAAIA,GACOA,EAGJA,EAA6BA,GAAWA,OAGnDL,QAAAA,GAA6CA,GACzCM,GAAIA,GAAqCA,EAAUA,QAC/CA,EAAUA,YACVA,EAAUA,YACVA,EAAUA,WACVA,EAAUA,gBACVA,EAAUA,oBACVA,EAAUA,SACTA,EAAUA,+BAAiCA,EAAUA,8BAA8BA,QACpFA,CAEJA,QACIA,OAAQA,EAAMA,OACdA,OAAQA,EAAMA,OACdA,UAAWA,EAAMA,WApDTN,EAAAA,iBAAgBA,EAMhBA,EAAAA,gBAAeA,EASfA,EAAAA,iBAAgBA,EAMhBA,EAAAA,aAAYA,EAOZA,EAAAA,iBAAgBA,EAUhBA,EAAAA,6BAA4BA,GAvClCna,EAAAA,EAAAA,mBAAAA,EAAAA,uBApUHD,EAAAA,EAAAA,OAAAA,EAAAA,WAARA,UAAAA,YCAP,IAAOA,UAAP,SAAOA,GACHA,GAAcA,IAAdA,SAAcA,GAsCV2a,QAAAA,GAAmCA,EAAoBA,GACnDC,IAAKA,GAAgDA,IAA5BA,EAAiBA,OACtCA,OAASA,SAAUA,EAAUA,SAASA,EAE1CA,IAAIA,EACAA,IAA4BA,GAAAA,GAAAA,EAAvBA,EAAAA,EAAAA,OAAAA,IAAwCA,CAAxCA,GAAIA,GAAmBA,EAAgBA,EAExCA,IAAIA,EAASA,EAAUA,GACnBA,OAASA,SAAUA,EAAUA,SAASA,EAE1CA,IAAIA,EAAgBA,aAAeA,EAASA,YACxCA,MAAOA,GAAmBA,EAAUA,EAExCA,IAAIA,EAAgBA,MAAQA,EAASA,KACjCA,MAAOA,GAAYA,EAAUA,EAAgBA,KAEjDA,IAAIA,EAAgBA,QAAUA,EAASA,OACnCA,MAAOA,GAAcA,EAAUA,EAAgBA,OAEnDA,IAAIA,EAAgBA,OAASA,EAASA,MAClCA,MAAOA,GAAaA,EAAUA,EAAgBA,WAGrDA,IAAIA,EAAAA,iBAAiBA,iBAAiBA,GAMvCA,OAASA,SAAUA,EAAUA,SAASA,EAG1CA,QAASA,SAASA,GAGtBD,QAAAA,GAA4BA,EAAoBA,GAI5CE,GAAIA,GAAsBA,EAAgBA,YACtCA,EAAcA,EAASA,WAC3BA,KAAKA,EACDA,OAASA,SAASA,EAEtBA,IAAIA,EACJA,IAAIA,EAAoBA,WACpBA,EAAWA,EAAoBA,SAASA,UACpCA,GAAYA,EAASA,KAAKA,CAC1BA,GAAIA,GACAA,EAAaA,EAAYA,WACzBA,EAAcA,EAASA,IACvBA,EAAiBA,MACrBA,IAAIA,EACAA,IAAKA,GAAIA,GAAIA,EAAGA,EAAMA,EAAWA,OAAYA,EAAJA,EAASA,IAAKA,CACnDA,GAAIA,GAAWA,EAAWA,EAE1BA,IADAA,EAAiBA,EAASA,OAAOA,OACbA,SAAhBA,GAA6BA,EAAiBA,EAAaA,CAG3DA,GAAIA,GAAoBA,EAAgBA,MAAMA,EAASA,OAAQA,EAAGA,EAAcA,EAEhFA,GAAUA,IAAaA,eACvBA,EAAQA,WAAWA,MACfA,OAAQA,EAASA,OACjBA,OAAQA,KAMxBA,GAAIA,EAAYA,QAAUA,EAAYA,OAAOA,OAASA,GAAKA,IAClDA,IACDA,EAAiBA,EAAYA,OAAOA,GAAGA,OAAOA,QAE9BA,SAAhBA,GAA6BA,EAAiBA,GAAaA,CAC3DA,EAAUA,MACVA,EAAQA,OAASA,EAAAA,KAAKA,kBAAkBA,oBAExCA,KAAKA,GAAIA,GAAIA,EAAGA,EAAMA,EAAYA,OAAOA,OAAYA,EAAJA,EAASA,IAAKA,CAC3DA,GAAIA,GAASA,EAAYA,OAAOA,GAC5BA,GACIA,OAAQA,EAAOA,OACfA,OAAQA,EAAgBA,MAAMA,EAAOA,OAAQA,EAAGA,EAAcA,GAGnDA,UAAfA,EAAOA,MACPA,EAAcA,IAAMA,EAAOA,KACZA,SAAfA,EAAOA,MACPA,EAAcA,IAAMA,EAAOA,KACPA,SAApBA,EAAOA,WACPA,EAAcA,SAAWA,EAAOA,UAEpCA,EAAQA,OAAOA,KAAKA,IAK5BA,IACAA,GACIA,SAAUA,EAASA,SACnBA,YAAaA,IAM7BA,MAAIA,GAAoBA,EAAUA,IACrBA,SAAUA,EAAUA,SAASA,GAEnCA,KAGXF,QAAAA,GAAuBA,EAAoBA,GAIvCG,MAAIA,GAASA,QACAA,SAAUA,EAAUA,SAASA,IAEjCA,SAASA,GAGtBH,QAAAA,GAAqBA,EAAoBA,GAKrCI,GAAIA,GAAWA,EAASA,QACxBA,OAA2EA,OAAvEA,EAAcA,EAAYA,EAASA,SAAUA,EAAgBA,QACpDA,SAAUA,EAAUA,SAASA,IAEjCA,SAASA,GAGtBJ,QAAAA,GAAsBA,EAAoBA,GAItCK,MAAIA,GAASA,OACAA,SAAUA,EAAUA,SAASA,IAEjCA,SAASA,GAGtBL,QAAAA,GAA4BA,GAGxBM,IAAKA,GAFDA,GAAQA,EAEHA,EAAIA,EAAGA,EAAMA,EAAQA,OAAYA,EAAJA,EAASA,IACtCA,EAAQA,GAAGA,aACVA,CAGVA,OAAOA,GAGXN,QAAAA,GAA8BA,GAG1BO,IAAKA,GAFDA,GAAQA,EAEHA,EAAIA,EAAGA,EAAMA,EAAQA,OAAYA,EAAJA,EAASA,IACvCA,EAAQA,GAAGA,aACTA,CAGVA,OAAOA,GAIXP,QAAAA,GAAyBA,EAAoBA,EAA8BA,GACvEQ,MAAKA,IAAgBA,EAGjBA,EAAYA,eAAiBA,EAAqBA,EAASA,aAAcA,EAAYA,eAC9EA,EAEPA,EAAYA,cAAgBA,EAAoBA,EAAUA,EAAYA,YAAaA,IAC5EA,EAEPA,EAAYA,OAASA,EAAaA,EAAUA,EAAYA,OACjDA,EAEPA,EAAYA,SAAWA,EAAeA,EAASA,OAAQA,EAAYA,SAC5DA,EAEPA,EAAYA,QAAUA,EAAcA,EAASA,MAAOA,EAAYA,MAAOA,IAChEA,GAEJA,GAjBIA,EAoBfR,QAAAA,GAA6BA,EAAoBA,EAAiDA,GAG9FS,GAAIA,GAAsBA,EAASA,WACnCA,KAAKA,EACDA,OAAOA,CAMXA,IAAIA,EAAoBA,SAAUA,CAC9BA,GAAIA,GAAWA,EAAoBA,SAASA,SAI5CA,IAHIA,GAA8BA,EAAoBA,SAASA,YAC3DA,EAAWA,EAAoBA,SAASA,WAExCA,EAAUA,CACVA,GAAIA,GAAcA,CAMlBA,IALIA,EAAoBA,QAAUA,EAAoBA,OAAOA,OACzDA,EAAMA,EAAoBA,OAAOA,GAAGA,OAAOA,OACtCA,EAAoBA,YAAcA,EAAoBA,WAAWA,SACtEA,EAAMA,EAAoBA,WAAWA,GAAGA,OAAOA,QAEfA,MAAhCA,EAAcA,EAAKA,GACnBA,OAAOA,GAInBA,OAAOA,EAGXT,QAAAA,GAAwBA,EAAgCA,GAGpDU,MAAKA,IAGEA,GAFIA,EAKfV,QAAAA,GAAsBA,EAAoBA,GAGtCW,GAAIA,GAAWA,EAASA,QACxBA,OAA8EA,OAAvEA,EAAcA,EAAYA,EAASA,SAAUA,EAAgBA,OAGxEX,QAAAA,GAAuBA,EAA8BA,EAAwCA,GAGzFY,IAAKA,EACDA,OAAOA,CAEXA,IAAIA,EAAiBA,SAAUA,CAC3BA,GAAIA,GAAWA,EAAiBA,SAASA,SAIzCA,IAHIA,GAA8BA,EAAiBA,SAASA,YACxDA,EAAWA,EAAiBA,SAASA,WAErCA,EAAUA,CACVA,GAAIA,GAAcA,CAIlBA,IAHIA,EAAcA,MAAQA,EAAcA,KAAKA,SACzCA,EAAMA,EAAcA,KAAKA,QAEOA,MAAhCA,EAAcA,EAAKA,GACnBA,OAAOA,GAInBA,OAAOA,EAGXZ,QAAAA,GAA8BA,EAAoCA,GAG9Da,MAAKA,IAGAA,EAASA,aAGPA,GALIA,EAYfb,QAAAA,GAA8BA,EAAeA,EAA8BA,GAGvEc,MAAKA,IAGAA,GAAmCA,SAAtBA,EAAcA,KAAqBA,EAAcA,IAAMA,EAC9DA,EAA8BA,uBAEfA,SAAtBA,EAAcA,KAAqBA,EAAcA,IAAMA,EAChDA,EAA8BA,uBADzCA,OANAA,OAcJd,QAAAA,GAAsBA,EAA8BA,EAAkBA,EAAqCA,GACvGe,GAAKA,GAAwCA,SAAvBA,EAAcA,KAApCA,CAGAA,GAAIA,GAAeA,EAAcA,KAC7BA,EAAiBA,EAAYA,EACjCA,IAAIA,EAEAA,IAA2BA,GADvBA,GAAkBA,EAAeA,MACVA,EAAAA,EAAtBA,EAAAA,EAAAA,OAAAA,IAAsCA,CAAtCA,GAAIA,GAAkBA,EAAeA,EACtCA,IAAIA,EAAmBA,EAAeA,YAAcA,EAChDA,OAAQA,GACJA,IAAKA,GAAAA,mBAAmBA,QACpBA,MAAOA,GAA8BA,4BACzCA,KAAKA,GAAAA,mBAAmBA,SACpBA,MAAOA,GAA8BA,6BACzCA,KAAKA,GAAAA,mBAAmBA,kBACpBA,MAAOA,GAA8BA,0CAQ7Df,QAAAA,GACIA,EACAA,EACAA,EACAA,EACAA,GAOAgB,IAAKA,GAHDA,MACAA,KAEKA,EAAeA,EAAGA,EAAeA,EAASA,OAAuBA,EAAfA,EAA6BA,IAAgBA,CACpGA,GAAIA,GAAUA,EAASA,GACnBA,EAAoBA,EAAQA,WAC5BA,EAAqBA,EAAQA,mBAC7BA,EAA8BA,EAAsBA,EAAoBA,EAAmBA,GAC3FA,IAEJA,IAAKA,EAAEA,QAAQA,GAgBXA,EAAcA,aAfdA,KAAKA,GAAIA,GAAiBA,EAAGA,EAAiBA,EAAkBA,OAAyBA,EAAjBA,EAAiCA,IAAkBA,CACvHA,GAAIA,GAAYA,EAAkBA,GAC9BA,EAAyBA,EAAwBA,EAAaA,EAAWA,EAC7EA,IAAKA,EAAEA,QAAQA,GAQXA,EAAcA,KAAKA,OAPnBA,KAAkBA,GAAAA,GAAAA,EAAbA,EAAAA,EAAAA,OAAAA,IAAoCA,CAApCA,GAAIA,GAASA,EAAsBA,EACpCA,GAAMA,aAAeA,EACrBA,EAAMA,eAAiBA,EACvBA,EAAOA,KAAKA,IAW5BA,IAAKA,EAAEA,QAAQA,IAAkBA,EAAoBA,CACjDA,GAAIA,GAAmBA,EAAEA,UAAUA,GAE/BA,EAAoBA,EAAEA,OAAOA,EAAeA,SAACA,GAAcA,MAAAA,QAAOA,KAAKA,GAAWA,OAASA,GAC1FA,GAAEA,QAAQA,KACXA,EAAiBA,WAAaA,GAClCA,EAAkBA,KAAKA,IAI/BA,OACIA,kBAAmBA,EAAgBA,YAAYA,GAC/CA,cAAeA,EAAgBA,YAAYA,IAInDhB,QAAAA,GAAiCA,EAAqCA,EAAqCA,GAOvGiB,IAAKA,GAHDA,GAAiBA,OAAOA,KAAKA,GAC7BA,KAEKA,EAAIA,EAAGA,EAAMA,EAAeA,OAAYA,EAAJA,EAASA,IAAKA,CACvDA,GAAIA,GAAmBA,EAAeA,GAClCA,EAAcA,EAAYA,KAAcA,EAAEA,QAAQA,EAAYA,GAAUA,sBACxEA,EAAgBA,EAAUA,GAE1BA,EAAYA,EAAiBA,EAAUA,EAAaA,GACpDA,EAAaA,EAAcA,EAAWA,EACxBA,OAAdA,GACAA,EAAOA,MACHA,KAAMA,EACNA,SAAUA,GAGlBA,IAAIA,GAAYA,EAAaA,EAAeA,EAAUA,EAAaA,EAClDA,OAAbA,GACAA,EAAOA,MACHA,KAAMA,EACNA,SAAUA,IAKtBA,MAAOA,GAGXjB,QAAAA,GAA+BA,EAAwDA,EAA8CA,GACjIkB,GAAIA,EAAEA,QAAQA,GACVA,OAAOA,CAEXA,KAAKA,IAAsBA,EACvBA,OAAOA,CAEXA,IAAIA,GAAuCA,EAAAA,KAAKA,yBAEhDA,OAAOA,GAAEA,MAAMA,EAAoBA,SAACA,GAChCA,GAAIA,GAAwBA,KACxBA,EAA2BA,EAAkBA,EAAiBA,WAC9DA,KACAA,EAAwBA,EAAyBA,WAAWA,EAAiBA,cACjFA,IAAIA,GAAwBA,EAA0BA,SAASA,EAAmBA,EAAkBA,KAEpGA,OAAKA,IAA0BA,EAGxBA,EAAAA,KAAKA,wBAAwBA,iBAAiBA,EAAmBA,EAAuBA,IAFpFA,IAMnBlB,QAAAA,GAAiCA,EAAkBA,EAAqCA,GAIpFmB,GAAIA,GAAqBA,EAAYA,EACrCA,OAAIA,GACIA,EACOA,EACJA,EAAmBA,MAAMA,OAG7BA,EAGXnB,QAAAA,GAAwCA,EAAqBA,GACzDoB,GAAIA,GACGA,GACAA,EAAUA,aACVA,EAAUA,YAAaA,CAC1BA,GAAIA,GAAgBA,EAAUA,YAAYA,WACtCA,EAAgBA,EAAUA,YAAYA,UAC1CA,IAAIA,GACGA,GACAA,EAAcA,SAAWA,EAAcA,OAAQA,CAClDA,IAAKA,GAAIA,GAAIA,EAAGA,EAAMA,EAAcA,OAAYA,EAAJA,EAASA,IAAKA,CACtDA,GAAIA,GAAcA,EAAcA,GAAGA,SAC/BA,EAAcA,EAAcA,GAAGA,SAE/BA,EAAYA,EAAkBA,EAClCA,IAAIA,IAAcA,EAAkBA,GAChCA,OAAOA,CAEXA,KAAKA,GAAIA,GAAIA,EAAOA,EAAJA,EAAeA,IAC3BA,IAAKA,EAAAA,sBAAsBA,OAAOA,EAAYA,GAAIA,EAAYA,IAC1DA,OAAOA,EAInBA,OAAOA,GAIfA,OAAOA,EAGXpB,QAAAA,GAA2BA,GACvBqB,MAAIA,GACOA,EAASA,OAEbA,EAGXrB,QAAAA,GAA6CA,EAAiCA,GAC1EsB,MAAKA,IAAYA,EAGZA,GAAYA,EAGbA,EAAQA,cAAgBA,EAAQA,aACzBA,EAEPA,EAAQA,YAAcA,EAAQA,WACvBA,EAEPA,EAAQA,YAAcA,EAAQA,WACvBA,EAEPA,EAAQA,OAASA,EAAQA,MAClBA,EAEPA,EAAQA,OAASA,EAAQA,MAClBA,GAEJA,GAjBIA,GAHAA,EAwBftB,QAAAA,GAAqCA,EAA6BA,GAC9DuB,IAAKA,IAAcA,EACfA,OAAOA,CAEXA,KAAKA,IAAcA,EACfA,OAAOA,CAEXA,IAAIA,GAAwBA,EAAUA,QAAQA,OAC1CA,EAAmBA,EAAUA,QAAQA,MAEzCA,IAAIA,IAA0BA,EAC1BA,OAAOA,CAEXA,KAAKA,GAAIA,GAAYA,EAAOA,EAAJA,EAAsBA,IAC1CA,IAAKA,EAAiBA,6BAA6BA,EAAUA,QAAQA,GAAIA,EAAUA,QAAQA,IACvFA,OAAOA,CAGfA,QAAOA,EA/iBXvB,GAAOA,GAAkBA,SAASA,gBAG3BA,EAA4BA,EAAQA,KAAKA,2BAkBhDA,SAAYA,GACRwB,EAAAA,EAAAA,uBAAAA,GAAAA,yBACAA,EAAAA,EAAAA,uBAAAA,GAAAA,yBACAA,EAAAA,EAAAA,6BAAAA,GAAAA,+BACAA,EAAAA,EAAAA,8BAAAA,GAAAA,gCACAA,EAAAA,EAAAA,uCAAAA,GAAAA,0CALQxB,EAAAA,gCAAAA,EAAAA,kCAAZA,IAAYA,GAAAA,EAAAA,6BAgBIA,GAAAA,mBAAkBA,EAgJlBA,EAAAA,YAAWA,EAWXA,EAAAA,cAAaA,EAYbA,EAAAA,SAAQA,EA6GRA,EAAAA,cAAaA,EAyCbA,EAAAA,uBAAsBA,EA6GtBA,EAAAA,iBAAgBA,EAchBA,EAAAA,wBAAuBA,EAsCvBA,EAAAA,6BAA4BA,EA0B5BA,EAAAA,qBAAoBA,GA9hB1B3a,EAAAA,EAAAA,mBAAAA,EAAAA,uBADXA,UAAAA,YCAP,IAAOA,UAAP,SAAOA,GAEHA,GAAcA,IAAdA,SAAcA,GAEVoc,QAAAA,GAAuBA,EAA0BA,EAA0BA,GAKvEC,MAHAA,GAAIA,GAAKA,KACTA,EAAIA,GAAKA,KAELA,IAAMA,GACCA,GAENA,IAAOA,GACDA,EAKJA,EAAKA,OAAOA,OAAoBA,EAAEA,KAAmBA,EAAEA,KAAMA,GAGxED,QAAAA,GAAmCA,EAAqCA,GACpEE,IAAIA,EAAEA,QAAQA,GAAdA,CAIAA,IAAqBA,GADjBA,MACiBA,EAAAA,EAAhBA,EAAAA,EAAAA,OAAAA,IAA2BA,CAA3BA,GAAIA,GAAYA,EAAUA,EAC3BA,GAAMA,KAAkBA,EAASA,MAGrCA,MAAOA,GAAgBA,EAAOA,IAGlCF,QAAAA,GAAgCA,EAAwBA,GACpDG,IAAIA,EAAEA,QAAQA,GAAdA,CAIAA,IAAmBA,GADfA,GACeA,EAAAA,EAAdA,EAAAA,EAAAA,OAAAA,IAAsBA,CAAtBA,GAAIA,GAAUA,EAAOA,GAClBA,EAASA,EAAKA,uBAAuBA,UAAUA,EAE/CA,GADAA,EACaA,EAAKA,cAAcA,GAAGA,EAAYA,GAElCA,GAAUA,EAQ/BA,MALIA,IACIA,IACAA,EAAaA,EAAQA,KAAKA,cAAcA,IAAIA,IAG7CA,EAAQA,KAAKA,eAAeA,WAAWA,IA/ClCH,EAAAA,OAAMA,EAiBNA,EAAAA,mBAAkBA,EAYlBA,EAAAA,gBAAeA,GA/BrBpc,EAAAA,EAAAA,wBAAAA,EAAAA,0BAqDdA,IAAcA,IAAdA,SAAcA,GAGVC,QAAAA,GAA4CA,GACxCuc,MAAOA,IAAIA,GAA0BA,GAHzCvc,GAAOA,GAAOA,SAASA,IAEPA,GAAAA,4BAA2BA,CAI3CA,IAAAA,GAAAA,WAIIwc,QAAAA,GAAmBA,GAGfC,KAAKA,MAAQA,EACbA,KAAKA,KAAOA,GAAIA,GAAKA,WAAMA,MAAAA,GAAAA,sBAAsBA,UAAUA,KAUnED,MAPIA,QAAAA,eAAWA,EAAAA,UAAAA,QjC2lMPlY,IiC3lMJkY,WACIE,MAAOA,MAAKA,OjC6lMZlY,YAAY,EACZC,cAAc,IiC3lMlB+X,OAAAA,eAAWA,EAAAA,UAAAA,OjC8lMPlY,IiC9lMJkY,WACIG,MAAOA,MAAKA,KAAKA,YjCgmMjBnY,YAAY,EACZC,cAAc,IiC/lMtB+X,MAzBUzc,EAAAA,EAAAA,OAAAA,EAAAA,WAvDXA,UAAAA,YCAP,IAAOA,UAAP,SAAOA,GAAQA,GAAAA,IAAAA,SAAAA,GACXC,GAEcA,GAFPA,EAAOA,SAASA,MAEvBA,SAAcA,GACV4c,QAAAA,GAAwBA,EAAiCA,GACrDC,GAAIA,GAAgBA,EAAAA,uBAAuBA,QAAgBA,EAASA,KACpEA,OAAKA,GAGEA,EAAAA,YAAYA,cAAwBA,EAASA,MAAOA,IAFhDA,EAKfD,QAAAA,GAA0BA,GACtBE,MAAOA,IAAIA,GAA0BA,GATzBF,EAAAA,QAAOA,EAQPA,EAAAA,UAASA,CAIzBA,IAAAA,GAAAA,WAIIG,QAAAA,GAAmBA,GAGfC,KAAKA,OAASA,EACdA,KAAKA,KAAOA,GAAIA,GAAKA,WAAMA,MAAAA,GAAAA,sBAAsBA,eAAeA,KAUxED,MAPIA,QAAAA,eAAWA,EAAAA,UAAAA,SlC4sMHzY,IkC5sMRyY,WACIE,MAAOA,MAAKA,QlC8sMRzY,YAAY,EACZC,cAAc,IkC5sMtBsY,OAAAA,eAAWA,EAAAA,UAAAA,OlC+sMHzY,IkC/sMRyY,WACIG,MAAOA,MAAKA,KAAKA,YlCitMb1Y,YAAY,EACZC,cAAc,IkChtM1BsY,MA/BU/c,EAAAA,EAAAA,wBAAAA,EAAAA,4BAHHD,EAAAA,EAAAA,OAAAA,EAAAA,WAARA,UAAAA,YCAP,IAAOA,UAAP,SAAOA,GAAQA,GAAAA,IAAAA,SAAAA,GAeXC,GAAcA,IAAdA,SAAcA,GAMVmd,QAAAA,GAAoBA,GAGhBC,GAAIA,GAAsCA,EAAQA,iBAC9CA,EAAmCA,EAAQA,qBAC3CA,EAA8BA,EAAQA,UACtCA,EAA+CA,EAAQA,kBACvDA,EAA+CA,EAAQA,kBACvDA,EAAgDA,EAAQA,sBACxDA,EAA8CA,EAAQA,iBACtDA,EAAwBA,EAAQA,sBAChCA,EAAqBA,EAAQA,QAEjCA,IAAoCA,IAAhCA,EAAqBA,QAAiBA,GAAoBA,EAASA,SAAUA,CAE7EA,GAAIA,GAAyCA,EAAAA,wBAAwBA,2BAA2BA,EAAkBA,EAASA,UACvHA,EAAsCA,EAAAA,wBAAwBA,uBAAuBA,EAAkBA,EAC3GA,MAAKA,GAAuBA,GAAgBA,GAAqBA,GAAsBA,GACnFA,MAAOA,EAEXA,IAAIA,GAAgDA,EAAAA,iBAAiBA,uBAAuBA,EAAaA,EAAkBA,EAAoBA,EAAmBA,GAAmBA,iBAErLA,IAAIA,EAA4BA,CAC5BA,GAAIA,GAA6CA,EAAEA,KAAKA,EAA4BA,SAACA,GACjFA,MAAOA,GAAgBA,OAASA,EAAgBA,MAAMA,YAG1DA,IAAIA,EAA2BA,CAC3BA,GAAIA,GAAmBA,EAAqBA,GACxCA,EAA+BA,KAAKA,0BAA0BA,EAAkBA,EAAWA,EAA2BA,EAAmBA,EAAmBA,EAE5JA,IACAA,EAAqBA,KAAKA,KAK1CA,MAAOA,GAoBXD,QAAAA,GACIA,EACAA,EACAA,EACAA,EACAA,EACAA,GASAE,GAAIA,GAAgBA,EAA0BA,EAAqBA,GAC/DA,EAAgBA,EAA0BA,EAAqBA,EAEnEA,IAAKA,GAAUA,EAAfA,CAGAA,GAAIA,GAAUA,EAA4BA,EAAOA,EAAeA,aAC5DA,EAAUA,EAA4BA,EAAOA,EAAeA,YAEhEA,IAAKA,GAAYA,EAAjBA,CAGAA,GAAIA,GAAkBA,EAAQA,OAC1BA,EAAkBA,EAAQA,MAE9BA,KAAIA,EAAEA,QAAQA,KAAoBA,EAAEA,QAAQA,GAA5CA,CAIAA,GAAIA,GAAoBA,EAAYA,EACpCA,IAAKA,EAALA,CAEAA,GAAIA,GAAoBA,EAAYA,EACpCA,IAAKA,EAALA,CAIAA,GAAIA,GAAuBA,EAAWA,EAAiBA,GAAjDA,EAAOA,EAAAA,QAAEA,EAAOA,EAAAA,QAClBA,EAAmBA,EAAQA,GAC3BA,EAAmBA,EAAQA,EAAQA,OAASA,EAG9BA,UAAdA,IACAA,EAAUA,EAAoBA,GAGlCA,IAAIA,GAAuBA,EAAsBA,EAASA,GAApDA,EAAKA,EAAAA,MAAEA,EAASA,EAAAA,UAGlBA,EAAYA,EAAQA,GACpBA,EAAYA,EAAQA,EAAQA,OAASA,GAErCA,GAAiBA,EAAkBA,GACnCA,GAAaA,EAAYA,EAAQA,EAAWA,EAAYA,EAAQA,GAGhEA,EAA+BA,EAAyBA,EAASA,EAASA,EAAeA,EAAWA,EAAgBA,EAA2BA,EAAmBA,EAAmBA,EAEzLA,OAAOA,QAGXF,QAAAA,GAAmCA,EAAkCA,GAIjEG,IAAqBA,GAAAA,GAAAA,EAAhBA,EAAAA,EAAAA,OAAAA,IAA0BA,CAA1BA,GAAIA,GAAYA,EAASA,EAC1BA,IAAIA,EAASA,gBAAkBA,EAC3BA,MAAOA,GAASA,MAI5BH,QAAAA,GAAqCA,EAAkBA,GAMnDI,GAAIA,GAAiBA,EAAkBA,EAAUA,EAAYA,WAC7DA,IAAIA,EACAA,MAAOA,EAGXA,IAAIA,EAAYA,OAAOA,OACnBA,MAAOA,KAEXA,IAAIA,GAAcA,EAAkBA,EAAUA,EAAYA,OAC1DA,OAAIA,GACOA,EAEJA,KAGXJ,QAAAA,GAA2BA,EAAkBA,GAIzCK,MAAOA,GAAEA,KAAKA,EAASA,SAACA,GACpBA,MAAOA,GAAOA,OAAOA,MAAMA,KAInCL,QAAAA,GAAqBA,GACjBM,IAAIA,EAAEA,QAAQA,IAAwBA,MAAbA,EAAOA,GAAhCA,CAGAA,GAAIA,SAA0BA,GAAOA,EAErCA,KAAIA,EAAEA,KAAKA,EAAQA,SAACA,GAAUA,MAAUA,QAAVA,SAAyBA,KAAUA,IAGjEA,MAAOA,IAGXN,QAAAA,GAAoBA,EAAwBA,GAIxCO,GAAIA,GAAeA,EAAEA,IAAIA,EAAiBA,GACtCA,EAAeA,EAAEA,OAAOA,EAAcA,SAACA,GACvCA,MAAOA,GAAUA,KAEjBA,EAAqBA,EAAEA,MAAMA,GAA5BA,EAAOA,EAAAA,GAAEA,EAAOA,EAAAA,EACrBA,QACIA,QAASA,EACTA,QAASA,GAIjBP,QAAAA,GAA6BA,GAIzBQ,IAAKA,GADDA,GAAqBA,EAAQA,GAAIA,UAC5BA,EAAIA,EAAGA,EAAIA,EAAQA,OAAQA,IAChCA,EAAQA,GAAYA,EAAQA,GAAIA,UAAYA,CAEhDA,OAAOA,GAGXR,QAAAA,GAA+BA,EAAmBA,GAI9CS,GAAIA,GAAOA,EAAEA,IAAIA,GAAWA,EAAQA,OAChCA,EAAOA,EAAEA,IAAIA,GAAWA,EAAQA,OAEhCA,EAAOA,EAAEA,MAAMA,GACdA,IAAIA,SAACA,GACFA,MAAOA,MAAAA,IAACA,EAAIA,EAASA,KAExBA,MAEDA,EAAOA,EAAEA,MAAMA,GACdA,IAAIA,SAACA,EAAGA,GACLA,OAAQA,EAAIA,IAASA,EAAQA,GAAKA,KAErCA,MAEDA,EAAQA,EAAOA,EACfA,EAAYA,EAAQA,EAAOA,CAE/BA,QACIA,MAAOA,EACPA,UAAWA,GAInBT,QAAAA,GACIA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,GAUAU,GAAIA,GAAyCA,EAA0BA,YAAYA,WAAtCA,OAAAA,MACzCA,EAAyCA,EAA0BA,YAAYA,OAAtCA,OAAAA,MACzCA,IACJA,GAAiBA,IAASA,CAC1BA,IAAIA,KACJA,GAAWA,IAASA,CAEpBA,IAAIA,GAA+BA,EAAAA,mCAC9BA,iBACGA,QACIA,YAAaA,EAAQA,OAAOA,YAC5BA,UAAWA,EACXA,KAAMA,EAAQA,OAAOA,KACrBA,UAAWA,EAAQA,OAAOA,UAC1BA,MAAOA,GAEXA,OAAQA,KAEXA,YACGA,UACIA,QACIA,YAAaA,EAAQA,OAAOA,YAC5BA,UAAWA,EAAAA,qBACXA,KAAMA,EAAQA,OAAOA,KACrBA,UAAWA,EAAQA,OAAOA,UAC1BA,MAAOA,GAEXA,OAAQA,MAGfA,OAELA,OADAA,GAAAA,kBAAkBA,iBAAiBA,EAAoBA,EAAwCA,EAAmBA,KAAuBA,GAClIA,EA1RXV,GAAMA,GAA+BA,aACxBA,GAAAA,qBAA+BA,cAE5BA,EAAAA,IAAGA,EAyDHA,EAAAA,0BAAyBA,GA/D/Bnd,EAAAA,EAAAA,qBAAAA,EAAAA,yBAfHD,EAAAA,EAAAA,OAAAA,EAAAA,WAARA,UAAAA,YCAP,IAAOA,UAAP,SAAOA,GAAQA,GAAAA,IAAAA,SAAAA,GAkBXC,GAAcA,IAAdA,SAAcA,GAEV8d,QAAAA,GAAuCA,EAAoCA,GAKvEC,IAAmBA,GADfA,MACeA,EAAAA,EAAdA,EAAAA,EAAAA,OAAAA,IAAsBA,CAAtBA,GAAIA,GAAUA,EAAOA,GAClBA,EAAQA,EAAOA,KACnBA,IAAKA,EAGLA,IAAKA,GAAIA,KAAYA,GACjBA,GAAIA,EAAMA,GAAWA,CACjBA,GAAIA,GAAKA,EAAYA,EAChBA,KACDA,EAAKA,EAAYA,GAAYA,GAAIA,GAAAA,+BACrCA,EAAGA,MAAMA,MAAOA,SAAUA,EAAOA,YAE7BA,GAAyBA,EAAsBA,KAC/CA,EAAGA,qBAAuBA,EAAsBA,KAKhEA,MAAOA,GAIXD,QAAAA,GAA2CA,EAAoCA,GAE3EE,IAAmBA,GADfA,MACeA,EAAAA,EAAAA,EAAAA,EAASA,QAAvBA,EAAAA,EAAAA,OAAAA,IAA+BA,CAA/BA,GAAIA,GAAMA,EAAAA,EACXA,OAAMA,EAAOA,OAA0BA,IAAjBA,EAAOA,OAAgBA,EAAOA,MAAQA,GAAKA,EAAOA,OAASA,EAAQA,QAAzFA,CAGAA,GAAIA,GAASA,EAAQA,EAAOA,MAC5BA,IAAIA,EAAQA,CACRA,GAAIA,GAAWA,EAAOA,SAClBA,IAA6CA,SAAjCA,EAAmBA,KAC/BA,EAAmBA,GAAYA,EAAOA,UAAYA,EAAAA,mBAAmBA,QAAUA,EAAAA,mBAAmBA,YAI9GA,MAAOA,GAzCKF,EAAAA,uBAAsBA,EA2BtBA,EAAAA,2BAA0BA,GA7BhC9d,EAAAA,EAAAA,0BAAAA,EAAAA,8BAlBHD,EAAAA,EAAAA,OAAAA,EAAAA,WAARA,UAAAA,YCAP,IAAOA,UAAP,SAAOA,GAAQA,GAAAA,IAAAA,SAAAA,GAKXC,QAAAA,GAA6CA,GACzCie,MAAOA,IAAIA,GAAuBA,GAwCtCje,QAAAA,GAA6BA,EAA0CA,GAGnEke,MAAOA,GAAuBA,EAAoBA,OAAQA,IACtDA,EAAuBA,EAAoBA,WAAYA,GAG/Dle,QAAAA,GAAgCA,EAAsCA,GAGlEme,GAAKA,EAGLA,IAAmBA,GAAAA,GAAAA,EAAdA,EAAAA,EAAAA,OAAAA,IAAsBA,CAAtBA,GAAIA,GAAUA,EAAOA,GAClBA,EAAQA,EAAOA,OAAOA,KAC1BA,IAAKA,GAAUA,EAAMA,GAGrBA,MAAOA,IA3DCne,EAAAA,6BAA4BA,CAI5CA,IAAAA,GAAAA,WAKIoe,QAAAA,GAAYA,GAGRC,KAAKA,SAAWA,EAChBA,KAAKA,iBA0BbD,MAvBWA,GAAAA,UAAAA,aAAPA,SAAoBA,KAIbA,EAAAA,UAAAA,aAAPA,SAAoBA,GAChBE,GAAIA,GAAgBA,KAAKA,cACrBA,EAASA,EAAcA,EAI3BA,IAHKA,IACDA,EAASA,EAAcA,GAAYA,EAAoBA,KAAKA,SAAUA,IAErEA,EAALA,CAGAA,GAAIA,GAAQA,KAAKA,KACjBA,OAAaA,OAATA,EACOA,EAAOA,OAAOA,KAAKA,OAD9BA,SAIGF,EAAAA,UAAAA,mBAAPA,SAA0BA,GAGtBG,KAAKA,MAAQA,GAErBH,MA5CWre,EAAAA,EAAAA,OAAAA,EAAAA,WAARA,UAAAA,YCAP,IAAOA,UAAP,SAAOA,GAAQA,GAAAA,IAAAA,SAAAA,GAOXC,QAAAA,GAAuCA,EAA8BA,GACjEwe,MAAOA,IAAIA,GAAiBA,EAAeA,GAD/Bxe,EAAAA,uBAAsBA,CAItCA,IAAAA,GAAAA,WAKIye,QAAAA,GAAYA,EAAyBA,GAIjCC,KAAKA,SAAWA,EAChBA,KAAKA,iBAAmBA,EAsBhCD,MAnBWA,GAAAA,UAAAA,aAAPA,SAAoBA,GAGhBE,GAAIA,GAASA,KAAKA,MAClBA,IAAcA,MAAVA,EAGJA,MAAOA,GAAAA,sBAAsBA,EAAMA,KAAKA,iBAAkBA,KAAKA,SAAUA,IAGtEF,EAAAA,UAAAA,aAAPA,SAAoBA,KAIbA,EAAAA,UAAAA,mBAAPA,SAA0BA,GAGtBG,KAAKA,OAASA,GAEtBH,MA3CW1e,EAAAA,EAAAA,OAAAA,EAAAA,WAARA,UAAAA,YCAP,IAAOA,UAAP,SAAOA,GAAQA,GAAAA,IAAAA,SAAAA,GACXC,GAAAA,GAAAA,WAAA6e,QAAAA,MAMAA,MAHWA,GAAAA,UAAAA,SAAPA,SAAgBA,KAGpBA,IANa7e,GAAAA,eAAcA,GADhBD,EAAAA,EAAAA,OAAAA,EAAAA,WAARA,UAAAA,YCAP,IAAOA,UAAP,SAAOA,GAAQA,GAAAA,IAAAA,SAAAA,GACXC,GAAAA,GAAAA,SAAAA,GAII8e,QAAAA,GAAYA,EAAmBA,GAI3BC,EAAAA,KAAAA,MACAA,KAAKA,UAAYA,EACjBA,KAAKA,UAAYA,EAUzBD,MApByCA,WAAAA,EAAAA,GAa9BA,EAAAA,UAAAA,SAAPA,SAAgBA,GAGZE,GAAIA,GAAaA,EAAYA,aAAaA,KAAKA,UAC/CA,OAAcA,UAAVA,EACOA,KAAKA,UAAUA,MAAMA,GADhCA,QAGRF,GApByC9e,EAAAA,eAA5BA,GAAAA,oBAAmBA,GADrBD,EAAAA,EAAAA,OAAAA,EAAAA,WAARA,UAAAA,YCAP,IAAOA,UAAP,SAAOA,GAAQA,GAAAA,IAAAA,SAAAA,GAAKC,GAAAA,IAAAA,SAAAA,GAChBif,GAAcA,IAAdA,SAAcA,GAMVC,QAAAA,GAA+BA,EAAgCA,GAI3DC,EAAwBA,EAAYA,EAAGA,GAG3CD,QAAAA,GAAiCA,EAAgCA,EAAmBA,GAIhFE,GAAIA,EAAEA,QAAQA,EAAWA,UACrBA,EAASA,EAAYA,GACrBA,QAIAA,KAAKA,GADDA,GAAWA,EAAWA,SACjBA,EAAIA,EAAGA,EAAMA,EAASA,OAAYA,EAAJA,EAASA,IAAKA,CACjDA,GAAIA,GAAYA,EAASA,EACrBA,KACAA,EAAYA,EAAwBA,EAAWA,EAAWA,IAKtEA,MAAOA,GAzBKF,EAAAA,eAAcA,GANpBD,EAAAA,EAAAA,sBAAAA,EAAAA,0BADEjf,EAAAA,EAAAA,QAAAA,EAAAA,YAALD,EAAAA,EAAAA,OAAAA,EAAAA,WAARA,UAAAA,YCAP,IAAOA,UAAP,SAAOA,GAAQA,GAAAA,IAAAA,SAAAA,GAGXC,GAAAA,GAAAA,WAAAqf,QAAAA,MAuEAA,MAhEWA,GAAAA,UAAAA,aAAPA,SAAoBA,EAAoBA,GACpCC,GAAIA,GAASA,KAAKA,SAASA,SAASA,EACpCA,IAAKA,IAAUA,EAAEA,QAAQA,EAAOA,YAGhCA,MAAOA,GAAOA,WAAWA,SAASA,IAG/BD,EAAAA,UAAAA,cAAPA,SAAqBA,EAAoBA,GACrCE,GAAIA,GAASA,KAAKA,SAASA,SAASA,EACpCA,IAAKA,IAAUA,EAAEA,QAAQA,EAAOA,aAGhCA,MAAOA,GAAOA,YAAYA,SAASA,IAGhCF,EAAAA,UAAAA,yBAAPA,SACIA,EACAA,EACAA,EACAA,GAEAG,GAAIA,GAAkBA,KAAKA,SAASA,SAASA,EAC7CA,IAAKA,IAAmBA,EAAEA,QAAQA,EAAgBA,YAAlDA,CAGAA,GAAIA,GAAoBA,EAAgBA,WAAWA,SAASA,EAC5DA,IAAKA,EAALA,CAGAA,GAAIA,GAAkBA,EAAkBA,MACxCA,IAAKA,IAAmBA,EAAEA,QAAQA,EAAgBA,YAAlDA,CAGAA,GAAIA,GAAYA,EAAgBA,WAAWA,SAASA,EACpDA,IAAIA,EAAWA,CACXA,GAAIA,GAAeA,EAAUA,mBAAqBA,EAAUA,mBAAmBA,aAAeA,CAC9FA,KAAKA,GAAgBA,EAAEA,QAAQA,EAAaA,aACxCA,MAEJA,OAAOA,GAAaA,YAAYA,SAASA,QAO1CH,EAAAA,UAAAA,oBAAPA,SAA2BA,EAAoBA,GAG3CI,GAAIA,GAASA,KAAKA,SAASA,SAASA,EACpCA,IAAKA,IAAUA,EAAEA,QAAQA,EAAOA,YAGhCA,IAAiBA,GAAAA,GAAAA,EAAAA,EAAAA,EAAOA,WAAnBA,EAAAA,EAAAA,OAAAA,IAA8BA,CAA9BA,GAAIA,GAAIA,EAAAA,EACTA,IAAIA,GACAA,EAAKA,SACLA,EAAKA,QAAQA,MACZA,EAAKA,QAAQA,IAAIA,SAAWA,GAAeA,EAAKA,QAAQA,IAAIA,OAASA,GACtEA,MAAOA,KAKvBJ,IAvEarf,GAAAA,iBAAgBA,EAqM7BA,SAAYA,GACR0f,EAAAA,EAAAA,KAAAA,GAAAA,OACAA,EAAAA,EAAAA,QAAAA,GAAAA,UACAA,EAAAA,EAAAA,KAAAA,GAAAA,OACAA,EAAAA,EAAAA,QAAAA,GAAAA,UACAA,EAAAA,EAAAA,UAAAA,GAAAA,YACAA,EAAAA,EAAAA,QAAAA,GAAAA,UACAA,EAAAA,EAAAA,OAAAA,GAAAA,SACAA,EAAAA,EAAAA,KAAAA,GAAAA,OACAA,EAAAA,EAAAA,MAAAA,GAAAA,QACAA,EAAAA,EAAAA,SAAAA,GAAAA,WACAA,EAAAA,EAAAA,SAAAA,IAAAA,WACAA,EAAAA,EAAAA,UAAAA,IAAAA,YACAA,EAAAA,EAAAA,aAAAA,IAAAA,eACAA,EAAAA,EAAAA,MAAAA,IAAAA,QACAA,EAAAA,EAAAA,WAAAA,IAAAA,aACAA,EAAAA,EAAAA,QAAAA,IAAAA,UACAA,EAAAA,EAAAA,gBAAAA,IAAAA,kBACAA,EAAAA,EAAAA,OAAAA,IAAAA,UAlBQ1f,EAAAA,yBAAAA,EAAAA,2BAAAA,GAAAA,wBAxMDD,EAAAA,EAAAA,OAAAA,EAAAA,WAARA,UAAAA,YCAP,IAAOA,UAAP,SAAOA,GAEHA,GAmBcA,GAnBPA,EAAmBA,SAASA,iBAE5BA,EAAuBA,EAAQA,KAAKA,qBAEpCA,EAAkBA,EAAQA,KAAKA,gBAO/BA,EAAmBA,EAAQA,KAAKA,kBAQvCA,SAAcA,GAEV4f,QAAAA,GAAiCA,GAC7BC,MAAIA,IAAgDA,IAA5BA,EAAiBA,OAC9BA,EAAiBA,GAAGA,aAD/BA,OAOJD,QAAAA,GAAoCA,GAChCE,GAAIA,GAAeA,EAAiBA,EACpCA,IAAIA,EAAcA,CACdA,GAAIA,GAAUA,EAAiBA,GAAGA,SAASA,QACvCA,EAAiBA,EAAAA,gBAAgBA,SAAiBA,EAASA,EAAaA,OAAOA,QAC/EA,EAAmBA,EAAAA,gBAAgBA,SAAiBA,EAASA,EAAaA,OAAOA,SACrFA,QACIA,OAAQA,EACRA,SAAUA,IAOtBF,QAAAA,GAAoDA,EAAqCA,GACrFG,GAAIA,GAAeA,EAAiBA,EACpCA,IAAIA,GAAgBA,EAASA,CACzBA,GAAIA,GAAmCA,EAAAA,KAAKA,0BAA0BA,SAASA,EAASA,EAAaA,OAAOA,OAAQA,MAChHA,EAAgCA,EAAAA,KAAKA,0BAA0BA,SAASA,EAASA,EAAaA,OAAOA,SAAUA,KACnHA,QACIA,OAAQA,EAAeA,EAAaA,MAAQA,KAC5CA,SAAUA,EAAWA,EAASA,MAAQA,OAOlDH,QAAAA,GAA+BA,EAAqCA,EAA4CA,GAC5GI,GAAIA,IACAA,aAAcA,UACdA,WAKJA,IAAIA,GAAeA,IAAYA,EAAEA,QAAQA,GAAUA,CAC/CA,GAAIA,MACAA,IACJA,KAAKA,GAAIA,KAAQA,GACbA,IAAuBA,GAAAA,GAAAA,EAAAA,EAAAA,EAAYA,GAAMA,MAApCA,EAAAA,EAAAA,OAAAA,IAA0CA,CAA1CA,GAAIA,GAAUA,EAAAA,GACXA,EAASA,EAAQA,SAASA,EAAWA,SACzCA,IAAIA,EAAQA,CACRA,GAAIA,IACAA,UAAWA,EAAOA,KAClBA,KAAMA,EAAOA,KAAKA,OAAOA,GAAIA,GAA6BA,IAG9DA,GAAmBA,KAAKA,GACxBA,EAAuBA,KAAKA,EAAkBA,OAM1DA,EAAyBA,EAAiBA,kBAAkBA,EAG5DA,KAAKA,GAAIA,GAAIA,EAAGA,EAAIA,EAAuBA,OAAQA,IAAKA,CACpDA,GAAIA,GAAoBA,EAAmBA,EAC3CA,GAAkBA,KAAOA,EAAuBA,GAGpDA,EAAYA,QAAUA,EAG1BA,MAAOA,GA3EKJ,EAAAA,iBAAgBA,EAQhBA,EAAAA,oBAAmBA,EAenBA,EAAAA,oCAAmCA,EAcnCA,EAAAA,eAAcA,CAyC9BA,IAAAA,GAAAA,SAAAA,GAIIK,QAAAA,GAAYA,GACRC,EAAAA,KAAAA,MACAA,KAAKA,gBAAkBA,EAqG/BD,MA3G2CA,WAAAA,EAAAA,GAShCA,EAAAA,UAAAA,YAAPA,SAAmBA,GACfE,MAAOA,GAAKA,QAGTF,EAAAA,UAAAA,eAAPA,SAAsBA,GAClBG,MAAOA,GAA6BA,mBAAmBA,EAAMA,KAAKA,kBAG/DH,EAAAA,UAAAA,gBAAPA,SAAuBA,GACnBI,MAAOA,GAA6BA,mBAAmBA,EAAMA,KAAKA,kBAG/DJ,EAAAA,UAAAA,UAAPA,SAAiBA,GACbK,MAAOA,GAA6BA,oBAAoBA,EAAMA,KAAKA,kBAGhEL,EAAAA,UAAAA,eAAPA,SAAsBA,GAClBM,MAAOA,GAA6BA,oBAAoBA,EAAMA,KAAKA,kBAGhEN,EAAAA,UAAAA,oBAAPA,SAA2BA,GACvBO,MAAOA,GAA6BA,yBAAyBA,EAAMA,KAAKA,kBAG9DP,EAAAA,mBAAdA,SAAiCA,EAAqBA,GAGlDQ,GAAIA,GAAYA,EAAgBA,eAAeA,GAC3CA,EAAgBA,EAAUA,QAAUA,EAAUA,QAE9CA,EAASA,EAAgBA,OAAOA,EAAcA,QAC9CA,EAAWA,EAAOA,aAAaA,EAAcA,OAAQA,EAAcA,KAEvEA,OAAIA,GACOA,EAASA,KADpBA,QAIUR,EAAAA,oBAAdA,SAAkCA,EAAyBA,GAGvDS,GAAIA,GAAQA,EAAgBA,eAAeA,GACvCA,EAAiBA,EAAMA,YAAcA,EAAMA,WAC3CA,EAASA,EACRA,OAAOA,EAAeA,QACtBA,SACAA,SAASA,EAAeA,OAE7BA,IAAKA,EAALA,CAGAA,GAAIA,GAAkBA,EAAOA,WAAWA,SAASA,EAAiBA,iBAAiBA,GAEnFA,OAAOA,GAAgBA,OAGbT,EAAAA,oBAAdA,SAAkCA,EAAuBA,GACrDU,GAAIA,GAAYA,EAAgBA,eAAeA,GAC3CA,EAAgBA,EAAUA,SAE9BA,IAAIA,EAAeA,CACfA,GAAIA,GAASA,EAAgBA,OAAOA,EAAcA,QAC9CA,EAAYA,EAAOA,cAAcA,EAAcA,OAAQA,EAAcA,KAEzEA,IAAIA,EACAA,MAAOA,GAAUA,OAIfV,EAAAA,yBAAdA,SAAuCA,EAA4BA,GAG/DW,GAAIA,GAAQA,EAAgBA,eAAeA,EAC3CA,OAAIA,GAAMA,8BACCA,EAA6BA,sBAAsBA,EAAMA,GADpEA,QAOWX,EAAAA,sBAAfA,SAAqCA,EAA4BA,GAG7DY,GAAIA,GAAQA,EAAgBA,eAAeA,GACvCA,EAAcA,EAAiBA,6BAA6BA,EAEhEA,IAAIA,EAAMA,8BAA+BA,CACrCA,GAAIA,GAAOA,EAAgBA,OAAOA,EAAYA,QAAQA,aAAaA,EAAYA,OAAQA,EAAMA,8BAA8BA,OAAOA,KAClIA,KAAKA,EACDA,MAGJA,KAAsBA,GADlBA,GAAaA,EAAKA,OAAOA,WACPA,EAAAA,EAAjBA,EAAAA,EAAAA,OAAAA,IAA4BA,CAA5BA,GAAIA,GAAaA,EAAUA,EAC5BA,IAAIA,EAAUA,OAASA,EAAMA,8BAA8BA,cACvDA,IAAkBA,GAAAA,GAAAA,EAAAA,EAAAA,EAAUA,iBAAiBA,OAAxCA,EAAAA,EAAAA,OAAAA,IAA+CA,CAA/CA,GAAIA,GAAKA,EAAAA,EACVA,IAAIA,EAAMA,OAASA,EAAMA,8BAA8BA,MAAMA,MACzDA,MAAOA,GAAMA,OAAOA,SAGhDZ,GA3G2CL,IAhFjC5f,EAAAA,EAAAA,mBAAAA,EAAAA,uBArBXA,UAAAA,YCAP,IAAOA,UAAP,SAAOA,GAAQA,GAAAA,IAAAA,SAAAA,GAAKC,GAAAA,IAAAA,SAAAA,GA+BhB6gB,GAAcA,IAAdA,SAAcA,GAEVC,QAAAA,GAA+BA,EAAkBA,IAExCC,EAAAA,iBAAiBA,qBAAqBA,EAAOA,SAAUA,EAAQA,UAK/DA,EAAQA,SAASA,eACXA,GAAOA,SAASA,QAEvBA,EAAOA,OAASA,EAAQA,OACxBA,EAAYA,EAAOA,MAA6BA,EAAQA,OAExDA,EAAOA,aAAeA,EAAQA,aAC9BA,EAAiBA,EAAOA,YAAyCA,EAAQA,aAKzEA,EAAOA,MAAQA,EAAQA,MACvBA,EAAeA,EAAOA,KAAKA,KAAMA,EAAQA,KAAKA,MAAMA,GAEpDA,EAAOA,QAAUA,EAAQA,QACzBA,EAAeA,EAAOA,OAAOA,KAAKA,KAAMA,EAAQA,OAAOA,KAAKA,MAAMA,GAI1ED,QAAAA,GAA4BA,EAAuBA,GAInBE,IAAxBA,EAAQA,KAAKA,QAGjBA,EAAMA,EAAOA,KAAMA,EAAQA,KAAMA,EAAQA,eAAiBA,GAQ9DF,QAAAA,GAAiCA,EAA6BA,GAK1DG,GAAIA,EAAOA,YAAcA,EAAQA,WAI7BA,IAAKA,GAHDA,GAA0BA,EAAQA,WAAWA,OAGxCA,EAAwBA,EAAmBA,EAAhBA,EAAyCA,IAAiBA,CAC1FA,GAAIA,GAAkBA,EAAQA,WAAWA,GACrCA,EAAiBA,EAAOA,WAAWA,IAIlCA,EAAeA,QAAUA,EAAgBA,SAC1CA,EAAeA,WAIfA,EAAgBA,QAChBA,EAAMA,EAAeA,OAAQA,EAAgBA,OAAQA,EAAQA,eAAiBA,IAG7EA,EAAeA,UAAYA,EAAgBA,WAC5CA,EAAeA,aAGfA,EAAgBA,UAChBA,EAAMA,EAAeA,SAAUA,EAAgBA,SAAUA,EAAQA,eAAiBA,GAM9FA,GAAIA,EAAOA,QAAUA,EAAQA,OAIzBA,IAAKA,GAHDA,GAAsBA,EAAQA,OAAOA,OAGhCA,EAAqBA,EAAgBA,EAAbA,EAAkCA,IAAcA,CAC7EA,GAAIA,GAAeA,EAAQA,OAAOA,GAC9BA,EAAcA,EAAOA,OAAOA,IAI3BA,EAAYA,QAAUA,EAAaA,SACpCA,EAAYA,WAGZA,EAAaA,QACbA,EAAMA,EAAYA,OAAQA,EAAaA,OAAQA,EAAQA,eAAiBA,GAGxEA,EAAaA,YACbA,EAAMA,EAAYA,WAAYA,EAAaA,WAAYA,EAAQA,eAAiBA,IAWhGH,QAAAA,GAAeA,EAAeA,EAAgBA,GAC1CI,GAAIA,GAASA,EAAQA,OACjBA,MAAOA,EAEXA,IAAIA,KAMJA,OALcA,UAAVA,IACAA,EAASA,EAAQA,OAAOA,EAAGA,IAE/BA,MAAMA,UAAUA,KAAKA,MAAMA,EAAQA,GAE5BA,EAIXJ,QAAAA,GAA+BA,EAA8BA,EAA+BA,GAIxFK,GAAKA,EAAYA,UAA4CA,IAAhCA,EAAYA,SAASA,OAAlDA,CAGAA,GAAIA,KAA6BA,EAAWA,UAA2CA,IAA/BA,EAAWA,SAASA,QAExEA,YADAA,EAAWA,SAAWA,EAAYA,SAOtCA,IAAIA,GAAmBA,EAAqBA,EAAYA,UACpDA,EAAkBA,EAAWA,SAASA,EAAWA,SAASA,OAASA,GACnEA,EAAiBA,EAAMA,EAAWA,SAAUA,EAAYA,SAAUA,EAElEA,GAAeA,OAASA,GACxBA,EAAeA,EAAiBA,EAAeA,EAAeA,OAASA,GAAIA,IAGnFL,QAAAA,GAA8BA,GAC1BM,GAAwBA,IAApBA,EAASA,OACTA,MAAOA,EAGXA,KADAA,GAAIA,GAAYA,EACTA,EAAIA,EAASA,OAAQA,IAAKA,CAC7BA,GAAIA,GAAiEA,EAASA,EAC9EA,KAAKA,EAAaA,QACdA,MAGRA,MAAOA,GA3JKN,EAAAA,eAAcA,EA2BdA,EAAAA,YAAWA,EAeXA,EAAAA,iBAAgBA,EA+EhBA,EAAAA,eAAcA,GA3HpBD,EAAAA,EAAAA,iBAAAA,EAAAA,qBA/BE7gB,EAAAA,EAAAA,eAAAA,EAAAA,mBAALD,EAAAA,EAAAA,OAAAA,EAAAA,WAARA,UAAAA,YCAP,IAAOA,UAAP,SAAOA,GAAQA,GAAAA,IAAAA,SAAAA,GACXC,GAAOA,GAAkBA,SAASA,gBAGlCA,EAAAA,WAAAqhB,QAAAA,MA2OAA,MA1OWA,GAAAA,UAAAA,eAAPA,SAAsBA,GAClBC,GAAIA,GAAUA,EAAKA,OACfA,EAAeA,EAAQA,OAAOA,KAElCA,OAAIA,KAAYA,EACLA,EAEJA,GAAIA,GAAAA,gBAAgBA,EAAcA,EAAKA,MAG3CD,EAAAA,UAAAA,gBAAPA,SAAuBA,GACnBE,GAAIA,GAAUA,EAAKA,OACfA,EAAeA,EAAQA,OAAOA,KAElCA,OAAIA,KAAYA,EACLA,EAEJA,GAAIA,GAAAA,iBAAiBA,EAAcA,EAAKA,MAG5CF,EAAAA,UAAAA,UAAPA,SAAiBA,GACbG,GAAIA,GAAUA,EAAKA,IACfA,EAAeA,EAAQA,OAAOA,KAElCA,OAAIA,KAAYA,EACLA,EAEJA,GAAIA,GAAAA,kBAAkBA,EAAcA,EAAKA,OAG7CH,EAAAA,UAAAA,eAAPA,SAAsBA,GAClBI,GAAIA,GAAUA,EAAKA,IACfA,EAAeA,EAAQA,OAAOA,KAElCA,OAAIA,KAAYA,EACLA,EAEJA,GAAIA,GAAAA,gBAAgBA,EAAcA,EAAKA,YAG3CJ,EAAAA,UAAAA,oBAAPA,SAA2BA,GACvBK,GAAIA,GAAUA,EAAKA,IACfA,EAAeA,EAAQA,OAAOA,KAElCA,OAAIA,KAAYA,EACLA,EAEJA,GAAIA,GAAAA,qBAAqBA,EAAcA,EAAKA,QAGhDL,EAAAA,UAAAA,6BAAPA,SAAoCA,GAChCM,GAAIA,GAAUA,EAAKA,IACfA,EAAeA,EAAQA,OAAOA,KAElCA,OAAIA,KAAYA,EACLA,EAEJA,GAAIA,GAAAA,8BAA8BA,EAAcA,EAAKA,KAAMA,EAAKA,WAGpEN,EAAAA,UAAAA,YAAPA,SAAmBA,GACfO,MAAOA,IAGJP,EAAAA,UAAAA,SAAPA,SAAgBA,GACZQ,GAAIA,GAAWA,EAAKA,KAChBA,EAAgBA,EAASA,OAAOA,MAChCA,EAAYA,EAAKA,MACjBA,EAAiBA,EAAUA,OAAOA,KAEtCA,OAAIA,KAAaA,GAAiBA,IAAcA,EACrCA,EAEJA,GAAIA,GAAAA,UAAUA,EAAeA,IAGjCR,EAAAA,UAAAA,aAAPA,SAAoBA,GAChBS,GAAIA,GAAUA,EAAKA,IACfA,EAAeA,EAAQA,OAAOA,MAC9BA,EAAYA,EAAKA,MACjBA,EAAiBA,EAAUA,OAAOA,MAClCA,EAAYA,EAAKA,MACjBA,EAAiBA,EAAUA,OAAOA,KAEtCA,OAAIA,KAAYA,GAAgBA,IAAcA,GAAkBA,IAAcA,EACnEA,EAEJA,GAAIA,GAAAA,cAAcA,EAAcA,EAAgBA,IAGpDT,EAAAA,UAAAA,QAAPA,SAAeA,GAMXU,IAAKA,GAFDA,GAHAA,EAAWA,EAAKA,KAChBA,EAAgBA,KAAKA,WAAWA,GAChCA,EAAyBA,EAAKA,OAGzBA,EAAIA,EAAGA,EAAMA,EAAWA,OAAYA,EAAJA,EAASA,IAAKA,CACnDA,GAAIA,GAAiBA,EAAWA,GAC5BA,EAAsBA,KAAKA,WAAWA,EAEtCA,KAAmBA,GAAwBA,IAC3CA,EAAkBA,EAAgBA,KAAKA,EAAYA,IAEnDA,GACAA,EAAgBA,KAAKA,GAG7BA,MAAIA,KAAaA,GAAkBA,EAG5BA,GAAIA,GAAAA,SAASA,EAAeA,GAAmBA,GAF3CA,GAKPV,EAAAA,UAAAA,WAARA,SAAmBA,GAIfW,IAAKA,GADDA,GACKA,EAAIA,EAAGA,EAAMA,EAAUA,OAAYA,EAAJA,EAASA,IAAKA,CAClDA,GAAIA,GAAWA,EAAUA,GACrBA,EAAgBA,EAASA,OAAOA,KAEhCA,KAAaA,GAAkBA,IAC/BA,EAAkBA,EAAgBA,KAAKA,EAAWA,IAElDA,GACAA,EAAgBA,KAAKA,GAG7BA,MAAOA,IAAmBA,GAGvBX,EAAAA,UAAAA,QAAPA,SAAeA,GACXY,GAAIA,GAAWA,EAAKA,KAChBA,EAAgBA,EAASA,OAAOA,MAChCA,EAAYA,EAAKA,MACjBA,EAAiBA,EAAUA,OAAOA,KAEtCA,OAAIA,KAAaA,GAAiBA,IAAcA,EACrCA,EAEJA,GAAIA,GAAAA,SAASA,EAAeA,IAGhCZ,EAAAA,UAAAA,aAAPA,SAAoBA,GAChBa,GAAIA,GAAWA,EAAKA,KAChBA,EAAgBA,EAASA,OAAOA,MAChCA,EAAYA,EAAKA,MACjBA,EAAiBA,EAAUA,OAAOA,KAEtCA,OAAIA,KAAaA,GAAiBA,IAAcA,EACrCA,EAEJA,GAAIA,GAAAA,cAAcA,EAAKA,WAAYA,EAAeA,IAGtDb,EAAAA,UAAAA,cAAPA,SAAqBA,GACjBc,GAAIA,GAAWA,EAAKA,KAChBA,EAAgBA,EAASA,OAAOA,MAChCA,EAAYA,EAAKA,MACjBA,EAAiBA,EAAUA,OAAOA,KAEtCA,OAAIA,KAAaA,GAAiBA,IAAcA,EACrCA,EAEJA,GAAIA,GAAAA,eAAeA,EAAeA,IAGtCd,EAAAA,UAAAA,YAAPA,SAAmBA,GACfe,GAAIA,GAAUA,EAAKA,IACfA,EAAeA,EAAQA,OAAOA,KAElCA,OAAIA,KAAYA,EACLA,EAEJA,GAAIA,GAAAA,aAAaA,IAGrBf,EAAAA,UAAAA,SAAPA,SAAgBA,GACZgB,GAAIA,GAAUA,EAAKA,IACfA,EAAeA,EAAQA,OAAOA,KAElCA,OAAIA,KAAYA,EACLA,EAEJA,GAAIA,GAAAA,UAAUA,IAGlBhB,EAAAA,UAAAA,gBAAPA,SAAuBA,GACnBiB,GAAIA,GAAWA,EAAKA,KAChBA,EAAgBA,EAASA,OAAOA,MAChCA,EAAYA,EAAKA,MACjBA,EAAiBA,EAAUA,OAAOA,KAEtCA,OAAIA,KAAaA,GAAiBA,IAAcA,EACrCA,EAEJA,GAAIA,GAAAA,iBAAiBA,EAAeA,IAGxCjB,EAAAA,UAAAA,cAAPA,SAAqBA,GACjBkB,MAAOA,IAGJlB,EAAAA,UAAAA,cAAPA,SAAqBA,GACjBmB,GAAIA,GAAUA,EAAKA,IACfA,EAAeA,EAAQA,OAAOA,KAElCA,OAAIA,KAAYA,EACLA,EAEJA,GAAIA,GAAAA,eAAeA,EAAKA,KAAMA,IAGlCnB,EAAAA,UAAAA,aAAPA,SAAoBA,GAChBoB,GAAIA,GAAUA,EAAKA,IACfA,EAAeA,EAAQA,OAAOA,KAElCA,OAAIA,KAAYA,EACLA,EAEJA,GAAIA,GAAAA,cAAcA,EAAKA,KAAMA,EAAKA,OAAQA,IAG9CpB,EAAAA,UAAAA,SAAPA,SAAgBA,GACZqB,MAAOA,IAGJrB,EAAAA,UAAAA,kBAAPA,SAAyBA,GACrBsB,MAAOA,IAGJtB,EAAAA,UAAAA,cAAPA,SAAqBA,GACjBuB,MAAOA,IAEfvB,IA3OarhB,GAAAA,eAAcA,GAJhBD,EAAAA,EAAAA,OAAAA,EAAAA,WAARA,UAAAA,YCAP,IAAOA,UAAP,SAAOA,GAAQA,GAAAA,IAAAA,SAAAA,GAEXC,GAAcA,IAAdA,SAAcA,GACV6iB,QAAAA,GAAoBA,GAGhBC,MAAOA,GAAKA,OAAOA,GAAIA,IAHXD,EAAAA,IAAGA,CAMnBA,IAAAA,GAAAA,SAAAA,GAGIE,QAAAA,KACIC,EAAAA,KAAAA,MAwFRD,MA5FuBA,WAAAA,EAAAA,GAOZA,EAAAA,UAAAA,aAAPA,SAAoBA,GAChBE,GAAIA,EAAKA,aAAeA,EAAAA,oBAAoBA,MACxCA,MAAOA,MAAKA,iBAAiBA,EACjCA,KAAKA,KAAKA,YAAYA,EAAKA,QAAUA,KAAKA,YAAYA,EAAKA,OACvDA,MAAOA,MAAKA,iBAAiBA,EAEjCA,IAAIA,GAAkBA,KAAKA,YAAYA,EAAKA,MACxCA,EAAmBA,KAAKA,YAAYA,EAAKA,MAC7CA,IAAIA,IAAoBA,EACpBA,MAAOA,MAAKA,iBAAiBA,EAEjCA,IAAIA,GAAkBA,EAChBA,EAAKA,KACLA,EAAKA,MACPA,EAAgBA,EACdA,EAAKA,MACLA,EAAKA,KAEPA,EAAUA,KAAKA,OACnBA,OAAKA,IAILA,EAAQA,IAAIA,EAASA,GAEdA,GALIA,EAAAA,cAAcA,QAAQA,KAAYA,MAQ1CF,EAAAA,UAAAA,QAAPA,SAAeA,GACXG,IAAKA,KAAKA,YAAYA,EAAKA,QAAUA,KAAKA,YAAYA,EAAKA,OACvDA,MAAOA,MAAKA,iBAAiBA,EAEjCA,IAAIA,EAQJA,OAPKA,MAAKA,UACNA,EAAUA,KAAKA,QAAUA,GAAIA,IAGjCA,EAAKA,KAAKA,OAAOA,MACjBA,EAAKA,MAAMA,OAAOA,MAEdA,GACAA,KAAKA,QAAUA,KACRA,EAAQA,YAAcA,GAG1BA,GAGJH,EAAAA,UAAAA,SAAPA,SAAgBA,GACZI,IAAKA,KAAKA,YAAYA,EAAKA,QAAUA,KAAKA,YAAYA,EAAKA,OACvDA,MAAOA,MAAKA,iBAAiBA,EAEjCA,IAAIA,GAAUA,KAAKA,OACnBA,OAAIA,IAEAA,EAAQA,SACDA,GAGJA,EAAAA,UAAMA,SAAQA,KAAAA,KAACA,IAGlBJ,EAAAA,UAAAA,iBAARA,SAAyBA,GACrBK,GAAIA,GAAUA,KAAKA,OAInBA,OAHIA,IACAA,EAAQA,SAELA,GAGHL,EAAAA,UAAAA,YAARA,SAAoBA,GAGhBM,MAAOA,aAAgBA,GAAAA,eAChBA,YAAgBA,GAAAA,iBAChBA,YAAgBA,GAAAA,gBAChBA,YAAgBA,GAAAA,sBAChBA,YAAgBA,GAAAA,UAChBA,YAAgBA,GAAAA,WAGnBN,EAAAA,UAAAA,YAARA,SAAoBA,GAChBO,MAAOA,aAAgBA,GAAAA,iBAChBA,YAAgBA,GAAAA,sBAE/BP,GA5FuBF,EAAAA,gBA8FvBA,EAAAA,WAAAU,QAAAA,MAoCAA,MA/BWA,GAAAA,UAAAA,IAAPA,SAAWA,EAAiBA,GAIxBC,IAAIA,KAAKA,UAATA,CAGAA,GAAIA,KAAKA,UAAYA,EAAAA,OAAOA,OAAOA,EAASA,KAAKA,SAE7CA,WADAA,MAAKA,QAITA,MAAKA,QAAUA,CAEfA,IAAIA,GAASA,KAAKA,MACbA,KACDA,EAASA,KAAKA,WAElBA,EAAOA,KAAKA,KAGTD,EAAAA,UAAAA,OAAPA,WACIE,KAAKA,WAAYA,GAGdF,EAAAA,UAAAA,SAAPA,WACIG,OAAIA,KAAKA,WAAcA,KAAKA,QAGrBA,EAAAA,cAAcA,QAAQA,KAAKA,SAAUA,EAAEA,IAAIA,KAAKA,OAAQA,SAAAA,GAAKA,OAACA,MAHrEA,QAKRH,MAzIUvjB,EAAAA,EAAAA,qBAAAA,EAAAA,yBAFHD,EAAAA,EAAAA,OAAAA,EAAAA,WAARA,UAAAA,YCAP,IAAOA,UAAP,SAAOA,GAAQA,GAAAA,IAAAA,SAAAA,GAOXC,GAAcA,IAAdA,SAAcA,GACVmZ,QAAAA,GAAoCA,EAAwBA,GAKxDwK,GAAIA,GAAcA,EAAOA,aAErBA,EAAaA,EAAYA,EAC7BA,IAAIA,EAAYA,CACZA,GAAIA,GAAUA,GAAIA,GAA+BA,EACjDA,IAAIA,EAAWA,OAAOA,GAClBA,MAAOA,GAAQA,aAK3BxK,QAAAA,GAAuCA,GAGnCyK,GAAIA,GAAyBA,EAASA,KAAMA,OAAOA,GAAIA,GACvDA,OAAIA,GACOA,EAAcA,MADzBA,OApBYzK,EAAAA,oBAAmBA,EAgBnBA,EAAAA,uBAAsBA,GAjB5BnZ,EAAAA,EAAAA,kBAAAA,EAAAA,oBA2BdA,IAAAA,GAAAA,SAAAA,GAOI6jB,QAAAA,GAAYA,GACRC,EAAAA,KAAAA,MACAA,KAAKA,QAASA,EACdA,KAAKA,OAAQA,EACbA,KAAKA,cAAgBA,KACrBA,KAAKA,cAKLA,KAAKA,aACLA,KAAkBA,GAAAA,GAAAA,EAAbA,EAAAA,EAAAA,OAAAA,IAA0BA,CAA1BA,GAAIA,GAASA,EAAYA,EAC1BA,MAAKA,WAAWA,KAAKA,EAAAA,cAAcA,sBAAsBA,KAgJrED,MAnK6CA,WAAAA,EAAAA,GAuBlCA,EAAAA,UAAAA,UAAPA,WAOIE,IAAKA,GAJDA,GAAaA,KAAKA,WAClBA,KACAA,EAAqBA,KAAKA,eAAiBA,EAEtCA,EAAaA,EAAGA,EAAWA,EAAYA,EAAMA,EAAWA,OAAqBA,EAAbA,GAAgCA,GAAZA,GAAkBA,CAC3GA,GAAIA,GAASA,EAAWA,MAAMA,EAAYA,GACtCA,EAAUA,EAA+BA,iBAAiBA,KAAKA,WAAYA,EAE1EA,UAASA,gBAAgBA,UAAUA,EAAUA,EAASA,EAAAA,sBAAsBA,SAC7EA,EAASA,KAAKA,GAElBA,GAAcA,EACdA,GAAYA,EAGhBA,OACIA,MAAOA,KAAKA,MACZA,SAAUA,IAIHF,EAAAA,iBAAfA,SAAgCA,EAAsBA,GAKlDG,IAAKA,GADDA,GACKA,EAAIA,EAAGA,EAAMA,EAAWA,OAAYA,EAAJA,EAASA,IAAKA,CACnDA,GAAIA,GAAaA,EAAAA,cAAcA,MAAMA,EAAWA,GAAIA,EAAWA,GAI3DA,GAHCA,EAGgBA,EAAAA,cAAcA,IAAIA,EAAgBA,GAFlCA,EAKzBA,MAAOA,GAAAA,4BAA4BA,IAGhCH,EAAAA,UAAAA,QAAPA,SAAeA,GACXI,MAA2BA,QAAvBA,KAAKA,cACEA,KAAKA,qBAEhBA,KAAKA,QAASA,EACPA,EAAKA,KAAKA,OAAOA,OAASA,EAAKA,MAAMA,OAAOA,QAGhDJ,EAAAA,UAAAA,SAAPA,SAAgBA,GACZK,MAAKA,MAAKA,QAGVA,KAAKA,OAAQA,EACNA,EAAKA,IAAIA,OAAOA,OAHZA,KAAKA,qBAMbL,EAAAA,UAAAA,cAAPA,SAAqBA,GACjBM,MAAIA,MAAKA,QAAUA,EAAKA,KAAKA,gBAAkBA,EAAAA,cAAcA,KAClDA,KAAKA,qBAEhBA,KAAKA,WAAWA,KAAKA,IACdA,IAGJN,EAAAA,UAAAA,aAAPA,SAAoBA,GAChBO,MAA2BA,QAAvBA,KAAKA,cACEA,KAAKA,qBAEhBA,KAAKA,QAASA,EAEVA,EAAKA,aAAeA,EAAAA,oBAAoBA,MACjCA,KAAKA,oBAETA,EAAKA,KAAKA,OAAOA,OAASA,EAAKA,MAAMA,OAAOA,QAGhDP,EAAAA,UAAAA,QAAPA,SAAeA,GACXQ,KAAKA,cAAgBA,CACrBA,IAAIA,EACJA,MAAKA,QAASA,CACdA,KAAgBA,GAAAA,GAAAA,EAAAA,EAAAA,EAAKA,KAAhBA,EAAAA,EAAAA,OAAAA,IAAqBA,CAArBA,GAAIA,GAAGA,EAAAA,EAERA,IADAA,EAASA,EAAIA,OAAOA,OACfA,EACDA,MAAOA,MAAKA,mBAEhBA,MAAKA,gBAGTA,GAAIA,KAAKA,gBAAkBA,KAAKA,WAAWA,OACvCA,MAAOA,MAAKA,mBAGhBA,KAAuBA,GADnBA,GAASA,EAAKA,OACKA,EAAAA,EAAlBA,EAAAA,EAAAA,OAAAA,IAIDA,IAAkBA,GAJbA,GAAcA,EAAMA,GAIPA,GAHPA,EAAWA,OAGJA,GAAbA,EAAAA,EAAAA,OAAAA,IAAwBA,CAAxBA,GAAIA,GAASA,EAAUA,EAExBA,IADAA,EAASA,EAAMA,OAAOA,OACjBA,EACDA,MAAOA,MAAKA,oBAIxBA,MAAOA,IAGJR,EAAAA,UAAAA,eAAPA,SAAsBA,GAClBS,GAAIA,KAAKA,OACLA,MAAOA,MAAKA,mBAEhBA,IAAIA,GAAYA,EAAAA,cAAcA,sBAAsBA,EACpDA,OAA2BA,QAAvBA,KAAKA,cACEA,EAAAA,OAAOA,OAAOA,KAAKA,WAAWA,KAAKA,eAAgBA,GAEvDA,EAAAA,OAAOA,OAAOA,KAAKA,WAAWA,GAAIA,IAGtCT,EAAAA,UAAAA,kBAAPA,SAAyBA,GACrBU,MAAIA,MAAKA,QAAiCA,OAAvBA,KAAKA,cACbA,KAAKA,qBAEhBA,KAAKA,WAAWA,KAAKA,IACdA,IAGJV,EAAAA,UAAAA,cAAPA,SAAqBA,GACjBW,MAAIA,MAAKA,QAAiCA,OAAvBA,KAAKA,cACbA,KAAKA,qBAEhBA,KAAKA,WAAWA,KAAKA,IACdA,IAGJX,EAAAA,UAAAA,aAAPA,SAAoBA,GAChBY,MAAOA,MAAKA,qBAGRZ,EAAAA,UAAAA,kBAARA,WACIa,OAAOA,GAEfb,GAnK6C7jB,EAAAA,sBAqK7CA,EAAAA,SAAAA,GAAA2kB,QAAAA,KAAmCC,EAAAA,MAAAA,KAAAA,WAanCD,MAbmCA,WAAAA,EAAAA,GACxBA,EAAAA,UAAAA,SAAPA,SAAgBA,GACZE,MAAOA,GAAKA,KAAKA,OAAOA,OAASA,EAAKA,MAAMA,OAAOA,OAGhDF,EAAAA,UAAAA,aAAPA,SAAoBA,GAChBG,GAAIA,EAAKA,aAAeA,EAAAA,oBAAoBA,MAAOA,CAC/CA,GAAIA,EAAKA,gBAAiBA,GAAAA,eACtBA,MAAuBA,GAAKA,KAChCA,IAAIA,EAAKA,eAAgBA,GAAAA,eACrBA,MAAuBA,GAAKA,OAG5CH,GAbmC3kB,EAAAA,uBAvMxBD,EAAAA,EAAAA,OAAAA,EAAAA,WAARA,UAAAA,YCAP,IAAOA,UAAP,SAAOA,GAAQA,GAAAA,IAAAA,SAAAA,GACXC,GAGcA,GAHPA,EAAkBA,SAASA,iBAGlCA,SAAcA,GACV+kB,QAAAA,GAAwBA,GACpBC,GAAIA,GAAYA,GAAIA,EAGpBA,OAFAA,GAAKA,OAAOA,GAERA,EAAUA,UACHA,KAEJA,EAAgBA,YAAYA,EAAUA,MAGjDD,QAAAA,GAA0BA,GACtBE,GAAIA,GAAYA,GAAIA,EAGpBA,IAFAA,EAAKA,OAAOA,IAERA,EAAUA,UAAdA,CAGAA,GAAIA,GAAOA,EAAgBA,YAAYA,EAAUA,MAC7CA,EAAYA,EAAgBA,YAAYA,EAAUA,OAEtDA,OAAIA,IAAQA,EACDA,EAAKA,cAAcA,OAAOA,GAAOA,IAD5CA,QApBYF,EAAAA,QAAOA,EAUPA,EAAAA,UAASA,CAoBzBA,IAAAA,GAAAA,SAAAA,GAAAG,QAAAA,KAAmCC,EAAAA,MAAAA,KAAAA,WACxBA,KAAAA,QACAA,KAAAA;CAiCXD,MAnCmCA,WAAAA,EAAAA,GAKxBA,EAAAA,UAAAA,SAAPA,SAAgBA,GACZE,EAAKA,KAAKA,OAAOA,MACjBA,EAAKA,MAAMA,OAAOA,OAGfF,EAAAA,UAAAA,aAAPA,SAAoBA,GAChBG,MAAIA,GAAKA,aAAeA,EAAAA,oBAAoBA,UACxCA,MAAKA,aAAaA,IAItBA,EAAKA,KAAKA,OAAOA,UACjBA,GAAKA,MAAMA,OAAOA,QAGfH,EAAAA,UAAAA,eAAPA,SAAsBA,GAClBI,KAAKA,KAAKA,KAAKA,IAGZJ,EAAAA,UAAAA,oBAAPA,SAA2BA,GACvBK,KAAKA,KAAKA,KAAKA,IAGZL,EAAAA,UAAAA,cAAPA,SAAqBA,GACjBM,KAAKA,OAAOA,KAAKA,IAGdN,EAAAA,UAAAA,aAAPA,SAAoBA,GAChBO,KAAKA,WAAYA,GAEzBP,GAnCmCH,EAAAA,uBA/BzB/kB,EAAAA,EAAAA,yBAAAA,EAAAA,6BAJHD,EAAAA,EAAAA,OAAAA,EAAAA,WAARA,UAAAA,YCAP,IAAOA,UAAP,SAAOA,GAAQA,GAAAA,IAAAA,SAAAA,GACXC,GAAcA,IAAdA,SAAcA,GAGV0lB,QAAAA,GAAwBA,GAGpBC,MAAOA,GAAQA,IAGnBD,QAAAA,GAAuBA,GAGnBE,MAAOA,GAAQA,IAGnBF,QAAAA,GAAwBA,GAGpBG,MAAOA,GAAQA,IAGnBH,QAAAA,GAAyBA,GAMrBI,GAAIA,GAAOA,GAAIA,MAAKA,EAAMA,UAAyCA,IAA5BA,EAAMA,qBACzCA,EAAiBA,EAAKA,aAO1BA,OAFIA,UAASA,iBAAiBA,SAASA,EAAgBA,OACnDA,EAAiBA,EAAeA,OAAOA,EAAGA,EAAeA,OAASA,IAC/DA,YAAcA,EAAiBA,IAG1CJ,QAAAA,GAAqBA,GAGjBK,MAAOA,IAAMA,EAAMA,QAAQA,EAAkBA,MAAQA,IAGzDL,QAAAA,KACIM,MAAOA,OAGXN,QAAAA,GAAwBA,GACpBO,MAAOA,GAAQA,OAASA,QAhD5BP,GAAMA,GAAmBA,IAETA,GAAAA,QAAOA,EAMPA,EAAAA,UAAMA,EAMNA,EAAAA,QAAOA,EAMPA,EAAAA,SAAQA,EAiBRA,EAAAA,KAAIA,EAMJA,EAAAA,aAAYA,EAIZA,EAAAA,WAAOA,GAhDb1lB,EAAAA,EAAAA,yBAAAA,EAAAA,6BADHD,EAAAA,EAAAA,OAAAA,EAAAA,WAARA,UAAAA,YCAP,IAAOA,UAAP,SAAOA,GAAQA,GAAAA,IAAAA,SAAAA,GAEXC,GAAcA,IAAdA,SAAcA,GACVkmB,QAAAA,GACIA,EACAA,GACAC,GAAIA,GAAgBA,EAAAA,iBAAiBA,6BAA6BA,GAC9DA,EAAiBA,EAAUA,gBAAkBA,EAAUA,kBAC3DA,OAAIA,GACOA,EAAqBA,4BACxBA,EACAA,EAAcA,OACdA,EAAcA,OACdA,EAAeA,KACfA,EAAeA,OANvBA,OASJD,QAAAA,GACIA,EACAA,EACAA,EACAA,EACAA,GAEAE,GAAIA,GAASA,EAAiBA,OAAOA,GACjCA,EAAsBA,EAAOA,cAAcA,EAAQA,EACvDA,OAAIA,GACOA,EAAoBA,OAAOA,SAASA,GAD/CA,OAKJF,QAAAA,GAAuCA,EAAgBA,GACnDG,GAAIA,YAAkBA,GAAAA,gBAAiBA,CACnCA,GAAIA,GAA6BA,CAEjCA,IAAIA,EAAOA,cAAeA,GAAAA,aAAcA,CACpCA,GAAIA,GAA2BA,EAAOA,GACtCA,OAAOA,GACFA,OAAOA,EAAWA,QAClBA,cAAcA,EAAWA,OAAQA,EAAUA,WAC7CA,GAAIA,EAAOA,cAAeA,GAAAA,8BAA+BA,CAC5DA,GAAIA,GAA+CA,EAAOA,IACtDA,EAAiCA,EAAcA,GACnDA,OAAOA,GACFA,OAAOA,EAAiBA,QACxBA,yBAAyBA,EAAiBA,OAAQA,EAAcA,SAAUA,EAAcA,KAAMA,EAAUA,aAKzHH,QAAAA,GAA2BA,EAAmCA,EAAcA,GACxEI,MAAOA,GAAyCA,QAAQA,EAAMA,IAC1DA,EAAyBA,OAAOA,EAAMA,KAEpCA,GAAmCA,EAA8BA,OAAOA,EAAMA,IAChFA,EAGRJ,QAAAA,GAAuCA,EAAmCA,GACtEK,GAAIA,YAAgBA,GAAAA,iBAAmBA,YAAgBA,GAAAA,qBACnDA,OAAOA,CAEXA,IAAIA,GAAqBA,EAAKA,sBAAsBA,EACpDA,IAAIA,EAAoBA,CACpBA,GAAIA,GAASA,EAAmBA,MAChCA,IAAIA,GAAUA,EAAOA,YAAcA,EAAOA,WAAWA,OAASA,EAC1DA,OAAOA,EAGfA,OAAOA,EAIXL,QAAAA,GAAuCA,GACnCM,GAAIA,GAA0CA,EAAKA,gBAAgBA,eAAeA,EAClFA,IAAIA,EAAiBA,8BAA+BA,CAChDA,GAAIA,GAAsBA,EAAAA,cAAcA,OAAOA,EAAiBA,8BAA8BA,OAAOA,OAAQA,EAAiBA,8BAA8BA,OAAOA,OAEnKA,OAAOA,GAAAA,cAAcA,UAAUA,EAAQA,EAAiBA,8BAA8BA,OAAOA,OAKrGN,QAAAA,GAAmCA,GAC/BO,GAAIA,GAA0CA,EAAKA,gBAAgBA,eAAeA,GAC9EA,EAAiBA,EAAiBA,cACtCA,IAAIA,EAAgBA,CAChBA,GAAIA,GAAsBA,EAAAA,cAAcA,OAAOA,EAAeA,OAAQA,EAAeA,OAAQA,EAAeA,UAC5GA,OAAOA,GAAAA,cAAcA,UAAUA,EAAQA,EAAeA,OAI9DP,QAAAA,GAAoDA,GAGhDQ,GAAMA,EAAmBA,cAAeA,GAAAA,gBAAxCA,CAIAA,GAAIA,GAAgCA,EAAmBA,GACvDA,OAAIA,GAAaA,cAAeA,GAAAA,8BACUA,EAAaA,IADvDA,QAOJR,QAAAA,GAA0CA,EAAmCA,EAAmBA,GAG5FS,KAAMA,YAAqBA,GAAAA,sBAA2BA,YAAsBA,GAAAA,sBACxEA,OAAOA,CAEXA,IAAIA,GAAmCA,EACnCA,EAAoCA,CAGxCA,KAAKA,EAAAA,OAAOA,OAAOA,EAAWA,IAAKA,EAAYA,KAC3CA,OAAOA,CAGXA,IAAIA,GAAaA,EAAAA,YAAYA,YAAYA,EAAWA,GAChDA,EAAcA,EAAAA,YAAYA,YAAYA,EAAWA,EAErDA,OAAsBA,KAAfA,GAAqCA,KAAhBA,GAAmCA,EAAbA,EAOtDT,QAAAA,GAAkCA,EAAmCA,EAA+CA,GAKhHU,IAHAA,GAAIA,GAAcA,EAGXA,EAAcA,EAAsBA,QACvCA,EAA0BA,EAAWA,EAAsBA,GAAcA,IACzEA,GAGJA,OAAOA,GA1IKV,EAAAA,oCAAmCA,EAcnCA,EAAAA,4BAA2BA,EAc3BA,EAAAA,uBAAsBA,EAmBtBA,EAAAA,WAAUA,EAQVA,EAAAA,uBAAsBA,EAetBA,EAAAA,uBAAsBA,EAUtBA,EAAAA,mBAAkBA,EASlBA,EAAAA,oCAAmCA,EAenCA,EAAAA,0BAAyBA,EAwBzBA,EAAAA,kBAAiBA,GAjIvBlmB,EAAAA,EAAAA,uBAAAA,EAAAA,yBA+IdA,IAAcA,IAAdA,SAAcA,GACV6mB,QAAAA,GAAwBA,EAAgBA,GAIpCC,GAAIA,YAAkBA,GAAAA,gBAAiBA,CACnCA,GAAIA,GAAiCA,EAEjCA,EAAsBA,EAAqBA,uBAAuBA,EAAeA,EACrFA,IAAIA,EACAA,MAAOA,GAAEA,IAAIA,EAAoBA,OAAQA,SAAAA,GAAkBA,MAAAA,GAAAA,cAAcA,eAAeA,EAAQA,EAAeA,SAT3GD,EAAAA,QAAOA,GADb7mB,EAAAA,EAAAA,2CAAAA,EAAAA,6CAedA,IAAOA,IAAPA,SAAOA,GACH+mB,QAAAA,GAAuBA,EAAcA,GAGjCC,GAAIA,KAEJA,IAAIA,YAAgBA,GAAAA,qBAAsBA,CACtCA,GAAIA,GAAYA,EAAAA,gBAAgBA,eAAeA,EAC/CA,IAAIA,EAAUA,eAAgBA,CAC1BA,GAAIA,GAAgBA,EAAAA,iBAAiBA,6BAA6BA,GAC9DA,EAAYA,EACXA,OAAOA,EAAcA,QACrBA,cAAcA,EAAcA,OAAQA,EAAUA,eAAeA,KAElEA,IAAIA,EAEAA,IAA2BA,GADvBA,GAAkBA,EAAUA,OACLA,EAAAA,EAAtBA,EAAAA,EAAAA,OAAAA,IAAsCA,CAAtCA,GAAIA,GAAkBA,EAAeA,EACtCA,IAAIA,EAAeA,OAASA,EAAUA,eAAeA,MAAOA,CACxDA,EAAMA,KAAKA,EACXA,OAGAA,EAAMA,KACFA,EAAAA,cAAcA,eACVA,EAAAA,cAAcA,UACVA,EAAAA,cAAcA,OAAOA,EAAcA,OAAQA,EAAcA,OAAQA,EAAcA,WAC/EA,EAAUA,MACdA,EAAeA,SAO3CA,MAAKA,GAAEA,QAAQA,GAAfA,OACWA,EAlCCD,EAAAA,OAAMA,GADnB/mB,IAAAA,MAuCPA,IAAOA,IAAPA,SAAOA,GACHinB,QAAAA,GAAuBA,EAAcA,GAIjCC,GAAIA,GACAA,EAAqBA,EAAKA,sBAAsBA,EAEpDA,IAAIA,EAAoBA,CACpBA,GAAIA,GAASA,EAAmBA,MAChCA,IAAIA,GAAUA,EAAOA,YAAcA,EAAOA,WAAWA,OAASA,EAAGA,CAC7DA,GAAIA,GAAaA,EAAOA,WAIpBA,EAAYA,EAAWA,GAEvBA,EAAYA,EAAAA,gBAAgBA,eAAeA,GAC3CA,EAAgBA,EAAAA,iBAAiBA,6BAA6BA,EAGlEA,IADAA,KACIA,EAAUA,iBAOVA,IAAkBA,GANdA,GAAgBA,EAAAA,cAAcA,UAC9BA,EAAAA,cAAcA,wBACVA,EAAAA,cAAcA,OAAOA,EAAcA,OAAQA,EAAcA,OAAQA,EAAcA,WAC/EA,EAAUA,KAAMA,EAAmBA,MACvCA,EAAUA,iBAAiBA,MAEbA,EAAAA,EAAAA,EAAAA,EAAUA,iBAAiBA,OAAxCA,EAAAA,EAAAA,OAAAA,IAA+CA,CAA/CA,GAAIA,GAAKA,EAAAA,EACVA,GAAMA,KAAKA,EAAAA,cAAcA,eAAeA,EAAeA,EAAMA,SAK7EA,MAAOA,GAjCKD,EAAAA,OAAMA,GADnBjnB,IAAAA,QAvMID,EAAAA,EAAAA,OAAAA,EAAAA,WAARA,UAAAA,YCAP,IAAOA,UAAP,SAAOA,GAAQA,GAAAA,IAAAA,SAAAA,GAUXC,GAAcA,IAAdA,SAAcA,GAEVmnB,QAAAA,GAA2BA,EAAmCA,GAE1DC,IAAKA,GADDA,MACKA,EAAIA,EAAGA,EAAMA,EAAMA,OAAYA,EAAJA,EAASA,IAAKA,CAC9CA,GAAIA,GAAOA,EAAMA,EAGXA,aAAgBA,GAAAA,qBAIlBA,EAAgBA,EAAQA,EAAQA,EAAMA,GAHtCA,EAAOA,MAAOA,KAAMA,EAAMA,SAAUA,KAAMA,iBAAkBA,IAOpEA,MAAOA,GAGXD,QAAAA,GACIA,EACAA,EACAA,EACAA,GAIAE,GAAIA,IAAgCA,EAChCA,EAAaA,EAAAA,qBAAqBA,uBAAuBA,IAASA,EAAAA,qBAAqBA,mBAAmBA,GAC1GA,EAAYA,EAAEA,KAAKA,EAIvBA,IAAIA,GAAaA,EAAUA,UAAYA,EAAAA,OAAOA,OAAOA,EAAUA,KAAMA,GAAaA,CAC9EA,GAAIA,GAAeA,EAAAA,qBAAqBA,WAAWA,EAAQA,EAAKA,IAChEA,IAAIA,YAAwBA,OAAOA,CAC/BA,GAAIA,GAA6CA,CACjDA,IAAiCA,EAAAA,qBAAqBA,0BAA0BA,EAAoBA,EAAEA,KAAKA,EAAUA,UAAWA,IAIpIA,EAEAA,EAAOA,MAAOA,KAAMA,EAAYA,UAAWA,GAAOA,iBAAkBA,IAIpEA,EAAUA,SAASA,KAAKA,GA7ChBF,EAAAA,WAAUA,GAFhBnnB,EAAAA,EAAAA,mBAAAA,EAAAA,uBAVHD,EAAAA,EAAAA,OAAAA,EAAAA,WAARA,UAAAA,YCAP,IAAOA,UAAP,SAAOA,GAAQA,GAAAA,IAAAA,SAAAA,GAiWXC,QAAAA,GAA4CA,GACxCsnB,MAAIA,GAAKA,SAAWA,EAAKA,QACdA,EAAAA,uBAAuBA,IAE3BA,EAAAA,uBAAuBA,MAIlCtnB,QAAAA,GAAyDA,GACrDunB,OAAQA,GACJA,IAAKA,GACDA,MAAOA,GAAAA,uBAAuBA,GAClCA,KAAKA,GACDA,MAAOA,GAAAA,uBAAuBA,YAClCA,KAAKA,GACDA,MAAOA,GAAAA,uBAAuBA,KAClCA,KAAKA,GACDA,MAAOA,GAAAA,uBAAuBA,GAClCA,KAAKA,GACDA,MAAOA,GAAAA,uBAAuBA,GAClCA,KAAKA,GACDA,MAAOA,GAAAA,uBAAuBA,GAClCA,SACIA,QAvXZvnB,GAAOA,GAAmBA,SAASA,iBAGnCA,EAAAA,WAGIwnB,QAAAA,GAAYA,GAGRC,KAAKA,MAAQA,EA0SrBD,MAvSkBA,GAAAA,OAAdA,SAAqBA,EAAWA,EAAWA,GACvCE,MAAOA,GAAsBA,IAAIA,EAAGA,EAAGA,IAGpCF,EAAAA,UAAAA,SAAPA,SAAgBA,EAAmCA,GAC/CG,GAAIA,GAAYA,GAAIA,GAAwBA,EAAQA,EAEpDA,OADAA,MAAKA,OAAOA,GACLA,EAAUA,QAGdH,EAAAA,UAAAA,OAAPA,SAAuBA,EAAyCA,KAKhEA,OAAAA,eAAWA,EAAAA,UAAAA,QpDo0QHljB,IoDp0QRkjB,WACII,MAAOA,MAAKA,OpDs0QRpjB,YAAY,EACZC,cAAc,IoDp0QR+iB,EAAAA,SAAdA,SAAuBA,GAGnBK,MAAqBA,KAAdA,EAAKA,MAGFL,EAAAA,WAAdA,SAAyBA,GAGrBM,MAAqBA,MAAdA,EAAKA,MAGFN,EAAAA,SAAdA,SAAuBA,GAGnBO,MAAqBA,KAAdA,EAAKA,MAGFP,EAAAA,YAAdA,SAA0BA,GAGtBQ,MAAqBA,KAAdA,EAAKA,MAGFR,EAAAA,iBAAdA,SAA+BA,GAG3BS,MAAqBA,KAAdA,EAAKA,MAGTT,EAAAA,UAAAA,YAAPA,SAAmBA,GAGfU,GAAIA,GAAQA,EAAAA,gBAAgBA,eAAeA,KAC3CA,IAAKA,EAGLA,MAAIA,GAAMA,QAAUA,EAAMA,YAAcA,EAAMA,QACnCA,KAAKA,uBAAuBA,EAAOA,GAE1CA,EAAMA,gBAAkBA,EAAMA,mBACvBA,KAAKA,6BAA6BA,EAAOA,GAEhDA,EAAMA,8BACCA,KAAKA,wBAAwBA,EAAOA,GAExCA,EAAOA,qBAAqBA,EAAOA,IAGvCV,EAAAA,UAAAA,oBAAPA,SAA2BA,EAA4CA,GAAAW,SAAAA,IAAAA,GAAAA,EAGnEA,IAAIA,GAAWA,KAAKA,sBAAsBA,IAAoBA,KAAKA,oCAAoCA,EACvGA,IAAKA,EAALA,CAGAA,GAAIA,EAEJA,IAAIA,GAA8BA,IAAlBA,EAASA,KAAwCA,CAC7DA,GAAIA,GAA2BA,EAASA,OAASA,EAASA,OAAOA,iBAAmBA,MAE/EA,EAASA,KAAKA,SAAWA,EAASA,KAAKA,UACXA,IAA7BA,IACAA,EAAYA,EAAyCA,GACnCA,SAAdA,IACAA,EAAYA,EAA4BA,EAASA,QAKvCA,SAAdA,GAA2BA,IAC3BA,EAAYA,EAAAA,uBAAuBA,cAI3CA,MAAOA,KAIJX,EAAAA,UAAAA,cAAPA,SAAqBA,GACjBY,GAAIA,GAAgBA,EAA2BA,mBAAmBA,EAAQA,KAC1EA,IAAKA,EAALA,CAGAA,GAAIA,MACAA,EAAOA,KAAKA,gBAAgBA,EAChCA,IAAIA,GAAQA,EAAKA,OAASA,EACtBA,IAAKA,GAAIA,GAAIA,EAAGA,EAAMA,EAAKA,OAAYA,EAAJA,EAASA,IACxCA,EAAWA,KAAKA,EAAcA,UAAUA,EAAcA,OAAQA,EAAKA,GAAGA,WAI1EA,GAAWA,KAAKA,EAEpBA,OAAOA,KAIJZ,EAAAA,UAAAA,eAAPA,SAAsBA,GAClBa,GAAIA,GAAgBA,EAA2BA,mBAAmBA,EAAQA,KAC1EA,IAAKA,EAALA,CAEAA,GAAIA,GAAOA,KAAKA,gBAAgBA,EAEhCA,KAAKA,GAAQA,EAAKA,OAASA,EACvBA,OAAOA,CAEXA,IAAIA,EAAKA,OAASA,EACdA,OAAOA,CAEXA,IAAIA,GAAYA,EAAcA,UAAUA,EAAcA,OAAQA,EAAKA,GAAGA,KACtEA,QAAQA,EAAOA,OAAOA,EAAWA,QAG7Bb,EAAAA,UAAAA,gBAARA,SAAwBA,GACpBc,GAAIA,GAAWA,KAAKA,sBAAsBA,IAAWA,KAAKA,oCAAoCA,EAC9FA,IAAKA,EAGLA,MAAOA,GAASA,OAASA,EAASA,OAAOA,KAAOA,QAG7Cd,EAAAA,UAAAA,sBAAPA,SAA6BA,GACzBe,GAAIA,GAAQA,EAAAA,gBAAgBA,eAAeA,KAC3CA,IAAKA,EAALA,CAGAA,GAAIA,GAAgBA,EAAAA,iBAAiBA,6BAA6BA,GAC9DA,EAAeA,EAAAA,iBAAiBA,gBAAgBA,EAEpDA,OAAIA,GACOA,EACFA,OAAOA,EAAcA,QACrBA,aAAaA,EAAcA,OAAQA,GAH5CA,SAMGf,EAAAA,UAAAA,4BAAPA,SAAmCA,EAA4CA,GAC3EgB,GAAIA,GAAWA,KAAKA,sBAAsBA,EAC1CA,IAAIA,GAAYA,EAASA,SAAWA,EAAEA,QAAQA,EAASA,OAAOA,YAE1DA,IAAsBA,GADlBA,GAAaA,EAASA,OAAOA,WACXA,EAAAA,EAAjBA,EAAAA,EAAAA,OAAAA,IAA4BA,CAA5BA,GAAIA,GAAaA,EAAUA,EAC5BA,IAAIA,EAAUA,OAASA,EACnBA,MAAOA,GAAUA,mBAAmBA,aAAaA,OAIzDhB,EAAAA,UAAAA,oCAARA,SAA4CA,GACxCiB,GAAIA,GAAQA,EAAAA,gBAAgBA,eAAeA,KAC3CA,IAAKA,EAALA,CAGAA,GAAIA,GAAyBA,EAAMA,gBAAkBA,EAAMA,kBAC3DA,IAAIA,EAAwBA,CACxBA,GAAIA,GAAkBA,EAAAA,iBAAiBA,6BAA6BA,GAEhEA,EAAYA,EACXA,OAAOA,EAAgBA,QACvBA,cAAcA,EAAgBA,OAAQA,EAAuBA,KAElEA,IAAIA,EAAWA,CACXA,GAAIA,GAAiBA,EAAUA,OAAOA,SAASA,EAAuBA,MACtEA,IAAIA,EACAA,MAAOA,GAAeA,WAK9BjB,EAAAA,UAAAA,wBAARA,SAAgCA,EAA8BA,GAI1DkB,GAAIA,GAAgCA,EAAMA,8BACtCA,EAAgBA,EAAAA,iBAAiBA,6BAA6BA,GAC9DA,EAAiBA,EAChBA,OAAOA,EAAcA,QACrBA,aAAaA,EAAcA,OAAQA,EAA8BA,OAAOA,KAE7EA,IAAIA,GAAkBA,EAAeA,QAAUA,EAAeA,OAAOA,WACjEA,IAAsBA,GAAAA,GAAAA,EAAAA,EAAAA,EAAeA,OAAOA,WAAvCA,EAAAA,EAAAA,OAAAA,IAAkDA,CAAlDA,GAAIA,GAASA,EAAAA,EACdA,IAAIA,EAAUA,kBAAoBA,EAAUA,iBAAiBA,OACzDA,IAAkBA,GAAAA,GAAAA,EAAAA,EAAAA,EAAUA,iBAAiBA,OAAxCA,EAAAA,EAAAA,OAAAA,IAA+CA,CAA/CA,GAAIA,GAAKA,EAAAA,EACVA,IAAIA,EAAMA,OAASA,EAA8BA,MAAMA,MAAOA,CAC1DA,GAAIA,GAAWA,EAAMA,MACrBA,QACIA,KAAyBA,IAAlBA,EAASA,KAA2CA,EAAoBA,EAC/EA,KAAMA,EAASA,KACfA,OAAQA,EAASA,OACjBA,cAAeA,EAASA,OAASA,EAASA,OAAOA,eAAgBA,EACjEA,iBAAkBA,EAASA,OAASA,EAASA,OAAOA,iBAAmBA,UAS3FlB,EAAAA,UAAAA,6BAARA,SAAqCA,EAAyBA,GAI1DmB,GAAIA,GAAWA,KAAKA,oCAAoCA,EACxDA,IAAKA,EAGLA,MAAOA,MAAKA,oBAAoBA,EAAOA,IAGnCnB,EAAAA,UAAAA,oBAARA,SAA4BA,EAAyBA,GACjDoB,GAAIA,GAASA,EAASA,OAClBA,EAAOA,EAASA,KAChBA,EAAkBA,EAAMA,YAAcA,EAAMA,kBAEhDA,IAAIA,EACAA,OAAQA,EAAgBA,WACpBA,IAAKA,GAAAA,uBAAuBA,MAC5BA,IAAKA,GAAAA,uBAAuBA,aACxBA,EAAOA,EAAAA,UAAUA,iBAAiBA,EAAAA,aAAaA,SAC/CA,EAASA,MACTA,MACJA,KAAKA,GAAAA,uBAAuBA,IACpBA,EAAKA,UACLA,EAAOA,EAAAA,UAAUA,iBAAiBA,EAAAA,aAAaA,SAK/DA,OACIA,KAAyBA,IAAlBA,EAASA,MAA4CA,GAAiDA,SAA9BA,EAAgBA,UAA4BA,EAAoBA,EAC/IA,KAAMA,EACNA,OAAQA,EACRA,cAAeA,EAASA,OAASA,EAASA,OAAOA,eAAgBA,EACjEA,UAAWA,EAAkBA,EAAgBA,UAAYA,OACzDA,iBAAkBA,EAASA,OAASA,EAASA,OAAOA,iBAAmBA,OAIvEpB,EAAAA,UAAAA,uBAARA,SAA+BA,EAAyBA,GAIpDqB,GAAIA,GAAWA,KAAKA,sBAAsBA,EAC1CA,IAAKA,EAGLA,MAAOA,MAAKA,oBAAoBA,EAAOA,IAG5BrB,EAAAA,qBAAfA,SAAoCA,EAAyBA,GAIzDsB,GAAIA,GAAgBA,EAAAA,iBAAiBA,6BAA6BA,GAC9DA,EAASA,EACRA,OAAOA,EAAcA,QACrBA,SACAA,SAASA,EAAcA,OAE5BA,IAAKA,GAIDA,EAAMA,WACNA,OAAQA,EAAMA,WAAWA,WACrBA,IAAKA,GAAAA,uBAAuBA,MAC5BA,IAAKA,GAAAA,uBAAuBA,aACxBA,OACIA,KAAMA,EACNA,KAAMA,EAAAA,UAAUA,iBAAiBA,EAAAA,aAAaA,SAC9CA,OAAQA,OACRA,eAAeA,EACfA,UAAWA,EAAMA,WAAWA,aAKpDtB,IAhTsBxnB,GAAAA,OAAMA,EA6VZA,EAAAA,4BAA2BA,EAQ3BA,EAAAA,yCAAwCA,CAmBxDA,IAAAA,GAAAA,SAAAA,GAKI+oB,QAAAA,GAAYA,EAAgBA,EAAgBA,GAGxCC,EAAAA,KAAAA,KAAMA,GACNA,KAAKA,OAASA,EACdA,KAAKA,OAASA,EACVA,IACAA,KAAKA,SAAWA,GAM5BD,MAlBkCA,WAAAA,EAAAA,GAevBA,EAAAA,UAAAA,OAAPA,SAAuBA,EAAyCA,GAC5DE,MAAOA,GAAQA,YAAYA,KAAMA,IAEzCF,GAlBkC/oB,EAArBA,GAAAA,aAAYA,CAoBzBA,IAAAA,GAAAA,SAAAA,GAIIkpB,QAAAA,GAAYA,EAAkBA,EAAgBA,GAK1CC,EAAAA,KAAAA,KAAMA,GACNA,KAAKA,OAASA,EACdA,KAAKA,IAAMA,EAEnBD,MAb4CA,WAAAA,EAAAA,GAa5CA,GAb4ClpB,EAAtBA,GAAAA,cAAaA,CAenCA,IAAAA,GAAAA,SAAAA,GACIopB,QAAAA,GAAYA,EAAgBA,GACxBC,EAAAA,KAAAA,KAAMA,EAAsBA,EAAQA,GAM5CD,MARqCA,WAAAA,EAAAA,GAK1BA,EAAAA,UAAAA,OAAPA,SAAuBA,EAAyCA,GAC5DE,MAAOA,GAAQA,eAAeA,KAAMA,IAE5CF,GARqCppB,EAAxBA,GAAAA,gBAAeA,CAU5BA,IAAAA,GAAAA,SAAAA,GACIupB,QAAAA,GAAYA,EAAgBA,GACxBC,EAAAA,KAAAA,KAAMA,EAAuBA,EAAQA,GAM7CD,MARsCA,WAAAA,EAAAA,GAK3BA,EAAAA,UAAAA,OAAPA,SAAuBA,EAAyCA,GAC5DE,MAAOA,GAAQA,gBAAgBA,KAAMA,IAE7CF,GARsCvpB,EAAzBA,GAAAA,iBAAgBA,CAU7BA,IAAAA,GAAAA,SAAAA,GAII0pB,QAAAA,GAAYA,EAAaA,GAIrBC,EAAAA,KAAAA,KAAMA,GACNA,KAAKA,IAAMA,EACXA,KAAKA,KAAOA,EAMpBD,MAhBuCA,WAAAA,EAAAA,GAa5BA,EAAAA,UAAAA,OAAPA,SAAuBA,EAAyCA,GAC5DE,MAAOA,GAAQA,UAAUA,KAAMA,IAEvCF,GAhBuC1pB,EAA1BA,GAAAA,kBAAiBA,CAkB9BA,IAAAA,GAAAA,SAAAA,GAKI6pB,QAAAA,GAAYA,EAAaA,EAAcA,GAKnCC,EAAAA,KAAAA,KAAMA,GACNA,KAAKA,IAAMA,EACXA,KAAKA,KAAOA,EACZA,KAAKA,SAAWA,EAMxBD,MAnBmDA,WAAAA,EAAAA,GAgBxCA,EAAAA,UAAAA,OAAPA,SAAuBA,EAAyCA,GAC5DE,MAAOA,GAAQA,6BAA6BA,KAAMA,IAE1DF,GAnBmD7pB,EAAtCA,GAAAA,8BAA6BA,CAqB1CA,IAAAA,GAAAA,SAAAA,GAIIgqB,QAAAA,GAAYA,EAAaA,GAIrBC,EAAAA,KAAAA,KAAMA,GACNA,KAAKA,IAAMA,EACXA,KAAKA,UAAYA,EAMzBD,MAhBqCA,WAAAA,EAAAA,GAa1BA,EAAAA,UAAAA,OAAPA,SAAuBA,EAAyCA,GAC5DE,MAAOA,GAAQA,eAAeA,KAAMA,IAE5CF,GAhBqChqB,EAAxBA,GAAAA,gBAAeA,CAkB5BA,IAAAA,GAAAA,SAAAA,GAIImqB,QAAAA,GAAYA,EAAaA,GAIrBC,EAAAA,KAAAA,KAAMA,GACNA,KAAKA,IAAMA,EACXA,KAAKA,MAAQA,EAMrBD,MAhB0CA,WAAAA,EAAAA,GAa/BA,EAAAA,UAAAA,OAAPA,SAAuBA,EAAyCA,GAC5DE,MAAOA,GAAQA,oBAAoBA,KAAMA,IAEjDF,GAhB0CnqB,EAA7BA,GAAAA,qBAAoBA,CAkBjCA,IAAAA,GAAAA,SAAAA,GAIIsqB,QAAAA,GAAYA,EAAcA,GAItBC,EAAAA,KAAAA,KAAMA,GACNA,KAAKA,KAAOA,EACZA,KAAKA,MAAQA,EAMrBD,MAhB+BA,WAAAA,EAAAA,GAapBA,EAAAA,UAAAA,OAAPA,SAAuBA,EAAyCA,GAC5DE,MAAOA,GAAQA,SAASA,KAAMA,IAEtCF,GAhB+BtqB,EAAlBA,GAAAA,UAASA,CAkBtBA,IAAAA,GAAAA,SAAAA,GAKIyqB,QAAAA,GAAYA,EAAaA,EAAeA,GAKpCC,EAAAA,KAAAA,KAAMA,GACNA,KAAKA,IAAMA,EACXA,KAAKA,MAAQA,EACbA,KAAKA,MAAQA,EAMrBD,MAnBmCA,WAAAA,EAAAA,GAgBxBA,EAAAA,UAAAA,OAAPA,SAAuBA,EAAyCA,GAC5DE,MAAOA,GAAQA,aAAaA,KAAMA,IAE1CF,GAnBmCzqB,EAAtBA,GAAAA,cAAaA,CAqB1BA,IAAAA,GAAAA,SAAAA,GAII4qB,QAAAA,GAAYA,EAAgBA,GAIxBC,EAAAA,KAAAA,KAAMA,GACNA,KAAKA,KAAOA,EACZA,KAAKA,OAASA,EAMtBD,MAhB8BA,WAAAA,EAAAA,GAanBA,EAAAA,UAAAA,OAAPA,SAAuBA,EAAyCA,GAC5DE,MAAOA,GAAQA,QAAQA,KAAMA,IAErCF,GAhB8B5qB,EAAjBA,GAAAA,SAAQA,CAkBrBA,IAAAA,GAAAA,SAAAA,GAII+qB,QAAAA,GAAYA,EAAcA,GAItBC,EAAAA,KAAAA,KAAMA,IACNA,KAAKA,KAAOA,EACZA,KAAKA,MAAQA,EAMrBD,MAhB8BA,WAAAA,EAAAA,GAanBA,EAAAA,UAAAA,OAAPA,SAAuBA,EAAyCA,GAC5DE,MAAOA,GAAQA,QAAQA,KAAMA,IAErCF,GAhB8B/qB,EAAjBA,GAAAA,SAAQA,CAkBrBA,IAAAA,GAAAA,SAAAA,GAKIkrB,QAAAA,GAAYA,EAAiCA,EAAcA,GAKvDC,EAAAA,KAAAA,KAAMA,IACNA,KAAKA,WAAaA,EAClBA,KAAKA,KAAOA,EACZA,KAAKA,MAAQA,EAMrBD,MAnBmCA,WAAAA,EAAAA,GAgBxBA,EAAAA,UAAAA,OAAPA,SAAuBA,EAAyCA,GAC5DE,MAAOA,GAAQA,aAAaA,KAAMA,IAE1CF,GAnBmClrB,EAAtBA,GAAAA,cAAaA,CAqB1BA,IAAAA,GAAAA,SAAAA,GAIIqrB,QAAAA,GAAYA,EAAcA,GAItBC,EAAAA,KAAAA,KAAMA,IACNA,KAAKA,KAAOA,EACZA,KAAKA,MAAQA,EAMrBD,MAhBoCA,WAAAA,EAAAA,GAazBA,EAAAA,UAAAA,OAAPA,SAAuBA,EAAyCA,GAC5DE,MAAOA,GAAQA,cAAcA,KAAMA,IAE3CF,GAhBoCrrB,EAAvBA,GAAAA,eAAcA,CAkB3BA,IAAAA,GAAAA,SAAAA,GAIIwrB,QAAAA,GAAYA,EAAcA,GAItBC,EAAAA,KAAAA,KAAMA,IACNA,KAAKA,KAAOA,EACZA,KAAKA,MAAQA,EAMrBD,MAhBsCA,WAAAA,EAAAA,GAa3BA,EAAAA,UAAAA,OAAPA,SAAuBA,EAAyCA,GAC5DE,MAAOA,GAAQA,gBAAgBA,KAAMA,IAE7CF,GAhBsCxrB,EAAzBA,GAAAA,iBAAgBA,CAkB7BA,IAAAA,GAAAA,SAAAA,GAGI2rB,QAAAA,GAAYA,GAGRC,EAAAA,KAAAA,KAAMA,IACNA,KAAKA,IAAMA,EAMnBD,MAbkCA,WAAAA,EAAAA,GAUvBA,EAAAA,UAAAA,OAAPA,SAAuBA,EAAyCA,GAC5DE,MAAOA,GAAQA,YAAYA,KAAMA,IAEzCF,GAbkC3rB,EAArBA,GAAAA,aAAYA,CAezBA,IAAAA,GAAAA,SAAAA,GAGI8rB,QAAAA,GAAYA,GAGRC,EAAAA,KAAAA,KAAMA,IACNA,KAAKA,IAAMA,EAMnBD,MAb+BA,WAAAA,EAAAA,GAUpBA,EAAAA,UAAAA,OAAPA,SAAuBA,EAAyCA,GAC5DE,MAAOA,GAAQA,SAASA,KAAMA,IAEtCF,GAb+B9rB,EAAlBA,GAAAA,UAASA,CAetBA,IAAAA,GAAAA,SAAAA,GASIisB,QAAAA,GAAYA,EAAiBA,EAAYA,GAGrCC,EAAAA,KAAAA,KAAMA,IACNA,KAAKA,KAAOA,EACZA,KAAKA,MAAQA,EACbA,KAAKA,aAAeA,EAiB5BD,MAhCoCA,WAAAA,EAAAA,GAkBzBA,EAAAA,UAAAA,OAAPA,SAAuBA,EAAyCA,GAC5DE,MAAOA,GAAQA,cAAcA,KAAMA,IAGhCF,EAAAA,UAAAA,YAAPA,SAAmBA,GAGfG,OAGIA,KAAMA,EACNA,KAAMA,KAAKA,OAGvBH,GAhCoCjsB,EAAvBA,GAAAA,eAAcA,CAkC3BA,IAAAA,GAAAA,SAAAA,GAIIqsB,QAAAA,GAAYA,EAAgBA,GAIxBC,EAAAA,KAAAA,KAAMA,IACNA,KAAKA,KAAOA,EACZA,KAAKA,IAAMA,EAMnBD,MAhBoCA,WAAAA,EAAAA,GAazBA,EAAAA,UAAAA,OAAPA,SAAuBA,EAAyCA,GAC5DE,MAAOA,GAAQA,cAAcA,KAAMA,IAE3CF,GAhBoCrsB,EAAvBA,GAAAA,eAAcA,CAkB3BA,IAAAA,GAAAA,SAAAA,GAKIwsB,QAAAA,GAAYA,EAAgBA,EAAgBA,GAKxCC,EAAAA,KAAAA,KAAMA,IACNA,KAAKA,KAAOA,EACZA,KAAKA,IAAMA,EACXA,KAAKA,OAASA,EAMtBD,MAnBmCA,WAAAA,EAAAA,GAgBxBA,EAAAA,UAAAA,OAAPA,SAAuBA,EAAyCA,GAC5DE,MAAOA,GAAQA,aAAaA,KAAMA,IAE1CF,GAnBmCxsB,EAAtBA,GAAAA,cAAaA,CAqB1BA,IAAAA,GAAAA,SAAAA,GACI2sB,QAAAA,KACIC,EAAAA,KAAAA,KAAMA,IAMdD,MAR+BA,WAAAA,EAAAA,GAKpBA,EAAAA,UAAAA,OAAPA,SAAuBA,EAAyCA,GAC5DE,MAAOA,GAAQA,SAASA,KAAMA,IAEtCF,GAR+B3sB,EAAlBA,GAAAA,UAASA,CAUtBA,IAAAA,GAAAA,SAAAA,GACI8sB,QAAAA,KACIC,EAAAA,KAAAA,KAAMA,IAMdD,MARwCA,WAAAA,EAAAA,GAK7BA,EAAAA,UAAAA,OAAPA,SAAuBA,EAAyCA,GAC5DE,MAAOA,GAAQA,kBAAkBA,KAAMA,IAE/CF,GARwC9sB,EAA3BA,GAAAA,mBAAkBA,CAU/BA,IAAAA,GAAAA,SAAAA,GACIitB,QAAAA,KACIC,EAAAA,KAAAA,KAAMA,IAMdD,MARoCA,WAAAA,EAAAA,GAKzBA,EAAAA,UAAAA,OAAPA,SAAuBA,EAAyCA,GAC5DE,MAAOA,GAAQA,cAAcA,KAAMA,IAE3CF,GARoCjtB,EAAvBA,GAAAA,eAAcA,CAW3BA,IAAcA,IAAdA,SAAcA,GACVyY,QAAAA,GAAuBA,EAAgBA,EAAgBA,GACnD2U,MAAOA,IAAIA,GAAaA,EAAQA,EAAQA,GAG5C3U,QAAAA,GAA0BA,EAAgBA,GACtC4U,MAAOA,IAAIA,GAAgBA,EAAQA,GAGvC5U,QAAAA,GAA2BA,EAAgBA,GACvC6U,MAAOA,IAAIA,GAAiBA,EAAQA,GAGxC7U,QAAAA,GAA0BA,EAAgBA,GACtC8U,MAAOA,IAAIA,GAAkBA,EAAQA,GAGzC9U,QAAAA,GAA0BA,EAAgBA,GACtC+U,MAAOA,IAAIA,GAAgBA,EAAQA,GAGvC/U,QAAAA,GAAwCA,EAAgBA,EAAcA,GAClEgV,MAAOA,IAAIA,GAA8BA,EAAQA,EAAMA,GAG3DhV,QAAAA,GAA+BA,EAAgBA,GAC3CiV,MAAOA,IAAIA,GAAqBA,EAAQA,GAG5CjV,QAAAA,GAAoBA,EAAcA,GAC9BkV,MAAKA,GAEAA,EAGEA,GAAIA,GAAUA,EAAMA,GAFhBA,EAFAA,EAOflV,QAAAA,GAAwBA,EAAaA,EAAeA,GAChDmV,MAAOA,IAAIA,GAAcA,EAAKA,EAAOA,GAGzCnV,QAAAA,GAAuBA,EAAgBA,GACnCoV,MAAOA,IAAIA,GAASA,EAAMA,GAG9BpV,QAAAA,GAAmBA,EAAcA,GAC7BqV,IAAKA,EACDA,MAAOA,EACXA,KAAKA,EACDA,MAAOA,EACXA,IAAIA,YAAgBA,IAAYA,YAAiBA,GAAUA,CACvDA,GAAIA,GAASA,EAAwBA,EAAgBA,EACrDA,IAAIA,EACAA,MAAOA,GAGfA,MAAOA,IAAIA,GAASA,EAAMA,GAG9BrV,QAAAA,GAAuBA,EAAgBA,GACnCsV,GAAKA,EAAKA,MAASA,EAAMA,KAAzBA,CAGAA,GAAIA,GAAaA,EAAKA,KAAKA,OACvBA,EAAcA,EAAMA,KAAKA,MAC7BA,IAAIA,IAAeA,EAAnBA,CAGAA,IAAKA,GAAIA,GAAIA,EAAOA,EAAJA,IAAkBA,EAC9BA,IAAKA,EAAOA,OAAOA,EAAKA,KAAKA,GAAIA,EAAMA,KAAKA,IACxCA,MAGRA,IAAIA,GAAiBA,EAAKA,OAAOA,OAAOA,EAAMA,OAC9CA,OAAOA,GAAcA,OAAOA,EAAKA,KAAMA,KAG3CtV,QAAAA,GAAwBA,EAA2BA,EAAcA,GAC7DuV,MAAOA,IAAIA,GAAcA,EAAMA,EAAMA,GAGzCvV,QAAAA,GAAyBA,EAAcA,GACnCwV,MAAOA,IAAIA,GAAeA,EAAMA,GAGpCxV,QAAAA,GAAuBA,GACnByV,MAAOA,IAAIA,GAAaA,GAG5BzV,QAAAA,GAAsBA,EAAcA,GAChC0V,MAAOA,GAAQA,EAAAA,oBAAoBA,MAAOA,EAAMA,GAGpD1V,QAAAA,GAAoBA,GAChB2V,MAAOA,IAAIA,GAAUA,GAGzB3V,QAAAA,GAA2BA,EAAcA,GACrC4V,MAAOA,IAAIA,GAAiBA,EAAMA,GAGtC5V,QAAAA,KACI6V,MAAOA,IAAIA,GACPA,EAAAA,UAAUA,iBAAiBA,EAAAA,aAAaA,MACxCA,KACAA,EAAAA,uBAAuBA,gBAG/B7V,QAAAA,KACI8V,MAAOA,IAAIA,GAGf9V,QAAAA,KACI+V,MAAOA,IAAIA,GAGf/V,QAAAA,KACIgW,MAAOA,IAAIA,GAGfhW,QAAAA,GAAwBA,GACpBiW,MAAOA,IAAIA,GACPA,EAAAA,UAAUA,iBAAiBA,EAAAA,aAAaA,SACxCA,EACAA,EAAAA,uBAAAA,WAA+BA,IAGvCjW,QAAAA,GAAwBA,EAAgBA,EAAgBA,GACpDkW,MAAOA,IAAIA,GAAcA,EAAMA,EAAQA,GAG3ClW,QAAAA,IAAyBA,EAAaA,GAIlCmW,MAHqBA,UAAjBA,IACAA,EAAeA,EAAAA,uBAAuBA,SAASA,IAE5CA,GAAIA,GAAeA,EAAAA,UAAUA,iBAAiBA,EAAAA,aAAaA,UAAWA,EAAOA,GAGxFnW,QAAAA,IAAyBA,EAAgBA,GACrCoW,MAAOA,IAAIA,GAAeA,EAAMA,GAGpCpW,QAAAA,IAAwBA,EAAeA,GAInCqW,MAHqBA,UAAjBA,IACAA,EAAeA,EAAAA,uBAAuBA,QAAQA,IAE3CA,GAAIA,GAAeA,EAAAA,UAAUA,iBAAiBA,EAAAA,aAAaA,SAAUA,EAAOA,GAGvFrW,QAAAA,IAAuBA,EAAeA,GAIlCsW,MAHqBA,UAAjBA,IACAA,EAAeA,EAAAA,uBAAAA,UAA8BA,IAE1CA,GAAIA,GAAeA,EAAAA,UAAUA,iBAAiBA,EAAAA,aAAaA,QAASA,EAAOA,GAGtFtW,QAAAA,IAAwBA,EAAeA,GAInCuW,MAHqBA,UAAjBA,IACAA,EAAeA,EAAAA,uBAAuBA,QAAQA,IAE3CA,GAAIA,GAAeA,EAAAA,UAAUA,iBAAiBA,EAAAA,aAAaA,SAAUA,EAAOA,GAGvFvW,QAAAA,IAAqBA,EAAeA,GAGhCwW,MAAOA,IAAIA,GACPA,EAAAA,UAAUA,iBAAiBA,EAAAA,aAAaA,MACxCA,EACAA,GAAgBA,EAAAA,uBAAuBA,KAAKA,IAIpDxW,QAAAA,IAA8BA,EAAuBA,GACjDyW,MAAaA,OAATA,EACOA,IAEPA,EAAEA,UAAUA,GACLA,EAAiBA,GAGxBA,EAAEA,SAASA,GACJA,GAAaA,GAGpBA,EAAEA,SAASA,GACPA,EAAKA,SAAWA,EAAAA,OAAOA,UAAkBA,GAClCA,GAAgBA,GAEpBA,GAAeA,GAGtBA,YAAiBA,MACVA,GAASA,GADpBA,OAKJzW,QAAAA,IAA6BA,EAAcA,GACvC0W,MAAOA,GAA8BA,QAAQA,EAAMA,GAGvD1W,QAAAA,IAAgCA,GAC5B2W,MAAOA,GAA8BA,QAAQA,GAGjD3W,QAAAA,IAAsCA,GAClC4W,MAAOA,GAAoCA,QAAQA,GAGvD5W,QAAAA,IACIA,EACAA,EACAA,EACAA,GAKA6W,GAAIA,EAUJA,OARIA,GADsBA,MAAtBA,GAA8BA,EAAAA,YAAYA,qBAAqBA,EAAMA,EAAQA,GACjEA,EAGAA,EAAKA,oBAAoBA,EAAQA,GAE/BA,SAAdA,IACAA,EAAOA,EAAcA,UAAUA,EAAMA,IAElCA,EApOK7W,EAAAA,OAAMA,EAINA,EAAAA,UAASA,EAITA,EAAAA,WAAUA,EAIVA,EAAAA,UAASA,EAITA,EAAAA,UAASA,EAITA,EAAAA,wBAAuBA,EAIvBA,EAAAA,eAAcA,EAIdA,EAAAA,IAAGA,EASHA,EAAAA,QAAOA,EAIPA,EAAAA,OAAMA,EAINA,EAAAA,GAAEA,EAgCFA,EAAAA,QAAOA,EAIPA,EAAAA,SAAQA,EAIRA,EAAAA,OAAMA,EAINA,EAAAA,MAAKA,EAILA,EAAAA,IAAGA,EAIHA,EAAAA,WAAUA,EAIVA,EAAAA,aAAYA,EAOZA,EAAAA,IAAGA,EAIHA,EAAAA,aAAYA,EAIZA,EAAAA,SAAQA,EAIRA,EAAAA,WAAOA,EAOPA,EAAAA,QAAOA,EAIPA,EAAAA,SAAQA,GAORA,EAAAA,SAAQA,GAIRA,EAAAA,QAAOA,GAOPA,EAAAA,UAAMA,GAONA,EAAAA,QAAOA,GAOPA,EAAAA,KAAIA,GAUJA,EAAAA,cAAaA,GAwBbA,EAAAA,aAAYA,GAIZA,EAAAA,gBAAeA,GAIfA,EAAAA,sBAAqBA,GAIrBA,EAAAA,wBAAuBA,IAlN7BzY,EAAAA,EAAAA,gBAAAA,EAAAA,kBA0OdA,IAAcA,IAAdA,SAAcA,GACVuvB,QAAAA,GAA6BA,GACzBC,MAAOA,GAA2BA,aAAaA,GADnCD,EAAAA,aAAYA,GADlBvvB,EAAAA,EAAAA,aAAAA,EAAAA,eAMdA,IAAAA,GAAAA,WAwBIyvB,QAAAA,GAAYA,GACRC,KAAKA,WAAaA,EA0K1BD,MA9LkBA,GAAAA,IAAdA,SAAkBA,EAAWA,EAAWA,GAKpCE,MAHAA,GAAIA,GAAKA,KACTA,EAAIA,GAAKA,KAELA,IAAMA,GACCA,GAENA,IAAOA,GACDA,EAIPA,EACOA,EAAEA,OAAOA,EAAsBA,mBAAoBA,GAEvDA,EAAEA,OAAOA,EAAsBA,SAAUA,IAO7CF,EAAAA,UAAAA,eAAPA,SAAsBA,EAAuBA,GACzCG,MAAOA,aAAqBA,IACxBA,EAAKA,MAA0BA,EAAWA,KAC1CA,KAAKA,OAAOA,EAAKA,OAA0BA,EAAWA,SAGvDH,EAAAA,UAAAA,gBAAPA,SAAuBA,EAAwBA,GAC3CI,MAAOA,aAAqBA,IACxBA,EAAKA,MAA2BA,EAAWA,KAC3CA,KAAKA,OAAOA,EAAKA,OAA2BA,EAAWA,SAGxDJ,EAAAA,UAAAA,UAAPA,SAAiBA,EAAyBA,GACtCK,MAAOA,aAAqBA,IACxBA,EAAKA,OAA6BA,EAAWA,MAC7CA,KAAKA,OAAOA,EAAKA,IAAyBA,EAAWA,MAGtDL,EAAAA,UAAAA,eAAPA,SAAsBA,EAAuBA,GACzCM,MAAOA,aAAqBA,IACxBA,EAAKA,YAAcA,EAAUA,WAC7BA,KAAKA,OAAOA,EAAKA,IAAKA,EAAUA,MAGjCN,EAAAA,UAAAA,oBAAPA,SAA2BA,EAA4BA,GACnDO,MAAOA,aAAqBA,IACxBA,EAAKA,QAAUA,EAAUA,OACzBA,KAAKA,OAAOA,EAAKA,IAAKA,EAAUA,MAGjCP,EAAAA,UAAAA,6BAAPA,SAAoCA,EAAqCA,GACrEQ,MAAOA,aAAqBA,IACxBA,EAAKA,OAASA,EAAUA,MACxBA,EAAKA,WAAaA,EAAUA,UAC5BA,KAAKA,OAAOA,EAAKA,IAAKA,EAAUA,MAGjCR,EAAAA,UAAAA,aAAPA,SAAoBA,EAAqBA,GACrCS,MAAOA,aAAqBA,IACxBA,KAAKA,OAAOA,EAAKA,IAAqBA,EAAWA,MACjDA,KAAKA,OAAOA,EAAKA,MAAuBA,EAAWA,QACnDA,KAAKA,OAAOA,EAAKA,MAAuBA,EAAWA,QAGpDT,EAAAA,UAAAA,QAAPA,SAAeA,EAAgBA,GAC3BU,KAAMA,YAAqBA,IAAcA,KAAKA,UAAUA,EAAKA,KAAiBA,EAAWA,OACrFA,OAAOA,CAEXA,IAAIA,GAASA,EAAKA,OACdA,EAA2BA,EAAWA,MAC1CA,IAAIA,EAAOA,SAAWA,EAAcA,OAChCA,OAAOA,CAEXA,KAAKA,GAAIA,GAAIA,EAAGA,EAAMA,EAAOA,OAAYA,EAAJA,EAASA,IAC1CA,IAAKA,KAAKA,UAAUA,EAAOA,GAAIA,EAAcA,IACzCA,OAAOA,CAGfA,QAAOA,GAGJV,EAAAA,UAAAA,YAAPA,SAAmBA,EAAoBA,GACnCW,MAAOA,aAAqBA,IACxBA,EAAKA,SAA0BA,EAAWA,QAC1CA,EAAKA,SAA0BA,EAAWA,QAC1CA,KAAKA,cAAcA,EAAKA,SAAyBA,EAAWA,WAG7DX,EAAAA,UAAAA,SAAPA,SAAgBA,EAAiBA,GAC7BY,MAAOA,aAAqBA,IACxBA,KAAKA,OAAOA,EAAKA,KAAkBA,EAAWA,OAC9CA,KAAKA,OAAOA,EAAKA,MAAmBA,EAAWA,QAGhDZ,EAAAA,UAAAA,QAAPA,SAAeA,EAAgBA,GAC3Ba,MAAOA,aAAqBA,IACxBA,KAAKA,OAAOA,EAAKA,KAAiBA,EAAWA,OAC7CA,KAAKA,OAAOA,EAAKA,MAAkBA,EAAWA,QAG/Cb,EAAAA,UAAAA,aAAPA,SAAoBA,EAAqBA,GACrCc,MAAOA,aAAqBA,IACxBA,EAAKA,aAA+BA,EAAWA,YAC/CA,KAAKA,OAAOA,EAAKA,KAAsBA,EAAWA,OAClDA,KAAKA,OAAOA,EAAKA,MAAuBA,EAAWA,QAGpDd,EAAAA,UAAAA,cAAPA,SAAqBA,EAAsBA,GACvCe,MAAOA,aAAqBA,IACxBA,KAAKA,OAAOA,EAAKA,KAAuBA,EAAWA,OACnDA,KAAKA,OAAOA,EAAKA,MAAwBA,EAAWA,QAGrDf,EAAAA,UAAAA,cAAPA,SAAqBA,EAAsBA,GACvCgB,MAAOA,aAAqBA,IACxBA,EAAKA,OAA0BA,EAAWA,MAC1CA,KAAKA,OAAOA,EAAKA,IAAsBA,EAAWA,MAGnDhB,EAAAA,UAAAA,aAAPA,SAAoBA,EAAqBA,GACrCiB,MAAOA,aAAqBA,IACxBA,EAAKA,OAAyBA,EAAWA,MACzCA,EAAKA,SAA2BA,EAAWA,QAC3CA,KAAKA,OAAOA,EAAKA,IAAqBA,EAAWA,MAGlDjB,EAAAA,UAAAA,YAAPA,SAAmBA,EAAoBA,GACnCkB,MAAOA,aAAqBA,IACxBA,KAAKA,OAAOA,EAAKA,IAAoBA,EAAWA,MAGjDlB,EAAAA,UAAAA,SAAPA,SAAgBA,EAAiBA,GAC7BmB,MAAOA,aAAqBA,IACxBA,KAAKA,OAAOA,EAAKA,IAAiBA,EAAWA,MAG9CnB,EAAAA,UAAAA,SAAPA,SAAgBA,EAAiBA,GAC7BoB,MAAOA,aAAqBA,IAGzBpB,EAAAA,UAAAA,kBAAPA,SAAyBA,EAA0BA,GAC/CqB,MAAOA,aAAqBA,IAGzBrB,EAAAA,UAAAA,cAAPA,SAAqBA,EAAsBA,GACvCsB,MAAOA,aAAqBA,IAGzBtB,EAAAA,UAAAA,gBAAPA,SAAuBA,EAAwBA,GAC3CuB,MAAOA,aAAqBA,IACxBA,KAAKA,OAAOA,EAAKA,KAAyBA,EAAWA,OACrDA,KAAKA,OAAOA,EAAKA,MAA0BA,EAAWA,QAGvDvB,EAAAA,UAAAA,cAAPA,SAAqBA,EAAsBA,GACvCwB,MAAIA,aAAqBA,IAAkBA,EAAKA,OAA0BA,EAAWA,KAC1EA,EAAKA,KAAKA,MAAQA,KAAKA,WAC1BA,EAAiBA,gBAAgBA,EAAKA,aAA+BA,EAAWA,cAChFA,EAAKA,eAAkCA,EAAWA,cAEnDA,GAGHxB,EAAAA,UAAAA,cAARA,SAAsBA,EAAWA,GAE7ByB,MAAIA,IAAKA,EACEA,IAAMA,GAEVA,GAGHzB,EAAAA,UAAAA,OAARA,SAAeA,EAAWA,GACtB0B,MAAOA,GAAEA,OAAOA,KAAMA,IAGlB1B,EAAAA,UAAAA,UAARA,SAAkBA,EAAaA,GAC3B2B,GAAIA,GAAMA,EAAEA,MACZA,IAAIA,IAAQA,EAAEA,OACVA,OAAOA,CAEXA,KAAKA,GAAIA,GAAIA,EAAOA,EAAJA,EAASA,IACrBA,IAAKA,KAAKA,OAAOA,EAAEA,GAAIA,EAAEA,IACrBA,OAAOA,CAGfA,QAAOA,GAhMI3B,EAAAA,SAAkCA,GAAIA,IAAuCA,GAC7EA,EAAAA,mBAA4CA,GAAIA,IAAsBA,GAiMzFA,KAGAzvB,EAAAA,SAAAA,GAAAqxB,QAAAA,KAAiCC,EAAAA,MAAAA,KAAAA,WAIjCD,MAJiCA,WAAAA,EAAAA,GACtBA,EAAAA,UAAAA,aAAPA,SAAoBA,GAChBE,MAAOA,IAEfF,GAJiCrxB,EAAAA,sBAmBjCA,EAAAA,SAAAA,GAIIwxB,QAAAA,GAAYA,EAAmCA,GAG3CC,EAAAA,KAAAA,MACAA,KAAKA,OAASA,EACVA,IACAA,KAAKA,OAASA,GAwL1BD,MAlM6CA,WAAAA,EAAAA,GAalCA,EAAAA,UAAAA,QAAPA,SAAeA,GAIXE,IAAuBA,GAHnBA,GAAmBA,EAAAA,UAAMA,QAAOA,KAAAA,KAACA,GACjCA,EAAOA,EAAOA,KACdA,EAASA,EAAOA,OACGA,EAAAA,EAAlBA,EAAAA,EAAAA,OAAAA,IAEDA,IAAKA,GAFAA,GAAcA,EAAMA,GAEhBA,EAAIA,EAAGA,EAAMA,EAAWA,OAAYA,EAAJA,IAAWA,EAChDA,KAAKA,uBAAuBA,EAAKA,GAAIA,EAAWA,GAGxDA,OAAOA,IAGJF,EAAAA,UAAAA,aAAPA,SAAoBA,GAChBG,GAAIA,GAA6BA,EAAAA,UAAMA,aAAYA,KAAAA,KAACA,EAGpDA,OAFAA,MAAKA,uBAAuBA,EAAYA,KAAMA,EAAYA,OAEnDA,GAGJH,EAAAA,UAAAA,eAAPA,SAAsBA,GAClBI,GAAIA,GAAYA,EAAAA,gBAAgBA,eAAeA,EAC/CA,IAAIA,EAAWA,CACXA,GAAIA,GAAgBA,EAAAA,iBAAiBA,6BAA6BA,GAC9DA,EAASA,KAAKA,eAAeA,EAAcA,OAAQA,EAAcA,OACrEA,IAAIA,EAAQA,CACRA,GAAIA,GAAOA,EAAOA,WAAWA,SAASA,EAAUA,OAAOA,KAClDA,IACaA,IAAdA,EAAKA,MACJA,KAAKA,YAAYA,IAClBA,KAAKA,SAASA,IAG1BA,MAAOA,IAGJJ,EAAAA,UAAAA,gBAAPA,SAAuBA,GACnBK,GAAIA,GAAYA,EAAAA,gBAAgBA,eAAeA,EAC/CA,IAAIA,EAAWA,CACXA,GAAIA,GAAgBA,EAAAA,iBAAiBA,6BAA6BA,GAC9DA,EAASA,KAAKA,eAAeA,EAAcA,OAAQA,EAAcA,OACrEA,IAAIA,EAAQA,CACRA,GAAIA,GAAOA,EAAOA,WAAWA,SAASA,EAAUA,QAAQA,KACnDA,IACaA,IAAdA,EAAKA,MACJA,KAAKA,YAAYA,IAClBA,KAAKA,SAASA,IAG1BA,MAAOA,IAGJL,EAAAA,UAAAA,UAAPA,SAAiBA,GACbM,GAAIA,GAAmCA,EAAAA,UAAMA,UAASA,KAAAA,KAACA,GAEnDA,EAAgBA,EAA2BA,mBAAmBA,KAAKA,OAAQA,EAAcA,IAM7FA,OALIA,KACKA,EAAAA,YAAYA,qBAAqBA,EAAMA,KAAKA,OAAQA,EAAKA,OAC1DA,KAAKA,SAASA,IAGfA,GAGJN,EAAAA,UAAAA,eAAPA,SAAsBA,GAClBO,GAAIA,GAAYA,EAAAA,gBAAgBA,eAAeA,EAC/CA,IAAIA,EAAWA,CACXA,GAAIA,GAAsEA,EAAUA,SAChFA,GACAA,KAAKA,kBAAkBA,EAAcA,OAAQA,EAAcA,OAAQA,EAAcA,MAEjFA,KAAKA,SAASA,GAGtBA,MAAOA,IAGJP,EAAAA,UAAAA,oBAAPA,SAA2BA,GACvBQ,GAAIA,GAAYA,EAAAA,gBAAgBA,eAAeA,EAC/CA,IAAIA,EAAWA,CACXA,GAAIA,GAA8FA,EAAUA,cACxGA,GACAA,KAAKA,uBAAuBA,EAA4BA,OAAQA,EAA4BA,OAAQA,EAA4BA,KAAMA,EAA4BA,OAC1JA,EAAUA,+BAClBA,KAAKA,SAASA,GAGtBA,MAAOA,IAGJR,EAAAA,UAAAA,YAAPA,SAAmBA,GAEfS,MADAA,MAAKA,eAAeA,EAAKA,OAAQA,EAAKA,QAC/BA,GAGJT,EAAAA,UAAAA,cAAPA,SAAqBA,GAEjBU,MADAA,MAAKA,0CAA0CA,EAAKA,KAAMA,EAAKA,OACxDA,GAGJV,EAAAA,UAAAA,gBAAPA,SAAuBA,GAEnBW,MADAA,MAAKA,0CAA0CA,EAAKA,KAAMA,EAAKA,OACxDA,GAGHX,EAAAA,UAAAA,0CAARA,SAAkDA,EAAcA,GACxDY,YAAgBA,GAChBA,KAAKA,eAAgCA,GAC9BA,YAAgBA,GACvBA,KAAKA,oBAA0CA,GAE/CA,KAAKA,SAASA,GAGZA,YAAiBA,IAAqCA,EAAOA,KAAKA,KAGpEA,KAAKA,uBAAuBA,EAAMA,GAFlCA,KAAKA,SAASA,IAKdZ,EAAAA,UAAAA,uBAARA,SAA+BA,EAAcA,GACzCa,GAAIA,GAAeA,EAAKA,YAAYA,KAAKA,QACrCA,EAAWA,GAAgBA,EAAaA,KACxCA,EAAgBA,EAAMA,YAAYA,KAAKA,QACvCA,EAAYA,GAAiBA,EAAcA,IAE3CA,IAAYA,IAAcA,EAASA,iBAAiBA,IACpDA,KAAKA,SAASA,IAGdb,EAAAA,UAAAA,eAARA,SAAuBA,EAAoBA,GACvCc,GAAIA,GAASA,KAAKA,OAAOA,OAAOA,EAChCA,IAAIA,EAAQA,CACRA,GAAIA,GAASA,EAAOA,SAASA,SAASA,EACtCA,IAAIA,EACAA,MAAOA,EAEXA,MAAKA,SAASA,OAGdA,MAAKA,SAASA,IAIdd,EAAAA,UAAAA,kBAARA,SAA0BA,EAAoBA,EAAoBA,GAC9De,GAAIA,GAASA,KAAKA,eAAeA,EAAYA,EAC7CA,IAAIA,EAAQA,CACRA,GAAIA,GAAYA,EAAOA,YAAYA,SAASA,EAC5CA,IAAIA,EACAA,MAAOA,EAEXA,MAAKA,SAASA,KAIdf,EAAAA,UAAAA,uBAARA,SAA+BA,EAAoBA,EAAoBA,EAAuBA,GAC1FgB,GAAIA,GAAYA,KAAKA,kBAAkBA,EAAYA,EAAYA,EAC/DA,IAAIA,EAAWA,CACXA,GAAIA,GAAiBA,EAAUA,OAAOA,SAASA,EAC/CA,IAAIA,EACAA,MAAOA,EAEXA,MAAKA,SAASA,KAIdhB,EAAAA,UAAAA,SAARA,SAAiBA,GACRiB,KAAKA,SACNA,KAAKA,WACTA,KAAKA,OAAOA,KAAKA,IAGbjB,EAAAA,UAAAA,YAARA,SAAoBA,GAChBkB,GAAIA,GAAgBA,EAAAA,iBAAiBA,6BAA6BA,EAClEA,IAAIA,EAAUA,gBAAkBA,EAAUA,mBAAoBA,CAC1DA,GAAIA,GAAmCA,EAAAA,qBAAqBA,oCAAoCA,KAAKA,OAAQA,EAC7GA,OAAOA,IAA0FA,IAAtDA,EAAiCA,OAAOA,UAGvFA,MAA8IA,KAAvIA,KAAKA,OAAOA,OAAOA,EAAcA,QAAQA,aAAaA,EAAcA,OAAQA,EAAAA,iBAAiBA,gBAAgBA,IAAYA,WAExIlB,GAlM6CxxB,EAAAA,eAAhCA,GAAAA,wBAAuBA,CAqMpCA,IAAAA,GAAAA,SAAAA,GAAA2yB,QAAAA,KAAyCC,EAAAA,MAAAA,KAAAA,WAazCD,MAbyCA,WAAAA,EAAAA,GAC9BA,EAAAA,UAAAA,UAAPA,SAAiBA,GACbE,MAAOA,GAAKA,MAGTF,EAAAA,UAAAA,aAAPA,SAAoBA,KAINA,EAAAA,aAAdA,SAA2BA,GACvBG,GAAIA,GAAUA,GAAIA,EAClBA,OAAOA,GAAKA,OAAOA,IAE3BH,GAbyC3yB,EAAAA,sBAgBzCA,EAAAA,SAAAA,GAGI+yB,QAAAA,GAAYA,GACRC,EAAAA,KAAAA,MACAA,KAAKA,OAASA,EA0DtBD,MA/DyCA,WAAAA,EAAAA,GAQ9BA,EAAAA,UAAAA,eAAPA,SAAsBA,GAClBE,MAAOA,IAGJF,EAAAA,UAAAA,oBAAPA,SAA2BA,GACvBG,GAAIA,GAAcA,EAAKA,MACnBA,EAA8BA,EAAQA,IACtCA,EAA8BA,EAAUA,OAAOA,KAEnDA,IAAIA,GAAaA,EAAUA,cAAeA,GAA+BA,CACrEA,GAAIA,GAAyDA,EAAUA,IACnEA,EAAeA,EAAWA,4BAA4BA,KAAKA,OAAQA,EAAwBA,KAE/FA,IAAIA,GAAcA,EAAcA,CAC5BA,GAAIA,GAA6BA,EAAiBA,OAAGA,OACjDA,EAAmBA,EAAcA,OAAOA,EAAYA,GACpDA,EAAkBA,KAAKA,OAAOA,OAAOA,GAAYA,cAAcA,EAAcA,EAAUA,UAE3FA,IAAIA,EACAA,IAAkBA,GAAAA,GAAAA,EAAAA,EAAAA,EAAgBA,OAA7BA,EAAAA,EAAAA,OAAAA,IAAoCA,CAApCA,GAAIA,GAAKA,EAAAA,EACVA,IAAIA,EAAMA,OAASA,EACfA,MAAOA,IAAIA,GAAgBA,EAAkBA,EAAMA,OAAOA,YAIzEA,CACDA,GAAIA,GAA4BA,EAAaA,IACzCA,EAAoBA,EAAAA,qBAAqBA,4BAA4BA,KAAKA,OAC1EA,EAAWA,OACXA,EAAWA,OACXA,EAAUA,UACVA,EAAKA,MAETA,IAAIA,EACAA,MAAOA,IAAIA,GAAgBA,EAAUA,IAAKA,EAAkBA,OAAOA,QAIxEH,EAAAA,UAAAA,eAAPA,SAAsBA,GAClBI,MAAOA,GAAKA,IAAIA,OAAOA,OAGpBJ,EAAAA,UAAAA,6BAAPA,SAAoCA,GAChCK,GAAIA,GAAeA,EAAKA,QACxBA,OAAOA,IAAIA,GAAgBA,EAAKA,IAAKA,IAGlCL,EAAAA,UAAAA,aAAPA,SAAoBA,KAINA,EAAAA,mBAAdA,SAAiCA,EAAmCA,GAChEM,GAAIA,GAAUA,GAAIA,GAA2BA,EAC7CA,OAAOA,GAAKA,OAAOA,IAE3BN,GA/DyC/yB,EAAAA,sBAiEzCA,EAAAA,SAAAA,GAGIszB,QAAAA,GAAYA,GAGRC,EAAAA,KAAAA,MACAA,KAAKA,KAAOA,EAqBpBD,MA5B4CA,WAAAA,EAAAA,GAUjCA,EAAAA,UAAAA,UAAPA,SAAiBA,GACbE,MAAIA,GAAKA,OAASA,KAAKA,KACZA,EAEJA,GAAIA,GAAkBA,EAAKA,IAAKA,KAAKA,OAGzCF,EAAAA,UAAAA,eAAPA,SAAsBA,GAClBG,MAAOA,IAAIA,GAAkBA,EAAMA,KAAKA,OAG9BH,EAAAA,QAAdA,SAAsBA,EAAcA,GAIhCI,GAAIA,GAAWA,GAAIA,GAA8BA,EACjDA,OAAOA,GAAKA,OAAOA,IAE3BJ,GA5B4CtzB,GA8B5CA,EAAAA,SAAAA,GAAA2zB,QAAAA,KAA4CC,EAAAA,MAAAA,KAAAA,WAY5CD,MAZ4CA,WAAAA,EAAAA,GAGjCA,EAAAA,UAAAA,UAAPA,SAAiBA,GACbE,MAAOA,GAAKA,KAGFF,EAAAA,QAAdA,SAAsBA,GAGlBG,MAAOA,GAAKA,OAAOA,EAA8BA,WATtCH,EAAAA,SAA0CA,GAAIA,GAWjEA,GAZ4C3zB,GAc5CA,EAAAA,SAAAA,GAAA+zB,QAAAA,KAAkDC,EAAAA,MAAAA,KAAAA,WAelDD,MAfkDA,WAAAA,EAAAA,GAGvCA,EAAAA,UAAAA,YAAPA,SAAmBA,GACfE,MAAIA,GAAKA,SACEA,EAAcA,OAAOA,EAAKA,OAAQA,EAAKA,QAE3CA,GAGGF,EAAAA,QAAdA,SAAsBA,GAGlBG,MAAOA,GAAKA,OAAOA,EAAoCA,WAZ5CH,EAAAA,SAAgDA,GAAIA,GAcvEA,GAfkD/zB,EAAAA,iBAnhDvCD,EAAAA,EAAAA,OAAAA,EAAAA,WAARA,UAAAA,YCAP,IAAOA,UAAP,SAAOA,GAAQA,GAAAA,IAAAA,SAAAA,GACXC,GAEcA,GAFPA,EAAmBA,SAASA,kBAEnCA,SAAcA,GAEVm0B,QAAAA,GACIA,EACAA,GACAC,GAAIA,MAEAA,EAAWA,EAA6BA,EAAMA,EAGlDA,KAAKA,EACDA,MAAOA,EAEXA,IAAIA,GAAYA,EAASA,KACrBA,EAAYA,EAASA,KACrBA,EAAqBA,EAASA,cAC9BA,EAAMA,EAAAA,sBAEVA,KAAKA,EACDA,MAAOA,EAGXA,IAAkBA,IAAdA,EACAA,MAAOA,EAEXA,IAAIA,EAAUA,SAAWA,EAAUA,QAASA,CACxCA,GAAIA,IAAcA,EAAIA,IAAKA,EAAIA,IAAKA,EAAIA,IAAKA,EAAIA,IAAKA,EAAIA,MAAOA,EAAIA,aAAcA,EAAIA,kBAAmBA,EAAIA,UAC1GA,EAAYA,EAAAA,gBAAgBA,eAAeA,GAC3CA,EAAgBA,EAAAA,iBAAiBA,6BAA6BA,GAE9DA,EAAgBA,EAAOA,OAAOA,EAAcA,OAGhDA,OAFIA,GAAcA,aAAaA,gBAC3BA,EAAWA,KAAKA,EAAIA,QACjBA,EACJA,GAAIA,EAAUA,MAAQA,EAAUA,MAAQA,EAAUA,SAAUA,CAG/DA,GAAIA,GAAyBA,EAAAA,WAAWA,aAAaA,KAAUA,EAAIA,KACnEA,OAAIA,KAAuBA,GACfA,EAAIA,eACRA,EAAIA,MAAOA,EAAIA,cAI3BA,MAAOA,GAGXD,QAAAA,GACIA,EACAA,EACAA,GACAE,GAAIA,GAAsBA,EAAuBA,EAAMA,EACvDA,OAAOA,GAAEA,SAASA,EAAqBA,GAG3CF,QAAAA,GAA4BA,EAAiBA,GAIzCG,IAAKA,GAAIA,GAAIA,EAAGA,EAAMA,EAAMA,OAAYA,EAAJA,EAASA,IACzCA,GAAIA,EAAAA,OAAOA,OAAOA,EAAMA,GAAIA,GACxBA,MAAOA,EAEfA,OAAOA,GAGXH,QAAAA,GAA8BA,EAAaA,GAIvCI,GAAIA,GAAMA,EAAEA,MACZA,IAAIA,IAAQA,EAAEA,OACVA,OAAOA,CAEXA,KAAKA,GAAIA,GAAIA,EAAOA,EAAJA,EAASA,IACrBA,IAAKA,EAAAA,OAAOA,OAAOA,EAAEA,GAAIA,EAAEA,IACvBA,OAAOA,CAGfA,QAAOA,EAGXJ,QAAAA,GAA2BA,EAA2BA,EAAcA,GAKhEK,IAAKA,GADDA,MACKA,EAAIA,EAAGA,EAAMA,EAAWA,OAAYA,EAAJA,EAASA,IAC9CA,EAAMA,EAAWA,GAAGA,OAAQA,CAEhCA,OAAOA,GAAiBA,eAAeA,EAAOA,GAAmBA,EAAYA,IAIjFL,QAAAA,GAA4BA,EAAcA,GACtCM,MADsCA,UAAAA,IAAAA,EAAAA,UACjCA,EAGEA,EAAKA,OAAOA,EAA2BA,SAAUA,GAF7CA,EAMfN,QAAAA,GAA0BA,GAGtBO,MAAOA,GAAKA,OAAOA,EAAiBA,UAIxCP,QAAAA,GAA2BA,GAGvBQ,MAAOA,GAAKA,OAAOA,EAAkBA,UAIzCR,QAAAA,GAA+BA,GAG3BS,MAAOA,GAAKA,OAAOA,EAAsBA,UAG7CT,QAAAA,GAAsCA,EAAcA,GAChDU,GAAIA,GAAeA,EAAsBA,EAAMA,EAC/CA,OAAOA,IAAgBA,EAAaA,8BAGxCV,QAAAA,GAAqCA,EAAcA,GAI/CW,GAAIA,GAASA,EAAoBA,EAAMA,EACvCA,OAAIA,GACOA,EAAOA,kBADlBA,OAIJX,QAAAA,GAAsCA,EAAcA,GAIhDY,GAAIA,GAAQA,EAAAA,gBAAgBA,eAAeA,EAC3CA,IAAKA,EAALA,CAGAA,GAAIA,GAAgBA,EAAAA,iBAAiBA,6BAA6BA,GAC9DA,EAAmBA,EAAOA,OAAOA,EAAcA,OACnDA,OAAIA,GACOA,EAAiBA,aAD5BA,QAIJZ,QAAAA,GAA+BA,EAAcA,GACzCa,GAAIA,GAAoBA,EAAqBA,EAAMA,EACnDA,IAAIA,EACAA,MAAOA,GAAkBA,SAASA,QAAQA,IAAIA,cAElDA,IAAIA,GAAmBA,EAAoBA,EAAMA,EACjDA,OAAIA,GACOA,EAAiBA,SAASA,QAAQA,IAAIA,cADjDA,OAIJb,QAAAA,GAA8BA,EAAcA,GACxCc,GAAIA,GAAWA,EAAKA,sBAAsBA,EAC1CA,IAAKA,EAALA,CAGAA,GAAIA,GAAWA,EAASA,QACxBA,OAAIA,IAAYA,EAASA,QAAQA,IAAIA,SAAWA,EACrCA,EADXA,QAIJd,QAAAA,GAA6BA,EAAcA,GACvCe,GAAIA,GAAWA,EAAKA,sBAAsBA,EAC1CA,IAAKA,EAALA,CAGAA,GAAIA,GAAWA,EAASA,QACxBA,OAAIA,IAAYA,EAASA,QAAQA,IAAIA,QAAUA,EACpCA,EADXA,QAIJf,QAAAA,GAAsCA,EAAcA,GAEhDgB,GAAIA,GAAWA,EAAAA,cAAcA,gBAAgBA,GAAMA,YAAYA,EAK/DA,OAHKA,KACDA,EAAWA,EAAKA,YAAYA,IAEzBA,EAGXhB,QAAAA,GAAgCA,EAAqBA,GACjDiB,GAAIA,GAASA,EAAoBA,EAAaA,EAC9CA,OAAIA,GACOA,EAAOA,aADlBA,OAIJjB,QAAAA,GAA6BA,EAAqBA,GAC9CkB,GAAKA,GAAgBA,EAArBA,CAGAA,GAAIA,GAAUA,EAAAA,gBAAgBA,eAAeA,EAC7CA,IAAKA,EAALA,CAGAA,GAAIA,GAAmCA,EAAQA,MAE/CA,IAAIA,GACAA,GAAIA,EAAOA,OAAOA,EAAOA,SAAWA,EAAQA,OAAOA,KAAMA,CACrDA,GAAIA,GAAWA,EAAOA,OAAOA,EAAOA,QAAQA,aAAaA,EAAOA,OAAQA,EAAQA,OAAOA,KAEvFA,IAAIA,EACAA,MAAOA,GAASA,YAGvBA,CACDA,GAAIA,GAAsDA,EAAQA,cAClEA,IAAIA,EAAqBA,CACrBA,GAAIA,GAAgBA,EAAAA,iBAAiBA,6BAA6BA,GAC9DA,EAAaA,EAAcA,MAC/BA,IAAIA,EAAOA,OAAOA,GAAaA,CAC3BA,GAAIA,GAAYA,EAAOA,OAAOA,GACzBA,cAAcA,EAAcA,OAAQA,EAAoBA,KAE7DA,IAAIA,EAAWA,CACXA,GAAIA,GAA2CA,EAAUA,OAAOA,SAASA,EAAoBA,MAC7FA,IAAIA,GAAkBA,EAAeA,OACjCA,MAAOA,GAAeA,OAAOA,aAOrDlB,QAAAA,GAAiCA,EAAwBA,GACrDmB,IAAIA,EAAEA,QAAQA,IAAkBA,EAAhCA,CAGAA,IAAmBA,GADfA,MACeA,EAAAA,EAAdA,EAAAA,EAAAA,OAAAA,IAA2BA,CAA3BA,GAAIA,GAAUA,EAAYA,GACvBA,EAAeA,EAAgBA,EAAQA,EACvCA,IACAA,EAAOA,KAAKA,GAEpBA,MAAOA,IAIXnB,QAAAA,GAAuDA,EAAsBA,GAIzEoB,IAAKA,GADDA,MACKA,EAAIA,EAAGA,EAAIA,EAAWA,OAAQA,IACnCA,EAAaA,KAAKA,EAAAA,cAAcA,QAAQA,EAAAA,oBAAoBA,MAAOA,EAAWA,GAAIA,EAAOA,IAG7FA,KAAIA,EAAEA,QAAQA,GAAdA,CAIAA,IAAwBA,GADpBA,GACoBA,EAAAA,EAAnBA,EAAAA,EAAAA,OAAAA,IAAgCA,CAAhCA,GAAIA,GAAeA,EAAYA,EAChCA,GAAaA,EAAAA,cAAcA,IAAIA,EAAYA,GAG/CA,MAAOA,IAGXpB,QAAAA,GAAqCA,GACjCqB,GAAIA,KACJA,IAAIA,EAAWA,CACXA,GAAIA,GAAgBA,EAAUA,MAC9BA,IAAsBA,SAAlBA,EACAA,IAAgBA,GAAAA,GAAAA,EAAAA,EAAAA,EAAcA,OAAzBA,EAAAA,EAAAA,OAAAA,IAAgCA,CAAhCA,GAAIA,GAAGA,EAAAA,GACJA,EAAYA,EAAcA,OAAOA,EACjCA,GAAOA,QAAQA,EAAUA,QAAUA,GACnCA,EAAOA,KAAKA,EAAUA,SAItCA,MAAOA,GAnRKrB,EAAAA,uBAAsBA,EA6CtBA,EAAAA,qBAAoBA,EAQpBA,EAAAA,YAAWA,EAWXA,EAAAA,cAAaA,EAgBbA,EAAAA,WAAUA,EAYVA,EAAAA,YAAWA,EAQXA,EAAAA,UAASA,EAOTA,EAAAA,WAAUA,EAOVA,EAAAA,eAAcA,EAMdA,EAAAA,sBAAqBA,EAKrBA,EAAAA,qBAAoBA,EASpBA,EAAAA,sBAAqBA,EAcrBA,EAAAA,eAAcA,EAwCdA,EAAAA,gBAAeA,EA2CfA,EAAAA,iBAAgBA,EAahBA,EAAAA,uCAAsCA,EAmBtCA,EAAAA,qBAAoBA,CAepCA,IAAAA,GAAAA,SAAAA,GAAAsB,QAAAA,KAAyCC,EAAAA,MAAAA,KAAAA,WA0BzCD,MA1ByCA,WAAAA,EAAAA,GAG9BA,EAAAA,UAAAA,YAAPA,SAAmBA,GACfE,MAAOA,GAAKA,QAGTF,EAAAA,UAAAA,eAAPA,SAAsBA,GAClBG,MAAOA,GAAKA,OAAOA,OAAOA,MAAQA,IAAMA,EAAKA,KAG1CH,EAAAA,UAAAA,gBAAPA,SAAuBA,EAAwBA,GAC3CI,MAAOA,GAAKA,OAAOA,OAAOA,MAAQA,IAAMA,EAAKA,KAG1CJ,EAAAA,UAAAA,UAAPA,SAAiBA,EAAyBA,GACtCK,MAAOA,GAAAA,uBAAuBA,EAAKA,MAAQA,IAAMA,EAAKA,IAAIA,OAAOA,MAAQA,KAGtEL,EAAAA,UAAAA,cAAPA,SAAqBA,GACjBM,MAAOA,SAGJN,EAAAA,UAAAA,aAAPA,SAAoBA,EAAcA,GAC9BO,MAAOA,IAAYA,QAvBTP,EAAAA,SAAuCA,GAAIA,GAyB7DA,GA1ByCtB,EAAAA,6BA4BzCA,EAAAA,SAAAA,GAAA8B,QAAAA,KAA+BC,EAAAA,MAAAA,KAAAA,WAc/BD,MAd+BA,WAAAA,EAAAA,GAGpBA,EAAAA,UAAAA,gBAAPA,SAAuBA,GACnBE,OAAOA,GAGJF,EAAAA,UAAAA,UAAPA,SAAiBA,GACbG,OAAOA,GAGJH,EAAAA,UAAAA,aAAPA,SAAoBA,GAChBI,OAAOA,GAXGJ,EAAAA,SAA6BA,GAAIA,GAanDA,GAd+B9B,EAAAA,sBAgB/BA,EAAAA,SAAAA,GAAAmC,QAAAA,KAAoCC,EAAAA,MAAAA,KAAAA,WAqBpCD,MArBoCA,WAAAA,EAAAA,GAGzBA,EAAAA,UAAAA,aAAPA,SAAoBA,GAChBE,MAAIA,GAAKA,aAAeA,EAAAA,oBAAoBA,OACjCA,EAEJA,EAAKA,MAAMA,OAAOA,OAGtBF,EAAAA,UAAAA,SAAPA,SAAgBA,GACZG,MAAOA,GAAKA,KAAKA,OAAOA,OAASA,EAAKA,MAAMA,OAAOA,OAGhDH,EAAAA,UAAAA,kBAAPA,SAAyBA,GACrBI,OAAOA,GAGJJ,EAAAA,UAAAA,aAAPA,SAAoBA,GAChBK,OAAOA,GAlBGL,EAAAA,SAAkCA,GAAIA,GAoBxDA,GArBoCnC,EAAAA,sBAuBpCA,EAAAA,SAAAA,GAAAyC,QAAAA,KAAgCC,EAAAA,MAAAA,KAAAA,WAqBhCD,MArBgCA,WAAAA,EAAAA,GAGrBA,EAAAA,UAAAA,aAAPA,SAAoBA,GAChBE,MAAIA,GAAKA,aAAeA,EAAAA,oBAAoBA,OACjCA,EAEJA,EAAKA,MAAMA,OAAOA,OAGtBF,EAAAA,UAAAA,SAAPA,SAAgBA,GACZG,MAAOA,GAAKA,KAAKA,OAAOA,OAASA,EAAKA,MAAMA,OAAOA,OAGhDH,EAAAA,UAAAA,cAAPA,SAAqBA,GACjBI,OAAOA,GAGJJ,EAAAA,UAAAA,aAAPA,SAAoBA,GAChBK,OAAOA,GAlBGL,EAAAA,SAA8BA,GAAIA,GAoBpDA,GArBgCzC,EAAAA,uBA3VtBn0B,EAAAA,EAAAA,cAAAA,EAAAA;EAHHD,EAAAA,EAAAA,OAAAA,EAAAA,WAARA,UAAAA,YCAP,IAAOA,UAAP,SAAOA,GAAQA,GAAAA,IAAAA,SAAAA,GAEXC,GAAAA,GAAAA,WAGIk3B,QAAAA,GAAYA,GACRC,KAAKA,aAAeA,EA4F5BD,MAzFWA,GAAAA,UAAAA,YAAPA,SAAmBA,GAIfE,IAAKA,GAHDA,MACAA,EAAeA,EACfA,EAAmBA,EAAaA,OAC3BA,EAAIA,EAAGA,EAAMA,EAAiBA,OAAYA,EAAJA,EAASA,IAAKA,CACzDA,GAAIA,GAAUA,EAAiBA,GAC3BA,EAAoBA,EAAaA,OAAOA,GACxCA,EAAqBA,EAAAA,cAAcA,OAAOA,EAAkBA,OAAQA,EAAkBA,OAAQA,GAC9FA,EAAkCA,EAAmBA,OAAOA,KAAKA,aAErEA,GAAaA,IACTA,OAAQA,EAAkBA,OAC1BA,OAAQA,EAAkBA,QAGlCA,MAAOA,IAAIA,GAAAA,OAAOA,IAGfF,EAAAA,UAAAA,cAAPA,SAAqBA,EAA4BA,GAI7CG,MAAOA,MAAKA,0BAA0BA,EAAaA,IAGhDH,EAAAA,UAAAA,eAAPA,SAAsBA,EAA6BA,GAI/CI,MAAIA,GAAEA,QAAQA,GAAdA,OAGOA,KAAKA,0BAA0BA,EAAcA,IAGhDJ,EAAAA,UAAAA,0BAARA,SAAkCA,EAA4BA,GAA9DK,GAAAA,GAAAA,IAGIA,OAAOA,GAAEA,IAAIA,EAAaA,SAAAA,GACtBA,OACIA,KAAMA,EAAKA,KACXA,KAAMA,EAAAA,gCAAgCA,QAAQA,EAAKA,KAAKA,OAAOA,EAAKA,cAAeA,OAKxFL,EAAAA,UAAAA,eAAPA,SAAsBA,EAAkCA,GAIpDM,IAAIA,EAAEA,QAAQA,GAAdA,CAIAA,IAAKA,GADDA,MACKA,EAAIA,EAAGA,EAAMA,EAAaA,OAAYA,EAAJA,EAASA,IAAKA,CACrDA,GAAIA,GAAOA,EAAaA,GACpBA,EAAcA,EAAAA,gCAAgCA,QAAQA,EAAKA,KAAKA,OAAOA,KAAKA,cAAeA,EAC/FA,GAAQA,MACAA,UAAWA,EAAKA,UAChBA,KAAMA,IAIlBA,MAAOA,KAGJN,EAAAA,UAAAA,aAAPA,SAAoBA,EAAwBA,GAA5CO,GAAAA,GAAAA,IAIIA,KAAIA,EAAEA,QAAQA,GAAdA,CAIAA,IAAKA,GADDA,MACKA,EAAIA,EAAGA,EAAMA,EAAWA,OAAYA,EAAJA,EAASA,IAAKA,CACnDA,GAAIA,GAAgBA,EAAWA,GAE3BA,GACAA,UAAWA,EAAAA,gCAAgCA,QAAQA,EAAcA,UAAUA,OAAOA,KAAKA,cAAeA,GAGtGA,GAAcA,SACdA,EAAaA,OAASA,EAAEA,IAAIA,EAAcA,OAAQA,SAAAA,GAAKA,MAAAA,GAAAA,gCAAgCA,QAAQA,EAAEA,OAAOA,EAAKA,cAAeA,MAEhIA,EAAMA,KAAKA,GAGfA,MAAOA,KAEfP,IAhGal3B,GAAAA,sBAAqBA,GAFvBD,EAAAA,EAAAA,OAAAA,EAAAA,WAARA,UAAAA,YCAP,IAAOA,UAAP,SAAOA,GAAQA,GAAAA,IAAAA,SAAAA,GACXC,GAAOA,GAAkBA,SAASA,gBAwClCA,EAAAA,WAQI03B,QAAAA,GAAYA,EAAcA,EAAmBA,EAA6BA,EAAuBA,GAI7FC,KAAKA,UAAYA,EACjBA,KAAKA,WAAaA,EAClBA,KAAKA,aAAeA,EACpBA,KAAKA,YAAcA,EACnBA,KAAKA,aAAeA,EAgU5BD,MA7TkBA,GAAAA,OAAdA,WAIIE,MAHKA,GAAcA,QACfA,EAAcA,MAAQA,GAAIA,GAAcA,GAAIA,GAAUA,KAAMA,QAAUA,OAEnEA,EAAcA,OAGVF,EAAAA,sBAAfA,SACIA,EACAA,EACAA,EACAA,EACAA,GAEAG,GAAIA,GAAwBA,GAAIA,GAAsBA,EAAKA,OAG3DA,IAAIA,EACAA,IAAKA,GAAIA,GAAIA,EAAGA,EAAMA,EAAMA,OAAYA,EAAJA,EAASA,IAAKA,CAC9CA,GAAIA,GAASA,EAAMA,EAEnBA,GAAOA,UAAUA,OAAOA,EAExBA,IAAIA,GAAeA,EAAOA,MAC1BA,IAAIA,EACAA,IAAKA,GAAIA,GAAIA,EAAGA,EAAOA,EAAaA,OAAYA,EAAJA,EAAUA,IAC9CA,EAAaA,IACbA,EAAaA,GAAGA,OAAOA,GAM3CA,GAAIA,EACAA,IAAKA,GAAIA,GAAIA,EAAGA,EAAMA,EAAQA,OAAYA,EAAJA,EAASA,IAC3CA,EAAQA,GAAGA,KAAKA,OAAOA,EAI/BA,KAAKA,GAAIA,GAAIA,EAAGA,EAAMA,EAAOA,OAAYA,EAAJA,EAASA,IAC1CA,EAAOA,GAAGA,KAAKA,OAAOA,EAG1BA,IAAIA,EACAA,IAAKA,GAAIA,GAAIA,EAAGA,EAAMA,EAAQA,OAAYA,EAAJA,EAASA,IAC3CA,EAAQA,GAAGA,KAAKA,OAAOA,EAI/BA,KAAKA,GADDA,GAAmBA,EAAsBA,SACpCA,EAAIA,EAAGA,EAAMA,EAAiBA,OAAYA,EAAJA,EAASA,IACpDA,EAAKA,OAAOA,EAAiBA,GAEjCA,OAAOA,IAAIA,GAAcA,EAAMA,EAAOA,EAASA,EAAQA,IAGpDH,EAAAA,UAAAA,KAAPA,WACII,MAAOA,MAAKA,UAAUA,SAOnBJ,EAAAA,UAAAA,OAAPA,SAAcA,GACVK,MAAIA,GAAEA,QAAQA,WACHA,KAAKA,YAETA,KAAKA,UAAUA,IAGlBL,EAAAA,UAAAA,UAARA,WACIM,MAAOA,GAAcA,2BAA2BA,KAAKA,cAG1CN,EAAAA,2BAAfA,SAA0CA,GACtCO,MAAOA,GAAgBA,eAA4BA,EAAEA,IAAIA,EAAOA,SAAAA,GAC5DA,OACIA,KAAMA,EAAEA,KACRA,KAAMA,EAAEA,UAKZP,EAAAA,UAAAA,UAARA,SAAkBA,GACdQ,GAAIA,GAAOA,KAAKA,UAAUA,QACtBA,EAAcA,EAAcA,oCAAoCA,EAAQA,EAC5EA,OAAOA,GAAcA,sBAAsBA,EAAMA,KAAKA,WAAYA,KAAKA,aAAcA,EAAaA,KAAKA,eAG5FR,EAAAA,oCAAfA,SAAmDA,EAAuBA,GAGtES,IAAKA,GAFDA,MAEKA,EAAIA,EAAGA,EAAMA,EAAOA,OAAYA,EAAJA,EAASA,IAAKA,CAC/CA,GAAIA,GAAQA,EAAOA,EACnBA,GAAMA,MACFA,KAAMA,EAAMA,KACZA,KAAMA,EAAgCA,QAAQA,EAAMA,KAAMA,KAIlEA,MAAOA,IAIJT,EAAAA,UAAAA,aAAPA,SAAoBA,GAKhBU,IAAKA,GAFDA,GAAgBA,KAAKA,YACrBA,KACKA,EAAIA,EAAGA,EAAMA,EAAcA,OAAYA,EAAJA,EAASA,IAAKA,CACtDA,GAAIA,GAAeA,EAAcA,EAC7BA,GAAAA,OAAOA,OAAOA,EAAaA,KAAMA,IAGrCA,EAAYA,KAAKA,GAGrBA,MAAOA,GAAcA,sBAAsBA,KAAKA,UAAUA,QAASA,KAAKA,WAAYA,KAAKA,aAAcA,EAAaA,KAAKA,eAItHV,EAAAA,UAAAA,cAAPA,SAAqBA,GAEjBW,IAAKA,GADDA,GAAQA,KAAKA,UACRA,EAAIA,EAAMA,OAASA,EAAGA,GAAKA,EAAGA,IAC/BA,EAAAA,OAAOA,OAAOA,EAAMA,GAAGA,KAAMA,IAC7BA,EAAMA,OAAOA,EAAGA,EAGxBA,OAAOA,GAAcA,sBAAsBA,KAAKA,UAAUA,QAASA,KAAKA,WAAYA,EAAOA,KAAKA,YAAaA,KAAKA,eAG/GX,EAAAA,UAAAA,aAAPA,SAAoBA,GAChBY,GAAIA,GAAQA,EAAAA,YAAYA,YAAYA,EAAEA,IAAIA,KAAKA,YAAaA,SAAAA,GAAKA,MAAAA,GAAEA,OAAOA,EAC1EA,OAAIA,IAASA,EACFA,KAAKA,YAAYA,GAAOA,KADnCA,QAIGZ,EAAAA,UAAAA,YAAPA,SAAmBA,EAAeA,GAG9Ba,KAAIA,GAASA,KAAKA,YAAYA,QAA9BA,CAGAA,GAAIA,GAASA,KAAKA,SACdA,EAAOA,KAAKA,UAAUA,QACtBA,EAAeA,EAAOA,GAAOA,IAMjCA,OALAA,GAAOA,IACHA,KAAMA,EACNA,KAAMA,EAAgCA,QAAQA,EAAMA,IAGjDA,EAAcA,sBAAsBA,EAAMA,KAAKA,WAAYA,KAAKA,aAAcA,EAAQA,KAAKA,gBAI/Fb,EAAAA,UAAAA,UAAPA,SAAiBA,EAAcA,GAG3Bc,GAAIA,GAAcA,KAAKA,SACnBA,EAAOA,KAAKA,UAAUA,OAM1BA,OALAA,GAAYA,MACRA,KAAMA,EAAAA,YAAYA,WAAWA,EAAaA,EAAMA,GAChDA,KAAMA,EAAgCA,QAAQA,EAAMA,KAGjDA,EAAcA,sBAAsBA,EAAMA,KAAKA,WAAYA,KAAKA,aAAcA,EAAaA,KAAKA,eAOpGd,EAAAA,UAAAA,QAAPA,SAAeA,GACXe,MAAIA,GAAEA,QAAQA,WACHA,KAAKA,aAETA,KAAKA,WAAWA,IAGnBf,EAAAA,UAAAA,WAARA,WACIgB,MAAOA,GAAcA,2BAA2BA,KAAKA,eAGjDhB,EAAAA,UAAAA,WAARA,SAAmBA,GACfiB,GAAIA,GAAOA,KAAKA,UAAUA,QACtBA,EAAeA,EAAcA,oCAAoCA,EAAQA,EAC7EA,OAAOA,GAAcA,sBAAsBA,EAAMA,KAAKA,WAAYA,KAAKA,aAAcA,KAAKA,YAAaA,IAOpGjB,EAAAA,UAAAA,QAAPA,SAAeA,GACXkB,MAAIA,GAAEA,QAAQA,WACHA,KAAKA,aAETA,KAAKA,WAAWA,IAGnBlB,EAAAA,UAAAA,WAARA,WACImB,GAAIA,MAEAA,EAAUA,KAAKA,YACnBA,IAAIA,EACAA,IAAKA,GAAIA,GAAIA,EAAGA,EAAMA,EAAQA,OAAYA,EAAJA,EAASA,IAAKA,CAChDA,GAAIA,GAASA,EAAQA,EAErBA,GAAOA,MACHA,KAAMA,EAAOA,KACbA,UAAWA,EAAOA,YAK9BA,MAAOA,IAGHnB,EAAAA,UAAAA,WAARA,SAAmBA,GAKfoB,IAAKA,GAFDA,MACAA,EAAOA,KAAKA,UAAUA,QACjBA,EAAIA,EAAGA,EAAMA,EAAOA,OAAYA,EAAJA,EAASA,IAAKA,CAC/CA,GAAIA,GAASA,EAAOA,EACpBA,GAAeA,MACXA,KAAMA,EAAgCA,QAAQA,EAAOA,KAAMA,GAC3DA,UAAWA,EAAOA,YAI1BA,MAAOA,GAAcA,sBAAsBA,EAAMA,KAAKA,WAAYA,EAAgBA,KAAKA,YAAaA,KAAKA,eAOtGpB,EAAAA,UAAAA,MAAPA,SAAaA,GACTqB,MAAIA,GAAEA,QAAQA,WACHA,KAAKA,WAETA,KAAKA,SAASA,IAGjBrB,EAAAA,UAAAA,SAARA,WACIsB,GAAIA,MAEAA,EAAaA,KAAKA,UACtBA,IAAIA,EACAA,IAAKA,GAAIA,GAAIA,EAAGA,EAAMA,EAAWA,OAAYA,EAAJA,EAASA,IAC9CA,EAAOA,KAAKA,EAAWA,GAG/BA,OAAOA,IAGHtB,EAAAA,UAAAA,SAARA,SAAiBA,GAKbuB,IAAKA,GAFDA,MACAA,EAAOA,KAAKA,UAAUA,QACjBA,EAAIA,EAAGA,EAAMA,EAAOA,OAAYA,EAAJA,EAASA,IAAKA,CAC/CA,GAAIA,GAASA,EAAOA,GAChBA,GACAA,UAAWA,EAAgCA,QAAQA,EAAOA,UAAWA,IAGrEA,EAAeA,EAAOA,MAC1BA,IAAIA,EAAcA,CACdA,EAAcA,SACdA,KAAKA,GAAIA,GAAIA,EAAGA,EAAOA,EAAaA,OAAYA,EAAJA,EAAUA,IAClDA,GAAIA,EAAaA,GAAIA,CACjBA,GAAIA,GAAgBA,EAAgCA,QAAQA,EAAaA,GAAIA,EAC7EA,GAAcA,OAAOA,KAAKA,IAItCA,EAAaA,KAAKA,GAGtBA,MAAOA,GAAcA,sBAAsBA,EAAMA,EAAcA,KAAKA,aAAcA,KAAKA,YAAaA,KAAKA,eAGtGvB,EAAAA,UAAAA,SAAPA,SAAgBA,GAOZwB,IAAKA,GAJDA,GAA2BA,KAAKA,QAChCA,EAA4BA,EAAOA,QACnCA,EAAOA,KAAKA,UAAUA,QAEjBA,EAAIA,EAAGA,EAAMA,EAAcA,OAAYA,EAAJA,EAASA,IAAKA,CACtDA,GAAIA,GAASA,EAAcA,GAEvBA,GACAA,UAAWA,EAAgCA,QAAQA,EAAOA,UAAWA,GAGrEA,GAAOA,SACPA,EAAcA,OAASA,EAAEA,IAAIA,EAAOA,OAAQA,SAAAA,GAAKA,MAAAA,GAAgCA,QAAQA,EAAGA,MAEhGA,EAAaA,KAAKA,GAGtBA,MAAOA,GAAcA,sBAAsBA,EAAMA,EAAcA,KAAKA,aAAcA,KAAKA,YAAaA,KAAKA,eAGtGxB,EAAAA,UAAAA,QAAPA,SAAeA,GACXyB,GAAIA,GAAWA,GAAIA,GAAAA,sBAAsBA,GACrCA,EAAOA,EAASA,YAAYA,KAAKA,WACjCA,EAAQA,EAASA,aAAaA,KAAKA,WAAYA,GAC/CA,EAAUA,EAASA,eAAeA,KAAKA,aAAcA,GACrDA,EAASA,EAASA,cAAcA,KAAKA,YAAaA,GAClDA,EAAUA,EAASA,eAAeA,KAAKA,aAAcA,EAEzDA,OAAOA,GAAcA,sBAAsBA,EAAMA,EAAOA,EAASA,EAAQA,IAEjFzB,IAhVa13B,GAAAA,cAAaA,CAmV1BA,IAAAA,GAAAA,WAIIo5B,QAAAA,GAAYA,EAAcA,GAItBC,KAAKA,UAAYA,EACjBA,KAAKA,WAAaA,EAyI1BD,MAtIkBA,GAAAA,WAAdA,SAAyBA,GAGrBE,GAAIA,GAAOA,GAAIA,GAEXA,EAAoBA,EAAgCA,QAAQA,EAAUA,GAGtEA,IACAA,UAAWA,GAGfA,OAAOA,IAAIA,GAAeA,EAAMA,IAGtBF,EAAAA,sBAAdA,SAAoCA,GAChCG,MAAOA,GAAeA,0CAA0CA,EAAcA,EAAAA,cAAcA,iBAGlFH,EAAAA,kBAAdA,SAAgCA,GAC5BI,MAAOA,GAAeA,0CAA0CA,EAAcA,EAAAA,cAAcA,aAGjFJ,EAAAA,0CAAfA,SAAyDA,EAAiCA,GAItFK,GAAIA,YAAwBA,OAAOA,CAC/BA,GAAIA,GAA2BA,MAAMA,MAAMA,KAAMA,MAAMA,EAAaA,SAASA,IAAIA,WAAQA,MAAOA,IAChGA,OAAOA,GAAeA,WAAWA,EAAAA,YAAYA,uCAAiDA,EAAcA,IAGhHA,MAAOA,GAAeA,WAAWA,EAAAA,cAAcA,MAAcA,EAAcA,KAGxEL,EAAAA,UAAAA,KAAPA,WACIM,MAAOA,MAAKA,UAAUA,SAGnBN,EAAAA,UAAAA,WAAPA,WAIIO,IAAKA,GAHDA,MAEAA,EAAQA,KAAKA,WACRA,EAAIA,EAAGA,EAAMA,EAAMA,OAAYA,EAAJA,EAASA,IAAKA,CAC9CA,GAAIA,GAASA,EAAMA,EACnBA,GAAYA,KAAKA,EAAOA,WAE5BA,MAAOA,IAGJP,EAAAA,UAAAA,MAAPA,WAIIQ,IAAKA,GAHDA,MAEAA,EAAaA,KAAKA,WACbA,EAAIA,EAAGA,EAAMA,EAAWA,OAAYA,EAAJA,EAASA,IAC9CA,EAAOA,KAAKA,EAAWA,GAE3BA,OAAOA,IAGJR,EAAAA,UAAAA,QAAPA,SAAeA,GACXS,GAAIA,GAAWA,GAAIA,GAAAA,sBAAsBA,GACrCA,EAAOA,EAASA,YAAYA,KAAKA,WACjCA,EAAQA,EAASA,aAAaA,KAAKA,WAAYA,EAEnDA,OAAOA,IAAIA,GAAeA,EAAMA,IAG7BT,EAAAA,UAAAA,SAAPA,SAAgBA,EAAmCA,GAC/CU,GAAIA,GAAYA,GAAIA,GAAAA,wBAAwBA,EAAQA,EAEpDA,OADAA,MAAKA,QAAQA,GACNA,EAAUA,QAIPV,EAAAA,MAAdA,SAAoBA,GAChBW,GAAIA,EAAEA,QAAQA,GACVA,MAAOA,KAEXA,IAAuBA,IAAnBA,EAAQA,OACRA,MAAOA,GAAQA,EAMnBA,KAAKA,GAJDA,GAAcA,EAAQA,GACtBA,EAAOA,EAAYA,OACnBA,EAAoBA,EAAgBA,KAAKA,EAAYA,WAAYA,EAAYA,WAAWA,QAEnFA,EAAIA,EAAGA,EAAMA,EAAQA,OAAYA,EAAJA,EAASA,IAC3CA,EAAeA,YAAYA,EAAQA,GAAIA,EAAMA,EAEjDA,OAAOA,IAAIA,GAAeA,EAAMA,IAGtBX,EAAAA,gBAAdA,SAA8BA,GAC1BY,MAAKA,IAAoCA,IAA1BA,EAAOA,QAAQA,OAGvBA,EAAAA,YAAYA,eAAeA,EAAOA,QAAQA,GAAGA,YAFzCA,GAKDZ,EAAAA,YAAdA,SAA0BA,GACtBa,MAAKA,IAAoCA,IAA1BA,EAAOA,QAAQA,OAGvBA,EAAAA,YAAYA,WAAWA,EAAOA,QAAQA,GAAGA,YAFrCA,GAKDb,EAAAA,aAAdA,SAA2BA,EAA4BA,GACnDc,MAAIA,UAASA,aAAaA,OAAuBA,EAAYA,KAC/CA,EAAeA,gBAAgBA,IAAeA,EAAeA,YAAYA,IAC3EA,EAAeA,YAAYA,IAAeA,EAAeA,gBAAgBA,KAE9EA,GAGId,EAAAA,YAAfA,SAA2BA,EAAwBA,EAAcA,GAO7De,IAAKA,GADDA,GAAmBA,EAAOA,WACrBA,EAAIA,EAAGA,EAAIA,EAAiBA,OAAQA,IAAKA,CAC9CA,GAAIA,GAAkBA,EAAiBA,GAEnCA,GACAA,UAAWA,EAAgCA,QAAQA,EAAgBA,UAAWA,GAG9EA,GAAgBA,SAChBA,EAAiBA,OAASA,EAAEA,IAAIA,EAAgBA,OAAQA,SAAAA,GAAKA,MAAAA,GAAgCA,QAAQA,EAAGA,MAE5GA,EAAMA,KAAKA,KAGvBf,IAlJap5B,GAAAA,eAAcA,CAqJ3BA,IAAAA,GAAAA,WAGIo6B,QAAAA,GAAYA,GACRC,KAAKA,MAAQA,MA2DrBD,MAxDWA,GAAAA,UAAAA,KAAPA,WACIE,MAAOA,QAAOA,KAAKA,KAAKA,QAGrBF,EAAAA,UAAAA,OAAPA,SAAcA,GACVG,MAAOA,MAAKA,MAAMA,IAGfH,EAAAA,UAAAA,aAAPA,SAAoBA,EAA4BA,GAK5CI,IAAKA,GADDA,GAAOA,KAAKA,OACPA,EAAIA,EAAGA,EAAMA,EAAKA,OAAYA,EAAJA,EAASA,IAAKA,CAC7CA,GAAIA,GAAMA,EAAKA,GACXA,EAAOA,KAAKA,MAAMA,EACtBA,IAAIA,GAAQA,EAAOA,SAAWA,EAAKA,QAAUA,EAAOA,SAAWA,EAAKA,OAChEA,OAASA,KAAMA,GAOvBA,IAHAA,GAAIA,GAAgBA,GAAuBA,KAAKA,cAAcA,EAAOA,QACjEA,EAAqBA,EACrBA,EAAIA,EACDA,KAAKA,MAAMA,IACdA,EAAaA,EAAgBA,GAIjCA,OADAA,MAAKA,MAAMA,GAAcA,GAChBA,KAAMA,EAAYA,OAAKA,IAG7BJ,EAAAA,UAAAA,OAAPA,SAAcA,SACHK,MAAKA,MAAMA,IAIdL,EAAAA,UAAAA,cAARA,SAAsBA,GAGlBM,GAAIA,GAAMA,EAAIA,YAAYA,IAI1BA,OAHIA,IAAOA,GAAMA,IAAQA,EAAIA,OAASA,IAClCA,EAAMA,EAAIA,OAAOA,EAAMA,IAEpBA,EAAIA,UAAUA,EAAGA,GAAGA,eAGxBN,EAAAA,UAAAA,MAAPA,WAEIO,GAAIA,GAASA,GAAIA,EAKjBA,OAFAA,GAAEA,OAAOA,EAAOA,MAAOA,KAAKA,OAErBA,GAEfP,IA/Dap6B,GAAAA,OAAMA,CAiEnBA,IAAAA,GAAAA,SAAAA,GAGI46B,QAAAA,GAAYA,GAGRC,EAAAA,KAAAA,MACAA,KAAKA,QAAUA,EA6DvBD,MApEqDA,WAAAA,EAAAA,GAU1CA,EAAAA,UAAAA,YAAPA,SAAmBA,GACfE,GAAIA,GAAcA,KAAKA,QAAQA,EAAKA,OAEpCA,OAAIA,GACOA,GAAIA,GAAAA,aAAaA,EAAKA,OAAQA,EAAKA,OAAQA,GAE/CA,EAAAA,UAAMA,YAAWA,KAAAA,KAACA,IAGtBF,EAAAA,UAAAA,cAAPA,SAAqBA,GAGjBG,GAAIA,GAAiBA,MACjBA,GAAOA,SACPA,EAAiBA,KAAKA,aAAaA,EAAOA,QAE9CA,IAAIA,GAAmBA,EAAOA,UAAUA,OAAOA,KAE/CA,IAAIA,EAAOA,YAAcA,GAAoBA,EAAOA,SAAWA,EAC3DA,MAAOA,EAEXA,IAAIA,IACAA,UAAWA,EAMfA,OAHIA,KACAA,EAAcA,OAASA,GAEpBA,GAGJH,EAAAA,UAAAA,aAAPA,SAAoBA,GAKhBI,IAAKA,GAFDA,GAEKA,EAAIA,EAAGA,EAAMA,EAAMA,OAAYA,EAAJA,EAASA,IAAKA,CAC9CA,GAAIA,GAAOA,EAAMA,GACbA,EAAgBA,EAAKA,OAAOA,KAE5BA,KAASA,GAAkBA,IAC3BA,EAAeA,EAAgBA,KAAKA,EAAOA,IAE3CA,GACAA,EAAaA,KAAKA,GAG1BA,MAAOA,IAAgBA,GAGbJ,EAAAA,QAAdA,SAAsBA,EAAcA,GAIhCK,GAAIA,GAAUA,EAA0BA,IAAIA,EAAMA,GAC9CA,EAAWA,GAAIA,GAAgCA,EACnDA,OAAOA,GAAKA,OAAOA,IAE3BL,GApEqD56B,EAAAA,eAAxCA,GAAAA,gCAA+BA,CAuE5CA,IAAAA,GAAAA,SAAAA,GAWIk7B,QAAAA,GAAYA,GAERC,EAAAA,KAAAA,MAEAA,KAAKA,KAAOA,EACZA,KAAKA,WAkBbD,MAlCwCA,WAAAA,EAAAA,GAItBA,EAAAA,IAAdA,SAAkBA,EAAcA,GAC5BE,GAAIA,GAAWA,GAAIA,GAA0BA,EAG7CA,OAFAA,GAAKA,OAAOA,GAELA,EAASA,SAWbF,EAAAA,UAAAA,YAAPA,SAAmBA,GAEfG,GAAIA,GAAiBA,KAAKA,KAAKA,OAAOA,EAAKA,SAC3CA,KAAIA,GAAkBA,EAAeA,SAAWA,EAAKA,QAAUA,EAAeA,SAAWA,EAAKA,OAA9FA,CAGAA,GAAIA,GAAeA,KAAKA,KAAKA,cAErBA,OAAQA,EAAKA,OACbA,OAAQA,EAAKA,QAEjBA,EAAKA,SAETA,MAAKA,QAAQA,EAAKA,QAAUA,EAAaA,OAEjDH,GAlCwCl7B,EAAAA,mCAqCxCA,EAAAA,SAAAA,GAGIs7B,QAAAA,GAAYA,GAGRC,EAAAA,KAAAA,MACAA,KAAKA,KAAOA,EAYpBD,MAnBoCA,WAAAA,EAAAA,GAUzBA,EAAAA,UAAAA,YAAPA,SAAmBA,GACfE,GAAIA,GAAQA,KAAKA,KAAKA,QAAQA,EAAKA,SAC/BA,IAASA,GACTA,KAAKA,KAAKA,OAAOA,EAAOA,IAGzBF,EAAAA,UAAAA,OAAPA,WACIG,MAAOA,MAAKA,MAEpBH,GAnBoCt7B,EAAAA,oCA9rBzBD,EAAAA,EAAAA,OAAAA,EAAAA,WAARA,UAAAA,YCAP,IAAOA,UAAP,SAAOA,GAAQA,GAAAA,IAAAA,SAAAA,GAqDXC,QAAAA,KACI07B,MAAOA,IAAIA,GAuMf17B,QAAAA,GACIA,EACAA,EACAA,EACAA,GACA27B,GAAIA,GAAaA,EAAOA,UACxBA,OAAIA,GACOA,EAAWA,GAKfA,EAAAA,4BACHA,EAAcA,MACVA,EAAOA,OAAOA,GACdA,EAAcA,cAAcA,EAAOA,KAG/C37B,QAAAA,GAAyBA,EAAiCA,GAClD47B,EAAEA,SAASA,EAAOA,IAGtBA,EAAMA,KAAKA,GAGf57B,QAAAA,GAAyBA,EAA6BA,EAAmCA,GAKrF67B,GAAIA,GAASA,EAAOA,MAGpBA,GAAOA,OAASA,CAEhBA,IAAIA,GAAaA,EAAOA,UACpBA,KAGAA,EAAOA,WAAaA,GAGAA,SAApBA,EAAOA,WACPA,EAAOA,SAAWA,EAAOA,UAELA,SAApBA,EAAOA,WACPA,EAAOA,SAAWA,EAAOA,UA1SjC77B,GAAOA,GAAoBA,EAAQA,KAAKA,kBACjCA,EAAgBA,EAAQA,KAAKA,aAmDpBA,GAAAA,iCAAgCA,CAUhDA,IAAAA,GAAAA,WAQI87B,QAAAA,KACIC,KAAKA,cACLA,KAAKA,kBACLA,KAAKA,YAAcA,EAiL3BD,MA9KWA,GAAAA,UAAAA,aAAPA,SAAoBA,GAChBE,GAAIA,GAAiBA,EAAQA,OACzBA,EAAeA,EAAQA,aACvBA,EAAOA,EAAQA,OAAOA,KAEtBA,GACAA,OAAQA,EAAQA,OAChBA,eAAgBA,EAAQA,aAAaA,OACrCA,SAAUA,EAAQA,aAAaA,eAC/BA,OAAQA,EAGZA,KAAKA,EAAQA,aAAaA,WACtBA,IAAKA,GAAIA,GAAgBA,EAAGA,EAAiBA,EAAeA,OAAwBA,EAAhBA,EAAgCA,IAChGA,EAAeA,SAASA,KACpBA,EAAiBA,EAAcA,EAAeA,EAAeA,GAAgBA,GASzFA,OALKA,MAAKA,aACNA,KAAKA,eAETA,KAAKA,WAAWA,KAAKA,GAEdA,MAGJF,EAAAA,UAAAA,eAAPA,SAAsBA,GAMlBG,MALIA,GAAEA,QAAQA,KAAKA,YACfA,KAAKA,WAAaA,EAElBA,MAAMA,UAAUA,KAAKA,MAAMA,KAAKA,WAAYA,GAEzCA,MAGJH,EAAAA,UAAAA,WAAPA,SAAkBA,GAMdI,IAAmBA,GAHfA,GAAUA,EAAQA,QAGHA,EAAAA,EAAdA,EAAAA,EAAAA,OAAAA,IAAsBA,CAAtBA,GAAIA,GAAUA,EAAOA,EACtBA,MAAKA,eAAeA,KAAKA,EAAOA,QAKpCA,MAFAA,MAAKA,KAAOA,EAELA,MAGJJ,EAAAA,UAAAA,kBAAPA,SAAyBA,GAGrBK,KAAKA,kBAAmBA,CAExBA,IAAIA,GAAcA,EAAQA,WAG1BA,MAAKA,uBACDA,OAAQA,EAAYA,OACpBA,aAAcA,EAAYA,aAC1BA,OAAQA,EAAYA,OAIxBA,KAAwBA,GADpBA,GAAeA,EAAQA,aACHA,EAAAA,EAAnBA,EAAAA,EAAAA,OAAAA,IAAgCA,CAAhCA,GAAIA,GAAeA,EAAYA,EAChCA,MAAKA,eAAeA,KAAKA,EAAYA,QAKzCA,MAFAA,MAAKA,KAAOA,EAAQA,KAEbA,MAGHL,EAAAA,UAAAA,SAARA,SAAiBA,EAAsCA,GACnDM,GAAIA,GAAiBA,EAAEA,MAAMA,KAAKA,YAC9BA,EAAkBA,GAAkBA,EAAeA,OAAUA,EAAeA,OAAOA,OAASA,CAEhGA,IAAIA,KAAKA,iBAGLA,IAAKA,GADDA,GAAsCA,KAAKA,KACtCA,EAAcA,EAAGA,EAAcA,KAAKA,sBAAsBA,OAAOA,OAAQA,IAI9EA,IAAKA,GAHDA,GAAiBA,EAAKA,GAGjBA,EAAeA,EAAGA,EAAcA,KAAKA,eAAeA,OAAuBA,EAAfA,EAA4BA,IAAgBA,CAC7GA,GAAIA,GAAaA,EAAcA,EAAcA,CAE7CA,GAAgBA,EAAeA,GAAaA,EAAeA,GAAeA,OAOlFA,KAAKA,GADDA,GAA6CA,KAAKA,KAC7CA,EAAeA,EAAGA,EAAcA,KAAKA,eAAeA,OAAuBA,EAAfA,EAA4BA,IAC7FA,EAAgBA,EAAeA,GAAeA,EAAKA,GAAeA,IAKvEN,EAAAA,UAAAA,MAAPA,WASIO,IAA2BA,GANvBA,GAFAA,KACAA,KAGAA,EAAmBA,KAAKA,WACxBA,EAAwBA,KAAKA,sBAGNA,EAAAA,EAAtBA,EAAAA,EAAAA,OAAAA,IAAuCA,CAAvCA,GAAIA,GAAkBA,EAAgBA,EACvCA,GAAgBA,EAAiBA,EAAeA,QAOpDA,GAJIA,KAAKA,kBACLA,EAAgBA,EAAiBA,EAAsBA,QAGvDA,KAAKA,iBAAkBA,CAEvBA,EAAYA,OAASA,EAAkBA,sBAAuBA,EAAsBA,aAAaA,OAAQA,EAAsBA,OAE/HA,IAAIA,GAAWA,KAAKA,cACpBA,KAIAA,KAAKA,GADDA,GAAeA,EAAsBA,OAChCA,EAAcA,EAAGA,EAAcA,EAAaA,OAAQA,IAIzDA,IAAoBA,GAHhBA,GAAcA,EAAaA,GAC3BA,EAAiBA,EAAiBA,EAAsBA,aAAcA,EAAaA,EAAaA,EAAsBA,OAAOA,MAE7GA,EAAAA,EAAfA,EAAAA,EAAAA,OAAAA,IAAwBA,CAAxBA,GAAIA,GAAWA,EAAQA,GACpBA,EAASA,EAAEA,MAAMA,EACrBA,GAAOA,UAAoBA,EAC3BA,EAAOA,KAAKA,GAEZA,EAAgBA,EAAiBA,GACjCA,EAAYA,OAAOA,MACfA,OAAQA,EACRA,UACAA,SAAUA,SAKrBA,CAEDA,EAAYA,OAASA,EAAkBA,qBACvCA,EAASA,KAAKA,cACdA,KAAoBA,GAAAA,GAAAA,EAAfA,EAAAA,EAAAA,OAAAA,IAAsBA,CAAtBA,GAAIA,GAAWA,EAAMA,GAClBA,EAASA,CACbA,GAAgBA,EAAiBA,GACjCA,EAAYA,OAAOA,MACfA,OAAQA,EACRA,aAKZA,GAAIA,GAAaA,KAAKA,UAOtBA,OANKA,GAAEA,QAAQA,KACXA,EAAYA,WAAaA,GAG7BA,KAAKA,SAASA,EAAYA,OAAQA,IAG9BA,UACIA,QAASA,GAEbA,YAAaA,IAGzBP,MA3PW/7B,EAAAA,EAAAA,OAAAA,EAAAA,WAARA,UAAAA,YCAP,IAAOA,UAAP,SAAOA,GAAQA,GAAAA,IAAAA,SAAAA,GAKXC,QAAAA,GAAwCA,EAAqBA,GACzDs8B,MAAOA,IAAIA,GAAkBA,IAAcA,UAAYA,aAAiBA,GA+B5Et8B,QAAAA,GAAsCA,EAAcA,EAA6CA,EAAsBA,GAMnHu8B,GAAIA,GAAOA,EAAMA,IACjBA,MAAIA,EAAEA,QAAQA,IAASA,EAAKA,QAAUA,GAItCA,IAAKA,GADDA,GAAOA,EAAMA,QACRA,EAAYA,EAAGA,EAAYA,EAAiBA,OAAoBA,EAAZA,EAAuBA,IAAaA,CAC7FA,GAAIA,GAAkBA,EAAiBA,EACvCA,IAAKA,EAAOA,OAAOA,EAAgBA,KAAMA,IAAUA,EAAgBA,UAGnEA,IAAKA,GAAIA,GAASA,EAAGA,EAASA,EAAKA,OAAiBA,EAATA,EAAiBA,IACxDA,GAAIA,IAAcA,EAAKA,GAAQA,MAG/BA,MAAOA,GAAKA,GAAQA,IAxDhCv8B,GAAOA,GAASA,EAAQA,KAAKA,MAIbA,GAAAA,wBAAuBA,CAQvCA,IAAAA,GAAAA,WAIIw8B,QAAAA,GAAYA,EAAoBA,GAI5BC,KAAKA,SAAWA,EAChBA,KAAKA,iBAAmBA,EAahCD,MAVWA,GAAAA,UAAAA,aAAPA,SAAoBA,GAChBE,GAAIA,GAAWA,KAAKA,SAChBA,EAAmBA,KAAKA,gBAC5BA,OAAIA,IAAYA,EAASA,OAASA,EACvBA,EAAsBA,EAAMA,EAAkBA,EAASA,MAAkBA,GADpFA,QAIGF,EAAAA,UAAAA,aAAPA,SAAoBA,KAGxBA,IAEgBx8B,GAAAA,sBAAqBA,GArC1BD,EAAAA,EAAAA,OAAAA,EAAAA,WAARA,UAAAA,YCAP,IAAOA,UAAP,SAAOA,GAAQA,GAAAA,IAAAA,SAAAA,GACXC,QAAAA,GAAwCA,GAEpC28B,MAAOA,GAAAA,0BAFK38B,EAAAA,wBAAuBA,GAD5BD,EAAAA,EAAAA,OAAAA,EAAAA,WAARA,UAAAA,YCAP,IAAOA,UAAP,SAAO68B,GAEH78B,GAoCOA,GApCAA,EAAmBA,SAASA,iBAC5BA,EAAaA,SAASA,WACtBA,EAAmBA,SAASA,kBAkCnCA,SAAOA,GACH88B,QAAAA,GAAgCA,EAAgBA,GAG5CC,IAAKA,GADDA,GAASA,EAAaA,OACjBA,EAAIA,EAAOA,EAAJA,EAAYA,IAAKA,CAC7BA,GAAIA,GAAUA,KAAOA,EAAaA,GAC9BA,EAAUA,OAAOA,aAAaA,MAASA,EAC3CA,GAASA,EAAiBA,WAAWA,EAAQA,EAASA,GAE1DA,MAAOA,GAGXD,QAAAA,GAA+BA,EAAgBA,GAG3CE,IAAKA,GADDA,GAASA,EAAaA,OACjBA,EAAIA,EAAOA,EAAJA,EAAYA,IAAKA,CAC7BA,GAAIA,GAAUA,OAAOA,aAAaA,MAASA,GACvCA,EAAUA,EAAaA,EAC3BA,GAASA,EAAiBA,WAAWA,EAAQA,EAASA,GAE1DA,MAAOA,GAAiBA,WAAWA,EAAQA,KAAMA,IAGrDF,QAAAA,GAAiCA,EAAgBA,GAE7CG,EAASA,EAAiBA,WAAWA,EAAQA,IAAMA,IACnDA,KAAKA,GAAIA,GAAIA,GAAKA,IAAKA,CACnBA,GAAIA,GAAYA,EAAOA,QAAQA,IAC/BA,IAAgBA,EAAZA,EACAA,KAEJA,IAAIA,GAAUA,EAAOA,QAAQA,IAAKA,EAAYA,EAC9CA,IAAcA,EAAVA,EACAA,KAEJA,IAAIA,GAAUA,EAAOA,UAAUA,EAAWA,EAAUA,EACpDA,GAASA,KAAKA,EAAQA,UAAUA,EAAGA,EAAUA,GAC7CA,IAAIA,GAAQA,OAAOA,aAAaA,MAASA,EACzCA,GAASA,EAAOA,QAAQA,EAASA,GAErCA,MAAOA,GAGXH,QAAAA,GAAgCA,EAAgBA,GAE5CI,IAAKA,GADDA,GAAQA,EAASA,OACZA,EAAIA,EAAOA,EAAJA,EAAWA,IAAKA,CAC5BA,GAAIA,GAAQA,OAAOA,aAAaA,MAASA,GACrCA,EAAUA,EAASA,EACvBA,GAASA,EAAOA,QAAQA,EAAOA,GAEnCA,MAAOA,GAjDKJ,EAAAA,gBAAeA,EAWfA,EAAAA,eAAcA,EAWdA,EAAAA,iBAAgBA,EAoBhBA,EAAAA,gBAAeA,GA3C5B98B,IAAAA,MAsDPA,IAkJOA,GAlJDA,EAAqBA,0BACrBA,EAAkBA,IAClBA,EAAmBA,IACnBA,EAAwBA,IACxBA,GAAuBA,EAAiBA,GACxCA,EAA0BA,GAAIA,QAAOA,EAAoBA,KAAKA,KAAMA,KAG1EA,EAAAA,WAAAm9B,QAAAA,MAmIAA,MA7HWA,GAAAA,UAAAA,YAAPA,SAAmBA,EAAYA,EAAiBA,GAE5CC,GAAcA,SAAVA,GAAiCA,OAAVA,EACvBA,MAAOA,EAEXA,IAAIA,GAAWA,KAAKA,WAAWA,EAE/BA,OAAIA,GAAeA,UAAUA,GAElBA,EAAeA,OAAOA,EAAOA,EAAQA,GACrCA,EAAaA,UAAUA,GAEvBA,EAAaA,OAAOA,EAAOA,EAAQA,GAGnCA,EAAMA,YAIdD,EAAAA,UAAAA,OAAPA,SAAcA,EAAiCA,EAAaA,GAA5DE,GAAAA,GAAAA,IACIA,KAAKA,EACDA,MAAOA,EAEXA,IAAIA,GAASA,EAAwBA,QAAQA,EAAoBA,SAACA,EAAeA,EAAcA,EAAeA,GAC1GA,GAAIA,EACAA,MAAOA,GACJA,IAAIA,EACPA,MAAOA,GAEPA,IAAIA,GAAQA,EAASA,MAAMA,KACvBA,EAAWA,SAASA,EAAMA,GAAIA,IAC9BA,EAAYA,EAAMA,EACtBA,OAAOA,GAAKA,YAAYA,EAAKA,GAAWA,EAAWA,IAK3DA,OAAOA,IAGJF,EAAAA,UAAAA,uBAAPA,SAA8BA,GAC1BG,MAAOA,GAAaA,iBAAiBA,IAGlCH,EAAAA,UAAAA,+BAAPA,SAAsCA,EAAeA,EAAgBA,EAAqCA,GACtGI,GAAIA,GAAWA,KAAKA,WAAWA,EAE/BA,OAAOA,GAAaA,yBAAyBA,EAAOA,EAAQA,EAA6BA,IAGtFJ,EAAAA,UAAAA,iBAAPA,SAAwBA,GACpBK,MAAOA,MAAKA,yBAAyBA,gBAAgBA,IAOjDL,EAAAA,UAAAA,kBAARA,SAA0BA,GAClBM,KAAKA,0BAA4BA,IACjCA,KAAKA,gBAAkBA,KAAKA,WAAWA,GACvCA,KAAKA,wBAA0BA,EAC/BA,KAAKA,yBAA2BA,GAAIA,GAAwBA,KAAKA,mBASlEN,EAAAA,UAAAA,WAAPA,SAAkBA,GACdO,GAAuBA,MAAnBA,EAIAA,MAH4BA,OAAxBA,KAAKA,iBACLA,KAAKA,aAEFA,KAAKA,eAEZA,IAAIA,GAAUA,UAAUA,mBAAmBA,EAG3CA,OAFKA,KACDA,EAAUA,UAAUA,QAAQA,UACzBA,GAKPP,EAAAA,UAAAA,WAARA,WACIQ,GAAIA,GAAcA,KAAKA,mBACvBA,MAAKA,kBAAkBA,EACvBA,IAAIA,GAAeA,KAAKA,YAAYA,WACpCA,IAAIA,EAAcA,CACdA,GAAIA,GAAUA,KAAKA,gBACfA,EAAIA,EAAQA,UAAUA,EACtBA,KACAA,EAAQA,SAAWA,KAQxBR,EAAAA,UAAAA,kBAAPA,WACIS,GAAIA,GAAWA,KAAKA,YAAYA,WAEhCA,OAAIA,GACOA,EAGPA,SAAWA,QAAQA,QAAUA,QAAQA,OAAOA,YAErCA,QAAQA,OAAOA,YAGnBA,OAAOA,UAAUA,cAAgBA,OAAOA,UAAoBA,UAAKA,UAAUA,UAAUA,MAOzFT,EAAAA,UAAAA,YAAPA,SAAmBA,GACfU,GAAIA,GAAQA,OAAOA,SAASA,OAAOA,MAAMA,OAAOA,OAASA,EAAOA,YAChEA,OAAOA,GAAQA,EAAMA,GAAKA,QAElCV,MAOAn9B,SAAOA,GAMH89B,QAAAA,GAA0BA,GACtBC,GAAIA,GAASA,YAAiBA,KAC9BA,OAAOA,GAIXD,QAAAA,GAAuBA,EAAaA,EAAgBA,GAChDE,EAASA,GAAUA,GACnBA,IAAIA,GAA+BA,IAAlBA,EAAOA,MACxBA,KACIA,MAAIA,GACOA,EAAmBA,EAAOA,EAAQA,GAElCA,EAAiBA,EAAOA,EAAQA,GAE7CA,MAAOA,GACLA,MAAOA,GAAmBA,EAAOA,IAAKA,IAK9CF,QAAAA,GAA4BA,EAAaA,EAAgBA,GAErDG,GAAIA,GAAWA,EAAQA,SAASA,QAEhCA,GAAeA,EAAQA,SAEvBA,IAAIA,GAASA,EAAWA,eAAeA,EAAOA,EAAQA,EAAQA,KAO9DA,OALIA,GADyBA,IAAzBA,EAAOA,OAAOA,OACLA,EAASA,EAAOA,QAEhBA,EAAOA,OAEpBA,EAAUA,UAAUA,QAAQA,SACrBA,UAAUA,OAAOA,EAAOA,MAAOA,EAAQA,GAIlDH,QAAAA,GAA0BA,EAAaA,EAAgBA,GACnDI,GAAIA,GACAA,IAIJA,IAHAA,EAASA,EAAkBA,gBAAgBA,EAAQA,wBACnDA,EAASA,EAAkBA,iBAAiBA,EAAQA,GACpDA,EAASA,EAAiBA,WAAWA,EAAQA,IAAMA,KAC/CA,EAAOA,QAAQA,KAAOA,GAAIA,CAG1BA,EAASA,EAAiBA,WAAWA,EAAQA,OAAQA,MAErDA,IAAIA,GAAeA,EAAMA,iBAazBA,IAZIA,EAAeA,IAAMA,IACrBA,EAASA,EAAiBA,WAAWA,EAAQA,MAAOA,QAExDA,EAASA,EAAiBA,WAAWA,EAAQA,MAAOA,MAC/CA,EAAeA,IAAOA,IAAMA,IAC7BA,EAASA,EAAiBA,WAAWA,EAAQA,KAAMA,OAEvDA,EAASA,EAAiBA,WAAWA,EAAQA,KAAMA,KAC9CA,EAAeA,IAAQA,KAAOA,IAC/BA,EAASA,EAAiBA,WAAWA,EAAQA,IAAKA,MAEtDA,EAASA,EAAiBA,WAAWA,EAAQA,IAAKA,IACnCA,KAAXA,GAA4BA,MAAXA,EACjBA,MAAOA,GAOfA,MALAA,GAASA,EAA4BA,GACrCA,EAASA,UAAUA,OAAOA,EAAOA,EAAQA,GACzCA,EAASA,EAASA,EAAQA,EAAQA,UAClCA,EAASA,EAAkBA,gBAAgBA,EAAQA,GACnDA,EAASA,EAAkBA,eAAeA,EAAQA,wBAKtDJ,QAAAA,GAAqCA,GACjCK,MAAIA,KAAWA,EACJA,GAEXA,EAAuBA,EACvBA,EAASA,EAAWA,kBAAkBA,GACtCA,EAAgCA,EACzBA,GAIXL,QAAAA,GAAkBA,EAAeA,GAC7BM,GAAIA,GAAgBA,EAAWA,IAC/BA,IAAsBA,MAAlBA,EACAA,MAAOA,EAIXA,KAAKA,GAFDA,GAASA,GACTA,EAAQA,EAAMA,OACTA,EAAIA,EAAOA,EAAJA,EAAWA,IAAKA,CAC5BA,GAAIA,GAAOA,EAAMA,OAAOA,EACxBA,QAAQA,GACJA,IAAKA,IACDA,GAAUA,CACVA,MACJA,SACIA,GAAUA,GAItBA,MAAOA,GAGXN,QAAAA,GAAwBA,GACpBO,GAAIA,GAAWA,EAASA,QACFA,UAAlBA,EAAYA,IACZA,EAAYA,EAAIA,EAAYA,EAAEA,QAAQA,EAAYA,EAAGA,EAAYA,GACjEA,EAAYA,EAAIA,EAAYA,EAAEA,QAAQA,EAAYA,EAAGA,EAAYA,IAlHzEP,GAAIA,GACAA,CAGYA,GAAAA,UAASA,EAMTA,EAAAA,OAAMA,GAZnB99B,IAAAA,MA+HPA,IAAcA,IAAdA,SAAcA,GAkCVs+B,QAAAA,GAA6CA,EAAoBA,GAC7DC,IAAKA,GAAgCA,SAAfA,EAClBA,MAAOA,EAEXA,IAAIA,GAAYA,MAAQA,EAAgBA,GAExCA,OAAOA,GAAWA,QAAQA,MAAOA,GAGrCD,QAAAA,GAAiCA,EAAeA,GAC5CE,GAAkBA,MAAdA,EACAA,MAAOA,EAEXA,IAAIA,EAAoBA,GAAaA,CACjCA,GAAIA,GAA6BA,EAAaA,cAAcA,GAAvDA,EAAQA,EAAAA,SAAEA,EAAQA,EAAAA,SAAEA,EAAIA,EAAAA,IAE7BA,OAAIA,GAAQA,EACDA,EAA8BA,EAAOA,GAC7BA,IAAVA,EACEA,EAA8BA,EAAOA,GAEzCA,EAA8BA,EAAOA,GAGhDA,MAAOA,GAA8BA,EAAOA,GAGhDF,QAAAA,GAAuCA,EAAeA,GAClDG,GAAIA,GAAQA,EAAiBA,IAAIA,EAAoBA,EACrDA,OAAIA,GACOA,EAAMA,GAEVA,EAGXH,QAAAA,GAAoCA,EAAoBA,EAAkBA,GACtEI,GAAgBA,MAAZA,EACAA,MAAOA,EAMXA,IAHkBA,MAAdA,IACAA,EAAaA,GAEbA,EAAoBA,GAAaA,CAGjCA,IAAKA,GAFDA,GAA6BA,EAAaA,cAAcA,GAAvDA,EAAQA,EAAAA,SAAEA,EAAQA,EAAAA,SAAEA,EAAIA,EAAAA,KACzBA,GAAWA,EAAUA,EAAUA,GAC1BA,EAAIA,EAAGA,EAAIA,EAAQA,OAAQA,IAEhCA,EAAQA,GAAKA,EAA6BA,EAAQA,GAAIA,EAAUA,EAGpEA,OAAOA,GAAQA,KAAKA,EAAaA,iCAGrCA,MAAOA,GAA6BA,EAAYA,EAAUA,GAG9DJ,QAAAA,GAAsCA,EAAgBA,EAAkBA,GAGpEK,GAFAA,EAAWA,KAAKA,IAAIA,GAEhBA,GAAYA,EAAGA,CACfA,GAAIA,GAAcA,EAAgBA,EAAkBA,EAChDA,EAAsBA,EAAiBA,OAAOA,EAAaA,KAAKA,IAAIA,IAEpEA,EAAQA,EAAiBA,IAAIA,EAAoBA,EACrDA,IAAIA,EAAOA,CACPA,GAAIA,GAAgBA,EAAOA,OAAOA,EAAGA,EAAMA,OACvCA,EAAgBA,EAAOA,OAAOA,EAAMA,MAAQA,EAAGA,EAAMA,GAAGA,QACxDA,EAAeA,EAAOA,OAAOA,EAAMA,MAAQA,EAAMA,GAAGA,OAExDA,IAAIA,EAEAA,EAAgBA,MACfA,CACDA,GAAIA,GAAgBA,EAAoBA,OAASA,EAAcA,MAC3DA,GAAgBA,EAEhBA,GAAgCA,EAAoBA,OAAOA,GACtCA,EAAhBA,IAELA,EAAgBA,EAAcA,MAAMA,EAAGA,IAM/CA,MAHIA,GAAcA,OAASA,IACvBA,EAAgBA,EAAyBA,GAEtCA,EAAgBA,EAAgBA,EAEtCA,GAAIA,EAAoBA,OAASA,EAElCA,MAAOA,GAAOA,QAAQA,EAA6BA,KAAOA,EAAyBA,GAG3FA,MAAOA,GAGXL,QAAAA,GAAoCA,GAChCM,MAAwEA,KAAjEA,EAAOA,QAAQA,EAAaA,iCAGvCN,QAAAA,GAA8BA,GAC1BO,GAAIA,IACAA,aAAaA,EACbA,SAAUA,EACVA,SAAUA,EACVA,KAAMA,GAGNA,EAAsBA,EAAOA,MAAMA,EAAAA,iCACnCA,EAAcA,EAAoBA,MAatCA,OAVIA,GAAcA,IACdA,EAAWA,aAAcA,EAEzBA,EAAWA,SAAWA,EAAWA,KAAOA,EAAoBA,GAC5DA,EAAWA,SAAWA,EAAoBA,GAEtCA,EAAcA,IACdA,EAAWA,KAAOA,EAAoBA,KAGvCA,EAMXP,QAAAA,GAA0BA,GACtBQ,GAAIA,GAA4BA,gBAAZA,EACpBA,OAAOA,GAGXR,QAAAA,GAAiCA,GAE7BS,MAAOA,GAAoBA,KAAKA,GAIpCT,QAAAA,GACIA,EACAA,EACAA,GACAU,EAASA,GAAUA,GACnBA,KACIA,MAAIA,GAAiBA,GACVA,EAAqBA,EAAOA,EAAQA,GAExCA,EAAmBA,EAAOA,EAAQA,GAC3CA,MAAOA,GACLA,MAAOA,WAAUA,OAAOA,EAAOA,OAAWA,IAKlDV,QAAAA,GACIA,EACAA,EACAA,EACAA,GAOAW,MAAOA,GAAmBA,EAAOA,EAAQA,EAASA,GAItDX,QAAAA,GAA8BA,EAAeA,EAAgBA,GACzDY,GAAIA,GACAA,EAAqBA,EAAOA,OAASA,EAAIA,SAASA,EAAOA,OAAOA,EAAGA,EAAOA,OAASA,GAAIA,IAAMA,OAC7FA,EAAmBA,EAAQA,aAC3BA,EAAaA,EAAOA,OAAOA,EAC/BA,QAAQA,GACJA,IAAKA,IACLA,IAAKA,IACiBA,SAAdA,IACAA,EAAYA,EAEhBA,IAAIA,GAAwBA,EAAiBA,OAAOA,IAAKA,EACzDA,GAASA,KAAOA,EAAwBA,EAAaA,OACrDA,EAASA,EAAmBA,EAAOA,EAAQA,EAC3CA,MACJA,KAAKA,IACLA,IAAKA,IACDA,EAAuBA,SAAdA,EAA0BA,EAAMA,QAAQA,GAAaA,EAAMA,QAAQA,EAAiBA,UAC7FA,EAASA,EAASA,EAAQA,EAC1BA,MACJA,KAAKA,IACLA,IAAKA,IACDA,GAAIA,GAAMA,KAAKA,IAAIA,EACPA,KAARA,GAAsBA,GAARA,MAAqBA,KAANA,EAE7BA,EAAuBA,SAAdA,EAA0BA,EAAMA,YAAYA,GAAaA,EAAMA,YAGxEA,EAAuBA,SAAdA,EAA0BA,EAAMA,cAAcA,GAAaA,EAAMA,gBAC1EA,EAASA,EAAOA,QAAQA,IAAKA,MAEjCA,EAASA,EAASA,EAAQA,EAC1BA,MACJA,KAAKA,IACLA,IAAKA,IACDA,EAASA,EAAMA,WACfA,EAASA,EAASA,EAAQA,EAC1BA,MACJA,KAAKA,IACLA,IAAKA,IAKDA,GAJAA,EAASA,EAAMA,SAASA,IACLA,MAAfA,IACAA,EAASA,EAAOA,eAEFA,SAAdA,EAAyBA,CACzBA,GAAIA,GAAkBA,EAAOA,OACzBA,EAAqBA,EAARA,CACbA,IACAA,GAEJA,IAAIA,GAAoBA,EAAYA,EAChCA,EAAeA,MACfA,GAAoBA,IACpBA,EAAeA,EAAiBA,OAAOA,IAAKA,IAG5CA,EADAA,EACSA,IAAMA,EAAeA,EAAOA,OAAOA,GAEnCA,EAAeA,EAGhCA,EAASA,EAASA,EAAQA,EAC1BA,MACJA,SACIA,EAASA,UAAUA,OAAOA,EAAOA,EAAQA,GAEjDA,MAAOA,GAIXZ,QAAAA,GACIA,EACAA,EACAA,EACAA,GACAa,GAAIA,GACAA,EAAmBA,EAAQA,YAC/BA,KAAIA,SAASA,GA6FTA,MAAOA,WAAUA,OAAOA,EAAOA,OA3F/BA,IAAIA,GAAmBA,EAAcA,EAIjCA,GADAA,EAAQA,EACCA,EAAiBA,SACTA,IAAVA,EACEA,EAAiBA,KAEjBA,EAAiBA,SAI1BA,EAAiBA,cACjBA,EAAQA,KAAKA,IAAIA,GAGrBA,IAAIA,GAAaA,EAAwBA,GAAQA,EAG7CA,GAAWA,aACXA,EAASA,EAAkBA,gBAAgBA,EAAQA,YAEvDA,IAAIA,KAMJA,IALIA,EAAWA,YACXA,EAASA,EAAkBA,iBAAiBA,EAAQA,IAIpDA,EAAWA,OAASA,EAA6BA,CACjDA,GAAIA,GAAkBA,EAAiBA,IAAIA,EAAuBA,EAClEA,IAAIA,EAAiBA,CAEjBA,GAAIA,GAAUA,EAAOA,OAAOA,EAAGA,EAAgBA,OAC3CA,EAAUA,EAAOA,OAAOA,EAAgBA,MAAQA,GAChDA,EAAYA,EAAyBA,EAASA,GAC9CA,EAAQA,EAAqBA,EAASA,EAC5BA,KAAVA,IACAA,GAAgBA,EAEpBA,IAAIA,GAAIA,EAAMA,cAAcA,GACxBA,EAAWA,EAAEA,QAAQA,KACrBA,EAAWA,EAAEA,OAAOA,EAAGA,GACvBA,EAAMA,EAAEA,OAAOA,EAAWA,GAC1BA,EAAUA,EAA2BA,EAAUA,EAASA,GACxDA,EAAUA,EAA2BA,EAAKA,EAASA,EAC7BA,OAAtBA,EAAQA,OAAOA,IAA+CA,MAAjCA,EAAgBA,GAAGA,OAAOA,KACvDA,EAAUA,EAAQA,OAAOA,GAE7BA,IAAIA,GAAIA,EAAgBA,GAAGA,OAAOA,EAClCA,GAASA,EAAUA,EAAIA,GAK/BA,GAAeA,SAAXA,EAAsBA,CACtBA,GAAIA,GACAA,GAA6BA,EAC7BA,EAAYA,EAAyBA,EAAQA,GAC7CA,EAAQA,EAAqBA,EAAQA,EAQzCA,IANcA,IAAVA,IACAA,GAAgBA,GAGpBA,EAAQA,WAAWA,EAAgBA,EAAOA,IAEtCA,EAA6BA,CAE7BA,GAAIA,GAAgBA,EAAaA,iBAAiBA,EAAOA,EAGzDA,GAA8BA,EAAoCA,EAA6BA,GAG/FA,EAAiBA,EAAAA,kBAAkBA,OAAOA,GAA8BA,GAAQA,EAAQA,MACxFA,GAAoBA,MAGpBA,GAAiBA,EAAgBA,EAAOA,EAE5CA,GAASA,EAA2BA,EAAgBA,EAAQA,EAAkBA,EAA6BA,GAanHA,MAXQA,GAAWA,YACXA,EAASA,EAAkBA,gBAAgBA,EAAQA,IAEnDA,EAAWA,aACXA,EAASA,EAAkBA,eAAeA,EAAQA,aAGtDA,EAAwBA,EAIrBA,EAIXb,QAAAA,GAAyBA,EAAeA,GACpCc,GAAIA,GAASA,GACTA,EAAiBA,CAEjBA,GAAYA,KACZA,EAAiBA,EAAYA,GAC7BA,EAAYA,GAEhBA,IAAIA,GAA2BA,EAAAA,OAAOA,MAAMA,KAAKA,IAAIA,GACrDA,IAA+BA,GAA3BA,EAA+BA,CAC/BA,GAAIA,EAA2BA,EAAGA,CAC9BA,GAAIA,GAAeA,GAAKA,CACpBA,GAAYA,IACZA,GAAkBA,EAAYA,EAC9BA,EAAYA,GAGpBA,EAASA,EAAMA,QAAQA,OACpBA,IAAiCA,KAA7BA,EACPA,EAASA,EAAMA,QAAQA,GACvBA,GAAkBA,EACdA,EAAiBA,IACjBA,GAAUA,SAEXA,CAKHA,EAASA,EAAMA,cAAcA,GAC7BA,IAAIA,GAAWA,EAAOA,QAAQA,IAC9BA,IAAIA,EAAWA,EAAGA,CACdA,GAAIA,GAAaA,EAAOA,QAAQA,KAC5BA,EAAWA,EAAOA,OAAOA,EAAGA,GAC5BA,EAAMA,EAAOA,OAAOA,EAAWA,GAC/BA,EAAaA,SAASA,EAAKA,KAAOA,EAASA,OAASA,EAAaA,EACrEA,GAASA,EAASA,QAAQA,IAAKA,IAAMA,EAAiBA,OAAOA,IAAKA,GAC9DA,EAAYA,IACZA,EAASA,EAASA,IAAMA,EAAiBA,OAAOA,IAAKA,KAOjEA,MAHIA,GAAiBA,IACjBA,GAAkBA,EAAiBA,OAAOA,IAAKA,IAE5CA,EAWXd,QAAAA,GAAwCA,EAAgBA,EAA8BA,GAClFe,GAA8BA,SAA1BA,GAAuCA,IAAWA,EAAsBA,OACxEA,MAAOA,EAgBXA,KAAKA,GAbDA,IACAA,OAAQA,EACRA,YAAYA,EACZA,WAAWA,EACXA,MAAMA,EACNA,WAAWA,EACXA,SAASA,EACTA,YAAYA,EACZA,YAAYA,EACZA,UAAWA,OACXA,MAAOA,QAGFA,EAAIA,EAAGA,EAASA,EAAOA,OAAYA,EAAJA,EAAYA,IAAKA,CACrDA,GAAIA,GAAIA,EAAOA,OAAOA,EACtBA,QAAQA,GACJA,IAAKA,KACDA,EAAOA,YAAaA,CACpBA,MACJA,KAAKA,IACLA,IAAKA,IACDA,EAAOA,WAAYA,CACnBA,MACJA,KAAKA,IACLA,IAAKA,IACDA,EAAOA,MAAOA,CACdA,MACJA,KAAKA,IACDA,EAAOA,WAAYA,CACnBA,MACJA,KAAKA,IACDA,EAAOA,SAAUA,CACjBA,MACJA,KAAKA,IACDA,EAAOA,YAAaA,CACpBA,MACJA,KAAKA,IACDA,EAAOA,YAAaA,GAMhCA,GAAIA,GAAmBA,EAAcA,EAOrCA,OALIA,KACAA,EAAOA,UAAYA,EAAyBA,EAAiBA,SAAUA,IACvEA,IACAA,EAAOA,MAAQA,EAAqBA,EAAiBA,SAAUA,IAE5DA,EAKXf,QAAAA,GAAkCA,EAAgBA,GAC9CgB,GAAIA,EAAWA,UAAYA,GACvBA,MAAOA,GAAWA,SAEtBA,IAAIA,GAASA,CACbA,IAAIA,EAAWA,QAASA,CACpBA,GAAIA,GAAWA,EAAOA,QAAQA,IAC9BA,IAAIA,EAAWA,GAAIA,CAEfA,IAAKA,GADDA,GAAQA,EAAOA,OACVA,EAAIA,EAAcA,EAAJA,EAAWA,IAAKA,CACnCA,GAAIA,GAAOA,EAAOA,OAAOA,EAKzBA,IAJIA,EAAKA,MAAMA,IACXA,IAGAA,IAASA,EACTA,MAERA,EAASA,KAAKA,IAAIA,GAAIA,IAK9BA,MADAA,GAAWA,UAAYA,EAChBA,EAIXhB,QAAAA,GAA8BA,EAAgBA,GAC1CiB,GAAIA,EAAWA,MAAQA,GACnBA,MAAOA,GAAWA,KAEtBA,IAAIA,GAASA,CAObA,IANIA,EAAWA,YAAcA,EAAOA,QAAQA,KAAOA,KAC/CA,EAAkBA,IAATA,GAETA,EAAWA,YAAcA,EAAOA,QAAQA,KAAOA,KAC/CA,EAAkBA,IAATA,GAETA,EAAWA,UAAWA,CACtBA,GAAIA,GAAWA,EAAOA,QAAQA,IACbA,MAAbA,IACAA,EAAWA,EAAOA,OAEtBA,KAAKA,GAAIA,GAAIA,EAAWA,EAAGA,EAAIA,GAAIA,IAAKA,CACpCA,GAAIA,GAAOA,EAAOA,OAAOA,EACzBA,IAAaA,MAATA,EAGAA,KAFAA,IAAkBA,KAO9BA,MADAA,GAAWA,MAAQA,EACZA,EAGXjB,QAAAA,GAAoCA,EAAeA,EAAgBA,EAAyCA,EAAsCA,GAC9IkB,GAAIA,KAAwBA,EACxBA,EAAcA,EAAOA,MAAMA,IAAKA,EACpCA,IAA2BA,IAAvBA,EAAYA,OAAcA,CAC1BA,GAAIA,GAAcA,EAAYA,GAC1BA,EAAiBA,EAAYA,GAC7BA,EAAcA,EAGdA,KAEAA,EAAcA,EAA4BA,QAAQA,EAA2BA,IAC7EA,EAAQA,EAAMA,QAAQA,EAAaA,IAGvCA,IAAIA,GAA6BA,EAAiBA,KAC9CA,EAAmBA,EAAoBA,EAA6BA,IACpEA,EAAaA,EAAMA,MAAMA,EAAkBA,GAC3CA,EAAmCA,IAAtBA,EAAWA,OAAeA,EAAWA,GAAKA,EAAcA,EAAWA,GAChFA,EAAsCA,IAAtBA,EAAWA,OAAeA,EAAWA,GAAKA,EAAcA,EAC5EA,GAAgBA,EAAcA,QAAQA,EAAoBA,GAE1DA,IAAIA,GAAsBA,EAA+BA,EAAYA,EAAaA,EAAkBA,GAChGA,EAAyBA,EAAgCA,EAAeA,EAAgBA,EAE5FA,OAAIA,GAAuBA,SAA4CA,KAAjCA,EAAuBA,MAClDA,EAAsBA,EAAuBA,MAEjDA,EAAsBA,EAA6BA,EAAuBA,MAErFA,MAAOA,GAA+BA,EAAOA,EAAQA,EAAkBA,GAG3ElB,QAAAA,GAAwCA,EAAeA,EAAgBA,EAAyCA,GAC5GmB,GAAIA,GAAmBA,EAAOA,QAAQA,KAClCA,EAAeA,EAAmBA,IAAMA,EAAmBA,KAAKA,IAAIA,EAAOA,YAAYA,KAAMA,EAAOA,YAAYA,OAASA,EAAiBA,KAC1IA,EAAkBA,EAClBA,EAAaA,EACbA,EAAaA,EAAiBA,aAAeA,GAC7CA,EAAYA,EAAWA,GACvBA,EAAiBA,EAAiBA,KAClCA,EAAOA,GACPA,EAAYA,EAAMA,OAAOA,IACXA,MAAdA,GAAmCA,MAAdA,KACrBA,EAAOA,EAAiBA,GACxBA,EAAQA,EAAMA,OAAOA,GAQzBA,KAAKA,GANDA,GAAmBA,MAAVA,EACTA,EAASA,GACTA,EAAaA,GACbA,EAAKA,EAAMA,OAASA,EACpBA,GAAUA,EAELA,EAAKA,EAAOA,OAASA,EAAGA,EAAKA,GAAIA,IAAMA,CAC5CA,GAAIA,GAAaA,EAAOA,OAAOA,EAC/BA,QAAQA,GACJA,IAAKA,GACLA,IAAKA,GACDA,GAAUA,EACSA,KAAfA,IACAA,EAASA,EAAaA,EACtBA,EAAaA,IAEZA,KACGA,EAAKA,IAAMA,IAAeA,IACtBA,IAEIA,IAAoBA,GACpBA,EAASA,EAAiBA,EAC1BA,IACIA,EAAaA,EAAWA,SACxBA,EAAYA,EAAWA,IAE3BA,EAAkBA,GAElBA,KAIRA,EAAKA,IACDA,GAAUA,IAAeA,IAGzBA,EAASA,EAAMA,OAAOA,GAAMA,GAEhCA,KACOA,IAAeA,IACtBA,EAASA,EAAaA,GAG9BA,MACJA,KAAKA,IAEDA,KACJA,SACIA,EAAaA,EAAaA,GAMtCA,IAAKA,EAAqBA,CACtBA,GAAIA,EAAKA,IAAiBA,KAAXA,EACXA,GAAIA,EACAA,KAAOA,EAAKA,IACJA,IAAoBA,GACpBA,EAASA,EAAiBA,EAC1BA,IACIA,EAAaA,EAAWA,SACxBA,EAAYA,EAAWA,IAE3BA,EAAkBA,GAElBA,IAEJA,EAASA,EAAMA,OAAOA,GAAMA,EAC5BA,QAGJA,GAASA,EAAMA,OAAOA,EAAGA,EAAKA,GAAKA,CAI3CA,OAAOA,GAAOA,EAAaA,EAG/BA,MAAIA,GAEOA,EAAOA,EAAaA,EAExBA,EAAOA,EAAaA,EAAQA,EAGvCnB,QAAAA,GAAyCA,EAAeA,EAAgBA,GACpEoB,GAAIA,GAAKA,EACLA,EAASA,EAAOA,OAChBA,EAASA,EAAMA,MAEnBA,IAAIA,EAAqBA,CAGrBA,GAAIA,GAAWA,EAAOA,OAAOA,EAASA,EACtCA,OAAKA,GAASA,MAAMA,IAOhBA,MAAOA,EACPA,QAAmBA,KAAVA,IANLA,MAAOA,EAAQA,EACfA,QAAmBA,KAAVA,GAWrBA,IAAKA,GAFDA,GAASA,GACTA,GAAmBA,EACdA,EAAKA,EAAQA,EAALA,EAAaA,IAAMA,CAChCA,GAAIA,GAAaA,EAAOA,OAAOA,EAC/BA,IAASA,EAALA,EACAA,OAAQA,GACJA,IAAKA,GACLA,IAAKA,GACDA,GAAUA,EAAMA,KAChBA,GAAUA,CACVA,MACJA,SACIA,GAAUA,MAGdA,KAAeA,IACfA,GAAUA,EACVA,EAAUA,GAAYA,IAAeA,GAKjDA,OACIA,MAAOA,EACPA,QAASA,GAIjBpB,QAAAA,GAAkBA,EAAeA,GAC7BqB,GAAIA,GAAOA,EAAWA,KAClBA,EAAQA,EAAWA,KACnBA,EAAMA,EAAWA,KACjBA,EAAQA,EAAWA,IACvBA,IAAaA,MAATA,GAA0BA,MAAVA,GAAyBA,MAARA,GAAyBA,MAAVA,EAChDA,MAAOA,EAIXA,KAAKA,GAFDA,GAAQA,EAAMA,OACdA,EAASA,GACJA,EAAIA,EAAOA,EAAJA,EAAWA,IAAKA,CAC5BA,GAAIA,GAAOA,EAAMA,OAAOA,EACxBA,QAAQA,GACJA,IAAKA,IACDA,GAAkBA,CAClBA,MACJA,KAAKA,IACDA,GAAkBA,CAClBA,MACJA,KAAKA,IACDA,GAAkBA,CAClBA,MACJA,KAAKA,IACDA,GAAkBA,CAClBA,MACJA,SACIA,GAAkBA,GAI9BA,MAAOA,GA1vBXrB,GACMA,GAA4BA,SAC5BA,EAAwBA,eACxBA,EAAsBA,kBACtBA,EAAqBA,MACrBA,EAAqBA,aACrBA,EAAqBA,kBACrBA,EAA8BA,oBAC9BA,EAAyBA,GAElBA,GAAAA,gCAAkCA,IA+B/BA,EAAAA,iBAAgBA,EA0BhBA,EAAAA,oBAAmBA,EA6DnBA,EAAAA,oBAAmBA,EAInBA,EAAAA,cAAaA,CAyB7BA,IAAIA,EAGYA,GAAAA,UAASA,EAKTA,EAAAA,iBAAgBA,EAMhBA,EAAAA,OAAMA,EAgBNA,EAAAA,yBAAwBA,EAuPxBA,EAAAA,wBAAuBA,GApb7Bt+B,EAAAA,EAAAA,eAAAA,EAAAA,iBAkwBdA,IAAAA,GAAAA,WAgBI4/B,QAAAA,GAAYA,GACRC,GAAIA,GAAqBA,EAAQA,SAC7BA,EAAgBA,EAASA,SACzBA,EAA0BA,EAAiBA,OAAaA,UACxDA,EAA+BA,GAAsBA,EAAmBA,GACxEA,EAA2BA,EAAYA,EACvCA,EAA0BA,EAAYA,EACtCA,EAAsBA,EAAYA,EAClCA,EAA0BA,EAAYA,EACtCA,EAA2BA,EAAYA,EACvCA,EAAoBA,EAAYA,QAAQA,KAAOA,GAAKA,KAAOA,IAE3DA,EAA+DA,IAAtCA,EAAiBA,QAAQA,UAAkBA,EAAiBA,OAASA,GAA6BA,MAAxBA,EAAiBA,EACxHA,MAAKA,YAAcA,EAAgBA,EAAiBA,OAAOA,EAAGA,GAAKA,MAEnEA,IAAIA,GAAkBA,EAAYA,QAAQA,MACtCA,EAAmBA,EAAYA,QAAQA,OAC3CA,MAAKA,aAAeA,GAAuBA,EAAWA,GAAMA,EAAUA,EAAWA,WAAaA,WAAcA,EAE5GA,KAAKA,WAAaA,EAAsBA,EAAgBA,QAAQA,OAAQA,OAASA,CAEjFA,IAAIA,GAAoBA,EAAYA,QAAQA,MACxCA,EAAgBA,EAAYA,QAAQA,MACpCA,EAA2BA,EAAQA,GAAKA,EAAiBA,QAAQA,OAAQA,IAAMA,CAUnFA,QATAA,KAAKA,YAAwBA,EAAVA,EAAsBA,KAAKA,WAAaA,EAAYA,EAAmBA,EAAmBA,EAAYA,KAAKA,WAE9HA,KAAKA,cAAgBA,EAErBA,KAAKA,cAAgBA,EAErBA,KAAKA,mBAAqBA,EAAgBA,QAAQA,KAAMA,UAGhDA,EAAQA,MACZA,IAAKA,QACDA,KAAKA,WAAaA,KAAKA,WAAWA,QAAQA,OAAQA,IAClDA,KAAKA,YAAcA,KAAKA,YAAYA,QAAQA,OAAQA,KAgCpED,MArBWA,GAAAA,UAAAA,gBAAPA,SAAuBA,GACnBE,OAAQA,GACJA,IAAKA,GAAAA,aAAaA,KACdA,MAAOA,MAAKA,WAChBA,KAAKA,GAAAA,aAAaA,MACdA,MAAOA,MAAKA,YAChBA,KAAKA,GAAAA,aAAaA,KAClBA,IAAKA,GAAAA,aAAaA,IACdA,MAAOA,MAAKA,UAChBA,KAAKA,GAAAA,aAAaA,KACdA,MAAOA,MAAKA,WAChBA,KAAKA,GAAAA,aAAaA,OACdA,MAAOA,MAAKA,aAChBA,KAAKA,GAAAA,aAAaA,OACdA,MAAOA,MAAKA,aAChBA,KAAKA,GAAAA,aAAaA,YACdA,MAAOA,MAAKA,qBAK5BF,IAEW5/B,GAAAA,kBAAwCA,GAAIA,IArsCpDA,UAAAA,YCAP,IAAOA,UAAP,SAAOA,GAAQA,GAAAA,IAAAA,SAAAA,GAEXC,GAAcA,IAAdA,SAAcA,GACV8/B,QAAAA,GAA0BA,GACtBC,MAAOA,MAAKA,UAAUA,EAAKA,OAAOA,EAAiBA,WAGvDD,QAAAA,GAA+BA,GAE3BE,IAAKA,GADDA,GAAMA,IACDA,EAAIA,EAAGA,EAAMA,EAAMA,OAAYA,EAAJA,EAASA,IACrCA,EAAIA,IACJA,GAAOA,KACXA,GAAOA,EAAsBA,UAAUA,EAAMA,GAEjDA,OAAOA,GAAMA,IAXDF,EAAAA,UAASA,EAITA,EAAAA,eAAcA,CAW9BA,IAAAA,GAAAA,SAAAA,GAAAG,QAAAA,KAA+BC,EAAAA,MAAAA,KAAAA,WA8E/BD,MA9E+BA,WAAAA,EAAAA,GAGpBA,EAAAA,UAAAA,eAAPA,SAAsBA,GAClBE,OACIA,KACIA,EAAGA,EAAKA,OAAOA,OAAOA,MACtBA,EAAGA,EAAKA,OAKbF,EAAAA,UAAAA,gBAAPA,SAAuBA,GACnBG,OACIA,SACIA,EAAGA,EAAKA,OAAOA,OAAOA,MACtBA,EAAGA,EAAKA,OAKbH,EAAAA,UAAAA,UAAPA,SAAiBA,GACbI,OACIA,KACIA,EAAGA,EAAKA,IAAIA,OAAOA,MACnBA,EAAGA,EAAKA,QAKbJ,EAAAA,UAAAA,YAAPA,SAAmBA,GAIfK,OACIA,EAAGA,EAAKA,SAITL,EAAAA,UAAAA,SAAPA,SAAgBA,GAGZM,OACIA,KACIA,EAAGA,EAAKA,KAAKA,OAAOA,MACpBA,EAAGA,EAAKA,MAAMA,OAAOA,SAK1BN,EAAAA,UAAAA,aAAPA,SAAoBA,GAGhBO,OACIA,MACIA,EAAGA,EAAKA,WACRA,EAAGA,EAAKA,KAAKA,OAAOA,MACpBA,EAAGA,EAAKA,MAAMA,OAAOA,SAK1BP,EAAAA,UAAAA,cAAPA,SAAqBA,GAGjBQ,OACIA,SACIA,EAAGA,EAAKA,KAAKA,cACbA,EAAGA,EAAKA,SAKbR,EAAAA,UAAAA,aAAPA,SAAoBA,KAxENA,EAAAA,SAA6BA,GAAIA,GA6EnDA,GA9E+BH,EAAAA,uBAhBrB9/B,EAAAA,EAAAA,wBAAAA,EAAAA,4BAFHD,EAAAA,EAAAA,OAAAA,EAAAA,WAARA,UAAAA","file":"VisualsData.min.js","sourcesContent":["/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\n///<reference path=\"../../Typedefs/jquery/jquery.d.ts\"/>\n///<reference path=\"../../Typedefs/globalize/globalize.d.ts\"/>\n///<reference path=\"../../Typedefs/lodash/lodash.d.ts\"/>\n/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar powerbi;\n(function (powerbi) {\n    var data;\n    (function (data) {\n        /** Default IQueryExprVisitorWithArg implementation that others may derive from. */\n        var DefaultSQExprVisitorWithArg = (function () {\n            function DefaultSQExprVisitorWithArg() {\n            }\n            DefaultSQExprVisitorWithArg.prototype.visitEntity = function (expr, arg) {\n                return this.visitDefault(expr, arg);\n            };\n            DefaultSQExprVisitorWithArg.prototype.visitColumnRef = function (expr, arg) {\n                return this.visitDefault(expr, arg);\n            };\n            DefaultSQExprVisitorWithArg.prototype.visitMeasureRef = function (expr, arg) {\n                return this.visitDefault(expr, arg);\n            };\n            DefaultSQExprVisitorWithArg.prototype.visitAggr = function (expr, arg) {\n                return this.visitDefault(expr, arg);\n            };\n            DefaultSQExprVisitorWithArg.prototype.visitHierarchy = function (expr, arg) {\n                return this.visitDefault(expr, arg);\n            };\n            DefaultSQExprVisitorWithArg.prototype.visitHierarchyLevel = function (expr, arg) {\n                return this.visitDefault(expr, arg);\n            };\n            DefaultSQExprVisitorWithArg.prototype.visitPropertyVariationSource = function (expr, arg) {\n                return this.visitDefault(expr, arg);\n            };\n            DefaultSQExprVisitorWithArg.prototype.visitBetween = function (expr, arg) {\n                return this.visitDefault(expr, arg);\n            };\n            DefaultSQExprVisitorWithArg.prototype.visitIn = function (expr, arg) {\n                return this.visitDefault(expr, arg);\n            };\n            DefaultSQExprVisitorWithArg.prototype.visitAnd = function (expr, arg) {\n                return this.visitDefault(expr, arg);\n            };\n            DefaultSQExprVisitorWithArg.prototype.visitOr = function (expr, arg) {\n                return this.visitDefault(expr, arg);\n            };\n            DefaultSQExprVisitorWithArg.prototype.visitCompare = function (expr, arg) {\n                return this.visitDefault(expr, arg);\n            };\n            DefaultSQExprVisitorWithArg.prototype.visitContains = function (expr, arg) {\n                return this.visitDefault(expr, arg);\n            };\n            DefaultSQExprVisitorWithArg.prototype.visitExists = function (expr, arg) {\n                return this.visitDefault(expr, arg);\n            };\n            DefaultSQExprVisitorWithArg.prototype.visitNot = function (expr, arg) {\n                return this.visitDefault(expr, arg);\n            };\n            DefaultSQExprVisitorWithArg.prototype.visitStartsWith = function (expr, arg) {\n                return this.visitDefault(expr, arg);\n            };\n            DefaultSQExprVisitorWithArg.prototype.visitConstant = function (expr, arg) {\n                return this.visitDefault(expr, arg);\n            };\n            DefaultSQExprVisitorWithArg.prototype.visitDateSpan = function (expr, arg) {\n                return this.visitDefault(expr, arg);\n            };\n            DefaultSQExprVisitorWithArg.prototype.visitDateAdd = function (expr, arg) {\n                return this.visitDefault(expr, arg);\n            };\n            DefaultSQExprVisitorWithArg.prototype.visitNow = function (expr, arg) {\n                return this.visitDefault(expr, arg);\n            };\n            DefaultSQExprVisitorWithArg.prototype.visitDefaultValue = function (expr, arg) {\n                return this.visitDefault(expr, arg);\n            };\n            DefaultSQExprVisitorWithArg.prototype.visitAnyValue = function (expr, arg) {\n                return this.visitDefault(expr, arg);\n            };\n            DefaultSQExprVisitorWithArg.prototype.visitDefault = function (expr, arg) {\n                return;\n            };\n            return DefaultSQExprVisitorWithArg;\n        })();\n        data.DefaultSQExprVisitorWithArg = DefaultSQExprVisitorWithArg;\n        /** Default ISQExprVisitor implementation that others may derive from. */\n        var DefaultSQExprVisitor = (function (_super) {\n            __extends(DefaultSQExprVisitor, _super);\n            function DefaultSQExprVisitor() {\n                _super.apply(this, arguments);\n            }\n            return DefaultSQExprVisitor;\n        })(DefaultSQExprVisitorWithArg);\n        data.DefaultSQExprVisitor = DefaultSQExprVisitor;\n        /** Default ISQExprVisitor implementation that implements default traversal and that others may derive from. */\n        var DefaultSQExprVisitorWithTraversal = (function () {\n            function DefaultSQExprVisitorWithTraversal() {\n            }\n            DefaultSQExprVisitorWithTraversal.prototype.visitEntity = function (expr) {\n                this.visitDefault(expr);\n            };\n            DefaultSQExprVisitorWithTraversal.prototype.visitColumnRef = function (expr) {\n                expr.source.accept(this);\n            };\n            DefaultSQExprVisitorWithTraversal.prototype.visitMeasureRef = function (expr) {\n                expr.source.accept(this);\n            };\n            DefaultSQExprVisitorWithTraversal.prototype.visitAggr = function (expr) {\n                expr.arg.accept(this);\n            };\n            DefaultSQExprVisitorWithTraversal.prototype.visitHierarchy = function (expr) {\n                expr.arg.accept(this);\n            };\n            DefaultSQExprVisitorWithTraversal.prototype.visitHierarchyLevel = function (expr) {\n                expr.arg.accept(this);\n            };\n            DefaultSQExprVisitorWithTraversal.prototype.visitPropertyVariationSource = function (expr) {\n                expr.arg.accept(this);\n            };\n            DefaultSQExprVisitorWithTraversal.prototype.visitBetween = function (expr) {\n                expr.arg.accept(this);\n                expr.lower.accept(this);\n                expr.upper.accept(this);\n            };\n            DefaultSQExprVisitorWithTraversal.prototype.visitIn = function (expr) {\n                var args = expr.args;\n                for (var i = 0, len = args.length; i < len; i++)\n                    args[i].accept(this);\n                var values = expr.values;\n                for (var i = 0, len = values.length; i < len; i++) {\n                    var valueTuple = values[i];\n                    for (var j = 0, jlen = valueTuple.length; j < jlen; j++)\n                        valueTuple[j].accept(this);\n                }\n            };\n            DefaultSQExprVisitorWithTraversal.prototype.visitAnd = function (expr) {\n                expr.left.accept(this);\n                expr.right.accept(this);\n            };\n            DefaultSQExprVisitorWithTraversal.prototype.visitOr = function (expr) {\n                expr.left.accept(this);\n                expr.right.accept(this);\n            };\n            DefaultSQExprVisitorWithTraversal.prototype.visitCompare = function (expr) {\n                expr.left.accept(this);\n                expr.right.accept(this);\n            };\n            DefaultSQExprVisitorWithTraversal.prototype.visitContains = function (expr) {\n                expr.left.accept(this);\n                expr.right.accept(this);\n            };\n            DefaultSQExprVisitorWithTraversal.prototype.visitExists = function (expr) {\n                expr.arg.accept(this);\n            };\n            DefaultSQExprVisitorWithTraversal.prototype.visitNot = function (expr) {\n                expr.arg.accept(this);\n            };\n            DefaultSQExprVisitorWithTraversal.prototype.visitStartsWith = function (expr) {\n                expr.left.accept(this);\n                expr.right.accept(this);\n            };\n            DefaultSQExprVisitorWithTraversal.prototype.visitConstant = function (expr) {\n                this.visitDefault(expr);\n            };\n            DefaultSQExprVisitorWithTraversal.prototype.visitDateSpan = function (expr) {\n                expr.arg.accept(this);\n            };\n            DefaultSQExprVisitorWithTraversal.prototype.visitDateAdd = function (expr) {\n                expr.arg.accept(this);\n            };\n            DefaultSQExprVisitorWithTraversal.prototype.visitNow = function (expr) {\n                this.visitDefault(expr);\n            };\n            DefaultSQExprVisitorWithTraversal.prototype.visitDefaultValue = function (expr) {\n                this.visitDefault(expr);\n            };\n            DefaultSQExprVisitorWithTraversal.prototype.visitAnyValue = function (expr) {\n                this.visitDefault(expr);\n            };\n            DefaultSQExprVisitorWithTraversal.prototype.visitDefault = function (expr) {\n                return;\n            };\n            return DefaultSQExprVisitorWithTraversal;\n        })();\n        data.DefaultSQExprVisitorWithTraversal = DefaultSQExprVisitorWithTraversal;\n    })(data = powerbi.data || (powerbi.data = {}));\n})(powerbi || (powerbi = {}));\n/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\nvar powerbi;\n(function (powerbi) {\n    function createEnumType(members) {\n        return new EnumType(members);\n    }\n    powerbi.createEnumType = createEnumType;\n    var EnumType = (function () {\n        function EnumType(allMembers) {\n            debug.assertValue(allMembers, 'allMembers');\n            this.allMembers = allMembers;\n        }\n        EnumType.prototype.members = function (validMembers) {\n            var allMembers = this.allMembers;\n            if (!validMembers)\n                return allMembers;\n            var membersToReturn = [];\n            for (var _i = 0; _i < allMembers.length; _i++) {\n                var member = allMembers[_i];\n                if (_.contains(validMembers, member.value))\n                    membersToReturn.push(member);\n            }\n            return membersToReturn;\n        };\n        return EnumType;\n    })();\n})(powerbi || (powerbi = {}));\n/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\nvar powerbi;\n(function (powerbi) {\n    var FillSolidColorTypeDescriptor;\n    (function (FillSolidColorTypeDescriptor) {\n        /** Gets a value indicating whether the descriptor is nullable or not. */\n        function nullable(descriptor) {\n            debug.assertValue(descriptor, 'descriptor');\n            if (descriptor === true)\n                return false;\n            var advancedDescriptor = descriptor;\n            return !!advancedDescriptor.nullable;\n        }\n        FillSolidColorTypeDescriptor.nullable = nullable;\n    })(FillSolidColorTypeDescriptor = powerbi.FillSolidColorTypeDescriptor || (powerbi.FillSolidColorTypeDescriptor = {}));\n})(powerbi || (powerbi = {}));\n/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\n/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\nvar powerbi;\n(function (powerbi) {\n    var ImageDefinition;\n    (function (ImageDefinition) {\n        ImageDefinition.urlType = { misc: { imageUrl: true } };\n    })(ImageDefinition = powerbi.ImageDefinition || (powerbi.ImageDefinition = {}));\n})(powerbi || (powerbi = {}));\n/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\n/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\nvar powerbi;\n(function (powerbi) {\n    var StructuralTypeDescriptor;\n    (function (StructuralTypeDescriptor) {\n        function isValid(type) {\n            debug.assertValue(type, 'type');\n            if (type.fill ||\n                type.fillRule ||\n                type.filter ||\n                type.expression ||\n                type.image ||\n                type.paragraphs) {\n                return true;\n            }\n            return false;\n        }\n        StructuralTypeDescriptor.isValid = isValid;\n    })(StructuralTypeDescriptor = powerbi.StructuralTypeDescriptor || (powerbi.StructuralTypeDescriptor = {}));\n})(powerbi || (powerbi = {}));\n/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\nvar powerbi;\n(function (powerbi) {\n    var EnumExtensions = jsCommon.EnumExtensions;\n    /** Describes a data value type, including a primitive type and extended type if any (derived from data category). */\n    var ValueType = (function () {\n        /** Do not call the ValueType constructor directly. Use the ValueType.fromXXX methods. */\n        function ValueType(type, category, enumType) {\n            debug.assert((!!type && ExtendedType[type] != null) || type === ExtendedType.Null, 'type');\n            debug.assert(!!category || category === null, 'category');\n            debug.assert(type !== ExtendedType.Enumeration || !!enumType, 'enumType');\n            this.underlyingType = type;\n            this.category = category;\n            if (EnumExtensions.hasFlag(type, ExtendedType.Temporal)) {\n                this.temporalType = new TemporalType(type);\n            }\n            if (EnumExtensions.hasFlag(type, ExtendedType.Geography)) {\n                this.geographyType = new GeographyType(type);\n            }\n            if (EnumExtensions.hasFlag(type, ExtendedType.Miscellaneous)) {\n                this.miscType = new MiscellaneousType(type);\n            }\n            if (EnumExtensions.hasFlag(type, ExtendedType.Formatting)) {\n                this.formattingType = new FormattingType(type);\n            }\n            if (EnumExtensions.hasFlag(type, ExtendedType.Enumeration)) {\n                this.enumType = enumType;\n            }\n            if (EnumExtensions.hasFlag(type, ExtendedType.Scripting)) {\n                this.scriptingType = new ScriptType(type);\n            }\n        }\n        /** Creates or retrieves a ValueType object based on the specified ValueTypeDescriptor. */\n        ValueType.fromDescriptor = function (descriptor) {\n            descriptor = descriptor || {};\n            // Simplified primitive types\n            if (descriptor.text)\n                return ValueType.fromExtendedType(ExtendedType.Text);\n            if (descriptor.integer)\n                return ValueType.fromExtendedType(ExtendedType.Integer);\n            if (descriptor.numeric)\n                return ValueType.fromExtendedType(ExtendedType.Double);\n            if (descriptor.bool)\n                return ValueType.fromExtendedType(ExtendedType.Boolean);\n            if (descriptor.dateTime)\n                return ValueType.fromExtendedType(ExtendedType.DateTime);\n            if (descriptor.duration)\n                return ValueType.fromExtendedType(ExtendedType.Duration);\n            if (descriptor.binary)\n                return ValueType.fromExtendedType(ExtendedType.Binary);\n            if (descriptor.none)\n                return ValueType.fromExtendedType(ExtendedType.None);\n            // Extended types\n            if (descriptor.scripting) {\n                if (descriptor.scripting.source)\n                    return ValueType.fromExtendedType(ExtendedType.ScriptSource);\n            }\n            if (descriptor.enumeration)\n                return ValueType.fromEnum(descriptor.enumeration);\n            if (descriptor.temporal) {\n                if (descriptor.temporal.year)\n                    return ValueType.fromExtendedType(ExtendedType.Year_Integer);\n                if (descriptor.temporal.month)\n                    return ValueType.fromExtendedType(ExtendedType.Month_Integer);\n            }\n            if (descriptor.geography) {\n                if (descriptor.geography.address)\n                    return ValueType.fromExtendedType(ExtendedType.Address);\n                if (descriptor.geography.city)\n                    return ValueType.fromExtendedType(ExtendedType.City);\n                if (descriptor.geography.continent)\n                    return ValueType.fromExtendedType(ExtendedType.Continent);\n                if (descriptor.geography.country)\n                    return ValueType.fromExtendedType(ExtendedType.Country);\n                if (descriptor.geography.county)\n                    return ValueType.fromExtendedType(ExtendedType.County);\n                if (descriptor.geography.region)\n                    return ValueType.fromExtendedType(ExtendedType.Region);\n                if (descriptor.geography.postalCode)\n                    return ValueType.fromExtendedType(ExtendedType.PostalCode_Text);\n                if (descriptor.geography.stateOrProvince)\n                    return ValueType.fromExtendedType(ExtendedType.StateOrProvince);\n                if (descriptor.geography.place)\n                    return ValueType.fromExtendedType(ExtendedType.Place);\n                if (descriptor.geography.latitude)\n                    return ValueType.fromExtendedType(ExtendedType.Latitude_Double);\n                if (descriptor.geography.longitude)\n                    return ValueType.fromExtendedType(ExtendedType.Longitude_Double);\n            }\n            if (descriptor.misc) {\n                if (descriptor.misc.image)\n                    return ValueType.fromExtendedType(ExtendedType.Image);\n                if (descriptor.misc.imageUrl)\n                    return ValueType.fromExtendedType(ExtendedType.ImageUrl);\n                if (descriptor.misc.webUrl)\n                    return ValueType.fromExtendedType(ExtendedType.WebUrl);\n            }\n            if (descriptor.formatting) {\n                if (descriptor.formatting.color)\n                    return ValueType.fromExtendedType(ExtendedType.Color);\n                if (descriptor.formatting.formatString)\n                    return ValueType.fromExtendedType(ExtendedType.FormatString);\n                if (descriptor.formatting.alignment)\n                    return ValueType.fromExtendedType(ExtendedType.Alignment);\n                if (descriptor.formatting.labelDisplayUnits)\n                    return ValueType.fromExtendedType(ExtendedType.LabelDisplayUnits);\n                if (descriptor.formatting.fontSize)\n                    return ValueType.fromExtendedType(ExtendedType.FontSize);\n                if (descriptor.formatting.labelDensity)\n                    return ValueType.fromExtendedType(ExtendedType.LabelDensity);\n            }\n            if (descriptor.extendedType) {\n                return ValueType.fromExtendedType(descriptor.extendedType);\n            }\n            return ValueType.fromExtendedType(ExtendedType.Null);\n        };\n        /** Advanced: Generally use fromDescriptor instead. Creates or retrieves a ValueType object for the specified ExtendedType. */\n        ValueType.fromExtendedType = function (extendedType) {\n            extendedType = extendedType || ExtendedType.Null;\n            var primitiveType = getPrimitiveType(extendedType), category = getCategoryFromExtendedType(extendedType);\n            debug.assert(primitiveType !== PrimitiveType.Null || extendedType === ExtendedType.Null, 'Cannot create ValueType for abstract extended type. Consider using fromDescriptor instead.');\n            return ValueType.fromPrimitiveTypeAndCategory(primitiveType, category);\n        };\n        /** Creates or retrieves a ValueType object for the specified PrimitiveType and data category. */\n        ValueType.fromPrimitiveTypeAndCategory = function (primitiveType, category) {\n            primitiveType = primitiveType || PrimitiveType.Null;\n            category = category || null;\n            var id = primitiveType.toString();\n            if (category)\n                id += '|' + category;\n            return ValueType.typeCache[id] || (ValueType.typeCache[id] = new ValueType(toExtendedType(primitiveType, category), category));\n        };\n        /** Creates a ValueType to describe the given IEnumType. */\n        ValueType.fromEnum = function (enumType) {\n            debug.assertValue(enumType, 'enumType');\n            return new ValueType(ExtendedType.Enumeration, null, enumType);\n        };\n        /** Determines if the instance ValueType is convertable from the 'other' ValueType. */\n        ValueType.prototype.isCompatibleFrom = function (other) {\n            debug.assertValue(other, 'other');\n            var otherPrimitiveType = other.primitiveType;\n            if (this === other ||\n                this.primitiveType === otherPrimitiveType ||\n                otherPrimitiveType === PrimitiveType.Null)\n                return true;\n            return false;\n        };\n        Object.defineProperty(ValueType.prototype, \"primitiveType\", {\n            /** Gets the exact primitive type of this ValueType. */\n            get: function () {\n                return getPrimitiveType(this.underlyingType);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ValueType.prototype, \"extendedType\", {\n            /** Gets the exact extended type of this ValueType. */\n            get: function () {\n                return this.underlyingType;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ValueType.prototype, \"categoryString\", {\n            /** Gets the data category string (if any) for this ValueType. */\n            get: function () {\n                return this.category;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ValueType.prototype, \"text\", {\n            // Simplified primitive types\n            /** Indicates whether the type represents text values. */\n            get: function () {\n                return this.primitiveType === PrimitiveType.Text;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ValueType.prototype, \"numeric\", {\n            /** Indicates whether the type represents any numeric value. */\n            get: function () {\n                return EnumExtensions.hasFlag(this.underlyingType, ExtendedType.Numeric);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ValueType.prototype, \"integer\", {\n            /** Indicates whether the type represents integer numeric values. */\n            get: function () {\n                return this.primitiveType === PrimitiveType.Integer;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ValueType.prototype, \"bool\", {\n            /** Indicates whether the type represents Boolean values. */\n            get: function () {\n                return this.primitiveType === PrimitiveType.Boolean;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ValueType.prototype, \"dateTime\", {\n            /** Indicates whether the type represents any date/time values. */\n            get: function () {\n                return this.primitiveType === PrimitiveType.DateTime ||\n                    this.primitiveType === PrimitiveType.Date ||\n                    this.primitiveType === PrimitiveType.Time;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ValueType.prototype, \"duration\", {\n            /** Indicates whether the type represents duration values. */\n            get: function () {\n                return this.primitiveType === PrimitiveType.Duration;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ValueType.prototype, \"binary\", {\n            /** Indicates whether the type represents binary values. */\n            get: function () {\n                return this.primitiveType === PrimitiveType.Binary;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ValueType.prototype, \"none\", {\n            /** Indicates whether the type represents none values. */\n            get: function () {\n                return this.primitiveType === PrimitiveType.None;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ValueType.prototype, \"temporal\", {\n            // Extended types\n            /** Returns an object describing temporal values represented by the type, if it represents a temporal type. */\n            get: function () {\n                return this.temporalType;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ValueType.prototype, \"geography\", {\n            /** Returns an object describing geographic values represented by the type, if it represents a geographic type. */\n            get: function () {\n                return this.geographyType;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ValueType.prototype, \"misc\", {\n            /** Returns an object describing the specific values represented by the type, if it represents a miscellaneous extended type. */\n            get: function () {\n                return this.miscType;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ValueType.prototype, \"formatting\", {\n            /** Returns an object describing the formatting values represented by the type, if it represents a formatting type. */\n            get: function () {\n                return this.formattingType;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ValueType.prototype, \"enum\", {\n            /** Returns an object describing the enum values represented by the type, if it represents an enumeration type. */\n            get: function () {\n                return this.enumType;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ValueType.prototype, \"scripting\", {\n            get: function () {\n                return this.scriptingType;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        ValueType.typeCache = {};\n        return ValueType;\n    })();\n    powerbi.ValueType = ValueType;\n    var ScriptType = (function () {\n        function ScriptType(type) {\n            debug.assert(!!type && EnumExtensions.hasFlag(type, ExtendedType.Scripting), 'type');\n            this.underlyingType = type;\n        }\n        Object.defineProperty(ScriptType.prototype, \"source\", {\n            get: function () {\n                return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.ScriptSource);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        return ScriptType;\n    })();\n    powerbi.ScriptType = ScriptType;\n    var TemporalType = (function () {\n        function TemporalType(type) {\n            debug.assert(!!type && EnumExtensions.hasFlag(type, ExtendedType.Temporal), 'type');\n            this.underlyingType = type;\n        }\n        Object.defineProperty(TemporalType.prototype, \"year\", {\n            get: function () {\n                return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Year);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(TemporalType.prototype, \"month\", {\n            get: function () {\n                return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Month);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        return TemporalType;\n    })();\n    powerbi.TemporalType = TemporalType;\n    var GeographyType = (function () {\n        function GeographyType(type) {\n            debug.assert(!!type && EnumExtensions.hasFlag(type, ExtendedType.Geography), 'type');\n            this.underlyingType = type;\n        }\n        Object.defineProperty(GeographyType.prototype, \"address\", {\n            get: function () {\n                return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Address);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(GeographyType.prototype, \"city\", {\n            get: function () {\n                return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.City);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(GeographyType.prototype, \"continent\", {\n            get: function () {\n                return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Continent);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(GeographyType.prototype, \"country\", {\n            get: function () {\n                return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Country);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(GeographyType.prototype, \"county\", {\n            get: function () {\n                return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.County);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(GeographyType.prototype, \"region\", {\n            get: function () {\n                return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Region);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(GeographyType.prototype, \"postalCode\", {\n            get: function () {\n                return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.PostalCode);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(GeographyType.prototype, \"stateOrProvince\", {\n            get: function () {\n                return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.StateOrProvince);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(GeographyType.prototype, \"place\", {\n            get: function () {\n                return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Place);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(GeographyType.prototype, \"latitude\", {\n            get: function () {\n                return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Latitude);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(GeographyType.prototype, \"longitude\", {\n            get: function () {\n                return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Longitude);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        return GeographyType;\n    })();\n    powerbi.GeographyType = GeographyType;\n    var MiscellaneousType = (function () {\n        function MiscellaneousType(type) {\n            debug.assert(!!type && EnumExtensions.hasFlag(type, ExtendedType.Miscellaneous), 'type');\n            this.underlyingType = type;\n        }\n        Object.defineProperty(MiscellaneousType.prototype, \"image\", {\n            get: function () {\n                return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Image);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MiscellaneousType.prototype, \"imageUrl\", {\n            get: function () {\n                return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.ImageUrl);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MiscellaneousType.prototype, \"webUrl\", {\n            get: function () {\n                return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.WebUrl);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        return MiscellaneousType;\n    })();\n    powerbi.MiscellaneousType = MiscellaneousType;\n    var FormattingType = (function () {\n        function FormattingType(type) {\n            debug.assert(!!type && EnumExtensions.hasFlag(type, ExtendedType.Formatting), 'type');\n            this.underlyingType = type;\n        }\n        Object.defineProperty(FormattingType.prototype, \"color\", {\n            get: function () {\n                return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Color);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormattingType.prototype, \"formatString\", {\n            get: function () {\n                return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.FormatString);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormattingType.prototype, \"alignment\", {\n            get: function () {\n                return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Alignment);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormattingType.prototype, \"labelDisplayUnits\", {\n            get: function () {\n                return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.LabelDisplayUnits);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormattingType.prototype, \"fontSize\", {\n            get: function () {\n                return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.FontSize);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormattingType.prototype, \"labelDensity\", {\n            get: function () {\n                return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.LabelDensity);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        return FormattingType;\n    })();\n    powerbi.FormattingType = FormattingType;\n    /** Defines primitive value types. Must be consistent with types defined by server conceptual schema. */\n    (function (PrimitiveType) {\n        PrimitiveType[PrimitiveType[\"Null\"] = 0] = \"Null\";\n        PrimitiveType[PrimitiveType[\"Text\"] = 1] = \"Text\";\n        PrimitiveType[PrimitiveType[\"Decimal\"] = 2] = \"Decimal\";\n        PrimitiveType[PrimitiveType[\"Double\"] = 3] = \"Double\";\n        PrimitiveType[PrimitiveType[\"Integer\"] = 4] = \"Integer\";\n        PrimitiveType[PrimitiveType[\"Boolean\"] = 5] = \"Boolean\";\n        PrimitiveType[PrimitiveType[\"Date\"] = 6] = \"Date\";\n        PrimitiveType[PrimitiveType[\"DateTime\"] = 7] = \"DateTime\";\n        PrimitiveType[PrimitiveType[\"DateTimeZone\"] = 8] = \"DateTimeZone\";\n        PrimitiveType[PrimitiveType[\"Time\"] = 9] = \"Time\";\n        PrimitiveType[PrimitiveType[\"Duration\"] = 10] = \"Duration\";\n        PrimitiveType[PrimitiveType[\"Binary\"] = 11] = \"Binary\";\n        PrimitiveType[PrimitiveType[\"None\"] = 12] = \"None\";\n    })(powerbi.PrimitiveType || (powerbi.PrimitiveType = {}));\n    var PrimitiveType = powerbi.PrimitiveType;\n    /** Defines extended value types, which include primitive types and known data categories constrained to expected primitive types. */\n    (function (ExtendedType) {\n        // Flags (1 << 8-15 range [0xFF00])\n        // Important: Enum members must be declared before they are used in TypeScript.\n        ExtendedType[ExtendedType[\"Numeric\"] = 256] = \"Numeric\";\n        ExtendedType[ExtendedType[\"Temporal\"] = 512] = \"Temporal\";\n        ExtendedType[ExtendedType[\"Geography\"] = 1024] = \"Geography\";\n        ExtendedType[ExtendedType[\"Miscellaneous\"] = 2048] = \"Miscellaneous\";\n        ExtendedType[ExtendedType[\"Formatting\"] = 4096] = \"Formatting\";\n        ExtendedType[ExtendedType[\"Scripting\"] = 8192] = \"Scripting\";\n        // Primitive types (0-255 range [0xFF] | flags)\n        // The member names and base values must match those in PrimitiveType.\n        ExtendedType[ExtendedType[\"Null\"] = 0] = \"Null\";\n        ExtendedType[ExtendedType[\"Text\"] = 1] = \"Text\";\n        ExtendedType[ExtendedType[\"Decimal\"] = 258] = \"Decimal\";\n        ExtendedType[ExtendedType[\"Double\"] = 259] = \"Double\";\n        ExtendedType[ExtendedType[\"Integer\"] = 260] = \"Integer\";\n        ExtendedType[ExtendedType[\"Boolean\"] = 5] = \"Boolean\";\n        ExtendedType[ExtendedType[\"Date\"] = 518] = \"Date\";\n        ExtendedType[ExtendedType[\"DateTime\"] = 519] = \"DateTime\";\n        ExtendedType[ExtendedType[\"DateTimeZone\"] = 520] = \"DateTimeZone\";\n        ExtendedType[ExtendedType[\"Time\"] = 521] = \"Time\";\n        ExtendedType[ExtendedType[\"Duration\"] = 10] = \"Duration\";\n        ExtendedType[ExtendedType[\"Binary\"] = 11] = \"Binary\";\n        ExtendedType[ExtendedType[\"None\"] = 12] = \"None\";\n        // Extended types (0-32767 << 16 range [0xFFFF0000] | corresponding primitive type | flags)\n        // Temporal\n        ExtendedType[ExtendedType[\"Year\"] = 66048] = \"Year\";\n        ExtendedType[ExtendedType[\"Year_Text\"] = 66049] = \"Year_Text\";\n        ExtendedType[ExtendedType[\"Year_Integer\"] = 66308] = \"Year_Integer\";\n        ExtendedType[ExtendedType[\"Year_Date\"] = 66054] = \"Year_Date\";\n        ExtendedType[ExtendedType[\"Year_DateTime\"] = 66055] = \"Year_DateTime\";\n        ExtendedType[ExtendedType[\"Month\"] = 131584] = \"Month\";\n        ExtendedType[ExtendedType[\"Month_Text\"] = 131585] = \"Month_Text\";\n        ExtendedType[ExtendedType[\"Month_Integer\"] = 131844] = \"Month_Integer\";\n        ExtendedType[ExtendedType[\"Month_Date\"] = 131590] = \"Month_Date\";\n        ExtendedType[ExtendedType[\"Month_DateTime\"] = 131591] = \"Month_DateTime\";\n        // Geography\n        ExtendedType[ExtendedType[\"Address\"] = 6554625] = \"Address\";\n        ExtendedType[ExtendedType[\"City\"] = 6620161] = \"City\";\n        ExtendedType[ExtendedType[\"Continent\"] = 6685697] = \"Continent\";\n        ExtendedType[ExtendedType[\"Country\"] = 6751233] = \"Country\";\n        ExtendedType[ExtendedType[\"County\"] = 6816769] = \"County\";\n        ExtendedType[ExtendedType[\"Region\"] = 6882305] = \"Region\";\n        ExtendedType[ExtendedType[\"PostalCode\"] = 6947840] = \"PostalCode\";\n        ExtendedType[ExtendedType[\"PostalCode_Text\"] = 6947841] = \"PostalCode_Text\";\n        ExtendedType[ExtendedType[\"PostalCode_Integer\"] = 6948100] = \"PostalCode_Integer\";\n        ExtendedType[ExtendedType[\"StateOrProvince\"] = 7013377] = \"StateOrProvince\";\n        ExtendedType[ExtendedType[\"Place\"] = 7078913] = \"Place\";\n        ExtendedType[ExtendedType[\"Latitude\"] = 7144448] = \"Latitude\";\n        ExtendedType[ExtendedType[\"Latitude_Decimal\"] = 7144706] = \"Latitude_Decimal\";\n        ExtendedType[ExtendedType[\"Latitude_Double\"] = 7144707] = \"Latitude_Double\";\n        ExtendedType[ExtendedType[\"Longitude\"] = 7209984] = \"Longitude\";\n        ExtendedType[ExtendedType[\"Longitude_Decimal\"] = 7210242] = \"Longitude_Decimal\";\n        ExtendedType[ExtendedType[\"Longitude_Double\"] = 7210243] = \"Longitude_Double\";\n        // Miscellaneous\n        ExtendedType[ExtendedType[\"Image\"] = 13109259] = \"Image\";\n        ExtendedType[ExtendedType[\"ImageUrl\"] = 13174785] = \"ImageUrl\";\n        ExtendedType[ExtendedType[\"WebUrl\"] = 13240321] = \"WebUrl\";\n        // Formatting\n        ExtendedType[ExtendedType[\"Color\"] = 19664897] = \"Color\";\n        ExtendedType[ExtendedType[\"FormatString\"] = 19730433] = \"FormatString\";\n        ExtendedType[ExtendedType[\"Alignment\"] = 20058113] = \"Alignment\";\n        ExtendedType[ExtendedType[\"LabelDisplayUnits\"] = 20123649] = \"LabelDisplayUnits\";\n        ExtendedType[ExtendedType[\"FontSize\"] = 20189443] = \"FontSize\";\n        ExtendedType[ExtendedType[\"LabelDensity\"] = 20254979] = \"LabelDensity\";\n        // Enumeration\n        ExtendedType[ExtendedType[\"Enumeration\"] = 26214401] = \"Enumeration\";\n        // Scripting\n        ExtendedType[ExtendedType[\"ScriptSource\"] = 32776193] = \"ScriptSource\";\n    })(powerbi.ExtendedType || (powerbi.ExtendedType = {}));\n    var ExtendedType = powerbi.ExtendedType;\n    var PrimitiveTypeMask = 0xFF;\n    var PrimitiveTypeWithFlagsMask = 0xFFFF;\n    var PrimitiveTypeFlagsExcludedMask = 0xFFFF0000;\n    function getPrimitiveType(extendedType) {\n        return extendedType & PrimitiveTypeMask;\n    }\n    function isPrimitiveType(extendedType) {\n        return (extendedType & PrimitiveTypeWithFlagsMask) === extendedType;\n    }\n    function getCategoryFromExtendedType(extendedType) {\n        if (isPrimitiveType(extendedType))\n            return null;\n        var category = ExtendedType[extendedType];\n        if (category) {\n            // Check for ExtendedType declaration without a primitive type.\n            // If exists, use it as category (e.g. Longitude rather than Longitude_Double)\n            // Otherwise use the ExtendedType declaration with a primitive type (e.g. Address)\n            var delimIdx = category.lastIndexOf('_');\n            if (delimIdx > 0) {\n                var baseCategory = category.slice(0, delimIdx);\n                if (ExtendedType[baseCategory]) {\n                    debug.assert((ExtendedType[baseCategory] & PrimitiveTypeFlagsExcludedMask) === (extendedType & PrimitiveTypeFlagsExcludedMask), 'Unexpected value for ExtendedType base member of ' + extendedType);\n                    category = baseCategory;\n                }\n            }\n        }\n        return category || null;\n    }\n    function toExtendedType(primitiveType, category) {\n        var primitiveString = PrimitiveType[primitiveType];\n        var t = ExtendedType[primitiveString];\n        if (t == null) {\n            debug.assertFail('Unexpected primitiveType ' + primitiveType);\n            t = ExtendedType.Null;\n        }\n        if (primitiveType && category) {\n            var categoryType = ExtendedType[category];\n            if (categoryType) {\n                var categoryPrimitiveType = getPrimitiveType(categoryType);\n                if (categoryPrimitiveType === PrimitiveType.Null) {\n                    // Category supports multiple primitive types, check if requested primitive type is supported\n                    // (note: important to use t here rather than primitiveType as it may include primitive type flags)\n                    categoryType = t | categoryType;\n                    if (ExtendedType[categoryType]) {\n                        debug.assert(ExtendedType[categoryType] === (category + '_' + primitiveString), 'Unexpected name for ExtendedType member ' + categoryType);\n                        t = categoryType;\n                    }\n                }\n                else if (categoryPrimitiveType === primitiveType) {\n                    // Primitive type matches the single supported type for the category\n                    t = categoryType;\n                }\n            }\n        }\n        return t;\n    }\n    function matchesExtendedTypeWithAnyPrimitive(a, b) {\n        return (a & PrimitiveTypeFlagsExcludedMask) === (b & PrimitiveTypeFlagsExcludedMask);\n    }\n})(powerbi || (powerbi = {}));\n/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\nvar powerbi;\n(function (powerbi) {\n    var data;\n    (function (data) {\n        (function (DataShapeBindingLimitType) {\n            DataShapeBindingLimitType[DataShapeBindingLimitType[\"Top\"] = 0] = \"Top\";\n            DataShapeBindingLimitType[DataShapeBindingLimitType[\"First\"] = 1] = \"First\";\n            DataShapeBindingLimitType[DataShapeBindingLimitType[\"Last\"] = 2] = \"Last\";\n            DataShapeBindingLimitType[DataShapeBindingLimitType[\"Sample\"] = 3] = \"Sample\";\n            DataShapeBindingLimitType[DataShapeBindingLimitType[\"Bottom\"] = 4] = \"Bottom\";\n        })(data.DataShapeBindingLimitType || (data.DataShapeBindingLimitType = {}));\n        var DataShapeBindingLimitType = data.DataShapeBindingLimitType;\n        (function (SubtotalType) {\n            SubtotalType[SubtotalType[\"None\"] = 0] = \"None\";\n            SubtotalType[SubtotalType[\"Before\"] = 1] = \"Before\";\n            SubtotalType[SubtotalType[\"After\"] = 2] = \"After\";\n        })(data.SubtotalType || (data.SubtotalType = {}));\n        var SubtotalType = data.SubtotalType;\n    })(data = powerbi.data || (powerbi.data = {}));\n})(powerbi || (powerbi = {}));\n/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\nvar powerbi;\n(function (powerbi) {\n    var data;\n    (function (data) {\n        var DataShapeBindingDataReduction;\n        (function (DataShapeBindingDataReduction) {\n            function createFrom(reduction) {\n                if (!reduction)\n                    return;\n                var result;\n                if (reduction.top) {\n                    result = {\n                        Top: {}\n                    };\n                    if (reduction.top.count)\n                        result.Top.Count = reduction.top.count;\n                }\n                if (reduction.bottom) {\n                    result = {\n                        Bottom: {}\n                    };\n                    if (reduction.bottom.count)\n                        result.Bottom.Count = reduction.bottom.count;\n                }\n                if (reduction.sample) {\n                    result = {\n                        Sample: {}\n                    };\n                    if (reduction.sample.count)\n                        result.Sample.Count = reduction.sample.count;\n                }\n                if (reduction.window) {\n                    result = {\n                        Window: {}\n                    };\n                    if (reduction.window.count)\n                        result.Window.Count = reduction.window.count;\n                }\n                return result;\n            }\n            DataShapeBindingDataReduction.createFrom = createFrom;\n        })(DataShapeBindingDataReduction = data.DataShapeBindingDataReduction || (data.DataShapeBindingDataReduction = {}));\n    })(data = powerbi.data || (powerbi.data = {}));\n})(powerbi || (powerbi = {}));\n/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\nvar powerbi;\n(function (powerbi) {\n    var data;\n    (function (data) {\n        /** Represents a federated conceptual schema. */\n        var FederatedConceptualSchema = (function () {\n            function FederatedConceptualSchema(options) {\n                debug.assertValue(options, 'options');\n                this.schemas = options.schemas;\n                if (options.links)\n                    this.links = options.links;\n            }\n            FederatedConceptualSchema.prototype.schema = function (name) {\n                return this.schemas[name];\n            };\n            return FederatedConceptualSchema;\n        })();\n        data.FederatedConceptualSchema = FederatedConceptualSchema;\n    })(data = powerbi.data || (powerbi.data = {}));\n})(powerbi || (powerbi = {}));\n/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\nvar powerbi;\n(function (powerbi) {\n    var data;\n    (function (data_1) {\n        var Selector;\n        (function (Selector) {\n            function filterFromSelector(selectors, isNot) {\n                if (_.isEmpty(selectors))\n                    return;\n                var exprs = [];\n                for (var i = 0, ilen = selectors.length; i < ilen; i++) {\n                    var identity = selectors[i];\n                    var data_2 = identity.data;\n                    var exprToAdd = undefined;\n                    if (data_2 && data_2.length) {\n                        for (var j = 0, jlen = data_2.length; j < jlen; j++) {\n                            exprToAdd = data_1.SQExprBuilder.and(exprToAdd, identity.data[j].expr);\n                        }\n                    }\n                    if (exprToAdd)\n                        exprs.push(exprToAdd);\n                }\n                if (!_.isEmpty(exprs))\n                    return powerbi.DataViewScopeIdentity.filterFromExprs(exprs, isNot);\n            }\n            Selector.filterFromSelector = filterFromSelector;\n            function matchesData(selector, identities) {\n                debug.assertValue(selector, 'selector');\n                debug.assertValue(selector.data, 'selector.data');\n                debug.assertValue(identities, 'identities');\n                var selectorData = selector.data;\n                if (selectorData.length !== identities.length)\n                    return false;\n                for (var i = 0, len = selectorData.length; i < len; i++) {\n                    var dataItem = selector.data[i];\n                    var selectorDataItem = dataItem;\n                    if (selectorDataItem.expr) {\n                        if (!powerbi.DataViewScopeIdentity.equals(selectorDataItem, identities[i]))\n                            return false;\n                    }\n                    else {\n                        if (!data_1.DataViewScopeWildcard.matches(dataItem, identities[i]))\n                            return false;\n                    }\n                }\n                return true;\n            }\n            Selector.matchesData = matchesData;\n            function matchesKeys(selector, keysList) {\n                debug.assertValue(selector, 'selector');\n                debug.assertValue(selector.data, 'selector.data');\n                debug.assertValue(keysList, 'keysList');\n                var selectorData = selector.data, selectorDataLength = selectorData.length;\n                if (selectorDataLength !== keysList.length)\n                    return false;\n                for (var i = 0; i < selectorDataLength; i++) {\n                    var selectorDataItem = selector.data[i], selectorDataExprs = void 0;\n                    if (selectorDataItem.expr) {\n                        selectorDataExprs = data_1.ScopeIdentityExtractor.getKeys(selectorDataItem.expr);\n                    }\n                    else {\n                        selectorDataExprs = selectorDataItem.exprs;\n                    }\n                    if (!selectorDataExprs)\n                        continue;\n                    if (!data_1.SQExprUtils.sequenceEqual(keysList[i], selectorDataExprs))\n                        return false;\n                }\n                return true;\n            }\n            Selector.matchesKeys = matchesKeys;\n            /** Determines whether two selectors are equal. */\n            function equals(x, y) {\n                // Normalize falsy to null\n                x = x || null;\n                y = y || null;\n                if (x === y)\n                    return true;\n                if (!x !== !y)\n                    return false;\n                debug.assertValue(x, 'x');\n                debug.assertValue(y, 'y');\n                if (x.id !== y.id)\n                    return false;\n                if (x.metadata !== y.metadata)\n                    return false;\n                if (!equalsDataArray(x.data, y.data))\n                    return false;\n                return true;\n            }\n            Selector.equals = equals;\n            function equalsDataArray(x, y) {\n                // Normalize falsy to null\n                x = x || null;\n                y = y || null;\n                if (x === y)\n                    return true;\n                if (!x !== !y)\n                    return false;\n                if (x.length !== y.length)\n                    return false;\n                for (var i = 0, len = x.length; i < len; i++) {\n                    if (!equalsData(x[i], y[i]))\n                        return false;\n                }\n                return true;\n            }\n            function equalsData(x, y) {\n                if (!x.expr && y.expr) {\n                    // TODO: We need to also check wildcard selectors too (once that's supported/figured out).\n                    return false;\n                }\n                return powerbi.DataViewScopeIdentity.equals(x, y);\n            }\n            function getKey(selector) {\n                var toStringify = {};\n                if (selector.data) {\n                    var data_3 = [];\n                    for (var i = 0, ilen = selector.data.length; i < ilen; i++) {\n                        data_3.push(selector.data[i].key);\n                    }\n                    toStringify.data = data_3;\n                }\n                if (selector.metadata)\n                    toStringify.metadata = selector.metadata;\n                if (selector.id)\n                    toStringify.id = selector.id;\n                return JSON.stringify(toStringify);\n            }\n            Selector.getKey = getKey;\n            function containsWildcard(selector) {\n                debug.assertValue(selector, 'selector');\n                var dataItems = selector.data;\n                if (!dataItems)\n                    return false;\n                for (var i = 0, len = dataItems.length; i < len; i++) {\n                    var wildcard = dataItems[i];\n                    if (wildcard.exprs)\n                        return true;\n                }\n                return false;\n            }\n            Selector.containsWildcard = containsWildcard;\n        })(Selector = data_1.Selector || (data_1.Selector = {}));\n    })(data = powerbi.data || (powerbi.data = {}));\n})(powerbi || (powerbi = {}));\n/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\nvar powerbi;\n(function (powerbi) {\n    var data;\n    (function (data) {\n        (function (EntitySourceType) {\n            EntitySourceType[EntitySourceType[\"Table\"] = 0] = \"Table\";\n            EntitySourceType[EntitySourceType[\"Pod\"] = 1] = \"Pod\";\n        })(data.EntitySourceType || (data.EntitySourceType = {}));\n        var EntitySourceType = data.EntitySourceType;\n        (function (TimeUnit) {\n            TimeUnit[TimeUnit[\"Day\"] = 0] = \"Day\";\n            TimeUnit[TimeUnit[\"Week\"] = 1] = \"Week\";\n            TimeUnit[TimeUnit[\"Month\"] = 2] = \"Month\";\n            TimeUnit[TimeUnit[\"Year\"] = 3] = \"Year\";\n            TimeUnit[TimeUnit[\"Decade\"] = 4] = \"Decade\";\n            TimeUnit[TimeUnit[\"Second\"] = 5] = \"Second\";\n            TimeUnit[TimeUnit[\"Minute\"] = 6] = \"Minute\";\n            TimeUnit[TimeUnit[\"Hour\"] = 7] = \"Hour\";\n        })(data.TimeUnit || (data.TimeUnit = {}));\n        var TimeUnit = data.TimeUnit;\n        (function (QueryAggregateFunction) {\n            QueryAggregateFunction[QueryAggregateFunction[\"Sum\"] = 0] = \"Sum\";\n            QueryAggregateFunction[QueryAggregateFunction[\"Avg\"] = 1] = \"Avg\";\n            QueryAggregateFunction[QueryAggregateFunction[\"Count\"] = 2] = \"Count\";\n            QueryAggregateFunction[QueryAggregateFunction[\"Min\"] = 3] = \"Min\";\n            QueryAggregateFunction[QueryAggregateFunction[\"Max\"] = 4] = \"Max\";\n            QueryAggregateFunction[QueryAggregateFunction[\"CountNonNull\"] = 5] = \"CountNonNull\";\n            QueryAggregateFunction[QueryAggregateFunction[\"Median\"] = 6] = \"Median\";\n            QueryAggregateFunction[QueryAggregateFunction[\"StandardDeviation\"] = 7] = \"StandardDeviation\";\n            QueryAggregateFunction[QueryAggregateFunction[\"Variance\"] = 8] = \"Variance\";\n        })(data.QueryAggregateFunction || (data.QueryAggregateFunction = {}));\n        var QueryAggregateFunction = data.QueryAggregateFunction;\n        (function (QueryComparisonKind) {\n            QueryComparisonKind[QueryComparisonKind[\"Equal\"] = 0] = \"Equal\";\n            QueryComparisonKind[QueryComparisonKind[\"GreaterThan\"] = 1] = \"GreaterThan\";\n            QueryComparisonKind[QueryComparisonKind[\"GreaterThanOrEqual\"] = 2] = \"GreaterThanOrEqual\";\n            QueryComparisonKind[QueryComparisonKind[\"LessThan\"] = 3] = \"LessThan\";\n            QueryComparisonKind[QueryComparisonKind[\"LessThanOrEqual\"] = 4] = \"LessThanOrEqual\";\n        })(data.QueryComparisonKind || (data.QueryComparisonKind = {}));\n        var QueryComparisonKind = data.QueryComparisonKind;\n        /** Defines semantic data types. */\n        (function (SemanticType) {\n            SemanticType[SemanticType[\"None\"] = 0] = \"None\";\n            SemanticType[SemanticType[\"Number\"] = 1] = \"Number\";\n            SemanticType[SemanticType[\"Integer\"] = 3] = \"Integer\";\n            SemanticType[SemanticType[\"DateTime\"] = 4] = \"DateTime\";\n            SemanticType[SemanticType[\"Time\"] = 8] = \"Time\";\n            SemanticType[SemanticType[\"Date\"] = 20] = \"Date\";\n            SemanticType[SemanticType[\"Month\"] = 35] = \"Month\";\n            SemanticType[SemanticType[\"Year\"] = 67] = \"Year\";\n            SemanticType[SemanticType[\"YearAndMonth\"] = 128] = \"YearAndMonth\";\n            SemanticType[SemanticType[\"MonthAndDay\"] = 256] = \"MonthAndDay\";\n            SemanticType[SemanticType[\"Decade\"] = 515] = \"Decade\";\n            SemanticType[SemanticType[\"YearAndWeek\"] = 1024] = \"YearAndWeek\";\n            SemanticType[SemanticType[\"String\"] = 2048] = \"String\";\n            SemanticType[SemanticType[\"Boolean\"] = 4096] = \"Boolean\";\n            SemanticType[SemanticType[\"Table\"] = 8192] = \"Table\";\n            SemanticType[SemanticType[\"Range\"] = 16384] = \"Range\";\n        })(data.SemanticType || (data.SemanticType = {}));\n        var SemanticType = data.SemanticType;\n        (function (FilterKind) {\n            FilterKind[FilterKind[\"Default\"] = 0] = \"Default\";\n            FilterKind[FilterKind[\"Period\"] = 1] = \"Period\";\n        })(data.FilterKind || (data.FilterKind = {}));\n        var FilterKind = data.FilterKind;\n    })(data = powerbi.data || (powerbi.data = {}));\n})(powerbi || (powerbi = {}));\n/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\nvar powerbi;\n(function (powerbi) {\n    var data;\n    (function (data) {\n        var QueryProjectionCollection = (function () {\n            function QueryProjectionCollection(items, activeProjectionRefs, showAll) {\n                debug.assertValue(items, 'items');\n                this.items = items;\n                this._activeProjectionRefs = activeProjectionRefs;\n                this._showAll = showAll;\n            }\n            /** Returns all projections in a mutable array. */\n            QueryProjectionCollection.prototype.all = function () {\n                return this.items;\n            };\n            Object.defineProperty(QueryProjectionCollection.prototype, \"activeProjectionRefs\", {\n                get: function () {\n                    return this._activeProjectionRefs;\n                },\n                set: function (queryReferences) {\n                    if (!_.isEmpty(queryReferences)) {\n                        var queryRefs = this.items.map(function (val) { return val.queryRef; });\n                        for (var _i = 0; _i < queryReferences.length; _i++) {\n                            var queryReference = queryReferences[_i];\n                            if (!_.contains(queryRefs, queryReference))\n                                return;\n                        }\n                        this._activeProjectionRefs = queryReferences;\n                    }\n                },\n                enumerable: true,\n                configurable: true\n            });\n            Object.defineProperty(QueryProjectionCollection.prototype, \"showAll\", {\n                get: function () {\n                    return this._showAll;\n                },\n                set: function (value) {\n                    this._showAll = value;\n                },\n                enumerable: true,\n                configurable: true\n            });\n            QueryProjectionCollection.prototype.addActiveQueryReference = function (queryRef) {\n                if (!this._activeProjectionRefs)\n                    this._activeProjectionRefs = [queryRef];\n                else\n                    this._activeProjectionRefs.push(queryRef);\n            };\n            QueryProjectionCollection.prototype.getLastActiveQueryReference = function () {\n                if (!_.isEmpty(this._activeProjectionRefs)) {\n                    return this._activeProjectionRefs[this._activeProjectionRefs.length - 1];\n                }\n            };\n            QueryProjectionCollection.prototype.clone = function () {\n                return new QueryProjectionCollection(_.clone(this.items), _.clone(this._activeProjectionRefs), this._showAll);\n            };\n            return QueryProjectionCollection;\n        })();\n        data.QueryProjectionCollection = QueryProjectionCollection;\n        var QueryProjectionsByRole;\n        (function (QueryProjectionsByRole) {\n            /** Clones the QueryProjectionsByRole. */\n            function clone(roles) {\n                if (!roles)\n                    return roles;\n                var clonedRoles = {};\n                for (var roleName in roles)\n                    clonedRoles[roleName] = roles[roleName].clone();\n                return clonedRoles;\n            }\n            QueryProjectionsByRole.clone = clone;\n            /** Returns the QueryProjectionCollection for that role.  Even returns empty collections so that 'drillable' and 'activeProjection' fields are preserved. */\n            function getRole(roles, name) {\n                debug.assertAnyValue(roles, 'roles');\n                debug.assertValue(name, 'name');\n                if (!roles)\n                    return;\n                return roles[name];\n            }\n            QueryProjectionsByRole.getRole = getRole;\n        })(QueryProjectionsByRole = data.QueryProjectionsByRole || (data.QueryProjectionsByRole = {}));\n    })(data = powerbi.data || (powerbi.data = {}));\n})(powerbi || (powerbi = {}));\n/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\nvar powerbi;\n(function (powerbi) {\n    /** The system used to determine display units used during formatting */\n    (function (DisplayUnitSystemType) {\n        /** Default display unit system, which saves space by using units such as K, M, bn with PowerView rules for when to pick a unit. Suitable for chart axes. */\n        DisplayUnitSystemType[DisplayUnitSystemType[\"Default\"] = 0] = \"Default\";\n        /** A verbose display unit system that will only respect the formatting defined in the model. Suitable for explore mode single-value cards. */\n        DisplayUnitSystemType[DisplayUnitSystemType[\"Verbose\"] = 1] = \"Verbose\";\n        /**\n         * A display unit system that uses units such as K, M, bn if we have at least one of those units (e.g. 0.9M is not valid as it's less than 1 million).\n         * Suitable for dashboard tile cards\n         */\n        DisplayUnitSystemType[DisplayUnitSystemType[\"WholeUnits\"] = 2] = \"WholeUnits\";\n        /**A display unit system that also contains Auto and None units for data labels*/\n        DisplayUnitSystemType[DisplayUnitSystemType[\"DataLabels\"] = 3] = \"DataLabels\";\n    })(powerbi.DisplayUnitSystemType || (powerbi.DisplayUnitSystemType = {}));\n    var DisplayUnitSystemType = powerbi.DisplayUnitSystemType;\n})(powerbi || (powerbi = {}));\n/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\n/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\n/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\nvar powerbi;\n(function (powerbi) {\n    var data;\n    (function (data) {\n        var DataRoleHelper;\n        (function (DataRoleHelper) {\n            function getMeasureIndexOfRole(grouped, roleName) {\n                if (!_.isEmpty(grouped)) {\n                    var firstGroup = grouped[0];\n                    if (firstGroup.values && firstGroup.values.length > 0) {\n                        for (var i = 0, len = firstGroup.values.length; i < len; ++i) {\n                            var value = firstGroup.values[i];\n                            if (value && value.source) {\n                                if (hasRole(value.source, roleName))\n                                    return i;\n                            }\n                        }\n                    }\n                }\n                return -1;\n            }\n            DataRoleHelper.getMeasureIndexOfRole = getMeasureIndexOfRole;\n            function getCategoryIndexOfRole(categories, roleName) {\n                if (!_.isEmpty(categories)) {\n                    for (var i = 0, ilen = categories.length; i < ilen; i++) {\n                        if (hasRole(categories[i].source, roleName))\n                            return i;\n                    }\n                }\n                return -1;\n            }\n            DataRoleHelper.getCategoryIndexOfRole = getCategoryIndexOfRole;\n            function hasRole(column, name) {\n                var roles = column.roles;\n                return roles && roles[name];\n            }\n            DataRoleHelper.hasRole = hasRole;\n            function hasRoleInDataView(dataView, name) {\n                return dataView != null\n                    && dataView.metadata != null\n                    && dataView.metadata.columns\n                    && _.any(dataView.metadata.columns, function (c) { return c.roles && c.roles[name] !== undefined; });\n            }\n            DataRoleHelper.hasRoleInDataView = hasRoleInDataView;\n        })(DataRoleHelper = data.DataRoleHelper || (data.DataRoleHelper = {}));\n    })(data = powerbi.data || (powerbi.data = {}));\n})(powerbi || (powerbi = {}));\n/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\nvar powerbi;\n(function (powerbi) {\n    var data;\n    (function (data) {\n        var DataRoleHelper = powerbi.data.DataRoleHelper;\n        function createIDataViewCategoricalReader(dataView) {\n            return new DataViewCategoricalReader(dataView);\n        }\n        data.createIDataViewCategoricalReader = createIDataViewCategoricalReader;\n        var DataViewCategoricalReader = (function () {\n            function DataViewCategoricalReader(dataView) {\n                debug.assertValue(dataView, 'dataView');\n                this.dataView = dataView;\n                // Validate categories\n                var categorical;\n                if (dataView)\n                    categorical = dataView.categorical;\n                var categories;\n                if (categorical)\n                    categories = this.categories = categorical.categories;\n                this.hasValidCategories = !_.isEmpty(categories);\n                if (this.hasValidCategories) {\n                    this.hasCategoryObjects = !!(categories[0].objects);\n                }\n                // Validate values\n                var values;\n                if (categorical)\n                    values = categorical.values;\n                var hasAnyValidValues = this.hasAnyValidValues = !_.isEmpty(values);\n                if (hasAnyValidValues)\n                    this.grouped = dataView.categorical.values.grouped();\n                if (this.hasAnyValidValues)\n                    this.dataHasDynamicSeries = !!this.dataView.categorical.values.source;\n            }\n            // Category methods\n            DataViewCategoricalReader.prototype.hasCategories = function () {\n                return this.hasValidCategories;\n            };\n            DataViewCategoricalReader.prototype.getCategoryCount = function () {\n                if (this.hasValidCategories)\n                    return this.categories[0].values.length;\n                else\n                    return 0;\n            };\n            DataViewCategoricalReader.prototype.getCategoryValues = function (roleName) {\n                if (this.hasValidCategories) {\n                    var categories = this.getCategoryFromRole(roleName);\n                    return categories ? categories.values : undefined;\n                }\n            };\n            DataViewCategoricalReader.prototype.getCategoryValue = function (categoryIndex, roleName) {\n                if (this.hasValidCategories) {\n                    var categories = this.getCategoryFromRole(roleName);\n                    return categories ? categories.values[categoryIndex] : undefined;\n                }\n            };\n            DataViewCategoricalReader.prototype.getCategoryColumn = function (roleName) {\n                if (this.hasValidCategories)\n                    return this.getCategoryFromRole(roleName);\n            };\n            DataViewCategoricalReader.prototype.getCategoryMetadataColumn = function (roleName) {\n                if (this.hasValidCategories) {\n                    var categories = this.getCategoryFromRole(roleName);\n                    return categories ? categories.source : undefined;\n                }\n            };\n            DataViewCategoricalReader.prototype.getCategoryDisplayName = function (roleName) {\n                if (this.hasValidCategories) {\n                    var targetColumn = this.getCategoryColumn(roleName);\n                    if (targetColumn && targetColumn.source) {\n                        return targetColumn.source.displayName;\n                    }\n                }\n            };\n            DataViewCategoricalReader.prototype.hasCompositeCategories = function () {\n                if (this.hasValidCategories)\n                    return this.categories.length > 1;\n            };\n            DataViewCategoricalReader.prototype.hasCategoryWithRole = function (roleName) {\n                return DataRoleHelper.getCategoryIndexOfRole(this.categories, roleName) !== -1;\n            };\n            DataViewCategoricalReader.prototype.getCategoryObjects = function (categoryIndex, roleName) {\n                if (this.hasValidCategories && this.hasCategoryObjects)\n                    return this.getCategoryFromRole(roleName).objects[categoryIndex];\n            };\n            DataViewCategoricalReader.prototype.getCategoryFromRole = function (roleName) {\n                var categories = this.categories;\n                return categories[DataRoleHelper.getCategoryIndexOfRole(categories, roleName)];\n            };\n            // Value and measure methods\n            DataViewCategoricalReader.prototype.hasValues = function (roleName) {\n                return this.getMeasureIndex(roleName) !== -1;\n            };\n            DataViewCategoricalReader.prototype.getValues = function (roleName, seriesIndex) {\n                if (seriesIndex === void 0) { seriesIndex = 0; }\n                var measureIndex = this.getMeasureIndex(roleName);\n                if (this.hasAnyValidValues && measureIndex !== -1)\n                    return this.grouped[seriesIndex].values[measureIndex].values;\n            };\n            DataViewCategoricalReader.prototype.getValue = function (roleName, categoryIndex, seriesIndex) {\n                if (this.hasAnyValidValues) {\n                    var values = this.getValues(roleName, seriesIndex);\n                    return values ? values[categoryIndex] : undefined;\n                }\n            };\n            DataViewCategoricalReader.prototype.getFirstNonNullValueForCategory = function (roleName, categoryIndex) {\n                if (this.hasAnyValidValues) {\n                    if (!this.dataHasDynamicSeries) {\n                        debug.assert(this.grouped.length === 1, \"getFirstNonNullValueForCategory shouldn't be called if you have a static series\");\n                        return this.getValue(roleName, categoryIndex);\n                    }\n                    for (var seriesIndex = 0, seriesCount = this.grouped.length; seriesIndex < seriesCount; seriesIndex++) {\n                        var values = this.getValues(roleName, seriesIndex);\n                        var value = !_.isEmpty(values) ? values[categoryIndex] : undefined;\n                        if (value != null) {\n                            return value;\n                        }\n                    }\n                }\n            };\n            DataViewCategoricalReader.prototype.getMeasureQueryName = function (roleName) {\n                var measureIndex = this.getMeasureIndex(roleName);\n                if (this.hasAnyValidValues && measureIndex !== -1)\n                    return this.grouped[0].values[measureIndex].source.queryName;\n            };\n            DataViewCategoricalReader.prototype.getValueColumn = function (roleName, seriesIndex) {\n                if (seriesIndex === void 0) { seriesIndex = 0; }\n                var measureIndex = this.getMeasureIndex(roleName);\n                if (this.hasAnyValidValues && measureIndex !== -1)\n                    return this.grouped[seriesIndex].values[measureIndex];\n            };\n            DataViewCategoricalReader.prototype.getValueMetadataColumn = function (roleName, seriesIndex) {\n                if (seriesIndex === void 0) { seriesIndex = 0; }\n                var measureIndex = this.getMeasureIndex(roleName);\n                if (this.hasAnyValidValues && measureIndex !== -1)\n                    return this.grouped[seriesIndex].values[measureIndex].source;\n            };\n            DataViewCategoricalReader.prototype.getValueDisplayName = function (roleName, seriesIndex) {\n                if (this.hasAnyValidValues) {\n                    var targetColumn = this.getValueColumn(roleName, seriesIndex);\n                    if (targetColumn && targetColumn.source) {\n                        return targetColumn.source.displayName;\n                    }\n                }\n            };\n            DataViewCategoricalReader.prototype.getMeasureIndex = function (roleName) {\n                return DataRoleHelper.getMeasureIndexOfRole(this.grouped, roleName);\n            };\n            // Series methods\n            DataViewCategoricalReader.prototype.hasDynamicSeries = function () {\n                return this.dataHasDynamicSeries;\n            };\n            DataViewCategoricalReader.prototype.getSeriesCount = function () {\n                if (this.hasAnyValidValues)\n                    return this.grouped.length;\n            };\n            DataViewCategoricalReader.prototype.getSeriesObjects = function (seriesIndex) {\n                if (this.hasAnyValidValues)\n                    return this.grouped[seriesIndex].objects;\n            };\n            DataViewCategoricalReader.prototype.getSeriesColumn = function (seriesIndex) {\n                if (this.hasAnyValidValues)\n                    return this.dataView.categorical.values[seriesIndex];\n            };\n            DataViewCategoricalReader.prototype.getSeriesColumns = function () {\n                if (this.hasAnyValidValues)\n                    return this.dataView.categorical.values;\n            };\n            DataViewCategoricalReader.prototype.getSeriesMetadataColumn = function () {\n                if (this.hasAnyValidValues)\n                    return this.dataView.categorical.values.source;\n            };\n            DataViewCategoricalReader.prototype.getSeriesColumnIdentifier = function () {\n                if (this.hasAnyValidValues)\n                    return this.dataView.categorical.values.identityFields;\n            };\n            DataViewCategoricalReader.prototype.getSeriesName = function (seriesIndex) {\n                if (this.hasAnyValidValues)\n                    return this.grouped[seriesIndex].name;\n            };\n            DataViewCategoricalReader.prototype.getSeriesDisplayName = function () {\n                if (this.hasAnyValidValues && this.dataHasDynamicSeries)\n                    return this.dataView.categorical.values.source.displayName;\n            };\n            return DataViewCategoricalReader;\n        })();\n    })(data = powerbi.data || (powerbi.data = {}));\n})(powerbi || (powerbi = {}));\n/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\nvar powerbi;\n(function (powerbi) {\n    var data;\n    (function (data) {\n        var inheritSingle = powerbi.Prototype.inheritSingle;\n        var DataViewConcatenateCategoricalColumns;\n        (function (DataViewConcatenateCategoricalColumns) {\n            function detectAndApply(dataView, roleMappings, projectionOrdering, selects, projectionActiveItems) {\n                debug.assertValue(dataView, 'dataView');\n                debug.assertAnyValue(roleMappings, 'roleMappings');\n                debug.assertAnyValue(projectionOrdering, 'projectionOrdering');\n                var result = dataView;\n                var dataViewCategorical = dataView.categorical;\n                if (dataViewCategorical) {\n                    var concatenationSource = detectCategoricalRoleForHierarchicalGroup(dataViewCategorical, dataView.metadata, roleMappings, selects, projectionActiveItems);\n                    if (concatenationSource) {\n                        var columnsSortedByProjectionOrdering = sortColumnsByProjectionOrdering(projectionOrdering, concatenationSource.roleName, concatenationSource.categories);\n                        if (columnsSortedByProjectionOrdering.length >= 2) {\n                            result = applyConcatenation(dataView, concatenationSource.roleName, columnsSortedByProjectionOrdering);\n                        }\n                    }\n                }\n                return result;\n            }\n            DataViewConcatenateCategoricalColumns.detectAndApply = detectAndApply;\n            /**\n             * Returns the role and its assocated category columns (from dataViewCategorical.categories)\n             * that should be concatenated for the case of hierarchical group.\n             *\n             * Note: In the future if we support sibling hierarchical groups in categorical,\n             * change the return type to CategoryColumnsByRole[] and update detection logic.\n             */\n            function detectCategoricalRoleForHierarchicalGroup(dataViewCategorical, metadata, dataViewMappings, selects, projectionActiveItems) {\n                debug.assertValue(dataViewCategorical, 'dataViewCategorical');\n                debug.assertAnyValue(dataViewMappings, 'dataViewMappings');\n                var result;\n                // For now, just handle the case where roleMappings.length === 1.\n                // In the future, if there is more than 1, we might want to proceed if, \n                // for example, all role mappings map category to the same role name and they all have { max: 1 } conditions.\n                var roleKinds = data.DataViewSelectTransform.createRoleKindFromMetadata(selects, metadata);\n                var projections = data.DataViewSelectTransform.projectionsFromSelects(selects, projectionActiveItems);\n                var roleMappings = powerbi.DataViewAnalysis.chooseDataViewMappings(projections, dataViewMappings, roleKinds).supportedMappings;\n                var roleMappingForCategorical = (roleMappings && roleMappings.length === 1 && !!roleMappings[0].categorical) ? roleMappings[0] : undefined;\n                if (roleMappingForCategorical) {\n                    var roleNamesForCategory = getAllRolesInCategories(roleMappingForCategorical.categorical);\n                    // With \"list\" in role mapping, is it possible to have multiple role names for category.\n                    // For now, proceed to concatenate category columns only when categories are bound to 1 Role.\n                    // We can change this if we want to support independent (sibling) group hierarchies in categorical.\n                    if (roleNamesForCategory && roleNamesForCategory.length === 1) {\n                        var targetRoleName = roleNamesForCategory[0];\n                        var isVisualExpectingMaxOneCategoryColumn = !_.isEmpty(roleMappingForCategorical.conditions) &&\n                            _.every(roleMappingForCategorical.conditions, function (condition) { return condition[targetRoleName] && condition[targetRoleName].max === 1; });\n                        if (isVisualExpectingMaxOneCategoryColumn) {\n                            var categoriesForTargetRole = _.filter(dataViewCategorical.categories, function (categoryColumn) { return categoryColumn.source.roles && !!categoryColumn.source.roles[targetRoleName]; });\n                            // At least for now, we expect all category columns for the same role to have the same number of value entries.\n                            // If that's not the case, we won't run the concatenate logic for that role at all...\n                            var areValuesCountsEqual = _.every(categoriesForTargetRole, function (categoryColumn) { return categoryColumn.values.length === categoriesForTargetRole[0].values.length; });\n                            // Also, there is no need to concatenate columns unless there is actually more than one column\n                            if (areValuesCountsEqual &&\n                                categoriesForTargetRole.length >= 2) {\n                                result = {\n                                    roleName: targetRoleName,\n                                    categories: categoriesForTargetRole\n                                };\n                            }\n                        }\n                    }\n                }\n                return result;\n            }\n            /**\n             * Returns the array of role names that are mapped to categorical categories.\n             * Returns an empty array if none exists.\n             */\n            function getAllRolesInCategories(categoricalRoleMapping) {\n                debug.assertValue(categoricalRoleMapping, 'categoricalRoleMapping');\n                var roleNames = [];\n                powerbi.DataViewMapping.visitCategoricalCategories(categoricalRoleMapping.categories, {\n                    visitRole: function (roleName) {\n                        roleNames.push(roleName);\n                    }\n                });\n                return roleNames;\n            }\n            function applyConcatenation(dataView, roleName, columnsSortedByProjectionOrdering) {\n                debug.assertValue(dataView, 'dataView');\n                debug.assertValue(roleName, 'roleName');\n                debug.assert(columnsSortedByProjectionOrdering && columnsSortedByProjectionOrdering.length >= 2, 'columnsSortedByProjectionOrdering && columnsSortedByProjectionOrdering.length >= 2');\n                var concatenatedValues = concatenateValues(columnsSortedByProjectionOrdering);\n                var concatenatedColumnMetadata = createConcatenatedColumnMetadata(roleName, columnsSortedByProjectionOrdering);\n                var transformedDataView = inheritSingle(dataView);\n                addToMetadata(transformedDataView, concatenatedColumnMetadata);\n                var concatenatedCategoryColumn = createConcatenatedCategoryColumn(columnsSortedByProjectionOrdering, concatenatedColumnMetadata, concatenatedValues);\n                var dataViewCategorical = dataView.categorical;\n                var transformedCategoricalCategories = _.difference(dataViewCategorical.categories, columnsSortedByProjectionOrdering);\n                transformedCategoricalCategories.push(concatenatedCategoryColumn);\n                var transformedCategorical = inheritSingle(dataViewCategorical);\n                transformedCategorical.categories = transformedCategoricalCategories;\n                transformedDataView.categorical = transformedCategorical;\n                return transformedDataView;\n            }\n            function concatenateValues(columnsSortedByProjectionOrdering) {\n                debug.assertValue(columnsSortedByProjectionOrdering, 'columnsSortedByProjectionOrdering');\n                var concatenatedValues = [];\n                // concatenate the values in dataViewCategorical.categories[0..length-1].values[j], and store it in combinedValues[j]\n                for (var _i = 0; _i < columnsSortedByProjectionOrdering.length; _i++) {\n                    var categoryColumn = columnsSortedByProjectionOrdering[_i];\n                    for (var i = 0, len = categoryColumn.values.length; i < len; i++) {\n                        // TODO VSTS 6842107: need to clean up this value concatenation logic\n                        // This code does not have access to valueFormatter module.  So first, move valueFormatter.getFormatString(...)\n                        // and/or valueFormatter.formatValueColumn(...) to somewhere near DataViewObjects.ts, and then use it from here.\n                        var valueToAppend = categoryColumn.values && categoryColumn.values[i];\n                        concatenatedValues[i] = (concatenatedValues[i] === undefined) ? (valueToAppend + '') : (valueToAppend + ' ' + concatenatedValues[i]);\n                    }\n                }\n                return concatenatedValues;\n            }\n            /**\n            * Returns a new array of elements from columns as they are ordered for the specified roleName in the specified projectionOrdering.\n            */\n            function sortColumnsByProjectionOrdering(projectionOrdering, roleName, columns) {\n                debug.assertAnyValue(projectionOrdering, 'projectionOrdering');\n                debug.assertValue(roleName, 'roleName');\n                debug.assertValue(columns, 'columns');\n                var columnsInProjectionOrdering;\n                if (projectionOrdering) {\n                    // the numeric values in projectionOrdering correspond to the index property of DataViewMetadataColumn\n                    var columnsByIndex = {};\n                    for (var _i = 0; _i < columns.length; _i++) {\n                        var column = columns[_i];\n                        if (column.source.roles[roleName]) {\n                            debug.assert(!columnsByIndex[column.source.index], 'The specified columns should not contain multiple columns with same index: ' + column.source.index);\n                            columnsByIndex[column.source.index] = column;\n                        }\n                    }\n                    var columnIndicesInProjectionOrdering = projectionOrdering[roleName];\n                    columnsInProjectionOrdering = _.chain(columnIndicesInProjectionOrdering)\n                        .map(function (columnIndex) { return columnsByIndex[columnIndex]; })\n                        .filter(function (column) { return !!column; })\n                        .value();\n                }\n                else {\n                    // If projectionOrder is unspecified, just return the columns for the specified role in their current order\n                    columnsInProjectionOrdering = _.filter(columns, function (column) { return column.source.roles[roleName]; });\n                }\n                return columnsInProjectionOrdering;\n            }\n            /**\n             * Creates the column metadata that will back the column with the concatenated values.\n             */\n            function createConcatenatedColumnMetadata(roleName, columnsSortedByProjectionOrdering) {\n                debug.assertValue(roleName, 'roleName');\n                debug.assertNonEmpty(columnsSortedByProjectionOrdering, 'columnsSortedByProjectionOrdering');\n                var concatenatedDisplayName;\n                var columnForCurrentDrillLevel = _.last(columnsSortedByProjectionOrdering);\n                // By the end of the for-loop, consistentIsMeasure will be:\n                // - true if _.every(categoryColumn, c => c.source.isMeasure === true), or else\n                // - false if _.every(categoryColumn, c => c.source.isMeasure === false), or else\n                // - undefined.\n                var consistentIsMeasure = columnForCurrentDrillLevel.source.isMeasure;\n                for (var _i = 0; _i < columnsSortedByProjectionOrdering.length; _i++) {\n                    var categoryColumn = columnsSortedByProjectionOrdering[_i];\n                    var columnSource = categoryColumn.source;\n                    concatenatedDisplayName = (concatenatedDisplayName == null) ? columnSource.displayName : (columnSource.displayName + ' ' + concatenatedDisplayName);\n                    if (consistentIsMeasure !== columnSource.isMeasure) {\n                        consistentIsMeasure = undefined;\n                    }\n                }\n                var newRoles = {};\n                newRoles[roleName] = true;\n                var newColumnMetadata = {\n                    displayName: concatenatedDisplayName,\n                    roles: newRoles,\n                    type: powerbi.ValueType.fromPrimitiveTypeAndCategory(powerbi.PrimitiveType.Text)\n                };\n                if (consistentIsMeasure !== undefined) {\n                    newColumnMetadata.isMeasure = consistentIsMeasure;\n                }\n                // TODO VSTS 6842046: Investigate whether we should change that property to mandatory or change the Chart visual code.\n                // If queryName is not set at all, the column chart visual will only render column for the first group instance.\n                // If queryName is set to any string other than columnForCurrentDrillLevel.source.queryName, then drilldown by group instance is broken (VSTS 6847879).\n                newColumnMetadata.queryName = columnForCurrentDrillLevel.source.queryName;\n                return newColumnMetadata;\n            }\n            function addToMetadata(transformedDataView, newColumn) {\n                debug.assertValue(transformedDataView, 'transformedDataView');\n                debug.assertValue(newColumn, 'newColumn');\n                var transformedColumns = inheritSingle(transformedDataView.metadata.columns);\n                transformedColumns.push(newColumn);\n                var transformedMetadata = inheritSingle(transformedDataView.metadata);\n                transformedMetadata.columns = transformedColumns;\n                transformedDataView.metadata = transformedMetadata;\n            }\n            function createConcatenatedCategoryColumn(sourceColumnsSortedByProjectionOrdering, columnMetadata, concatenatedValues) {\n                debug.assert(sourceColumnsSortedByProjectionOrdering && sourceColumnsSortedByProjectionOrdering.length >= 2, 'sourceColumnsSortedByProjectionOrdering && sourceColumnsSortedByProjectionOrdering.length >= 2');\n                var newCategoryColumn = {\n                    source: columnMetadata,\n                    values: concatenatedValues\n                };\n                // We expect every DataViewCategoryColumn in concatenationSourceColumns to have the same set of identities, always.\n                // So, we'll just take the identities and identityFields from the first column\n                var firstColumn = sourceColumnsSortedByProjectionOrdering[0];\n                if (firstColumn.identity) {\n                    newCategoryColumn.identity = firstColumn.identity;\n                }\n                if (firstColumn.identityFields) {\n                    newCategoryColumn.identityFields = firstColumn.identityFields;\n                }\n                // I doubt that any firstColumn.objects property would still make sense in the new column,\n                // so I won't copy that over for now.\n                return newCategoryColumn;\n            }\n        })(DataViewConcatenateCategoricalColumns = data.DataViewConcatenateCategoricalColumns || (data.DataViewConcatenateCategoricalColumns = {}));\n    })(data = powerbi.data || (powerbi.data = {}));\n})(powerbi || (powerbi = {}));\n/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\nvar powerbi;\n(function (powerbi) {\n    var DataViewMapping;\n    (function (DataViewMapping) {\n        function visitMapping(mapping, visitor) {\n            debug.assertValue(mapping, 'mapping');\n            debug.assertValue(visitor, 'visitor');\n            var categorical = mapping.categorical;\n            if (categorical)\n                visitCategorical(categorical, visitor);\n            var table = mapping.table;\n            if (table)\n                visitTable(table, visitor);\n            var matrix = mapping.matrix;\n            if (matrix)\n                visitMatrix(matrix, visitor);\n            var tree = mapping.tree;\n            if (tree)\n                visitTree(tree, visitor);\n            var single = mapping.single;\n            if (single)\n                visitSingle(single, visitor);\n        }\n        DataViewMapping.visitMapping = visitMapping;\n        function visitCategorical(mapping, visitor) {\n            debug.assertValue(mapping, 'mapping');\n            debug.assertValue(visitor, 'visitor');\n            visitCategoricalCategories(mapping.categories, visitor);\n            var values = mapping.values;\n            visitCategoricalValues(values, visitor);\n            visitGrouped(values, visitor);\n        }\n        DataViewMapping.visitCategorical = visitCategorical;\n        function visitCategoricalCategories(mapping, visitor) {\n            debug.assertAnyValue(mapping, 'mapping');\n            debug.assertValue(visitor, 'visitor');\n            if (mapping) {\n                visitBind(mapping, visitor);\n                visitFor(mapping, visitor);\n                visitList(mapping, visitor);\n                visitReduction(mapping, visitor);\n            }\n        }\n        DataViewMapping.visitCategoricalCategories = visitCategoricalCategories;\n        function visitCategoricalValues(mapping, visitor) {\n            debug.assertAnyValue(mapping, 'mapping');\n            debug.assertValue(visitor, 'visitor');\n            if (mapping) {\n                visitBind(mapping, visitor, 0 /* CategoricalValue */);\n                visitFor(mapping, visitor, 0 /* CategoricalValue */);\n                visitList(mapping, visitor, 0 /* CategoricalValue */);\n                var group = mapping.group;\n                if (group) {\n                    for (var _i = 0, _a = group.select; _i < _a.length; _i++) {\n                        var item = _a[_i];\n                        visitBind(item, visitor, 1 /* CategoricalValueGroup */);\n                        visitFor(item, visitor, 1 /* CategoricalValueGroup */);\n                    }\n                }\n            }\n        }\n        DataViewMapping.visitCategoricalValues = visitCategoricalValues;\n        function visitTable(mapping, visitor) {\n            debug.assertValue(mapping, 'mapping');\n            debug.assertValue(visitor, 'visitor');\n            var rows = mapping.rows;\n            visitBind(rows, visitor);\n            visitFor(rows, visitor);\n            visitList(rows, visitor);\n            visitReduction(rows, visitor);\n        }\n        DataViewMapping.visitTable = visitTable;\n        function visitMatrix(mapping, visitor) {\n            debug.assertValue(mapping, 'mapping');\n            debug.assertValue(visitor, 'visitor');\n            visitMatrixItems(mapping.rows, visitor);\n            visitMatrixItems(mapping.columns, visitor);\n            visitMatrixItems(mapping.values, visitor);\n        }\n        function visitMatrixItems(mapping, visitor) {\n            debug.assertAnyValue(mapping, 'mapping');\n            debug.assertValue(visitor, 'visitor');\n            if (mapping) {\n                visitFor(mapping, visitor);\n                visitList(mapping, visitor);\n                visitReduction(mapping, visitor);\n            }\n        }\n        DataViewMapping.visitMatrixItems = visitMatrixItems;\n        function visitTree(mapping, visitor) {\n            debug.assertValue(mapping, 'mapping');\n            debug.assertValue(visitor, 'visitor');\n            visitTreeNodes(mapping.nodes, visitor);\n            visitTreeValues(mapping.values, visitor);\n        }\n        function visitTreeNodes(mapping, visitor) {\n            debug.assertAnyValue(mapping, 'mapping');\n            debug.assertValue(visitor, 'visitor');\n            if (mapping) {\n                visitFor(mapping, visitor);\n                visitReduction(mapping, visitor);\n            }\n        }\n        DataViewMapping.visitTreeNodes = visitTreeNodes;\n        function visitTreeValues(mapping, visitor) {\n            debug.assertAnyValue(mapping, 'mapping');\n            debug.assertValue(visitor, 'visitor');\n            if (mapping) {\n                visitFor(mapping, visitor);\n            }\n        }\n        DataViewMapping.visitTreeValues = visitTreeValues;\n        function visitBind(mapping, visitor, context) {\n            debug.assertValue(mapping, 'mapping');\n            debug.assertValue(visitor, 'visitor');\n            var bind = mapping.bind;\n            if (bind) {\n                if (context != null)\n                    visitor.visitRole(bind.to, context);\n                else\n                    visitor.visitRole(bind.to);\n            }\n        }\n        function visitFor(mapping, visitor, context) {\n            debug.assertValue(mapping, 'mapping');\n            debug.assertValue(visitor, 'visitor');\n            var forValue = mapping.for;\n            if (forValue) {\n                if (context != null)\n                    visitor.visitRole(forValue.in, context);\n                else\n                    visitor.visitRole(forValue.in);\n            }\n        }\n        function visitList(mapping, visitor, context) {\n            debug.assertValue(mapping, 'mapping');\n            debug.assertValue(visitor, 'visitor');\n            var select = mapping.select;\n            if (select) {\n                for (var _i = 0; _i < select.length; _i++) {\n                    var item = select[_i];\n                    visitBind(item, visitor, context);\n                    visitFor(item, visitor, context);\n                }\n            }\n        }\n        function visitGrouped(mapping, visitor) {\n            debug.assertAnyValue(mapping, 'mapping');\n            debug.assertValue(visitor, 'visitor');\n            if (!mapping)\n                return;\n            var group = mapping.group;\n            if (group) {\n                visitor.visitRole(group.by);\n                visitReduction(group, visitor);\n            }\n        }\n        DataViewMapping.visitGrouped = visitGrouped;\n        function visitReduction(mapping, visitor) {\n            debug.assertValue(mapping, 'mapping');\n            debug.assertValue(visitor, 'visitor');\n            if (visitor.visitReduction) {\n                var reductionAlgorithm = mapping.dataReductionAlgorithm;\n                if (reductionAlgorithm) {\n                    visitor.visitReduction(reductionAlgorithm);\n                }\n            }\n        }\n        function visitSingle(mapping, visitor) {\n            debug.assertValue(mapping, 'mapping');\n            debug.assertValue(visitor, 'visitor');\n            visitor.visitRole(mapping.role);\n        }\n    })(DataViewMapping = powerbi.DataViewMapping || (powerbi.DataViewMapping = {}));\n})(powerbi || (powerbi = {}));\n/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\nvar powerbi;\n(function (powerbi) {\n    var data;\n    (function (data) {\n        var inheritSingle = powerbi.Prototype.inheritSingle;\n        var DataViewNormalizeValues;\n        (function (DataViewNormalizeValues) {\n            function apply(options) {\n                debug.assertValue(options, 'options');\n                var rolesToNormalize = _.filter(options.dataRoles, function (role) { return !_.isEmpty(role.requiredTypes); });\n                filterVariantMeasures(options.dataview, options.dataViewMappings, rolesToNormalize);\n            }\n            DataViewNormalizeValues.apply = apply;\n            function filterVariantMeasures(dataview, dataViewMappings, rolesToNormalize) {\n                debug.assertValue(dataview, 'dataview');\n                // Don't perform this unless we actually have dataViewMappings and variant measures to suppress\n                // When we switch to lazy per-visual DataView creation, we'll be able to remove this check.\n                if (_.isEmpty(dataViewMappings) || _.isEmpty(rolesToNormalize))\n                    return;\n                var columnFilter = generateMetadataColumnFilter(dataview.metadata.columns, rolesToNormalize);\n                var valueFilter = generateValueFilter(dataview.metadata.columns, rolesToNormalize);\n                var usedMappings = {};\n                for (var _i = 0; _i < dataViewMappings.length; _i++) {\n                    var dataViewMapping = dataViewMappings[_i];\n                    // Get dataview specified in mappings which are also in dataview\n                    for (var dataViewMappingProp in dataViewMapping) {\n                        if (dataview[dataViewMappingProp] != null)\n                            usedMappings[dataViewMappingProp] = true;\n                    }\n                }\n                if (usedMappings['categorical'])\n                    filterVariantMeasuresCategorical(dataview.categorical, columnFilter, valueFilter);\n                if (usedMappings['table'])\n                    filterVariantMeasuresTable(dataview.table, columnFilter, valueFilter);\n                if (usedMappings['tree'])\n                    filterVariantMeasuresTreeNode(dataview.tree.root, columnFilter, valueFilter);\n                if (usedMappings['matrix'])\n                    filterVariantMeasuresMatrix(dataview.matrix, columnFilter, valueFilter);\n                if (usedMappings['single'])\n                    filterVariantMeasuresSingle(dataview, dataViewMappings, rolesToNormalize, valueFilter);\n            }\n            DataViewNormalizeValues.filterVariantMeasures = filterVariantMeasures;\n            function generateMetadataColumnFilter(columns, rolesToNormalize) {\n                if (!columns || !rolesToNormalize)\n                    return function () { return false; };\n                var columnsToNormalize = {};\n                for (var _i = 0; _i < columns.length; _i++) {\n                    var column = columns[_i];\n                    var roles = column.roles;\n                    if (!roles)\n                        continue;\n                    for (var _a = 0; _a < rolesToNormalize.length; _a++) {\n                        var role = rolesToNormalize[_a];\n                        if (!roles[role.name])\n                            continue;\n                        columnsToNormalize[column.index] = true;\n                        break;\n                    }\n                }\n                return function (columnIndex) {\n                    if (isNaN(columnIndex))\n                        return false;\n                    return !!columnsToNormalize[columnIndex];\n                };\n            }\n            DataViewNormalizeValues.generateMetadataColumnFilter = generateMetadataColumnFilter;\n            function generateValueFilter(columns, rolesToNormalize) {\n                if (!columns || !rolesToNormalize)\n                    return function () { return true; };\n                var columnValueFilters = [];\n                // Build columnValueFilters based on role requiredTypes\n                for (var _i = 0; _i < columns.length; _i++) {\n                    var column = columns[_i];\n                    var columnValueFilter = generateColumnValueFilter(column, rolesToNormalize);\n                    if (columnValueFilter)\n                        columnValueFilters[column.index] = columnValueFilter;\n                }\n                return function (columnIndex, value) {\n                    if (columnValueFilters[columnIndex])\n                        return columnValueFilters[columnIndex](value);\n                    return true;\n                };\n            }\n            DataViewNormalizeValues.generateValueFilter = generateValueFilter;\n            function generateColumnValueFilter(column, rolesToNormalize) {\n                var requiredTypes = getColumnRequiredTypes(column, rolesToNormalize);\n                if (_.isEmpty(requiredTypes))\n                    return;\n                return function (value) {\n                    return doesValueMatchTypes(value, requiredTypes);\n                };\n            }\n            function getColumnRequiredTypes(column, rolesToNormalize) {\n                var requiredTypes = [];\n                var columnRoles = column && column.roles;\n                if (!columnRoles)\n                    return requiredTypes;\n                for (var _i = 0; _i < rolesToNormalize.length; _i++) {\n                    var role = rolesToNormalize[_i];\n                    if (!columnRoles[role.name])\n                        continue;\n                    for (var _a = 0, _b = role.requiredTypes; _a < _b.length; _a++) {\n                        var typeDescriptor = _b[_a];\n                        var type = powerbi.ValueType.fromDescriptor(typeDescriptor);\n                        requiredTypes.push(type);\n                    }\n                }\n                return requiredTypes;\n            }\n            DataViewNormalizeValues.getColumnRequiredTypes = getColumnRequiredTypes;\n            function filterVariantMeasuresCategorical(dataview, columnFilter, valueFilter) {\n                var values = dataview && dataview.values;\n                if (!values)\n                    return;\n                var valuesGrouped = values.grouped();\n                if (!valuesGrouped)\n                    return;\n                for (var _i = 0; _i < valuesGrouped.length; _i++) {\n                    var valueGroup = valuesGrouped[_i];\n                    var valuesInGroup = valueGroup.values;\n                    for (var _a = 0; _a < valuesInGroup.length; _a++) {\n                        var valueColumn = valuesInGroup[_a];\n                        var columnIndex = valueColumn.source.index;\n                        if (!columnFilter(columnIndex))\n                            continue;\n                        for (var i = 0, ilen = valueColumn.values.length; i < ilen; i++) {\n                            valueColumn.values = normalizeVariant(valueColumn.values, i, columnIndex, valueFilter);\n                        }\n                    }\n                }\n            }\n            function filterVariantMeasuresTable(dataview, columnFilter, valueFilter) {\n                var columns = dataview && dataview.columns;\n                if (!columns)\n                    return;\n                var filteredColumns = [];\n                for (var _i = 0; _i < columns.length; _i++) {\n                    var column = columns[_i];\n                    if (columnFilter(column.index))\n                        filteredColumns.push(column.index);\n                }\n                var rows = dataview.rows;\n                for (var i = 0, ilen = rows.length; i < ilen; i++) {\n                    for (var _a = 0; _a < filteredColumns.length; _a++) {\n                        var index = filteredColumns[_a];\n                        rows[i] = normalizeVariant(rows[i], index, index, valueFilter);\n                    }\n                }\n            }\n            function filterVariantMeasuresTreeNode(node, columnFilter, valueFilter) {\n                if (node.values) {\n                    for (var columnIndex in node.values) {\n                        // In dataView.tree, the keys in node.values correspond to columnIndex of the node value\n                        if (columnFilter(columnIndex)) {\n                            // According to nojorgen, it is possible to have primitive values as values in the node.values dictionary.\n                            if (typeof (node.values[columnIndex]) === 'object' && ('value' in node.values[columnIndex]))\n                                node.values[columnIndex] = normalizeVariant(node.values[columnIndex], 'value', columnIndex, valueFilter);\n                            else\n                                node.values = normalizeVariant(node.values, columnIndex, columnIndex, valueFilter);\n                        }\n                    }\n                }\n                else if (node.children) {\n                    for (var _i = 0, _a = node.children; _i < _a.length; _i++) {\n                        var child = _a[_i];\n                        filterVariantMeasuresTreeNode(child, columnFilter, valueFilter);\n                    }\n                }\n            }\n            function filterVariantMeasuresMatrix(dataview, columnFilter, valueFilter) {\n                var root = dataview && dataview.rows && dataview.rows.root;\n                if (!root)\n                    return;\n                // Recurse into rows.children\n                // e.g. rows.children -> .children -> .children.values\n                filterVariantMeasuresMatrixRecursive(dataview, root, columnFilter, valueFilter);\n            }\n            function filterVariantMeasuresMatrixRecursive(dataviewMatrix, node, columnFilter, valueFilter) {\n                if (node.values) {\n                    for (var id in node.values) {\n                        // Note related to VSTS 6547124: In dataView.matrix, the keys in node.values are NOT equivalent to value.valueSourceIndex.\n                        var nodeValue = node.values[id];\n                        // the property DataViewMatrixNodeValue.valueSourceIndex will not exist if valueSourceIndex is 0 for that value\n                        var valueSourceIndex = nodeValue.valueSourceIndex || 0;\n                        // index is an optional property on DataViewMetadataColumn, but I am not sure when it will ever be undefined in a matrix' column metadata\n                        var columnIndex = dataviewMatrix.valueSources[valueSourceIndex].index;\n                        if (_.isNumber(columnIndex) && columnFilter(columnIndex)) {\n                            node.values[id] = normalizeVariant(nodeValue, 'value', columnIndex, valueFilter);\n                        }\n                    }\n                }\n                else if (node.children) {\n                    for (var _i = 0, _a = node.children; _i < _a.length; _i++) {\n                        var child = _a[_i];\n                        filterVariantMeasuresMatrixRecursive(dataviewMatrix, child, columnFilter, valueFilter);\n                    }\n                }\n            }\n            function filterVariantMeasuresSingle(dataview, dataViewMappings, rolesToNormalize, valueFilter) {\n                if (!dataview.single)\n                    return;\n                var roleNames = [];\n                for (var _i = 0; _i < rolesToNormalize.length; _i++) {\n                    var role = rolesToNormalize[_i];\n                    if (role.name)\n                        roleNames.push(role.name);\n                }\n                var columns = dataview.metadata.columns;\n                for (var _a = 0; _a < dataViewMappings.length; _a++) {\n                    var dataViewMapping = dataViewMappings[_a];\n                    var roleName = dataViewMapping.single.role;\n                    if (roleNames.indexOf(roleName) !== -1) {\n                        var column = firstColumnByRoleName(columns, roleName);\n                        if (column)\n                            dataview.single = normalizeVariant(dataview.single, 'value', column.index, valueFilter);\n                        return;\n                    }\n                }\n            }\n            function normalizeVariant(object, key, columnIndex, valueFilter) {\n                if (!object)\n                    return;\n                var value = object[key];\n                if (value !== null && !valueFilter(columnIndex, value)) {\n                    object = inheritSingle(object);\n                    object[key] = null;\n                }\n                return object;\n            }\n            DataViewNormalizeValues.normalizeVariant = normalizeVariant;\n            function doesValueMatchTypes(value, types) {\n                for (var _i = 0; _i < types.length; _i++) {\n                    var type = types[_i];\n                    if (type.numeric || type.integer)\n                        return typeof (value) === 'number';\n                }\n                return false;\n            }\n            function firstColumnByRoleName(columns, roleName) {\n                for (var _i = 0; _i < columns.length; _i++) {\n                    var column = columns[_i];\n                    var columnRoles = column && column.roles;\n                    if (columnRoles && columnRoles[roleName])\n                        return column;\n                }\n            }\n        })(DataViewNormalizeValues = data.DataViewNormalizeValues || (data.DataViewNormalizeValues = {}));\n    })(data = powerbi.data || (powerbi.data = {}));\n})(powerbi || (powerbi = {}));\n/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\nvar powerbi;\n(function (powerbi) {\n    var DataViewObjects;\n    (function (DataViewObjects) {\n        /** Gets the value of the given object/property pair. */\n        function getValue(objects, propertyId, defaultValue) {\n            debug.assertAnyValue(objects, 'objects');\n            debug.assertValue(propertyId, 'propertyId');\n            if (!objects)\n                return defaultValue;\n            var objectOrMap = objects[propertyId.objectName];\n            debug.assert(!isUserDefined(objectOrMap), 'expected DataViewObject');\n            var object = objectOrMap;\n            return DataViewObject.getValue(object, propertyId.propertyName, defaultValue);\n        }\n        DataViewObjects.getValue = getValue;\n        /** Gets an object from objects. */\n        function getObject(objects, objectName, defaultValue) {\n            if (objects && objects[objectName]) {\n                var object = objects[objectName];\n                debug.assert(!isUserDefined(object), 'expected DataViewObject');\n                return object;\n            }\n            else {\n                return defaultValue;\n            }\n        }\n        DataViewObjects.getObject = getObject;\n        /** Gets a map of user-defined objects. */\n        function getUserDefinedObjects(objects, objectName) {\n            if (objects && objects[objectName]) {\n                var map = objects[objectName];\n                debug.assert(isUserDefined(map), 'expected DataViewObjectMap');\n                return map;\n            }\n        }\n        DataViewObjects.getUserDefinedObjects = getUserDefinedObjects;\n        /** Gets the solid color from a fill property. */\n        function getFillColor(objects, propertyId, defaultColor) {\n            var value = getValue(objects, propertyId);\n            if (!value || !value.solid)\n                return defaultColor;\n            return value.solid.color;\n        }\n        DataViewObjects.getFillColor = getFillColor;\n        /** Returns true if the given object represents a collection of user-defined objects */\n        function isUserDefined(objectOrMap) {\n            return _.isArray(objectOrMap);\n        }\n        DataViewObjects.isUserDefined = isUserDefined;\n    })(DataViewObjects = powerbi.DataViewObjects || (powerbi.DataViewObjects = {}));\n    var DataViewObject;\n    (function (DataViewObject) {\n        function getValue(object, propertyName, defaultValue) {\n            debug.assertAnyValue(object, 'object');\n            debug.assertValue(propertyName, 'propertyName');\n            if (!object)\n                return defaultValue;\n            var propertyValue = object[propertyName];\n            if (propertyValue === undefined)\n                return defaultValue;\n            return propertyValue;\n        }\n        DataViewObject.getValue = getValue;\n        /** Gets the solid color from a fill property using only a propertyName */\n        function getFillColorByPropertyName(objects, propertyName, defaultColor) {\n            var value = DataViewObject.getValue(objects, propertyName);\n            if (!value || !value.solid)\n                return defaultColor;\n            return value.solid.color;\n        }\n        DataViewObject.getFillColorByPropertyName = getFillColorByPropertyName;\n    })(DataViewObject = powerbi.DataViewObject || (powerbi.DataViewObject = {}));\n})(powerbi || (powerbi = {}));\n/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\nvar powerbi;\n(function (powerbi) {\n    var data;\n    (function (data) {\n        var JsonComparer = jsCommon.JsonComparer;\n        var DataViewObjectDefinitions;\n        (function (DataViewObjectDefinitions) {\n            /** Creates or reuses a DataViewObjectDefinition for matching the given objectName and selector within the defns. */\n            function ensure(defns, objectName, selector) {\n                debug.assertValue(defns, 'defns');\n                var defnsForObject = defns[objectName];\n                if (!defnsForObject)\n                    defns[objectName] = defnsForObject = [];\n                for (var i = 0, len = defnsForObject.length; i < len; i++) {\n                    var defn = defnsForObject[i];\n                    if (data.Selector.equals(defn.selector, selector))\n                        return defn;\n                }\n                var newDefn = {\n                    selector: selector,\n                    properties: {},\n                };\n                defnsForObject.push(newDefn);\n                return newDefn;\n            }\n            DataViewObjectDefinitions.ensure = ensure;\n            function deleteProperty(defns, objectName, selector, propertyName) {\n                debug.assertValue(defns, 'defns');\n                var defn = getObjectDefinition(defns, objectName, selector);\n                if (!defn)\n                    return;\n                DataViewObjectDefinition.deleteSingleProperty(defn, propertyName);\n            }\n            DataViewObjectDefinitions.deleteProperty = deleteProperty;\n            function setValue(defns, propertyId, selector, value) {\n                debug.assertValue(defns, 'defns');\n                debug.assertValue(propertyId, 'propertyId');\n                ensure(defns, propertyId.objectName, selector).properties[propertyId.propertyName] = value;\n            }\n            DataViewObjectDefinitions.setValue = setValue;\n            function getValue(defns, propertyId, selector) {\n                var properties = getPropertyContainer(defns, propertyId, selector);\n                if (!properties)\n                    return;\n                return properties[propertyId.propertyName];\n            }\n            DataViewObjectDefinitions.getValue = getValue;\n            function getPropertyContainer(defns, propertyId, selector) {\n                var defn = getObjectDefinition(defns, propertyId.objectName, selector);\n                if (!defn)\n                    return;\n                return defn.properties;\n            }\n            DataViewObjectDefinitions.getPropertyContainer = getPropertyContainer;\n            function getObjectDefinition(defns, objectName, selector) {\n                debug.assertAnyValue(defns, 'defns');\n                debug.assertValue(objectName, 'objectName');\n                debug.assertAnyValue(selector, 'selector');\n                if (!defns)\n                    return;\n                var defnsForObject = defns[objectName];\n                if (!defnsForObject)\n                    return;\n                for (var i = 0, len = defnsForObject.length; i < len; i++) {\n                    var defn = defnsForObject[i];\n                    if (data.Selector.equals(defn.selector, selector))\n                        return defn;\n                }\n            }\n            DataViewObjectDefinitions.getObjectDefinition = getObjectDefinition;\n            function propertiesAreEqual(a, b) {\n                if (a instanceof data.SemanticFilter && b instanceof data.SemanticFilter) {\n                    return data.SemanticFilter.isSameFilter(a, b);\n                }\n                return JsonComparer.equals(a, b);\n            }\n            DataViewObjectDefinitions.propertiesAreEqual = propertiesAreEqual;\n            function allPropertiesAreEqual(a, b) {\n                debug.assertValue(a, 'a');\n                debug.assertValue(b, 'b');\n                if (Object.keys(a).length !== Object.keys(b).length)\n                    return false;\n                for (var property in a) {\n                    if (!propertiesAreEqual(a[property], b[property]))\n                        return false;\n                }\n                return true;\n            }\n            DataViewObjectDefinitions.allPropertiesAreEqual = allPropertiesAreEqual;\n            function encodePropertyValue(value, valueTypeDescriptor) {\n                debug.assertAnyValue(value, 'value');\n                debug.assertValue(valueTypeDescriptor, 'valueTypeDescriptor');\n                if (valueTypeDescriptor.bool) {\n                    if (typeof (value) !== 'boolean')\n                        value = false; // This is fallback, which doesn't really belong here.\n                    return data.SQExprBuilder.boolean(value);\n                }\n                else if (valueTypeDescriptor.text || (valueTypeDescriptor.scripting && valueTypeDescriptor.scripting.source)) {\n                    return data.SQExprBuilder.text(value);\n                }\n                else if (valueTypeDescriptor.numeric) {\n                    if ($.isNumeric(value))\n                        return data.SQExprBuilder.double(+value);\n                }\n                else if (valueTypeDescriptor.fill) {\n                    if (value) {\n                        return {\n                            solid: { color: data.SQExprBuilder.text(value) }\n                        };\n                    }\n                }\n                else if (valueTypeDescriptor.formatting) {\n                    if (valueTypeDescriptor.formatting.labelDisplayUnits) {\n                        return data.SQExprBuilder.double(+value);\n                    }\n                    else {\n                        return data.SQExprBuilder.text(value);\n                    }\n                }\n                else if (valueTypeDescriptor.enumeration) {\n                    if ($.isNumeric(value))\n                        return data.SQExprBuilder.double(+value);\n                    else\n                        return data.SQExprBuilder.text(value);\n                }\n                else if (valueTypeDescriptor.misc) {\n                    if (value) {\n                        value = data.SQExprBuilder.text(value);\n                    }\n                    else {\n                        value = null;\n                    }\n                }\n                else if (valueTypeDescriptor.image) {\n                    if (value) {\n                        var imageValue = value;\n                        var imageDefinition = {\n                            name: data.SQExprBuilder.text(imageValue.name),\n                            url: data.SQExprBuilder.text(imageValue.url),\n                        };\n                        if (imageValue.scaling)\n                            imageDefinition.scaling = data.SQExprBuilder.text(imageValue.scaling);\n                        return imageDefinition;\n                    }\n                }\n                return value;\n            }\n            DataViewObjectDefinitions.encodePropertyValue = encodePropertyValue;\n            function clone(original) {\n                debug.assertValue(original, 'original');\n                var cloned = {};\n                for (var objectName in original) {\n                    var originalDefns = original[objectName];\n                    if (_.isEmpty(originalDefns))\n                        continue;\n                    var clonedDefns = [];\n                    for (var _i = 0; _i < originalDefns.length; _i++) {\n                        var originalDefn = originalDefns[_i];\n                        clonedDefns.push({\n                            properties: cloneProperties(originalDefn.properties),\n                            selector: originalDefn.selector,\n                        });\n                    }\n                    cloned[objectName] = clonedDefns;\n                }\n                return cloned;\n            }\n            DataViewObjectDefinitions.clone = clone;\n            function cloneProperties(original) {\n                debug.assertValue(original, 'original');\n                // NOTE: properties are considered atomic, so a shallow clone is appropriate here.\n                return _.clone(original);\n            }\n        })(DataViewObjectDefinitions = data.DataViewObjectDefinitions || (data.DataViewObjectDefinitions = {}));\n        var DataViewObjectDefinition;\n        (function (DataViewObjectDefinition) {\n            function deleteSingleProperty(defn, propertyName) {\n                //note: We decided that delete is acceptable here and that we don't need optimization here\n                delete defn.properties[propertyName];\n            }\n            DataViewObjectDefinition.deleteSingleProperty = deleteSingleProperty;\n        })(DataViewObjectDefinition = data.DataViewObjectDefinition || (data.DataViewObjectDefinition = {}));\n    })(data = powerbi.data || (powerbi.data = {}));\n})(powerbi || (powerbi = {}));\n/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\nvar powerbi;\n(function (powerbi) {\n    var data;\n    (function (data) {\n        var DataViewObjectDescriptors;\n        (function (DataViewObjectDescriptors) {\n            /** Attempts to find the format string property.  This can be useful for upgrade and conversion. */\n            function findFormatString(descriptors) {\n                return findProperty(descriptors, function (propDesc) {\n                    var formattingTypeDesc = powerbi.ValueType.fromDescriptor(propDesc.type).formatting;\n                    return formattingTypeDesc && formattingTypeDesc.formatString;\n                });\n            }\n            DataViewObjectDescriptors.findFormatString = findFormatString;\n            /** Attempts to find the filter property.  This can be useful for propagating filters from one visual to others. */\n            function findFilterOutput(descriptors) {\n                return findProperty(descriptors, function (propDesc) {\n                    var propType = propDesc.type;\n                    return propType && !!propType.filter;\n                });\n            }\n            DataViewObjectDescriptors.findFilterOutput = findFilterOutput;\n            /** Attempts to find the default value property.  This can be useful for propagating schema default value. */\n            function findDefaultValue(descriptors) {\n                return findProperty(descriptors, function (propDesc) {\n                    var propType = propDesc.type;\n                    return propType && !!propType.expression && propType.expression.defaultValue;\n                });\n            }\n            DataViewObjectDescriptors.findDefaultValue = findDefaultValue;\n            function findProperty(descriptors, propPredicate) {\n                debug.assertAnyValue(descriptors, 'descriptors');\n                debug.assertAnyValue(propPredicate, 'propPredicate');\n                if (!descriptors)\n                    return;\n                for (var objectName in descriptors) {\n                    var objPropDescs = descriptors[objectName].properties;\n                    for (var propertyName in objPropDescs) {\n                        if (propPredicate(objPropDescs[propertyName])) {\n                            return {\n                                objectName: objectName,\n                                propertyName: propertyName,\n                            };\n                        }\n                    }\n                }\n            }\n        })(DataViewObjectDescriptors = data.DataViewObjectDescriptors || (data.DataViewObjectDescriptors = {}));\n    })(data = powerbi.data || (powerbi.data = {}));\n})(powerbi || (powerbi = {}));\n/*\n*  Power BI Visualizations\n*\n*  Copyright (c) Microsoft Corporation\n*  All rights reserved.\n *  MIT License\n*\n*  Permission is hereby granted, free of charge, to any person obtaining a copy\n*  of this software and associated documentation files (the \"\"Software\"\"), to deal\n*  in the Software without restriction, including without limitation the rights\n*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n*  copies of the Software, and to permit persons to whom the Software is\n*  furnished to do so, subject to the following conditions:\n*\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n*\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n*  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n*  THE SOFTWARE.\n*/\nvar powerbi;\n(function (powerbi) {\n    var data;\n    (function (data) {\n        var DataViewObjectEvaluationUtils;\n        (function (DataViewObjectEvaluationUtils) {\n            function evaluateDataViewObjects(evalContext, objectDescriptors, objectDefns) {\n                debug.assertValue(evalContext, 'evalContext');\n                debug.assertValue(objectDescriptors, 'objectDescriptors');\n                debug.assertValue(objectDefns, 'objectDefns');\n                var objects;\n                for (var j = 0, jlen = objectDefns.length; j < jlen; j++) {\n                    var objectDefinition = objectDefns[j], objectName = objectDefinition.name;\n                    var evaluatedObject = data.DataViewObjectEvaluator.run(evalContext, objectDescriptors[objectName], objectDefinition.properties);\n                    if (!evaluatedObject)\n                        continue;\n                    if (!objects)\n                        objects = {};\n                    // NOTE: this currently has last-object-wins semantics.\n                    objects[objectName] = evaluatedObject;\n                }\n                return objects;\n            }\n            DataViewObjectEvaluationUtils.evaluateDataViewObjects = evaluateDataViewObjects;\n            function groupObjectsBySelector(objectDefinitions) {\n                debug.assertAnyValue(objectDefinitions, 'objectDefinitions');\n                var grouped = {\n                    data: [],\n                };\n                if (objectDefinitions) {\n                    for (var objectName in objectDefinitions) {\n                        var objectDefnList = objectDefinitions[objectName];\n                        for (var i = 0, len = objectDefnList.length; i < len; i++) {\n                            var objectDefn = objectDefnList[i];\n                            ensureDefinitionListForSelector(grouped, objectDefn.selector).objects.push({\n                                name: objectName,\n                                properties: objectDefn.properties,\n                            });\n                        }\n                    }\n                }\n                return grouped;\n            }\n            DataViewObjectEvaluationUtils.groupObjectsBySelector = groupObjectsBySelector;\n            function ensureDefinitionListForSelector(grouped, selector) {\n                debug.assertValue(grouped, 'grouped');\n                debug.assertAnyValue(selector, 'selector');\n                if (!selector) {\n                    if (!grouped.metadataOnce)\n                        grouped.metadataOnce = { objects: [] };\n                    return grouped.metadataOnce;\n                }\n                var groupedObjects;\n                if (selector.data) {\n                    groupedObjects = grouped.data;\n                }\n                else if (selector.metadata) {\n                    if (!grouped.metadata)\n                        grouped.metadata = [];\n                    groupedObjects = grouped.metadata;\n                }\n                else if (selector.id) {\n                    if (!grouped.userDefined)\n                        grouped.userDefined = [];\n                    groupedObjects = grouped.userDefined;\n                }\n                debug.assert(!!groupedObjects, 'GroupedObjects is not defined.  Indicates malformed selector.');\n                for (var _i = 0; _i < groupedObjects.length; _i++) {\n                    var item_1 = groupedObjects[_i];\n                    if (data.Selector.equals(selector, item_1.selector))\n                        return item_1;\n                }\n                var item = {\n                    selector: selector,\n                    objects: [],\n                };\n                groupedObjects.push(item);\n                return item;\n            }\n            function addImplicitObjects(objectsForAllSelectors, objectDescriptors, columns, selectTransforms) {\n                debug.assertValue(objectsForAllSelectors, 'objectsForAllSelectors');\n                debug.assertValue(objectDescriptors, 'objectDescriptors');\n                debug.assertValue(columns, 'columns');\n                debug.assertAnyValue(selectTransforms, 'selectTransforms');\n                if (selectTransforms) {\n                    addDefaultFormatString(objectsForAllSelectors, objectDescriptors, columns, selectTransforms);\n                    addDefaultValue(objectsForAllSelectors, objectDescriptors, columns, selectTransforms);\n                }\n            }\n            DataViewObjectEvaluationUtils.addImplicitObjects = addImplicitObjects;\n            function addDefaultFormatString(objectsForAllSelectors, objectDescriptors, columns, selectTransforms) {\n                debug.assertValue(objectsForAllSelectors, 'objectsForAllSelectors');\n                debug.assertValue(objectDescriptors, 'objectDescriptors');\n                debug.assertValue(columns, 'columns');\n                debug.assertValue(selectTransforms, 'selectTransforms');\n                var formatStringProp = data.DataViewObjectDescriptors.findFormatString(objectDescriptors);\n                if (!formatStringProp)\n                    return;\n                for (var selectIdx = 0, selectLen = selectTransforms.length; selectIdx < selectLen; selectIdx++) {\n                    var selectTransform = selectTransforms[selectIdx];\n                    if (!selectTransform)\n                        continue;\n                    debug.assertValue(selectTransform.queryName, 'selectTransform.queryName');\n                    applyFormatString(objectsForAllSelectors, formatStringProp, selectTransform.queryName, selectTransform.format || getColumnFormatForIndex(columns, selectIdx));\n                }\n            }\n            /** Registers properties for default value, if the properties are not explicitly provided. */\n            function addDefaultValue(objectsForAllSelectors, objectDescriptors, columns, selectTransforms) {\n                debug.assertValue(objectsForAllSelectors, 'objectsForAllSelectors');\n                debug.assertValue(objectDescriptors, 'objectDescriptors');\n                debug.assertValue(columns, 'columns');\n                debug.assertValue(selectTransforms, 'selectTransforms');\n                var defaultValueProp = data.DataViewObjectDescriptors.findDefaultValue(objectDescriptors);\n                if (!defaultValueProp)\n                    return;\n                for (var _i = 0; _i < selectTransforms.length; _i++) {\n                    var selectTransform = selectTransforms[_i];\n                    if (!selectTransform)\n                        continue;\n                    debug.assertValue(selectTransform.queryName, 'selectTransform.queryName');\n                    applyDefaultValue(objectsForAllSelectors, defaultValueProp, selectTransform.queryName, selectTransform.defaultValue);\n                }\n            }\n            function getColumnFormatForIndex(columns, selectIdx) {\n                for (var columnIdx = 0, columnLen = columns.length; columnIdx < columnLen; columnIdx++) {\n                    var column = columns[columnIdx];\n                    if (!column || column.index !== selectIdx)\n                        continue;\n                    return column.format;\n                }\n            }\n            function applyFormatString(objectsForAllSelectors, formatStringProp, queryName, formatStringValue) {\n                if (!formatStringValue)\n                    return;\n                // There is a format string specified -- apply it as an object property, if there is not already one specified.\n                applyMetadataProperty(objectsForAllSelectors, formatStringProp, { metadata: queryName }, data.SQExprBuilder.text(formatStringValue));\n            }\n            function applyDefaultValue(objectsForAllSelectors, defaultValueProp, queryName, defaultValue) {\n                if (!defaultValue)\n                    return;\n                // There is a default value specified -- apply it as an object property, if there is not already one specified.\n                applyMetadataProperty(objectsForAllSelectors, defaultValueProp, { metadata: queryName }, defaultValue);\n            }\n            function applyMetadataProperty(objectsForAllSelectors, propertyId, selector, value) {\n                var objectDefns;\n                if (selector) {\n                    var metadataObjects = objectsForAllSelectors.metadata;\n                    if (!metadataObjects)\n                        metadataObjects = objectsForAllSelectors.metadata = [];\n                    objectDefns = metadataObjects;\n                }\n                else {\n                    var metadataOnce = objectsForAllSelectors.metadataOnce;\n                    if (!metadataOnce)\n                        metadataOnce = objectsForAllSelectors.metadataOnce = { selector: selector, objects: [] };\n                    objectDefns = [metadataOnce];\n                }\n                var targetMetadataObject = findWithMatchingSelector(objectDefns, selector);\n                var targetObjectDefn;\n                if (targetMetadataObject) {\n                    var targetObjectDefns = targetMetadataObject.objects;\n                    targetObjectDefn = findExistingObject(targetObjectDefns, propertyId.objectName);\n                    if (targetObjectDefn) {\n                        if (targetObjectDefn.properties[propertyId.propertyName])\n                            return;\n                    }\n                    else {\n                        targetObjectDefn = {\n                            name: propertyId.objectName,\n                            properties: {},\n                        };\n                        targetObjectDefns.push(targetObjectDefn);\n                    }\n                }\n                else {\n                    targetObjectDefn = {\n                        name: propertyId.objectName,\n                        properties: {}\n                    };\n                    objectDefns.push({\n                        selector: selector,\n                        objects: [targetObjectDefn],\n                    });\n                }\n                targetObjectDefn.properties[propertyId.propertyName] = value;\n            }\n            function findWithMatchingSelector(objects, selector) {\n                debug.assertValue(objects, 'objects');\n                debug.assertAnyValue(selector, 'selector');\n                for (var i = 0, len = objects.length; i < len; i++) {\n                    var object = objects[i];\n                    if (data.Selector.equals(object.selector, selector))\n                        return object;\n                }\n            }\n            function findExistingObject(objectDefns, objectName) {\n                debug.assertValue(objectDefns, 'objectDefns');\n                debug.assertValue(objectName, 'objectName');\n                for (var i = 0, len = objectDefns.length; i < len; i++) {\n                    var objectDefn = objectDefns[i];\n                    if (objectDefn.name === objectName)\n                        return objectDefn;\n                }\n            }\n        })(DataViewObjectEvaluationUtils = data.DataViewObjectEvaluationUtils || (data.DataViewObjectEvaluationUtils = {}));\n    })(data = powerbi.data || (powerbi.data = {}));\n})(powerbi || (powerbi = {}));\n/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\nvar powerbi;\n(function (powerbi) {\n    var data;\n    (function (data) {\n        /** Responsible for evaluating object property expressions to be applied at various scopes in a DataView. */\n        var DataViewObjectEvaluator;\n        (function (DataViewObjectEvaluator) {\n            var colorValueType = powerbi.ValueType.fromDescriptor({ formatting: { color: true } });\n            var numericType = powerbi.ValueType.fromDescriptor({ numeric: true });\n            var textType = powerbi.ValueType.fromDescriptor({ text: true });\n            function run(evalContext, objectDescriptor, propertyDefinitions) {\n                debug.assertValue(evalContext, 'evalContext');\n                debug.assertAnyValue(objectDescriptor, 'objectDescriptor');\n                debug.assertValue(propertyDefinitions, 'propertyDefinitions');\n                if (!objectDescriptor)\n                    return;\n                var object, propertyDescriptors = objectDescriptor.properties;\n                for (var propertyName in propertyDefinitions) {\n                    var propertyDefinition = propertyDefinitions[propertyName], propertyDescriptor = propertyDescriptors[propertyName];\n                    if (!propertyDescriptor)\n                        continue;\n                    var propertyValue = evaluateProperty(evalContext, propertyDescriptor, propertyDefinition);\n                    if (propertyValue === undefined)\n                        continue;\n                    if (!object)\n                        object = {};\n                    object[propertyName] = propertyValue;\n                }\n                return object;\n            }\n            DataViewObjectEvaluator.run = run;\n            /** Note: Exported for testability */\n            function evaluateProperty(evalContext, propertyDescriptor, propertyDefinition) {\n                debug.assertValue(evalContext, 'evalContext');\n                debug.assertValue(propertyDescriptor, 'propertyDescriptor');\n                debug.assertValue(propertyDefinition, 'propertyDefinition');\n                var structuralType = propertyDescriptor.type;\n                if (structuralType && structuralType.expression)\n                    return propertyDefinition;\n                var value = evaluateValue(evalContext, propertyDefinition, powerbi.ValueType.fromDescriptor(propertyDescriptor.type));\n                if (value !== undefined || (propertyDefinition instanceof data.RuleEvaluation))\n                    return value;\n                return evaluateFill(evalContext, propertyDefinition, structuralType)\n                    || evaluateFillRule(evalContext, propertyDefinition, structuralType)\n                    || evaluateImage(evalContext, propertyDefinition, structuralType)\n                    || evaluateParagraphs(evalContext, propertyDefinition, structuralType)\n                    || propertyDefinition;\n            }\n            DataViewObjectEvaluator.evaluateProperty = evaluateProperty;\n            function evaluateFill(evalContext, fillDefn, type) {\n                var fillType = type.fill;\n                if (!fillType)\n                    return;\n                if (fillType && fillType.solid && fillType.solid.color && fillDefn.solid) {\n                    return {\n                        solid: {\n                            color: evaluateValue(evalContext, fillDefn.solid.color, powerbi.ValueType.fromExtendedType(powerbi.ExtendedType.Color)),\n                        }\n                    };\n                }\n            }\n            function evaluateFillRule(evalContext, fillRuleDefn, type) {\n                if (!type.fillRule)\n                    return;\n                if (fillRuleDefn.linearGradient2) {\n                    var linearGradient2 = fillRuleDefn.linearGradient2;\n                    return {\n                        linearGradient2: {\n                            min: evaluateColorStop(evalContext, linearGradient2.min),\n                            max: evaluateColorStop(evalContext, linearGradient2.max),\n                        }\n                    };\n                }\n                if (fillRuleDefn.linearGradient3) {\n                    var linearGradient3 = fillRuleDefn.linearGradient3;\n                    return {\n                        linearGradient3: {\n                            min: evaluateColorStop(evalContext, linearGradient3.min),\n                            mid: evaluateColorStop(evalContext, linearGradient3.mid),\n                            max: evaluateColorStop(evalContext, linearGradient3.max),\n                        }\n                    };\n                }\n            }\n            function evaluateColorStop(evalContext, colorStop) {\n                debug.assertValue(evalContext, 'evalContext');\n                debug.assertValue(colorStop, 'colorStop');\n                var step = {\n                    color: evaluateValue(evalContext, colorStop.color, colorValueType),\n                };\n                var value = evaluateValue(evalContext, colorStop.value, numericType);\n                if (value != null)\n                    step.value = value;\n                return step;\n            }\n            function evaluateImage(evalContext, definition, type) {\n                debug.assertValue(evalContext, 'evalContext');\n                debug.assertAnyValue(definition, 'definition');\n                debug.assertValue(type, 'type');\n                if (!type.image || !definition)\n                    return;\n                var value = {\n                    name: evaluateValue(evalContext, definition.name, textType),\n                    url: evaluateValue(evalContext, definition.url, powerbi.ValueType.fromDescriptor(powerbi.ImageDefinition.urlType)),\n                };\n                if (definition.scaling)\n                    value.scaling = evaluateValue(evalContext, definition.scaling, textType);\n                return value;\n            }\n            function evaluateParagraphs(evalContext, definition, type) {\n                debug.assertValue(evalContext, 'evalContext');\n                debug.assertAnyValue(definition, 'definition');\n                debug.assertValue(type, 'type');\n                if (!type.paragraphs || !definition)\n                    return;\n                return evaluateArrayCopyOnChange(evalContext, definition, evaluateParagraph);\n            }\n            function evaluateParagraph(evalContext, definition) {\n                debug.assertValue(evalContext, 'evalContext');\n                debug.assertValue(definition, 'definition');\n                var evaluated;\n                var definitionTextRuns = definition.textRuns;\n                var evaluatedTextRuns = evaluateArrayCopyOnChange(evalContext, definitionTextRuns, evaluateTextRun);\n                if (definitionTextRuns !== evaluatedTextRuns) {\n                    evaluated = _.clone(definition);\n                    evaluated.textRuns = evaluatedTextRuns;\n                }\n                return evaluated || definition;\n            }\n            function evaluateTextRun(evalContext, definition) {\n                debug.assertValue(evalContext, 'evalContext');\n                debug.assertValue(definition, 'definition');\n                var evaluated;\n                var definitionValue = definition.value;\n                var evaluatedValue = evaluateValue(evalContext, definitionValue, textType);\n                if (evaluatedValue !== undefined) {\n                    evaluated = _.clone(definition);\n                    evaluated.value = evaluatedValue;\n                }\n                return evaluated || definition;\n            }\n            /**\n             * Evaluates an array, and lazily copies on write whenever the evaluator function returns something\n             * other than the input to it.\n             */\n            function evaluateArrayCopyOnChange(evalContext, definitions, evaluator) {\n                debug.assertValue(evalContext, 'evalContext');\n                debug.assertValue(definitions, 'definitions');\n                debug.assertValue(evaluator, 'evaluator');\n                var evaluatedValues;\n                for (var i = 0, len = definitions.length; i < len; i++) {\n                    var definition = definitions[i];\n                    var evaluated = evaluator(evalContext, definition);\n                    // NOTE: the any casts here are necessary due to the compiler not knowing the relationship\n                    // between TEvaluated & TDefinition\n                    if (!evaluatedValues && definition !== evaluated) {\n                        evaluatedValues = _.take(definitions, i);\n                    }\n                    if (evaluatedValues) {\n                        evaluatedValues.push(evaluated);\n                    }\n                }\n                return evaluatedValues || definitions;\n            }\n            function evaluateValue(evalContext, definition, valueType) {\n                if (definition instanceof data.SQExpr)\n                    return ExpressionEvaluator.evaluate(definition, evalContext);\n                if (definition instanceof data.RuleEvaluation)\n                    return definition.evaluate(evalContext);\n            }\n            /** Responsible for evaluating SQExprs into values. */\n            var ExpressionEvaluator = (function (_super) {\n                __extends(ExpressionEvaluator, _super);\n                function ExpressionEvaluator() {\n                    _super.apply(this, arguments);\n                }\n                ExpressionEvaluator.evaluate = function (expr, evalContext) {\n                    if (expr == null)\n                        return;\n                    return expr.accept(ExpressionEvaluator.instance, evalContext);\n                };\n                ExpressionEvaluator.prototype.visitColumnRef = function (expr, evalContext) {\n                    return evalContext.getExprValue(expr);\n                };\n                ExpressionEvaluator.prototype.visitConstant = function (expr, evalContext) {\n                    return expr.value;\n                };\n                ExpressionEvaluator.prototype.visitMeasureRef = function (expr, evalContext) {\n                    return evalContext.getExprValue(expr);\n                };\n                ExpressionEvaluator.prototype.visitAggr = function (expr, evalContext) {\n                    return evalContext.getExprValue(expr);\n                };\n                ExpressionEvaluator.instance = new ExpressionEvaluator();\n                return ExpressionEvaluator;\n            })(data.DefaultSQExprVisitorWithArg);\n        })(DataViewObjectEvaluator = data.DataViewObjectEvaluator || (data.DataViewObjectEvaluator = {}));\n    })(data = powerbi.data || (powerbi.data = {}));\n})(powerbi || (powerbi = {}));\n/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\nvar powerbi;\n(function (powerbi) {\n    var data;\n    (function (data) {\n        var inherit = powerbi.Prototype.inherit;\n        var DataViewPivotCategorical;\n        (function (DataViewPivotCategorical) {\n            /**\n             * Pivots categories in a categorical DataView into valueGroupings.\n             * This is akin to a mathematical matrix transpose.\n             */\n            function apply(dataView) {\n                debug.assertValue(dataView, 'dataView');\n                var categorical = dataView.categorical;\n                if (!categorical)\n                    return null;\n                var categories = categorical.categories;\n                if (!categories || categories.length !== 1)\n                    return null;\n                var values = categorical.values;\n                if (_.isEmpty(values) || values.source)\n                    return null;\n                var category = categories[0], categoryIdentities = category.identity, categoryValues = category.values, pivotedColumns = [], pivotedValues = [];\n                for (var rowIdx = 0, rowCount = categoryValues.length; rowIdx < rowCount; rowIdx++) {\n                    var categoryValue = categoryValues[rowIdx], categoryIdentity = categoryIdentities[rowIdx];\n                    for (var colIdx = 0, colCount = values.length; colIdx < colCount; colIdx++) {\n                        var value = values[colIdx], pivotedColumn = inherit(value.source);\n                        // A value has a series group, which is not implemented for pivoting -- just give up.\n                        if (value.identity)\n                            return null;\n                        pivotedColumn.groupName = categoryValue;\n                        var pivotedValue = {\n                            source: pivotedColumn,\n                            values: [value.values[rowIdx]],\n                            identity: categoryIdentity,\n                            min: value.min,\n                            max: value.max,\n                            subtotal: value.subtotal\n                        };\n                        var highlights = value.highlights;\n                        if (highlights) {\n                            pivotedValue.highlights = [highlights[rowIdx]];\n                        }\n                        pivotedColumns.push(pivotedColumn);\n                        pivotedValues.push(pivotedValue);\n                    }\n                }\n                var pivotedMetadata = inherit(dataView.metadata);\n                pivotedMetadata.columns = pivotedColumns;\n                values = data.DataViewTransform.createValueColumns(pivotedValues, category.identityFields, category.source);\n                return {\n                    metadata: pivotedMetadata,\n                    categorical: {\n                        values: values,\n                    },\n                    matrix: dataView.matrix\n                };\n            }\n            DataViewPivotCategorical.apply = apply;\n        })(DataViewPivotCategorical = data.DataViewPivotCategorical || (data.DataViewPivotCategorical = {}));\n    })(data = powerbi.data || (powerbi.data = {}));\n})(powerbi || (powerbi = {}));\n/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\nvar powerbi;\n(function (powerbi) {\n    var data;\n    (function (data) {\n        var DataViewPivotMatrix;\n        (function (DataViewPivotMatrix) {\n            /** Pivots row hierarchy members in a matrix DataView into column hierarchy. */\n            function apply(dataViewMatrix, context) {\n                debug.assertValue(dataViewMatrix, 'dataViewMatrix');\n                if (!context.columnHierarchyRewritten)\n                    dataViewMatrix.columns = powerbi.Prototype.inherit(dataViewMatrix.columns);\n                var columns = dataViewMatrix.columns;\n                if (!context.rowHierarchyRewritten)\n                    dataViewMatrix.rows = powerbi.Prototype.inherit(dataViewMatrix.rows);\n                var rows = dataViewMatrix.rows;\n                if (columns.levels.length > 1)\n                    return;\n                var pivotedRowNode = {\n                    level: 0\n                };\n                var columnLeafNodes = columns.root.children;\n                var columnCount = columnLeafNodes.length;\n                if (columnCount > 0) {\n                    var index = 0;\n                    var callback = function (node) {\n                        // Collect values and remove them from row leaves\n                        if (node.values) {\n                            if (!pivotedRowNode.values)\n                                pivotedRowNode.values = {};\n                            for (var i = 0; i < columnCount; i++)\n                                pivotedRowNode.values[index++] = node.values[i];\n                            delete node.values;\n                        }\n                        // Create measure headers if there are more than one measures\n                        if (columnCount > 1) {\n                            var level = node.level + 1;\n                            if (!node.children)\n                                node.children = [];\n                            for (var j = 0; j < columnCount; j++) {\n                                var measureHeaderLeaf = { level: level };\n                                // Copy levelSourceIndex from columnLeafNodes (as they might have been reordered)\n                                var columnLeafNode = columnLeafNodes[j];\n                                measureHeaderLeaf.levelSourceIndex = columnLeafNode.levelSourceIndex;\n                                if (node.isSubtotal)\n                                    measureHeaderLeaf.isSubtotal = true;\n                                node.children.push(measureHeaderLeaf);\n                            }\n                        }\n                    };\n                    if (context.hierarchyTreesRewritten) {\n                        forEachLeaf(rows.root, callback);\n                    }\n                    else {\n                        dataViewMatrix.columns.root = cloneTreeExecuteOnLeaf(rows.root, callback);\n                    }\n                }\n                else {\n                    if (!context.hierarchyTreesRewritten) {\n                        dataViewMatrix.columns.root = cloneTree(rows.root);\n                    }\n                }\n                if (columnCount > 1) {\n                    // Keep measure headers, but move them to the innermost level\n                    var level = { sources: columns.levels[0].sources };\n                    rows.levels.push(level);\n                    columns.levels.length = 0;\n                }\n                if (context.hierarchyTreesRewritten) {\n                    dataViewMatrix.columns.root = rows.root;\n                    dataViewMatrix.rows.root = {\n                        children: [pivotedRowNode]\n                    };\n                }\n                else {\n                    var updatedRowRoot = powerbi.Prototype.inherit(dataViewMatrix.rows.root);\n                    updatedRowRoot.children = [pivotedRowNode];\n                    dataViewMatrix.rows.root = updatedRowRoot;\n                }\n                dataViewMatrix.columns.levels = rows.levels;\n                dataViewMatrix.rows.levels = [];\n            }\n            DataViewPivotMatrix.apply = apply;\n            function forEachLeaf(root, callback) {\n                var children = root.children;\n                if (children && children.length > 0) {\n                    for (var i = 0, ilen = children.length; i < ilen; i++)\n                        forEachLeaf(children[i], callback);\n                    return;\n                }\n                callback(root);\n            }\n            function cloneTree(node) {\n                return cloneTreeExecuteOnLeaf(node);\n            }\n            DataViewPivotMatrix.cloneTree = cloneTree;\n            function cloneTreeExecuteOnLeaf(node, callback) {\n                var updatedNode = powerbi.Prototype.inherit(node);\n                var children = node.children;\n                if (children && children.length > 0) {\n                    var newChildren = [];\n                    for (var i = 0, ilen = children.length; i < ilen; i++) {\n                        var updatedChild = cloneTreeExecuteOnLeaf(children[i], callback);\n                        newChildren.push(updatedChild);\n                    }\n                    updatedNode.children = newChildren;\n                }\n                else {\n                    if (callback)\n                        callback(updatedNode);\n                }\n                return updatedNode;\n            }\n            DataViewPivotMatrix.cloneTreeExecuteOnLeaf = cloneTreeExecuteOnLeaf;\n        })(DataViewPivotMatrix = data.DataViewPivotMatrix || (data.DataViewPivotMatrix = {}));\n    })(data = powerbi.data || (powerbi.data = {}));\n})(powerbi || (powerbi = {}));\n/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\nvar powerbi;\n(function (powerbi) {\n    var data;\n    (function (data) {\n        var DataViewSelfCrossJoin;\n        (function (DataViewSelfCrossJoin) {\n            /**\n             * Returns a new DataView based on the original, with a single DataViewCategorical category that is \"cross joined\"\n             * to itself as a value grouping.\n             * This is the mathematical equivalent of taking an array and turning it into an identity matrix.\n             */\n            function apply(dataView) {\n                debug.assertValue(dataView, 'dataView');\n                if (!dataView.categorical)\n                    return;\n                var dataViewCategorical = dataView.categorical;\n                if (!dataViewCategorical.categories || dataViewCategorical.categories.length !== 1)\n                    return;\n                if (dataViewCategorical.values && dataViewCategorical.values.source)\n                    return;\n                return applyCategorical(dataView.metadata, dataViewCategorical);\n            }\n            DataViewSelfCrossJoin.apply = apply;\n            function applyCategorical(dataViewMetadata, dataViewCategorical) {\n                debug.assertValue(dataViewMetadata, 'dataViewMetadata');\n                debug.assertValue(dataViewCategorical, 'dataViewCategorical');\n                debug.assertValue(dataViewCategorical.categories, 'dataViewCategorical.categories');\n                var category = dataViewCategorical.categories[0], categoryValues = category.values, categoryLength = categoryValues.length;\n                if (categoryLength === 0)\n                    return;\n                var valuesArray = dataViewCategorical.values\n                    ? dataViewCategorical.values.grouped()[0].values\n                    : [];\n                var transformedDataView = data.createCategoricalDataViewBuilder()\n                    .withCategories(dataViewCategorical.categories)\n                    .withGroupedValues(createGroupedValues(category, categoryValues, categoryLength, valuesArray))\n                    .build();\n                dataViewMetadata = powerbi.Prototype.inherit(dataViewMetadata);\n                dataViewMetadata.columns = transformedDataView.metadata.columns;\n                return {\n                    metadata: dataViewMetadata,\n                    categorical: transformedDataView.categorical,\n                };\n            }\n            function createGroupedValues(category, categoryValues, categoryLength, valuesArray) {\n                debug.assertValue(category, 'category');\n                debug.assertValue(categoryValues, 'categoryValues');\n                debug.assertValue(categoryLength, 'categoryLength');\n                debug.assertValue(valuesArray, 'valuesArray');\n                var nullValuesArray = createNullValues(categoryLength), valuesArrayLen = valuesArray.length, seriesData = [];\n                for (var i = 0; i < categoryLength; i++) {\n                    var seriesDataItem = [];\n                    for (var j = 0; j < valuesArrayLen; j++) {\n                        var originalValueColumn = valuesArray[j], originalHighlightValues = originalValueColumn.highlights;\n                        var seriesDataItemCategory = {\n                            values: inheritArrayWithValue(nullValuesArray, originalValueColumn.values, i),\n                        };\n                        if (originalHighlightValues)\n                            seriesDataItemCategory.highlights = inheritArrayWithValue(nullValuesArray, originalHighlightValues, i);\n                        seriesDataItem.push(seriesDataItemCategory);\n                    }\n                    seriesData.push(seriesDataItem);\n                }\n                return {\n                    groupColumn: {\n                        source: category.source,\n                        identityFrom: { fields: category.identityFields, identities: category.identity },\n                        values: category.values,\n                    },\n                    valueColumns: _.map(valuesArray, function (v) { return { source: v.source }; }),\n                    data: seriesData,\n                };\n            }\n        })(DataViewSelfCrossJoin = data.DataViewSelfCrossJoin || (data.DataViewSelfCrossJoin = {}));\n        function createNullValues(length) {\n            debug.assertValue(length, 'length');\n            var array = new Array(length);\n            for (var i = 0; i < length; i++)\n                array[i] = null;\n            return array;\n        }\n        function inheritArrayWithValue(nullValues, original, index) {\n            var inherited = powerbi.Prototype.inherit(nullValues);\n            inherited[index] = original[index];\n            return inherited;\n        }\n    })(data = powerbi.data || (powerbi.data = {}));\n})(powerbi || (powerbi = {}));\n/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\nvar powerbi;\n(function (powerbi) {\n    var data;\n    (function (data) {\n        var ArrayExtensions = jsCommon.ArrayExtensions;\n        var DataShapeBindingDataReduction = powerbi.data.DataShapeBindingDataReduction;\n        var DataViewPivotCategoricalToPrimaryGroups;\n        (function (DataViewPivotCategoricalToPrimaryGroups) {\n            /**\n             * If mapping requests cross axis data reduction and the binding has secondary grouping, mutates the binding to\n             * pivot the secondary before the primary.\n             */\n            function pivotBinding(binding, allMappings, finalMapping, defaultDataVolume) {\n                // unpivot is inferred from result in DataViewTransform.apply but it does not have the\n                // compiled mappings available, let alone the merged mapping, only the original\n                // DataViewMappings. to keep that inference easy, only apply pivot when there's\n                // only one matching mapping\n                if (!allMappings || allMappings.length !== 1)\n                    return;\n                if (!finalMapping.categorical || !finalMapping.categorical.dataReductionAlgorithm)\n                    return;\n                if (!binding)\n                    return;\n                if (!canPivotCategorical(binding, finalMapping))\n                    return;\n                // pivot secondary onto front of primary\n                binding.Primary.Groupings = [binding.Secondary.Groupings[0], binding.Primary.Groupings[0]];\n                binding.Secondary = undefined;\n                // set primary to pivot reduction\n                binding.DataReduction = {\n                    Primary: DataShapeBindingDataReduction.createFrom(finalMapping.categorical.dataReductionAlgorithm),\n                    DataVolume: finalMapping.categorical.dataVolume || defaultDataVolume,\n                };\n            }\n            DataViewPivotCategoricalToPrimaryGroups.pivotBinding = pivotBinding;\n            /** narrowly targets scatter chart scenario for now to keep code simple */\n            function isPivotableAxis(axis) {\n                return axis\n                    && axis.Groupings\n                    && axis.Groupings.length === 1\n                    && !_.isEmpty(axis.Groupings[0].Projections)\n                    && !axis.Groupings[0].Subtotal\n                    && _.isEmpty(axis.Groupings[0].SuppressedProjections);\n            }\n            function canPivotCategorical(binding, mapping) {\n                if (!isPivotableAxis(binding.Primary))\n                    return false;\n                if (!isPivotableAxis(binding.Secondary) || binding.Secondary.Groupings[0].Projections.length !== 1)\n                    return false;\n                // don't pivot if either axis has a data reduction\n                if (binding.DataReduction && (binding.DataReduction.Primary || binding.DataReduction.Secondary))\n                    return false;\n                return true;\n            }\n            function unpivotResult(oldDataView, selects, dataViewMappings, projectionActiveItems) {\n                if (!inferUnpivotTransform(selects, dataViewMappings, oldDataView, projectionActiveItems))\n                    return oldDataView;\n                // This returns a subsetted version of the DataView rather than using prototypal inheritance because\n                // any dataviews in the old one (including ones invented after this code is written) will correspond\n                // to a pivoted query result and therefore will be in the wrong shape for the unpivoted query the\n                // querying code made.\n                var newDataView = {\n                    metadata: {\n                        columns: ArrayExtensions.copy(oldDataView.metadata.columns),\n                    },\n                };\n                // preserve view types that aren't affected by pivoting\n                if (oldDataView.single)\n                    newDataView.single = oldDataView.single;\n                if (oldDataView.table)\n                    newDataView.table = oldDataView.table;\n                // other views are derived from matrix\n                if (oldDataView.matrix) {\n                    var newDataViewMatrix = unpivotMatrix(oldDataView.matrix);\n                    // categorical only if there's data\n                    if (!_.isEmpty(newDataViewMatrix.valueSources))\n                        newDataView.categorical = categoricalFromUnpivotedMatrix(newDataViewMatrix, newDataView.metadata.columns);\n                }\n                return newDataView;\n            }\n            DataViewPivotCategoricalToPrimaryGroups.unpivotResult = unpivotResult;\n            /** Get roles from a role mapping */\n            function getRolesInRoleMapping(role, roleMapping) {\n                if (!roleMapping)\n                    return;\n                if (roleMapping.bind)\n                    role(roleMapping.bind.to);\n                if (roleMapping.for)\n                    role(roleMapping.for.in);\n                if (roleMapping.group) {\n                    role(roleMapping.group.by);\n                    getRolesInRoleMappings(role, roleMapping.group.select);\n                }\n                getRolesInRoleMappings(role, roleMapping.select);\n            }\n            /** Get roles from a list of role mappings */\n            function getRolesInRoleMappings(role, roleMappings) {\n                if (!_.isEmpty(roleMappings)) {\n                    for (var _i = 0; _i < roleMappings.length; _i++) {\n                        var roleMapping = roleMappings[_i];\n                        getRolesInRoleMapping(role, roleMapping);\n                    }\n                }\n            }\n            /**\n             * Infer from the query result and the visual mappings whether the query was pivoted.\n             * Narrowly targets scatter chart scenario for now to keep code simple\n             */\n            function inferUnpivotTransform(selects, dataViewMappings, dataView, projectionActiveItems) {\n                if (!selects || !dataViewMappings || !dataView)\n                    return false;\n                // select applicable mappings based on select roles\n                var roleKinds = data.DataViewSelectTransform.createRoleKindFromMetadata(selects, dataView.metadata);\n                var projections = data.DataViewSelectTransform.projectionsFromSelects(selects, projectionActiveItems);\n                dataViewMappings = powerbi.DataViewAnalysis.chooseDataViewMappings(projections, dataViewMappings, roleKinds).supportedMappings;\n                // NOTE: limiting to simple situation that handles scatter for now - see the other side in canPivotCategorical\n                if (!dataViewMappings || dataViewMappings.length !== 1)\n                    return false;\n                var categoricalMapping = dataViewMappings[0].categorical;\n                if (!categoricalMapping)\n                    return false;\n                // pivoted query will have produced a matrix\n                var matrixDataview = dataView.matrix;\n                if (!matrixDataview)\n                    return false;\n                // matrix must have two levels of grouping\n                if (!matrixDataview.rows || !matrixDataview.rows.levels || matrixDataview.rows.levels.length !== 2)\n                    return false;\n                // get category and value grouping roles\n                var categoryGroups = [];\n                var valueGroups = [];\n                var addGroupingRole = function (roleName, groups) {\n                    var roleProjections = projections[roleName];\n                    if (!roleProjections)\n                        return;\n                    for (var _i = 0, _a = roleProjections.all(); _i < _a.length; _i++) {\n                        var roleProjection = _a[_i];\n                        if (roleKinds[roleProjection.queryRef] === powerbi.VisualDataRoleKind.Grouping)\n                            groups.push(roleProjection.queryRef);\n                    }\n                };\n                getRolesInRoleMapping(function (roleName) { addGroupingRole(roleName, categoryGroups); }, categoricalMapping.categories);\n                getRolesInRoleMapping(function (roleName) { addGroupingRole(roleName, valueGroups); }, categoricalMapping.values);\n                // need both for pivot to have been done\n                if (_.isEmpty(categoryGroups) || _.isEmpty(valueGroups))\n                    return false;\n                // if there was a pivot, there won't be any measures left in the columns\n                for (var _i = 0, _a = matrixDataview.columns.levels; _i < _a.length; _i++) {\n                    var level = _a[_i];\n                    for (var _b = 0, _c = level.sources; _b < _c.length; _b++) {\n                        var source = _c[_b];\n                        if (!source.isMeasure)\n                            return false;\n                    }\n                }\n                return true;\n            }\n            /**\n             * matrix will have two groupings in the rows, outer (series) and inner (categories), and none in the columns.\n             * this function changes that so that the categories become the rows and the series the columns.\n             */\n            function unpivotMatrix(oldMatrix) {\n                var oldRows = oldMatrix.rows;\n                var oldRoot = oldRows.root;\n                var oldChildren = oldRoot.children;\n                // series are the outer grouping\n                var series = [];\n                var seriesIdLevel = oldRows.levels[0];\n                var seriesIdFields = oldRoot.childIdentityFields;\n                // categories are the inner grouping. \n                var categories = [];\n                var categoryIdLevel = oldRows.levels[1];\n                var categoryIdFields = oldChildren[0].childIdentityFields;\n                var measureCount = oldMatrix.valueSources.length;\n                // within each series value, the category list may not be complete so cannot simply use the inner loop index\n                // to reference it.\n                var findcat = function (identity) {\n                    return _.findIndex(categories, function (pair) { return powerbi.DataViewScopeIdentity.equals(pair.identity, identity); });\n                };\n                // collect series and categories from the row hierarchy\n                for (var _i = 0; _i < oldChildren.length; _i++) {\n                    var seriesNode = oldChildren[_i];\n                    series.push({ value: seriesNode.value, identity: seriesNode.identity });\n                    for (var _a = 0, _b = seriesNode.children; _a < _b.length; _a++) {\n                        var categoryNode = _b[_a];\n                        var catindex = findcat(categoryNode.identity);\n                        if (catindex === -1)\n                            categories.push({ value: categoryNode.value, identity: categoryNode.identity });\n                    }\n                }\n                // extract intersection values from pivoted matrix\n                // values will be indexed by categories then series\n                var matrixValues = new Array(categories.length);\n                for (var j = 0; j < series.length; ++j) {\n                    var seriesNode = oldChildren[j];\n                    for (var _c = 0, _d = seriesNode.children; _c < _d.length; _c++) {\n                        var categoryNode = _d[_c];\n                        var i = findcat(categoryNode.identity); // must lookup actual category index\n                        if (!matrixValues[i])\n                            matrixValues[i] = new Array(series.length);\n                        matrixValues[i][j] = categoryNode.values;\n                    }\n                }\n                // unpivoted matrix columns are the series\n                var newColumns = {\n                    root: {\n                        children: _.map(series, function (s) {\n                            return {\n                                level: 0,\n                                value: s.value,\n                                identity: s.identity,\n                            };\n                        }),\n                        childIdentityFields: seriesIdFields,\n                    },\n                    levels: [\n                        seriesIdLevel,\n                    ],\n                };\n                if (measureCount > 0) {\n                    var newColChildren = _.map(oldMatrix.columns.root.children, function (srcnode) {\n                        var dstnode = { level: 1 };\n                        if (srcnode.levelSourceIndex)\n                            dstnode.levelSourceIndex = srcnode.levelSourceIndex;\n                        return dstnode;\n                    });\n                    for (var i = 0; i < newColumns.root.children.length; ++i)\n                        newColumns.root.children[i].children = newColChildren;\n                    newColumns.levels.push(oldMatrix.columns.levels[0]);\n                }\n                // unpivoted rows are the categories\n                var newRows = {\n                    root: {\n                        children: _.map(categories, function (s) { return { level: 0, value: s.value, identity: s.identity }; }),\n                        childIdentityFields: categoryIdFields,\n                    },\n                    levels: [\n                        categoryIdLevel,\n                    ],\n                };\n                // put values into rows\n                if (measureCount > 0) {\n                    for (var i = 0; i < categories.length; ++i) {\n                        var row = newRows.root.children[i];\n                        var rowValues = {};\n                        for (var j = 0; j < series.length; ++j) {\n                            var mvalues = matrixValues[i][j];\n                            for (var k = 0; k < measureCount; ++k) {\n                                var l = j * measureCount + k;\n                                rowValues[l] = !mvalues\n                                    ? (k === 0 ? { value: null } : { value: null, valueSourceIndex: k })\n                                    : mvalues[k];\n                            }\n                        }\n                        row.values = rowValues;\n                    }\n                }\n                var newMatrix = {\n                    rows: newRows,\n                    columns: newColumns,\n                    valueSources: oldMatrix.valueSources,\n                };\n                return newMatrix;\n            }\n            /** build a categorical data view from an unpivoted matrix. */\n            function categoricalFromUnpivotedMatrix(matrix, columnMetadata) {\n                var seriesCount = matrix.columns.root.children.length;\n                var measureMetadata = matrix.valueSources;\n                var measureCount = measureMetadata.length;\n                // create categories from rows\n                var categories = [\n                    {\n                        source: matrix.rows.levels[0].sources[0],\n                        values: _.map(matrix.rows.root.children, function (x) { return x.value; }),\n                        identity: _.map(matrix.rows.root.children, function (x) { return x.identity; }),\n                        identityFields: matrix.rows.root.childIdentityFields,\n                    },\n                ];\n                // create grouped values\n                var groups = [];\n                for (var j = 0; j < seriesCount; ++j) {\n                    var seriesColumn = matrix.columns.root.children[j];\n                    var group = {\n                        values: [],\n                        identity: seriesColumn.identity,\n                        name: seriesColumn.value || null,\n                    };\n                    groups.push(group);\n                    for (var k = 0; k < measureCount; ++k) {\n                        var valueColumnMetadataSrc = measureMetadata[k];\n                        var valueColumnMetadataDst = {};\n                        for (var key in valueColumnMetadataSrc)\n                            valueColumnMetadataDst[key] = valueColumnMetadataSrc[key];\n                        valueColumnMetadataDst.groupName = group.name;\n                        columnMetadata.push(valueColumnMetadataDst);\n                        var valueColumn = {\n                            source: valueColumnMetadataDst,\n                            values: [],\n                            identity: group.identity,\n                        };\n                        group.values.push(valueColumn);\n                        // grab measure values in the group from across rows of matrix\n                        var index = k + j * measureCount;\n                        for (var _i = 0, _a = matrix.rows.root.children; _i < _a.length; _i++) {\n                            var categoryNode = _a[_i];\n                            var value = categoryNode.values[index].value;\n                            valueColumn.values.push(value);\n                        }\n                    }\n                }\n                // and now ungrouped\n                var values = [];\n                for (var _b = 0; _b < groups.length; _b++) {\n                    var group = groups[_b];\n                    for (var k = 0; k < measureCount; ++k) {\n                        values.push(group.values[k]);\n                    }\n                }\n                values.grouped = function () { return groups; };\n                values.identityFields = matrix.columns.root.childIdentityFields;\n                values.source = matrix.columns.levels[0].sources[0];\n                // final assembly\n                var categorical = {\n                    categories: categories,\n                    values: values,\n                };\n                return categorical;\n            }\n        })(DataViewPivotCategoricalToPrimaryGroups = data.DataViewPivotCategoricalToPrimaryGroups || (data.DataViewPivotCategoricalToPrimaryGroups = {}));\n    })(data = powerbi.data || (powerbi.data = {}));\n})(powerbi || (powerbi = {}));\n/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\nvar powerbi;\n(function (powerbi) {\n    var data;\n    (function (data) {\n        var inherit = powerbi.Prototype.inherit;\n        var inheritSingle = powerbi.Prototype.inheritSingle;\n        var ArrayExtensions = jsCommon.ArrayExtensions;\n        var EnumExtensions = jsCommon.EnumExtensions;\n        // TODO: refactor & focus DataViewTransform into a service with well-defined dependencies.\n        var DataViewTransform;\n        (function (DataViewTransform) {\n            function apply(options) {\n                debug.assertValue(options, 'options');\n                // TODO: Flow a context object through to capture errors/warnings about what happens here for better diagnosability.\n                var prototype = options.prototype, objectDescriptors = options.objectDescriptors, dataViewMappings = options.dataViewMappings, transforms = options.transforms, projectionActiveItems = transforms && transforms.roles && transforms.roles.activeItems, colorAllocatorFactory = options.colorAllocatorFactory, dataRoles = options.dataRoles;\n                if (!prototype)\n                    return transformEmptyDataView(objectDescriptors, transforms, colorAllocatorFactory);\n                if (!transforms)\n                    return [prototype];\n                // Transform Query DataView\n                prototype = data.DataViewPivotCategoricalToPrimaryGroups.unpivotResult(prototype, transforms.selects, dataViewMappings, projectionActiveItems);\n                var transformedDataViews = transformQueryToVisualDataView(prototype, transforms, objectDescriptors, dataViewMappings, colorAllocatorFactory, dataRoles);\n                // Transform and generate derived visual DataViews\n                transformedDataViews = data.DataViewRegression.run({\n                    dataViewMappings: dataViewMappings,\n                    transformedDataViews: transformedDataViews,\n                    dataRoles: dataRoles,\n                    objectDescriptors: objectDescriptors,\n                    objectDefinitions: transforms.objects,\n                    colorAllocatorFactory: colorAllocatorFactory,\n                    transformSelects: transforms.selects,\n                    dataView: prototype,\n                    projectionActiveItems: projectionActiveItems,\n                });\n                return transformedDataViews;\n            }\n            DataViewTransform.apply = apply;\n            function transformQueryToVisualDataView(prototype, transforms, objectDescriptors, dataViewMappings, colorAllocatorFactory, dataRoles) {\n                var transformedDataViews = [];\n                var splits = transforms.splits;\n                if (_.isEmpty(splits)) {\n                    transformedDataViews.push(transformDataView(prototype, objectDescriptors, dataViewMappings, transforms, colorAllocatorFactory, dataRoles));\n                }\n                else {\n                    for (var _i = 0; _i < splits.length; _i++) {\n                        var split = splits[_i];\n                        var transformed = transformDataView(prototype, objectDescriptors, dataViewMappings, transforms, colorAllocatorFactory, dataRoles, split.selects);\n                        transformedDataViews.push(transformed);\n                    }\n                }\n                return transformedDataViews;\n            }\n            function transformEmptyDataView(objectDescriptors, transforms, colorAllocatorFactory) {\n                if (transforms && transforms.objects) {\n                    var emptyDataView = {\n                        metadata: {\n                            columns: [],\n                        }\n                    };\n                    transformObjects(emptyDataView, 0 /* None */, objectDescriptors, transforms.objects, transforms.selects, colorAllocatorFactory);\n                    return [emptyDataView];\n                }\n                return [];\n            }\n            function transformDataView(prototype, objectDescriptors, roleMappings, transforms, colorAllocatorFactory, dataRoles, selectsToInclude) {\n                debug.assertValue(prototype, 'prototype');\n                var targetKinds = getTargetKinds(roleMappings);\n                var transformed = inherit(prototype);\n                transformed.metadata = inherit(prototype.metadata);\n                var projectionOrdering = transforms.roles && transforms.roles.ordering;\n                var projectionActiveItems = transforms.roles && transforms.roles.activeItems;\n                transformed = transformSelects(transformed, roleMappings, transforms.selects, projectionOrdering, selectsToInclude);\n                transformObjects(transformed, targetKinds, objectDescriptors, transforms.objects, transforms.selects, colorAllocatorFactory);\n                // Note: Do this step after transformObjects() so that metadata columns in 'transformed' have roles and objects.general.formatString populated\n                transformed = data.DataViewConcatenateCategoricalColumns.detectAndApply(transformed, roleMappings, projectionOrdering, transforms.selects, projectionActiveItems);\n                data.DataViewNormalizeValues.apply({\n                    dataview: transformed,\n                    dataViewMappings: roleMappings,\n                    dataRoles: dataRoles,\n                });\n                return transformed;\n            }\n            function getTargetKinds(roleMappings) {\n                debug.assertAnyValue(roleMappings, 'roleMappings');\n                if (!roleMappings)\n                    return 0 /* None */;\n                var result = 0 /* None */;\n                for (var _i = 0; _i < roleMappings.length; _i++) {\n                    var roleMapping = roleMappings[_i];\n                    if (roleMapping.categorical)\n                        result |= 1 /* Categorical */;\n                    if (roleMapping.matrix)\n                        result |= 2 /* Matrix */;\n                    if (roleMapping.single)\n                        result |= 4 /* Single */;\n                    if (roleMapping.table)\n                        result |= 8 /* Table */;\n                    if (roleMapping.tree)\n                        result |= 16 /* Tree */;\n                }\n                return result;\n            }\n            function transformSelects(dataView, roleMappings, selectTransforms, projectionOrdering, selectsToInclude) {\n                var columnRewrites = [];\n                if (selectTransforms) {\n                    dataView.metadata.columns = applyTransformsToColumns(dataView.metadata.columns, selectTransforms, columnRewrites);\n                }\n                // NOTE: no rewrites necessary for Tree (it doesn't reference the columns)\n                if (dataView.categorical) {\n                    dataView.categorical = applyRewritesToCategorical(dataView.categorical, columnRewrites, selectsToInclude);\n                    // NOTE: This is slightly DSR-specific.\n                    dataView = pivotIfNecessary(dataView, roleMappings);\n                }\n                if (dataView.matrix) {\n                    var matrixTransformationContext = {\n                        rowHierarchyRewritten: false,\n                        columnHierarchyRewritten: false,\n                        hierarchyTreesRewritten: false\n                    };\n                    dataView.matrix = applyRewritesToMatrix(dataView.matrix, columnRewrites, roleMappings, projectionOrdering, matrixTransformationContext);\n                    if (shouldPivotMatrix(dataView.matrix, roleMappings))\n                        data.DataViewPivotMatrix.apply(dataView.matrix, matrixTransformationContext);\n                }\n                if (dataView.table)\n                    dataView.table = applyRewritesToTable(dataView.table, columnRewrites, roleMappings, projectionOrdering);\n                return dataView;\n            }\n            function applyTransformsToColumns(prototypeColumns, selects, rewrites) {\n                debug.assertValue(prototypeColumns, 'columns');\n                if (!selects)\n                    return prototypeColumns;\n                //column may contain undefined entries\n                var columns = inherit(prototypeColumns);\n                for (var i = 0, len = prototypeColumns.length; i < len; i++) {\n                    var prototypeColumn = prototypeColumns[i];\n                    var select = selects[prototypeColumn.index];\n                    if (!select)\n                        continue;\n                    var column = columns[i] = inherit(prototypeColumn);\n                    if (select.roles)\n                        column.roles = select.roles;\n                    if (select.type)\n                        column.type = select.type;\n                    column.format = getFormatForColumn(select, column);\n                    if (select.displayName)\n                        column.displayName = select.displayName;\n                    if (select.queryName)\n                        column.queryName = select.queryName;\n                    if (select.kpi)\n                        column.kpi = select.kpi;\n                    if (select.sort)\n                        column.sort = select.sort;\n                    if (select.discourageAggregationAcrossGroups)\n                        column.discourageAggregationAcrossGroups = select.discourageAggregationAcrossGroups;\n                    rewrites.push({\n                        from: prototypeColumn,\n                        to: column,\n                    });\n                }\n                return columns;\n            }\n            /**\n             * Get the column format. Order of precendence is:\n             *  1. Select format\n             *  2. Column format\n             */\n            function getFormatForColumn(select, column) {\n                // TODO: we already copied the select.Format to column.format, we probably don't need this check\n                return select.format || column.format;\n            }\n            function applyRewritesToCategorical(prototype, columnRewrites, selectsToInclude) {\n                debug.assertValue(prototype, 'prototype');\n                debug.assertValue(columnRewrites, 'columnRewrites');\n                var categorical = inherit(prototype);\n                function override(value) {\n                    var rewrittenSource = findOverride(value.source, columnRewrites);\n                    if (rewrittenSource) {\n                        var rewritten = inherit(value);\n                        rewritten.source = rewrittenSource;\n                        return rewritten;\n                    }\n                }\n                var categories = powerbi.Prototype.overrideArray(prototype.categories, override);\n                if (categories)\n                    categorical.categories = categories;\n                var values = powerbi.Prototype.overrideArray(prototype.values, override);\n                if (values) {\n                    if (selectsToInclude) {\n                        for (var i = values.length - 1; i >= 0; i--) {\n                            if (!selectsToInclude[values[i].source.index])\n                                values.splice(i, 1);\n                        }\n                    }\n                    if (values.source) {\n                        if (selectsToInclude && !selectsToInclude[values.source.index]) {\n                            values.source = undefined;\n                        }\n                        else {\n                            var rewrittenValuesSource = findOverride(values.source, columnRewrites);\n                            if (rewrittenValuesSource)\n                                values.source = rewrittenValuesSource;\n                        }\n                    }\n                    categorical.values = values;\n                    setGrouped(values);\n                }\n                return categorical;\n            }\n            function applyRewritesToTable(prototype, columnRewrites, roleMappings, projectionOrdering) {\n                debug.assertValue(prototype, 'prototype');\n                debug.assertValue(columnRewrites, 'columnRewrites');\n                // Don't perform this potentially expensive transform unless we actually have a table.\n                // When we switch to lazy per-visual DataView creation, we'll be able to remove this check.\n                if (!roleMappings || roleMappings.length !== 1 || !roleMappings[0].table)\n                    return prototype;\n                var table = inherit(prototype);\n                // Copy the rewritten columns into the table view\n                var override = function (metadata) { return findOverride(metadata, columnRewrites); };\n                var columns = powerbi.Prototype.overrideArray(prototype.columns, override);\n                if (columns)\n                    table.columns = columns;\n                if (!projectionOrdering)\n                    return table;\n                var newToOldPositions = createTableColumnPositionMapping(projectionOrdering, columnRewrites);\n                if (!newToOldPositions)\n                    return table;\n                // Reorder the columns\n                var columnsClone = columns.slice(0);\n                var keys = Object.keys(newToOldPositions);\n                for (var i = 0, len = keys.length; i < len; i++) {\n                    var sourceColumn = columnsClone[newToOldPositions[keys[i]]];\n                    // In the case we've hit the end of our columns array, but still have position reordering keys,\n                    // there is a duplicate column so we will need to add a new column for the duplicate data\n                    if (i === columns.length)\n                        columns.push(sourceColumn);\n                    else {\n                        debug.assert(i < columns.length, 'The column index is out of range for reordering.');\n                        columns[i] = sourceColumn;\n                    }\n                }\n                // Reorder the rows\n                var rows = powerbi.Prototype.overrideArray(table.rows, function (row) {\n                    var newRow = [];\n                    for (var i = 0, len = keys.length; i < len; ++i)\n                        newRow[i] = row[newToOldPositions[keys[i]]];\n                    return newRow;\n                });\n                if (rows)\n                    table.rows = rows;\n                return table;\n            }\n            /** Creates a mapping of new position to original position. */\n            function createTableColumnPositionMapping(projectionOrdering, columnRewrites) {\n                var roles = Object.keys(projectionOrdering);\n                // If we have more than one role then the ordering of columns between roles is ambiguous, so don't reorder anything.\n                if (roles.length !== 1)\n                    return;\n                var role = roles[0], originalOrder = _.map(columnRewrites, function (rewrite) { return rewrite.from.index; }), newOrder = projectionOrdering[role];\n                // Optimization: avoid rewriting the table if all columns are in their default positions.\n                if (ArrayExtensions.sequenceEqual(originalOrder, newOrder, function (x, y) { return x === y; }))\n                    return;\n                return createOrderMapping(originalOrder, newOrder);\n            }\n            function applyRewritesToMatrix(prototype, columnRewrites, roleMappings, projectionOrdering, context) {\n                debug.assertValue(prototype, 'prototype');\n                debug.assertValue(columnRewrites, 'columnRewrites');\n                // Don't perform this potentially expensive transform unless we actually have a matrix.\n                // When we switch to lazy per-visual DataView creation, we'll be able to remove this check.\n                if (!roleMappings || roleMappings.length < 1 || !(roleMappings[0].matrix || (roleMappings[1] && roleMappings[1].matrix)))\n                    return prototype;\n                var matrixMapping = roleMappings[0].matrix || roleMappings[1].matrix;\n                var matrix = inherit(prototype);\n                function override(metadata) {\n                    return findOverride(metadata, columnRewrites);\n                }\n                function overrideHierarchy(hierarchy) {\n                    var rewrittenHierarchy = null;\n                    var newLevels = powerbi.Prototype.overrideArray(hierarchy.levels, function (level) {\n                        var newLevel = null;\n                        var levelSources = powerbi.Prototype.overrideArray(level.sources, override);\n                        if (levelSources)\n                            newLevel = ensureRewritten(newLevel, level, function (h) { return h.sources = levelSources; });\n                        return newLevel;\n                    });\n                    if (newLevels)\n                        rewrittenHierarchy = ensureRewritten(rewrittenHierarchy, hierarchy, function (r) { return r.levels = newLevels; });\n                    return rewrittenHierarchy;\n                }\n                var rows = overrideHierarchy(matrix.rows);\n                if (rows) {\n                    matrix.rows = rows;\n                    context.rowHierarchyRewritten = true;\n                }\n                var columns = overrideHierarchy(matrix.columns);\n                if (columns) {\n                    matrix.columns = columns;\n                    context.columnHierarchyRewritten = true;\n                }\n                var valueSources = powerbi.Prototype.overrideArray(matrix.valueSources, override);\n                if (valueSources) {\n                    matrix.valueSources = valueSources;\n                    // Only need to reorder if we have more than one value source, and they are all bound to the same role\n                    var matrixValues = matrixMapping.values;\n                    if (projectionOrdering && valueSources.length > 1 && matrixValues && matrixValues.for) {\n                        var columnLevels = columns.levels.length;\n                        if (columnLevels > 0) {\n                            var newToOldPositions = createMatrixValuesPositionMapping(matrixValues, projectionOrdering, valueSources, columnRewrites);\n                            if (newToOldPositions) {\n                                var keys = Object.keys(newToOldPositions);\n                                var numKeys = keys.length;\n                                // Reorder the value columns\n                                columns.root = data.DataViewPivotMatrix.cloneTree(columns.root);\n                                if (columnLevels === 1)\n                                    reorderChildNodes(columns.root, newToOldPositions);\n                                else\n                                    forEachNodeAtLevel(columns.root, columnLevels - 2, function (node) { return reorderChildNodes(node, newToOldPositions); });\n                                // Reorder the value rows\n                                matrix.rows.root = data.DataViewPivotMatrix.cloneTreeExecuteOnLeaf(matrix.rows.root, function (node) {\n                                    if (!node.values)\n                                        return;\n                                    var newValues = {};\n                                    var iterations = Object.keys(node.values).length / numKeys;\n                                    for (var i = 0, len = iterations; i < len; i++) {\n                                        var offset = i * numKeys;\n                                        for (var keysIndex = 0; keysIndex < numKeys; keysIndex++)\n                                            newValues[offset + keysIndex] = node.values[offset + newToOldPositions[keys[keysIndex]]];\n                                    }\n                                    node.values = newValues;\n                                });\n                                context.hierarchyTreesRewritten = true;\n                            }\n                        }\n                    }\n                }\n                return matrix;\n            }\n            function reorderChildNodes(node, newToOldPositions) {\n                var keys = Object.keys(newToOldPositions);\n                var numKeys = keys.length;\n                var children = node.children;\n                var childrenClone = children.slice(0);\n                for (var i = 0, len = numKeys; i < len; i++) {\n                    var sourceColumn = childrenClone[newToOldPositions[keys[i]]];\n                    // In the case we've hit the end of our columns array, but still have position reordering keys,\n                    // there is a duplicate column so we will need to add a new column for the duplicate data\n                    if (i === children.length)\n                        children.push(sourceColumn);\n                    else {\n                        debug.assert(i < children.length, 'The column index is out of range for reordering.');\n                        children[i] = sourceColumn;\n                    }\n                }\n            }\n            /** Creates a mapping of new position to original position. */\n            function createMatrixValuesPositionMapping(matrixValues, projectionOrdering, valueSources, columnRewrites) {\n                var role = matrixValues.for.in;\n                function matchValueSource(columnRewrite) {\n                    for (var i = 0, len = valueSources.length; i < len; i++) {\n                        var valueSource = valueSources[i];\n                        if (valueSource === columnRewrite.to)\n                            return columnRewrite;\n                    }\n                }\n                var valueRewrites = [];\n                for (var i = 0, len = columnRewrites.length; i < len; i++) {\n                    var columnRewrite = columnRewrites[i];\n                    if (matchValueSource(columnRewrite))\n                        valueRewrites.push(columnRewrite);\n                }\n                var newOrder = projectionOrdering[role];\n                var originalOrder = _.map(valueRewrites, function (rewrite) { return rewrite.from.index; });\n                // Optimization: avoid rewriting the matrix if all leaf nodes are in their default positions.\n                if (ArrayExtensions.sequenceEqual(originalOrder, newOrder, function (x, y) { return x === y; }))\n                    return;\n                return createOrderMapping(originalOrder, newOrder);\n            }\n            function createOrderMapping(originalOrder, newOrder) {\n                var mapping = {};\n                for (var i = 0, len = newOrder.length; i < len; ++i) {\n                    var newPosition = newOrder[i];\n                    mapping[i] = originalOrder.indexOf(newPosition);\n                }\n                return mapping;\n            }\n            function forEachNodeAtLevel(node, targetLevel, callback) {\n                if (node.level === targetLevel) {\n                    callback(node);\n                    return;\n                }\n                var children = node.children;\n                if (children && children.length > 0) {\n                    for (var i = 0, ilen = children.length; i < ilen; i++)\n                        forEachNodeAtLevel(children[i], targetLevel, callback);\n                }\n            }\n            function findOverride(source, columnRewrites) {\n                for (var i = 0, len = columnRewrites.length; i < len; i++) {\n                    var columnRewrite = columnRewrites[i];\n                    if (columnRewrite.from === source)\n                        return columnRewrite.to;\n                }\n            }\n            function ensureRewritten(rewritten, prototype, callback) {\n                if (!rewritten)\n                    rewritten = inherit(prototype);\n                if (callback)\n                    callback(rewritten);\n                return rewritten;\n            }\n            function transformObjects(dataView, targetDataViewKinds, objectDescriptors, objectDefinitions, selectTransforms, colorAllocatorFactory) {\n                debug.assertValue(dataView, 'dataView');\n                debug.assertValue(targetDataViewKinds, 'targetDataViewKinds');\n                debug.assertAnyValue(objectDescriptors, 'objectDescriptors');\n                debug.assertAnyValue(objectDefinitions, 'objectDefinitions');\n                debug.assertAnyValue(selectTransforms, 'selectTransforms');\n                debug.assertValue(colorAllocatorFactory, 'colorAllocatorFactory');\n                if (!objectDescriptors)\n                    return;\n                var objectsForAllSelectors = data.DataViewObjectEvaluationUtils.groupObjectsBySelector(objectDefinitions);\n                data.DataViewObjectEvaluationUtils.addImplicitObjects(objectsForAllSelectors, objectDescriptors, dataView.metadata.columns, selectTransforms);\n                var metadataOnce = objectsForAllSelectors.metadataOnce;\n                var dataObjects = objectsForAllSelectors.data;\n                if (metadataOnce)\n                    evaluateMetadataObjects(dataView, selectTransforms, objectDescriptors, metadataOnce.objects, dataObjects, colorAllocatorFactory);\n                var metadataObjects = objectsForAllSelectors.metadata;\n                if (metadataObjects) {\n                    for (var i = 0, len = metadataObjects.length; i < len; i++) {\n                        var metadataObject = metadataObjects[i];\n                        evaluateMetadataRepetition(dataView, selectTransforms, objectDescriptors, metadataObject.selector, metadataObject.objects);\n                    }\n                }\n                for (var i = 0, len = dataObjects.length; i < len; i++) {\n                    var dataObject = dataObjects[i];\n                    evaluateDataRepetition(dataView, targetDataViewKinds, selectTransforms, objectDescriptors, dataObject.selector, dataObject.rules, dataObject.objects);\n                }\n                var userDefined = objectsForAllSelectors.userDefined;\n                if (userDefined) {\n                    // TODO: We only handle user defined objects at the metadata level, but should be able to support them with arbitrary repetition.\n                    evaluateUserDefinedObjects(dataView, selectTransforms, objectDescriptors, userDefined);\n                }\n            }\n            DataViewTransform.transformObjects = transformObjects;\n            function evaluateUserDefinedObjects(dataView, selectTransforms, objectDescriptors, objectDefns) {\n                debug.assertValue(dataView, 'dataView');\n                debug.assertAnyValue(selectTransforms, 'selectTransforms');\n                debug.assertValue(objectDescriptors, 'objectDescriptors');\n                debug.assertValue(objectDefns, 'objectDefns');\n                var dataViewObjects = dataView.metadata.objects;\n                if (!dataViewObjects) {\n                    dataViewObjects = dataView.metadata.objects = {};\n                }\n                var evalContext = data.createStaticEvalContext(dataView, selectTransforms);\n                for (var _i = 0; _i < objectDefns.length; _i++) {\n                    var objectDefn = objectDefns[_i];\n                    var id = objectDefn.selector.id;\n                    var objects = data.DataViewObjectEvaluationUtils.evaluateDataViewObjects(evalContext, objectDescriptors, objectDefn.objects);\n                    for (var objectName in objects) {\n                        var object = objects[objectName];\n                        var map = dataViewObjects[objectName];\n                        if (!map)\n                            map = dataViewObjects[objectName] = [];\n                        debug.assert(powerbi.DataViewObjects.isUserDefined(map), 'expected DataViewObjectMap');\n                        // NOTE: We do not check for duplicate ids.\n                        map.push({ id: id, object: object });\n                    }\n                }\n            }\n            /** Evaluates and sets properties on the DataView metadata. */\n            function evaluateMetadataObjects(dataView, selectTransforms, objectDescriptors, objectDefns, dataObjects, colorAllocatorFactory) {\n                debug.assertValue(dataView, 'dataView');\n                debug.assertAnyValue(selectTransforms, 'selectTransforms');\n                debug.assertValue(objectDescriptors, 'objectDescriptors');\n                debug.assertValue(objectDefns, 'objectDefns');\n                debug.assertValue(dataObjects, 'dataObjects');\n                debug.assertValue(colorAllocatorFactory, 'colorAllocatorFactory');\n                var evalContext = data.createStaticEvalContext(dataView, selectTransforms);\n                var objects = data.DataViewObjectEvaluationUtils.evaluateDataViewObjects(evalContext, objectDescriptors, objectDefns);\n                if (objects) {\n                    dataView.metadata.objects = objects;\n                    for (var objectName in objects) {\n                        var object = objects[objectName], objectDesc = objectDescriptors[objectName];\n                        for (var propertyName in object) {\n                            var propertyDesc = objectDesc.properties[propertyName], ruleDesc = propertyDesc.rule;\n                            if (!ruleDesc)\n                                continue;\n                            var definition = createRuleEvaluationInstance(dataView, colorAllocatorFactory, ruleDesc, objectName, object[propertyName], propertyDesc.type);\n                            if (!definition)\n                                continue;\n                            dataObjects.push(definition);\n                        }\n                    }\n                }\n            }\n            function createRuleEvaluationInstance(dataView, colorAllocatorFactory, ruleDesc, objectName, propertyValue, ruleType) {\n                debug.assertValue(dataView, 'dataView');\n                debug.assertValue(colorAllocatorFactory, 'colorAllocatorFactory');\n                debug.assertValue(ruleDesc, 'ruleDesc');\n                debug.assertValue(propertyValue, 'propertyValue');\n                debug.assertValue(ruleType, 'ruleType');\n                var ruleOutput = ruleDesc.output;\n                if (!ruleOutput)\n                    return;\n                var selectorToCreate = findSelectorForRuleInput(dataView, ruleOutput.selector);\n                if (!selectorToCreate)\n                    return;\n                if (ruleType.fillRule)\n                    return createRuleEvaluationInstanceFillRule(dataView, colorAllocatorFactory, ruleDesc, selectorToCreate, objectName, propertyValue);\n            }\n            function createRuleEvaluationInstanceFillRule(dataView, colorAllocatorFactory, ruleDesc, selectorToCreate, objectName, propertyValue) {\n                debug.assertValue(dataView, 'dataView');\n                debug.assertValue(colorAllocatorFactory, 'colorAllocatorFactory');\n                debug.assertValue(ruleDesc, 'ruleDesc');\n                debug.assertValue(selectorToCreate, 'selectorToCreate');\n                debug.assertValue(propertyValue, 'propertyValue');\n                var colorAllocator;\n                if (propertyValue.linearGradient2)\n                    colorAllocator = createColorAllocatorLinearGradient2(dataView, colorAllocatorFactory, ruleDesc, propertyValue, propertyValue.linearGradient2);\n                else if (propertyValue.linearGradient3)\n                    colorAllocator = createColorAllocatorLinearGradient3(dataView, colorAllocatorFactory, ruleDesc, propertyValue, propertyValue.linearGradient3);\n                if (!colorAllocator)\n                    return;\n                var rule = new data.ColorRuleEvaluation(ruleDesc.inputRole, colorAllocator);\n                var fillRuleProperties = {};\n                fillRuleProperties[ruleDesc.output.property] = {\n                    solid: { color: rule }\n                };\n                return {\n                    selector: selectorToCreate,\n                    rules: [rule],\n                    objects: [{\n                            name: objectName,\n                            properties: fillRuleProperties,\n                        }]\n                };\n            }\n            function createColorAllocatorLinearGradient2(dataView, colorAllocatorFactory, ruleDesc, propertyValueFillRule, linearGradient2) {\n                debug.assertValue(dataView, 'dataView');\n                debug.assertValue(colorAllocatorFactory, 'colorAllocatorFactory');\n                debug.assertValue(ruleDesc, 'ruleDesc');\n                debug.assertValue(linearGradient2, 'linearGradient2');\n                linearGradient2 = propertyValueFillRule.linearGradient2;\n                if (linearGradient2.min.value === undefined ||\n                    linearGradient2.max.value === undefined) {\n                    var inputRange = findRuleInputColumnNumberRange(dataView, ruleDesc.inputRole);\n                    if (!inputRange)\n                        return;\n                    if (linearGradient2.min.value === undefined)\n                        linearGradient2.min.value = inputRange.min;\n                    if (linearGradient2.max.value === undefined)\n                        linearGradient2.max.value = inputRange.max;\n                }\n                return colorAllocatorFactory.linearGradient2(propertyValueFillRule.linearGradient2);\n            }\n            function createColorAllocatorLinearGradient3(dataView, colorAllocatorFactory, ruleDesc, propertyValueFillRule, linearGradient3) {\n                debug.assertValue(dataView, 'dataView');\n                debug.assertValue(colorAllocatorFactory, 'colorAllocatorFactory');\n                debug.assertValue(ruleDesc, 'ruleDesc');\n                debug.assertValue(linearGradient3, 'linearGradient3');\n                var splitScales = undefined;\n                linearGradient3 = propertyValueFillRule.linearGradient3;\n                if (linearGradient3.min.value === undefined ||\n                    linearGradient3.mid.value === undefined ||\n                    linearGradient3.max.value === undefined) {\n                    var inputRange = findRuleInputColumnNumberRange(dataView, ruleDesc.inputRole);\n                    if (!inputRange)\n                        return;\n                    splitScales =\n                        linearGradient3.min.value === undefined &&\n                            linearGradient3.max.value === undefined &&\n                            linearGradient3.mid.value !== undefined;\n                    if (linearGradient3.min.value === undefined) {\n                        linearGradient3.min.value = inputRange.min;\n                    }\n                    if (linearGradient3.max.value === undefined) {\n                        linearGradient3.max.value = inputRange.max;\n                    }\n                    if (linearGradient3.mid.value === undefined) {\n                        var midValue = (linearGradient3.max.value + linearGradient3.min.value) / 2;\n                        linearGradient3.mid.value = midValue;\n                    }\n                }\n                return colorAllocatorFactory.linearGradient3(propertyValueFillRule.linearGradient3, splitScales);\n            }\n            function evaluateDataRepetition(dataView, targetDataViewKinds, selectTransforms, objectDescriptors, selector, rules, objectDefns) {\n                debug.assertValue(dataView, 'dataView');\n                debug.assertValue(targetDataViewKinds, 'targetDataViewKinds');\n                debug.assertValue(selectTransforms, 'selectTransforms');\n                debug.assertValue(objectDescriptors, 'objectDescriptors');\n                debug.assertValue(selector, 'selector');\n                debug.assertAnyValue(rules, 'rules');\n                debug.assertValue(objectDefns, 'objectDefns');\n                var containsWildcard = data.Selector.containsWildcard(selector);\n                var dataViewCategorical = dataView.categorical;\n                if (dataViewCategorical && EnumExtensions.hasFlag(targetDataViewKinds, 1 /* Categorical */)) {\n                    // 1) Match against categories\n                    evaluateDataRepetitionCategoricalCategory(dataViewCategorical, objectDescriptors, selector, rules, containsWildcard, objectDefns);\n                    // 2) Match against valueGrouping\n                    evaluateDataRepetitionCategoricalValueGrouping(dataViewCategorical, objectDescriptors, selector, rules, containsWildcard, objectDefns);\n                }\n                var dataViewMatrix = dataView.matrix;\n                if (dataViewMatrix && EnumExtensions.hasFlag(targetDataViewKinds, 2 /* Matrix */)) {\n                    var rewrittenMatrix = evaluateDataRepetitionMatrix(dataViewMatrix, objectDescriptors, selector, rules, containsWildcard, objectDefns);\n                    if (rewrittenMatrix) {\n                        // TODO: This mutates the DataView -- the assumption is that prototypal inheritance has already occurred.  We should\n                        // revisit this, likely when we do lazy evaluation of DataView.\n                        dataView.matrix = rewrittenMatrix;\n                    }\n                }\n                var dataViewTable = dataView.table;\n                if (dataViewTable && EnumExtensions.hasFlag(targetDataViewKinds, 8 /* Table */)) {\n                    var rewrittenTable = evaluateDataRepetitionTable(dataViewTable, selectTransforms, objectDescriptors, selector, rules, containsWildcard, objectDefns);\n                    if (rewrittenTable) {\n                        // TODO: This mutates the DataView -- the assumption is that prototypal inheritance has already occurred.  We should\n                        // revisit this, likely when we do lazy evaluation of DataView.\n                        dataView.table = rewrittenTable;\n                    }\n                }\n            }\n            function evaluateDataRepetitionCategoricalCategory(dataViewCategorical, objectDescriptors, selector, rules, containsWildcard, objectDefns) {\n                debug.assertValue(dataViewCategorical, 'dataViewCategorical');\n                debug.assertValue(objectDescriptors, 'objectDescriptors');\n                debug.assertValue(selector, 'selector');\n                debug.assertAnyValue(rules, 'rules');\n                debug.assertValue(containsWildcard, 'containsWildcard');\n                debug.assertValue(objectDefns, 'objectDefns');\n                if (!dataViewCategorical.categories || dataViewCategorical.categories.length === 0)\n                    return;\n                var targetColumn = findSelectedCategoricalColumn(dataViewCategorical, selector);\n                if (!targetColumn)\n                    return;\n                var identities = targetColumn.identities, foundMatch, evalContext = data.createCategoricalEvalContext(dataViewCategorical);\n                if (!identities)\n                    return;\n                debug.assert(targetColumn.column.values.length === identities.length, 'Column length mismatch');\n                for (var i = 0, len = identities.length; i < len; i++) {\n                    var identity = identities[i];\n                    if (containsWildcard || data.Selector.matchesData(selector, [identity])) {\n                        evalContext.setCurrentRowIndex(i);\n                        var objects = data.DataViewObjectEvaluationUtils.evaluateDataViewObjects(evalContext, objectDescriptors, objectDefns);\n                        if (objects) {\n                            // TODO: This mutates the DataView -- the assumption is that prototypal inheritance has already occurred.  We should\n                            // revisit this, likely when we do lazy evaluation of DataView.\n                            if (!targetColumn.column.objects) {\n                                targetColumn.column.objects = [];\n                                targetColumn.column.objects.length = len;\n                            }\n                            targetColumn.column.objects[i] = objects;\n                        }\n                        if (!containsWildcard)\n                            return true;\n                        foundMatch = true;\n                    }\n                }\n                return foundMatch;\n            }\n            function evaluateDataRepetitionCategoricalValueGrouping(dataViewCategorical, objectDescriptors, selector, rules, containsWildcard, objectDefns) {\n                debug.assertValue(dataViewCategorical, 'dataViewCategorical');\n                debug.assertValue(objectDescriptors, 'objectDescriptors');\n                debug.assertValue(selector, 'selector');\n                debug.assertAnyValue(rules, 'rules');\n                debug.assertValue(containsWildcard, 'containsWildcard');\n                debug.assertValue(objectDefns, 'objectDefns');\n                var dataViewCategoricalValues = dataViewCategorical.values;\n                if (!dataViewCategoricalValues || !dataViewCategoricalValues.identityFields)\n                    return;\n                if (!data.Selector.matchesKeys(selector, [dataViewCategoricalValues.identityFields]))\n                    return;\n                var valuesGrouped = dataViewCategoricalValues.grouped();\n                if (!valuesGrouped)\n                    return;\n                // NOTE: We do not set the evalContext row index below because iteration is over value groups (i.e., columns, no rows).\n                // This should be enhanced in the future.\n                var evalContext = data.createCategoricalEvalContext(dataViewCategorical);\n                var foundMatch;\n                for (var i = 0, len = valuesGrouped.length; i < len; i++) {\n                    var valueGroup = valuesGrouped[i];\n                    var selectorMetadata = selector.metadata;\n                    var valuesInGroup = valueGroup.values;\n                    if (containsWildcard || data.Selector.matchesData(selector, [valueGroup.identity])) {\n                        var objects = data.DataViewObjectEvaluationUtils.evaluateDataViewObjects(evalContext, objectDescriptors, objectDefns);\n                        if (objects) {\n                            // TODO: This mutates the DataView -- the assumption is that prototypal inheritance has already occurred.  We should\n                            // revisit this, likely when we do lazy evaluation of DataView.\n                            if (selectorMetadata) {\n                                for (var j = 0, jlen = valuesInGroup.length; j < jlen; j++) {\n                                    var valueColumn = valuesInGroup[j], valueSource = valueColumn.source;\n                                    if (valueSource.queryName === selectorMetadata) {\n                                        var valueSourceOverwrite = powerbi.Prototype.inherit(valueSource);\n                                        valueSourceOverwrite.objects = objects;\n                                        valueColumn.source = valueSourceOverwrite;\n                                        foundMatch = true;\n                                        break;\n                                    }\n                                }\n                            }\n                            else {\n                                valueGroup.objects = objects;\n                                setGrouped(dataViewCategoricalValues, valuesGrouped);\n                                foundMatch = true;\n                            }\n                        }\n                        if (!containsWildcard)\n                            return true;\n                    }\n                }\n                return foundMatch;\n            }\n            function evaluateDataRepetitionMatrix(dataViewMatrix, objectDescriptors, selector, rules, containsWildcard, objectDefns) {\n                var evalContext = data.createMatrixEvalContext(dataViewMatrix);\n                var rewrittenRows = evaluateDataRepetitionMatrixHierarchy(evalContext, dataViewMatrix.rows, objectDescriptors, selector, rules, containsWildcard, objectDefns);\n                var rewrittenCols = evaluateDataRepetitionMatrixHierarchy(evalContext, dataViewMatrix.columns, objectDescriptors, selector, rules, containsWildcard, objectDefns);\n                if (rewrittenRows || rewrittenCols) {\n                    var rewrittenMatrix = inheritSingle(dataViewMatrix);\n                    if (rewrittenRows)\n                        rewrittenMatrix.rows = rewrittenRows;\n                    if (rewrittenCols)\n                        rewrittenMatrix.columns = rewrittenCols;\n                    return rewrittenMatrix;\n                }\n            }\n            function evaluateDataRepetitionMatrixHierarchy(evalContext, dataViewMatrixHierarchy, objectDescriptors, selector, rules, containsWildcard, objectDefns) {\n                debug.assertAnyValue(dataViewMatrixHierarchy, 'dataViewMatrixHierarchy');\n                debug.assertValue(objectDescriptors, 'objectDescriptors');\n                debug.assertValue(selector, 'selector');\n                debug.assertAnyValue(rules, 'rules');\n                debug.assertValue(objectDefns, 'objectDefns');\n                if (!dataViewMatrixHierarchy)\n                    return;\n                var root = dataViewMatrixHierarchy.root;\n                if (!root)\n                    return;\n                var rewrittenRoot = evaluateDataRepetitionMatrixNode(evalContext, root, objectDescriptors, selector, rules, containsWildcard, objectDefns);\n                if (rewrittenRoot) {\n                    var rewrittenHierarchy = inheritSingle(dataViewMatrixHierarchy);\n                    rewrittenHierarchy.root = rewrittenRoot;\n                    return rewrittenHierarchy;\n                }\n            }\n            function evaluateDataRepetitionMatrixNode(evalContext, dataViewNode, objectDescriptors, selector, rules, containsWildcard, objectDefns) {\n                debug.assertValue(evalContext, 'evalContext');\n                debug.assertValue(dataViewNode, 'dataViewNode');\n                debug.assertValue(objectDescriptors, 'objectDescriptors');\n                debug.assertValue(selector, 'selector');\n                debug.assertAnyValue(rules, 'rules');\n                debug.assertValue(objectDefns, 'objectDefns');\n                var childNodes = dataViewNode.children;\n                if (!childNodes)\n                    return;\n                var rewrittenNode;\n                var shouldSearchChildren;\n                var childIdentityFields = dataViewNode.childIdentityFields;\n                if (childIdentityFields) {\n                    // NOTE: selector matching in matrix currently only considers the current node, and does not consider parents as part of the match.\n                    shouldSearchChildren = data.Selector.matchesKeys(selector, [childIdentityFields]);\n                }\n                for (var i = 0, len = childNodes.length; i < len; i++) {\n                    var childNode = childNodes[i], identity = childNode.identity, rewrittenChildNode = null;\n                    if (shouldSearchChildren) {\n                        if (containsWildcard || data.Selector.matchesData(selector, [identity])) {\n                            // TODO: Need to initialize context for rule-based properties.  Rule-based properties\n                            // (such as fillRule/gradients) are not currently implemented.\n                            var objects = data.DataViewObjectEvaluationUtils.evaluateDataViewObjects(evalContext, objectDescriptors, objectDefns);\n                            if (objects) {\n                                rewrittenChildNode = inheritSingle(childNode);\n                                rewrittenChildNode.objects = objects;\n                            }\n                        }\n                    }\n                    else {\n                        rewrittenChildNode = evaluateDataRepetitionMatrixNode(evalContext, childNode, objectDescriptors, selector, rules, containsWildcard, objectDefns);\n                    }\n                    if (rewrittenChildNode) {\n                        if (!rewrittenNode)\n                            rewrittenNode = inheritNodeAndChildren(dataViewNode);\n                        rewrittenNode.children[i] = rewrittenChildNode;\n                        if (!containsWildcard) {\n                            // NOTE: once we find a match for a non-wildcard selector, stop looking.\n                            break;\n                        }\n                    }\n                }\n                return rewrittenNode;\n            }\n            function inheritNodeAndChildren(node) {\n                if (Object.getPrototypeOf(node) !== Object.prototype) {\n                    return node;\n                }\n                var inherited = inheritSingle(node);\n                inherited.children = inherit(node.children);\n                return inherited;\n            }\n            function evaluateDataRepetitionTable(dataViewTable, selectTransforms, objectDescriptors, selector, rules, containsWildcard, objectDefns) {\n                debug.assertValue(dataViewTable, 'dataViewTable');\n                debug.assertValue(selectTransforms, 'selectTransforms');\n                debug.assertValue(objectDescriptors, 'objectDescriptors');\n                debug.assertValue(selector, 'selector');\n                debug.assertAnyValue(rules, 'rules');\n                debug.assertValue(objectDefns, 'objectDefns');\n                var evalContext = data.createTableEvalContext(dataViewTable, selectTransforms);\n                var rewrittenRows = evaluateDataRepetitionTableRows(evalContext, dataViewTable.columns, dataViewTable.rows, dataViewTable.identity, dataViewTable.identityFields, objectDescriptors, selector, rules, containsWildcard, objectDefns);\n                if (rewrittenRows) {\n                    var rewrittenTable = inheritSingle(dataViewTable);\n                    rewrittenTable.rows = rewrittenRows;\n                    return rewrittenTable;\n                }\n            }\n            function evaluateDataRepetitionTableRows(evalContext, columns, rows, identities, identityFields, objectDescriptors, selector, rules, containsWildcard, objectDefns) {\n                debug.assertValue(evalContext, 'evalContext');\n                debug.assertValue(columns, 'columns');\n                debug.assertValue(rows, 'rows');\n                debug.assertAnyValue(identities, 'identities');\n                debug.assertAnyValue(identityFields, 'identityFields');\n                debug.assertValue(objectDescriptors, 'objectDescriptors');\n                debug.assertValue(selector, 'selector');\n                debug.assertAnyValue(rules, 'rules');\n                debug.assertValue(objectDefns, 'objectDefns');\n                if (_.isEmpty(identities) || _.isEmpty(identityFields))\n                    return;\n                if (!selector.metadata &&\n                    !data.Selector.matchesKeys(selector, [identityFields]))\n                    return;\n                var colIdx = _.findIndex(columns, function (col) { return col.queryName === selector.metadata; });\n                if (colIdx < 0)\n                    return;\n                debug.assert(rows.length === identities.length, 'row length mismatch');\n                var colLen = columns.length;\n                var inheritedRows;\n                for (var rowIdx = 0, rowLen = identities.length; rowIdx < rowLen; rowIdx++) {\n                    var identity = identities[rowIdx];\n                    if (containsWildcard || data.Selector.matchesData(selector, [identity])) {\n                        evalContext.setCurrentRowIndex(rowIdx);\n                        var objects = data.DataViewObjectEvaluationUtils.evaluateDataViewObjects(evalContext, objectDescriptors, objectDefns);\n                        if (objects) {\n                            if (!inheritedRows)\n                                inheritedRows = inheritSingle(rows);\n                            var inheritedRow = inheritedRows[rowIdx] = inheritSingle(inheritedRows[rowIdx]);\n                            var objectsForColumns = inheritedRow.objects;\n                            if (!objectsForColumns)\n                                inheritedRow.objects = objectsForColumns = new Array(colLen);\n                            objectsForColumns[colIdx] = objects;\n                        }\n                        if (!containsWildcard)\n                            break;\n                    }\n                }\n                return inheritedRows;\n            }\n            function evaluateMetadataRepetition(dataView, selectTransforms, objectDescriptors, selector, objectDefns) {\n                debug.assertValue(dataView, 'dataView');\n                debug.assertAnyValue(selectTransforms, 'selectTransforms');\n                debug.assertValue(objectDescriptors, 'objectDescriptors');\n                debug.assertValue(selector, 'selector');\n                debug.assertValue(objectDefns, 'objectDefns');\n                // TODO: This mutates the DataView -- the assumption is that prototypal inheritance has already occurred.  We should\n                // revisit this, likely when we do lazy evaluation of DataView.\n                var columns = dataView.metadata.columns, metadataId = selector.metadata, evalContext = data.createStaticEvalContext(dataView, selectTransforms);\n                for (var i = 0, len = columns.length; i < len; i++) {\n                    var column = columns[i];\n                    if (column.queryName === metadataId) {\n                        var objects = data.DataViewObjectEvaluationUtils.evaluateDataViewObjects(evalContext, objectDescriptors, objectDefns);\n                        if (objects)\n                            column.objects = objects;\n                    }\n                }\n            }\n            /** Attempts to find a column that can possibly match the selector. */\n            function findSelectedCategoricalColumn(dataViewCategorical, selector) {\n                debug.assertValue(dataViewCategorical.categories[0], 'dataViewCategorical.categories[0]');\n                var categoricalColumn = dataViewCategorical.categories[0];\n                if (!categoricalColumn.identityFields)\n                    return;\n                if (!data.Selector.matchesKeys(selector, [categoricalColumn.identityFields]))\n                    return;\n                var identities = categoricalColumn.identity, targetColumn = categoricalColumn;\n                var selectedMetadataId = selector.metadata;\n                if (selectedMetadataId) {\n                    var valueColumns = dataViewCategorical.values;\n                    if (valueColumns) {\n                        for (var i = 0, len = valueColumns.length; i < len; i++) {\n                            var valueColumn = valueColumns[i];\n                            if (valueColumn.source.queryName === selectedMetadataId) {\n                                targetColumn = valueColumn;\n                                break;\n                            }\n                        }\n                    }\n                }\n                return {\n                    column: targetColumn,\n                    identities: identities,\n                };\n            }\n            function findSelectorForRuleInput(dataView, selectorRoles) {\n                debug.assertValue(dataView, 'dataView');\n                debug.assertValue(selectorRoles, 'selectorRoles');\n                if (selectorRoles.length !== 1)\n                    return;\n                var dataViewCategorical = dataView.categorical;\n                if (!dataViewCategorical)\n                    return;\n                var categories = dataViewCategorical.categories;\n                if (!categories || categories.length !== 1)\n                    return;\n                var categoryColumn = categories[0], categoryRoles = categoryColumn.source.roles, categoryIdentityFields = categoryColumn.identityFields;\n                if (!categoryRoles || !categoryIdentityFields || !categoryRoles[selectorRoles[0]])\n                    return;\n                return { data: [data.DataViewScopeWildcard.fromExprs(categoryIdentityFields)] };\n            }\n            /** Attempts to find the value range for the single column with the given inputRole. */\n            function findRuleInputColumnNumberRange(dataView, inputRole) {\n                debug.assertValue(dataView, 'dataView');\n                debug.assertValue(inputRole, 'inputRole');\n                // NOTE: This implementation currently only supports categorical DataView, becuase that's the\n                // only scenario that has custom colors, as of this writing.  This would be rewritten to be more generic\n                // as required, when needed.\n                var dataViewCategorical = dataView.categorical;\n                if (!dataViewCategorical)\n                    return;\n                var values = dataViewCategorical.values;\n                if (!values)\n                    return;\n                for (var i = 0, len = values.length; i < len; i++) {\n                    var valueCol = values[i], valueColRoles = valueCol.source.roles;\n                    if (!valueColRoles || !valueColRoles[inputRole])\n                        continue;\n                    var min = valueCol.min;\n                    if (min === undefined)\n                        min = valueCol.minLocal;\n                    if (min === undefined)\n                        continue;\n                    var max = valueCol.max;\n                    if (max === undefined)\n                        max = valueCol.maxLocal;\n                    if (max === undefined)\n                        continue;\n                    return { min: min, max: max };\n                }\n            }\n            function createValueColumns(values, valueIdentityFields, source) {\n                if (values === void 0) { values = []; }\n                var result = values;\n                setGrouped(values);\n                if (valueIdentityFields)\n                    result.identityFields = valueIdentityFields;\n                if (source)\n                    result.source = source;\n                return result;\n            }\n            DataViewTransform.createValueColumns = createValueColumns;\n            function setGrouped(values, groupedResult) {\n                values.grouped = groupedResult\n                    ? function () { return groupedResult; }\n                    : function () { return groupValues(values); };\n            }\n            /** Group together the values with a common identity. */\n            function groupValues(values) {\n                debug.assertValue(values, 'values');\n                var groups = [], currentGroup;\n                for (var i = 0, len = values.length; i < len; i++) {\n                    var value = values[i];\n                    if (!currentGroup || currentGroup.identity !== value.identity) {\n                        currentGroup = {\n                            values: []\n                        };\n                        if (value.identity) {\n                            currentGroup.identity = value.identity;\n                            var source = value.source;\n                            // allow null, which will be formatted as (Blank).\n                            if (source.groupName !== undefined)\n                                currentGroup.name = source.groupName;\n                            else if (source.displayName)\n                                currentGroup.name = source.displayName;\n                        }\n                        groups.push(currentGroup);\n                    }\n                    currentGroup.values.push(value);\n                }\n                return groups;\n            }\n            function pivotIfNecessary(dataView, dataViewMappings) {\n                debug.assertValue(dataView, 'dataView');\n                var transformedDataView;\n                switch (determineCategoricalTransformation(dataView.categorical, dataViewMappings)) {\n                    case 1 /* Pivot */:\n                        transformedDataView = data.DataViewPivotCategorical.apply(dataView);\n                        break;\n                    case 2 /* SelfCrossJoin */:\n                        transformedDataView = data.DataViewSelfCrossJoin.apply(dataView);\n                        break;\n                }\n                return transformedDataView || dataView;\n            }\n            function determineCategoricalTransformation(categorical, dataViewMappings) {\n                if (!categorical || _.isEmpty(dataViewMappings))\n                    return;\n                var categories = categorical.categories;\n                if (!categories || categories.length !== 1)\n                    return;\n                var values = categorical.values;\n                if (_.isEmpty(values))\n                    return;\n                if (values.grouped().some(function (vg) { return !!vg.identity; }))\n                    return;\n                // If we made it here, the DataView has a single category and no valueGrouping.\n                var categoryRoles = categories[0].source.roles;\n                for (var i = 0, len = dataViewMappings.length; i < len; i++) {\n                    var roleMappingCategorical = dataViewMappings[i].categorical;\n                    if (!roleMappingCategorical)\n                        continue;\n                    if (!hasRolesGrouped(categoryRoles, roleMappingCategorical.values))\n                        continue;\n                    // If we made it here, the DataView's single category has the value grouping role.\n                    var categoriesMapping = roleMappingCategorical.categories;\n                    var hasCategoryRole = hasRolesBind(categoryRoles, categoriesMapping) ||\n                        hasRolesFor(categoryRoles, categoriesMapping);\n                    if (hasCategoryRole)\n                        return 2 /* SelfCrossJoin */;\n                    return 1 /* Pivot */;\n                }\n            }\n            function shouldPivotMatrix(matrix, dataViewMappings) {\n                if (!matrix || _.isEmpty(dataViewMappings))\n                    return;\n                var rowLevels = matrix.rows.levels;\n                if (rowLevels.length < 1)\n                    return;\n                var rows = matrix.rows.root.children;\n                if (!rows || rows.length === 0)\n                    return;\n                var rowRoles = rowLevels[0].sources[0].roles;\n                for (var i = 0, len = dataViewMappings.length; i < len; i++) {\n                    var roleMappingMatrix = dataViewMappings[i].matrix;\n                    if (!roleMappingMatrix)\n                        continue;\n                    if (!hasRolesFor(rowRoles, roleMappingMatrix.rows) &&\n                        hasRolesFor(rowRoles, roleMappingMatrix.columns)) {\n                        return true;\n                    }\n                }\n            }\n            function hasRolesBind(roles, roleMapping) {\n                if (roles && roleMapping && roleMapping.bind)\n                    return roles[roleMapping.bind.to];\n            }\n            function hasRolesFor(roles, roleMapping) {\n                if (roles && roleMapping && roleMapping.for)\n                    return roles[roleMapping.for.in];\n            }\n            function hasRolesGrouped(roles, roleMapping) {\n                if (roles && roleMapping && roleMapping.group)\n                    return roles[roleMapping.group.by];\n            }\n        })(DataViewTransform = data.DataViewTransform || (data.DataViewTransform = {}));\n    })(data = powerbi.data || (powerbi.data = {}));\n})(powerbi || (powerbi = {}));\n/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\nvar powerbi;\n(function (powerbi) {\n    var data;\n    (function (data) {\n        function createDisplayNameGetter(displayNameKey) {\n            return function (resourceProvider) { return resourceProvider.get(displayNameKey); };\n        }\n        data.createDisplayNameGetter = createDisplayNameGetter;\n        function getDisplayName(displayNameGetter, resourceProvider) {\n            if (typeof displayNameGetter === 'function')\n                return displayNameGetter(resourceProvider);\n            if (typeof displayNameGetter === 'string')\n                return displayNameGetter;\n        }\n        data.getDisplayName = getDisplayName;\n    })(data = powerbi.data || (powerbi.data = {}));\n})(powerbi || (powerbi = {}));\n/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\n/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\nvar powerbi;\n(function (powerbi) {\n    /** Enumeration of DateTimeUnits */\n    (function (DateTimeUnit) {\n        DateTimeUnit[DateTimeUnit[\"Year\"] = 0] = \"Year\";\n        DateTimeUnit[DateTimeUnit[\"Month\"] = 1] = \"Month\";\n        DateTimeUnit[DateTimeUnit[\"Week\"] = 2] = \"Week\";\n        DateTimeUnit[DateTimeUnit[\"Day\"] = 3] = \"Day\";\n        DateTimeUnit[DateTimeUnit[\"Hour\"] = 4] = \"Hour\";\n        DateTimeUnit[DateTimeUnit[\"Minute\"] = 5] = \"Minute\";\n        DateTimeUnit[DateTimeUnit[\"Second\"] = 6] = \"Second\";\n        DateTimeUnit[DateTimeUnit[\"Millisecond\"] = 7] = \"Millisecond\";\n    })(powerbi.DateTimeUnit || (powerbi.DateTimeUnit = {}));\n    var DateTimeUnit = powerbi.DateTimeUnit;\n})(powerbi || (powerbi = {}));\n/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\nvar powerbi;\n(function (powerbi) {\n    var data;\n    (function (data) {\n        var SQExprBuilder;\n        (function (SQExprBuilder) {\n            function fieldExpr(fieldExpr) {\n                return wrapColumnAggr(fieldExpr)\n                    || wrapColumn(fieldExpr)\n                    || wrapMeasure(fieldExpr)\n                    || wrapHierarchyLevel(fieldExpr)\n                    || wrapHierarchy(fieldExpr)\n                    || wrapEntityAggr(fieldExpr)\n                    || wrapPropertyVariationSource(fieldExpr)\n                    || wrapEntity(fieldExpr);\n            }\n            SQExprBuilder.fieldExpr = fieldExpr;\n            function wrapColumnAggr(fieldExpr) {\n                var aggr = fieldExpr.columnAggr;\n                if (aggr) {\n                    var entityExpr = wrapEntity(fieldExpr.columnAggr);\n                    return SQExprBuilder.aggregate(SQExprBuilder.columnRef(entityExpr, aggr.name), aggr.aggregate);\n                }\n            }\n            function wrapHierarchyLevel(fieldExpr) {\n                var hierarchyLevelPattern = fieldExpr.hierarchyLevel;\n                if (hierarchyLevelPattern) {\n                    var hierarchyExpr = SQExprBuilder.hierarchy(wrapEntity(hierarchyLevelPattern), hierarchyLevelPattern.name);\n                    return SQExprBuilder.hierarchyLevel(hierarchyExpr, hierarchyLevelPattern.level);\n                }\n            }\n            function wrapHierarchy(fieldExpr) {\n                var hierarchyExprPattern = fieldExpr.hierarchy;\n                if (hierarchyExprPattern) {\n                    var entityExpr = wrapEntity(hierarchyExprPattern);\n                    return SQExprBuilder.hierarchy(entityExpr, hierarchyExprPattern.name);\n                }\n            }\n            function wrapPropertyVariationSource(fieldExpr) {\n                var variation = fieldExpr.columnHierarchyLevelVariation;\n                if (variation) {\n                    var entitiyExpr = wrapEntity(variation.source);\n                    return SQExprBuilder.propertyVariationSource(entitiyExpr, variation.source.name, variation.level.name);\n                }\n            }\n            function wrapColumn(fieldExpr) {\n                var column = fieldExpr.column;\n                if (column) {\n                    var entityExpr = wrapEntity(fieldExpr.column);\n                    return SQExprBuilder.columnRef(entityExpr, column.name);\n                }\n            }\n            function wrapMeasure(fieldExpr) {\n                var measure = fieldExpr.measure;\n                if (measure) {\n                    var entityExpr = wrapEntity(fieldExpr.measure);\n                    return SQExprBuilder.measureRef(entityExpr, measure.name);\n                }\n            }\n            function wrapEntityAggr(fieldExpr) {\n                var entityAggregate = fieldExpr.entityAggr;\n                if (entityAggregate) {\n                    var entityExpr = wrapEntity(fieldExpr.entityAggr);\n                    return SQExprBuilder.aggregate(entityExpr, entityAggregate.aggregate);\n                }\n            }\n            function wrapEntity(fieldExpr) {\n                var fieldExprEntityItemPattern = FieldExprPattern.toFieldExprEntityItemPattern(fieldExpr);\n                return SQExprBuilder.entity(fieldExprEntityItemPattern.schema, fieldExprEntityItemPattern.entity, fieldExprEntityItemPattern.entityVar);\n            }\n        })(SQExprBuilder = data.SQExprBuilder || (data.SQExprBuilder = {}));\n        var SQExprConverter;\n        (function (SQExprConverter) {\n            function asFieldPattern(sqExpr) {\n                // TODO: adding entity to the FieldExprPattern\n                if (sqExpr instanceof data.SQEntityExpr) {\n                    return {\n                        entity: sqExpr.entity,\n                        schema: sqExpr.schema,\n                    };\n                }\n                return sqExpr.accept(FieldExprPatternBuilder.instance);\n            }\n            SQExprConverter.asFieldPattern = asFieldPattern;\n        })(SQExprConverter = data.SQExprConverter || (data.SQExprConverter = {}));\n        var FieldExprPatternBuilder = (function (_super) {\n            __extends(FieldExprPatternBuilder, _super);\n            function FieldExprPatternBuilder() {\n                _super.apply(this, arguments);\n            }\n            FieldExprPatternBuilder.prototype.visitColumnRef = function (expr) {\n                var sourceRef = expr.source.accept(SourceExprPatternBuilder.instance);\n                if (!sourceRef)\n                    return;\n                if (sourceRef.entity) {\n                    var columnRef = sourceRef.entity;\n                    columnRef.name = expr.ref;\n                    return { column: columnRef };\n                }\n            };\n            FieldExprPatternBuilder.prototype.visitMeasureRef = function (expr) {\n                var sourceRef = expr.source.accept(SourceExprPatternBuilder.instance);\n                if (!sourceRef)\n                    return;\n                if (sourceRef.entity) {\n                    var measureRef = sourceRef.entity;\n                    measureRef.name = expr.ref;\n                    return { measure: measureRef };\n                }\n            };\n            FieldExprPatternBuilder.prototype.visitAggr = function (expr) {\n                var fieldPattern = expr.arg.accept(this);\n                if (fieldPattern && fieldPattern.column) {\n                    var argAggr = fieldPattern.column;\n                    argAggr.aggregate = expr.func;\n                    return { columnAggr: argAggr };\n                }\n                else if (fieldPattern && fieldPattern.columnAggr) {\n                    var argAggr = fieldPattern.columnAggr;\n                    argAggr.aggregate = expr.func;\n                    return { columnAggr: argAggr };\n                }\n                else if (fieldPattern && fieldPattern.hierarchyLevel) {\n                    var argAggr = fieldPattern.hierarchyLevel;\n                    argAggr.aggregate = expr.func;\n                    return { hierarchyLevelAggr: argAggr };\n                }\n                var sourcePattern = expr.arg.accept(SourceExprPatternBuilder.instance);\n                if (sourcePattern && sourcePattern.entity) {\n                    var argAggr = sourcePattern.entity;\n                    argAggr.aggregate = expr.func;\n                    return { entityAggr: argAggr };\n                }\n            };\n            FieldExprPatternBuilder.prototype.visitHierarchy = function (expr) {\n                var sourcePattern = expr.arg.accept(SourceExprPatternBuilder.instance);\n                if (sourcePattern && sourcePattern.entity) {\n                    var hierarchyRef = (sourcePattern.entity);\n                    hierarchyRef.name = expr.hierarchy;\n                    return { hierarchy: hierarchyRef };\n                }\n            };\n            FieldExprPatternBuilder.prototype.visitHierarchyLevel = function (expr) {\n                var hierarchySourceExprPattern = expr.arg.accept(HierarchyExprPatternBuiler.instance);\n                if (!hierarchySourceExprPattern)\n                    return;\n                var hierarchyLevel;\n                if (hierarchySourceExprPattern.hierarchy) {\n                    hierarchyLevel = {\n                        entity: hierarchySourceExprPattern.hierarchy.entity,\n                        schema: hierarchySourceExprPattern.hierarchy.schema,\n                        name: hierarchySourceExprPattern.hierarchy.name,\n                        level: expr.level,\n                    };\n                }\n                if (hierarchySourceExprPattern.variation) {\n                    return {\n                        columnHierarchyLevelVariation: {\n                            source: {\n                                entity: hierarchySourceExprPattern.variation.column.entity,\n                                schema: hierarchySourceExprPattern.variation.column.schema,\n                                name: hierarchySourceExprPattern.variation.column.name,\n                            },\n                            level: hierarchyLevel,\n                            variationName: hierarchySourceExprPattern.variation.variationName,\n                        }\n                    };\n                }\n                return { hierarchyLevel: hierarchyLevel };\n            };\n            FieldExprPatternBuilder.instance = new FieldExprPatternBuilder();\n            return FieldExprPatternBuilder;\n        })(data.DefaultSQExprVisitor);\n        var SourceExprPatternBuilder = (function (_super) {\n            __extends(SourceExprPatternBuilder, _super);\n            function SourceExprPatternBuilder() {\n                _super.apply(this, arguments);\n            }\n            SourceExprPatternBuilder.prototype.visitEntity = function (expr) {\n                var entityRef = {\n                    schema: expr.schema,\n                    entity: expr.entity\n                };\n                if (expr.variable)\n                    entityRef.entityVar = expr.variable;\n                return { entity: entityRef };\n            };\n            SourceExprPatternBuilder.prototype.visitPropertyVariationSource = function (expr) {\n                var entityExpr = expr.arg;\n                if (entityExpr instanceof data.SQEntityExpr) {\n                    var propertyVariationSource = {\n                        schema: entityExpr.schema,\n                        entity: entityExpr.entity,\n                        name: expr.property,\n                    };\n                    if (entityExpr.variable)\n                        propertyVariationSource.entityVar = entityExpr.variable;\n                    return {\n                        variation: {\n                            column: propertyVariationSource,\n                            variationName: expr.name,\n                        }\n                    };\n                }\n            };\n            SourceExprPatternBuilder.instance = new SourceExprPatternBuilder();\n            return SourceExprPatternBuilder;\n        })(data.DefaultSQExprVisitor);\n        var HierarchyExprPatternBuiler = (function (_super) {\n            __extends(HierarchyExprPatternBuiler, _super);\n            function HierarchyExprPatternBuiler() {\n                _super.apply(this, arguments);\n            }\n            HierarchyExprPatternBuiler.prototype.visitHierarchy = function (expr) {\n                var exprPattern = expr.arg.accept(SourceExprPatternBuilder.instance);\n                var hierarchyRef;\n                var variationRef;\n                if (exprPattern.variation) {\n                    hierarchyRef = {\n                        name: expr.hierarchy,\n                        schema: exprPattern.variation.column.schema,\n                        entity: exprPattern.variation.column.entity,\n                    };\n                    variationRef = exprPattern.variation;\n                }\n                else\n                    hierarchyRef = {\n                        name: expr.hierarchy,\n                        schema: exprPattern.entity.schema,\n                        entity: exprPattern.entity.entity,\n                    };\n                return {\n                    hierarchy: hierarchyRef,\n                    variation: variationRef\n                };\n            };\n            HierarchyExprPatternBuiler.instance = new HierarchyExprPatternBuiler();\n            return HierarchyExprPatternBuiler;\n        })(data.DefaultSQExprVisitor);\n        var FieldExprPattern;\n        (function (FieldExprPattern) {\n            function hasFieldExprName(fieldExpr) {\n                return (fieldExpr.column ||\n                    fieldExpr.columnAggr ||\n                    fieldExpr.measure) !== undefined;\n            }\n            FieldExprPattern.hasFieldExprName = hasFieldExprName;\n            function getPropertyName(fieldExpr) {\n                var column = (fieldExpr.column ||\n                    fieldExpr.columnAggr ||\n                    fieldExpr.measure);\n                if (column)\n                    return column.name;\n            }\n            FieldExprPattern.getPropertyName = getPropertyName;\n            function getHierarchyName(fieldExpr) {\n                var hierarchy = fieldExpr.hierarchy;\n                if (hierarchy)\n                    return hierarchy.name;\n            }\n            FieldExprPattern.getHierarchyName = getHierarchyName;\n            function getColumnRef(fieldExpr) {\n                if (fieldExpr.columnHierarchyLevelVariation)\n                    return fieldExpr.columnHierarchyLevelVariation.source;\n                return fieldExpr.column || fieldExpr.measure || fieldExpr.columnAggr;\n            }\n            FieldExprPattern.getColumnRef = getColumnRef;\n            function getFieldExprName(fieldExpr) {\n                var name = getPropertyName(fieldExpr);\n                if (name)\n                    return name;\n                // In case it is an entity\n                return toFieldExprEntityItemPattern(fieldExpr).entity;\n            }\n            FieldExprPattern.getFieldExprName = getFieldExprName;\n            function toFieldExprEntityItemPattern(fieldExpr) {\n                var field = (fieldExpr.column ||\n                    fieldExpr.columnAggr ||\n                    fieldExpr.entityAggr ||\n                    fieldExpr.hierarchy ||\n                    fieldExpr.hierarchyLevel ||\n                    fieldExpr.hierarchyLevelAggr ||\n                    fieldExpr.measure ||\n                    (fieldExpr.columnHierarchyLevelVariation && fieldExpr.columnHierarchyLevelVariation.source) ||\n                    fieldExpr); // fieldExpr for entity\n                return {\n                    schema: field.schema,\n                    entity: field.entity,\n                    entityVar: field.entityVar,\n                };\n            }\n            FieldExprPattern.toFieldExprEntityItemPattern = toFieldExprEntityItemPattern;\n        })(FieldExprPattern = data.FieldExprPattern || (data.FieldExprPattern = {}));\n    })(data = powerbi.data || (powerbi.data = {}));\n})(powerbi || (powerbi = {}));\n/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\nvar powerbi;\n(function (powerbi) {\n    var DataViewAnalysis;\n    (function (DataViewAnalysis) {\n        var ArrayExtensions = jsCommon.ArrayExtensions;\n        var DataViewObjectDefinitions = powerbi.data.DataViewObjectDefinitions;\n        (function (DataViewMappingMatchErrorCode) {\n            DataViewMappingMatchErrorCode[DataViewMappingMatchErrorCode[\"conditionRangeTooLarge\"] = 0] = \"conditionRangeTooLarge\";\n            DataViewMappingMatchErrorCode[DataViewMappingMatchErrorCode[\"conditionRangeTooSmall\"] = 1] = \"conditionRangeTooSmall\";\n            DataViewMappingMatchErrorCode[DataViewMappingMatchErrorCode[\"conditionKindExpectedMeasure\"] = 2] = \"conditionKindExpectedMeasure\";\n            DataViewMappingMatchErrorCode[DataViewMappingMatchErrorCode[\"conditionKindExpectedGrouping\"] = 3] = \"conditionKindExpectedGrouping\";\n            DataViewMappingMatchErrorCode[DataViewMappingMatchErrorCode[\"conditionKindExpectedGroupingOrMeasure\"] = 4] = \"conditionKindExpectedGroupingOrMeasure\";\n        })(DataViewAnalysis.DataViewMappingMatchErrorCode || (DataViewAnalysis.DataViewMappingMatchErrorCode = {}));\n        var DataViewMappingMatchErrorCode = DataViewAnalysis.DataViewMappingMatchErrorCode;\n        /** Reshapes the data view to match the provided schema if possible. If not, returns null */\n        function validateAndReshape(dataView, dataViewMappings) {\n            if (!dataViewMappings || dataViewMappings.length === 0)\n                return { dataView: dataView, isValid: true };\n            if (dataView) {\n                for (var _i = 0; _i < dataViewMappings.length; _i++) {\n                    var dataViewMapping = dataViewMappings[_i];\n                    // Keep the original when possible.\n                    if (supports(dataView, dataViewMapping))\n                        return { dataView: dataView, isValid: true };\n                    if (dataViewMapping.categorical && dataView.categorical)\n                        return reshapeCategorical(dataView, dataViewMapping);\n                    if (dataViewMapping.tree && dataView.tree)\n                        return reshapeTree(dataView, dataViewMapping.tree);\n                    if (dataViewMapping.single && dataView.single)\n                        return reshapeSingle(dataView, dataViewMapping.single);\n                    if (dataViewMapping.table && dataView.table)\n                        return reshapeTable(dataView, dataViewMapping.table);\n                }\n            }\n            else if (powerbi.ScriptResultUtil.findScriptResult(dataViewMappings)) {\n                // Currently, PBI Service treats R Script Visuals as static images.\n                // This causes validation to fail, since in PBI service no DataView is generated, but there are DataViewMappings,\n                // to support the PBI Desktop scenario.\n                // This code will be removed once PBI Service fully supports R Script Visuals.\n                // VSTS: 6217994 - [R Viz] Remove temporary DataViewAnalysis validation workaround of static R Script Visual mappings\n                return { dataView: dataView, isValid: true };\n            }\n            return { isValid: false };\n        }\n        DataViewAnalysis.validateAndReshape = validateAndReshape;\n        function reshapeCategorical(dataView, dataViewMapping) {\n            debug.assertValue(dataViewMapping, 'dataViewMapping');\n            //The functionality that used to compare categorical.values.length to schema.values doesn't apply any more, we don't want to use the same logic for re-shaping.\n            var categoryRoleMapping = dataViewMapping.categorical;\n            var categorical = dataView.categorical;\n            if (!categorical)\n                return { isValid: false };\n            var rowCount;\n            if (categoryRoleMapping.rowCount) {\n                rowCount = categoryRoleMapping.rowCount.supported;\n                if (rowCount && rowCount.max) {\n                    var updated;\n                    var categories = categorical.categories;\n                    var maxRowCount = rowCount.max;\n                    var originalLength = undefined;\n                    if (categories) {\n                        for (var i = 0, len = categories.length; i < len; i++) {\n                            var category = categories[i];\n                            originalLength = category.values.length;\n                            if (maxRowCount !== undefined && originalLength > maxRowCount) {\n                                // Row count too large: Trim it to fit.\n                                var updatedCategories = ArrayExtensions.range(category.values, 0, maxRowCount - 1);\n                                updated = updated || { categories: [] };\n                                updated.categories.push({\n                                    source: category.source,\n                                    values: updatedCategories\n                                });\n                            }\n                        }\n                    }\n                    if (categorical.values && categorical.values.length > 0 && maxRowCount) {\n                        if (!originalLength)\n                            originalLength = categorical.values[0].values.length;\n                        if (maxRowCount !== undefined && originalLength > maxRowCount) {\n                            updated = updated || {};\n                            updated.values = powerbi.data.DataViewTransform.createValueColumns();\n                            for (var i = 0, len = categorical.values.length; i < len; i++) {\n                                var column = categorical.values[i], updatedColumn = {\n                                    source: column.source,\n                                    values: ArrayExtensions.range(column.values, 0, maxRowCount - 1)\n                                };\n                                if (column.min !== undefined)\n                                    updatedColumn.min = column.min;\n                                if (column.max !== undefined)\n                                    updatedColumn.max = column.max;\n                                if (column.subtotal !== undefined)\n                                    updatedColumn.subtotal = column.subtotal;\n                                updated.values.push(updatedColumn);\n                            }\n                        }\n                    }\n                    if (updated) {\n                        dataView = {\n                            metadata: dataView.metadata,\n                            categorical: updated,\n                        };\n                    }\n                }\n            }\n            if (supportsCategorical(dataView, dataViewMapping))\n                return { dataView: dataView, isValid: true };\n            return null;\n        }\n        function reshapeSingle(dataView, singleRoleMapping) {\n            debug.assertValue(dataView, 'dataView');\n            debug.assertValue(singleRoleMapping, 'singleRoleMapping');\n            if (dataView.single)\n                return { dataView: dataView, isValid: true };\n            return { isValid: false };\n        }\n        function reshapeTree(dataView, treeRoleMapping) {\n            debug.assertValue(dataView, 'dataView');\n            debug.assertValue(treeRoleMapping, 'treeRoleMapping');\n            // TODO: Need to implement the reshaping of Tree\n            var metadata = dataView.metadata;\n            if (validateRange(countGroups(metadata.columns), treeRoleMapping.depth) == null /*&& conforms(countMeasures(metadata.columns), treeRoleMapping.aggregates)*/)\n                return { dataView: dataView, isValid: true };\n            return { isValid: false };\n        }\n        function reshapeTable(dataView, tableRoleMapping) {\n            debug.assertValue(dataView, 'dataView');\n            debug.assertValue(tableRoleMapping, 'tableRoleMapping');\n            if (dataView.table)\n                return { dataView: dataView, isValid: true };\n            return { isValid: false };\n        }\n        function countGroups(columns) {\n            var count = 0;\n            for (var i = 0, len = columns.length; i < len; i++) {\n                if (!columns[i].isMeasure)\n                    ++count;\n            }\n            return count;\n        }\n        DataViewAnalysis.countGroups = countGroups;\n        function countMeasures(columns) {\n            var count = 0;\n            for (var i = 0, len = columns.length; i < len; i++) {\n                if (columns[i].isMeasure)\n                    ++count;\n            }\n            return count;\n        }\n        DataViewAnalysis.countMeasures = countMeasures;\n        /** Indicates whether the dataView conforms to the specified schema. */\n        function supports(dataView, roleMapping, usePreferredDataViewSchema) {\n            if (!roleMapping || !dataView)\n                return false;\n            if (roleMapping.scriptResult && !supportsScriptResult(dataView.scriptResult, roleMapping.scriptResult))\n                return false;\n            if (roleMapping.categorical && !supportsCategorical(dataView, roleMapping.categorical, usePreferredDataViewSchema))\n                return false;\n            if (roleMapping.tree && !supportsTree(dataView, roleMapping.tree))\n                return false;\n            if (roleMapping.single && !supportsSingle(dataView.single, roleMapping.single))\n                return false;\n            if (roleMapping.table && !supportsTable(dataView.table, roleMapping.table, usePreferredDataViewSchema))\n                return false;\n            return true;\n        }\n        DataViewAnalysis.supports = supports;\n        function supportsCategorical(dataView, categoryRoleMapping, usePreferredDataViewSchema) {\n            debug.assertValue(categoryRoleMapping, 'categoryRoleMapping');\n            var dataViewCategorical = dataView.categorical;\n            if (!dataViewCategorical)\n                return false;\n            // TODO: Disabling this implementation isn't right.\n            //if (!conforms(countMeasures(dataView.metadata.columns), categoryRoleMapping.values.roles.length))\n            //    return false;\n            if (categoryRoleMapping.rowCount) {\n                var rowCount = categoryRoleMapping.rowCount.supported;\n                if (usePreferredDataViewSchema && categoryRoleMapping.rowCount.preferred)\n                    rowCount = categoryRoleMapping.rowCount.preferred;\n                if (rowCount) {\n                    var len = 0;\n                    if (dataViewCategorical.values && dataViewCategorical.values.length)\n                        len = dataViewCategorical.values[0].values.length;\n                    else if (dataViewCategorical.categories && dataViewCategorical.categories.length)\n                        len = dataViewCategorical.categories[0].values.length;\n                    if (validateRange(len, rowCount) != null)\n                        return false;\n                }\n            }\n            return true;\n        }\n        function supportsSingle(dataViewSingle, singleRoleMapping) {\n            debug.assertValue(singleRoleMapping, 'singleRoleMapping');\n            if (!dataViewSingle)\n                return false;\n            return true;\n        }\n        function supportsTree(dataView, treeRoleMapping) {\n            debug.assertValue(treeRoleMapping, 'treeRoleMapping');\n            var metadata = dataView.metadata;\n            return validateRange(countGroups(metadata.columns), treeRoleMapping.depth) == null;\n        }\n        function supportsTable(dataViewTable, tableRoleMapping, usePreferredDataViewSchema) {\n            debug.assertValue(tableRoleMapping, 'tableRoleMapping');\n            if (!dataViewTable)\n                return false;\n            if (tableRoleMapping.rowCount) {\n                var rowCount = tableRoleMapping.rowCount.supported;\n                if (usePreferredDataViewSchema && tableRoleMapping.rowCount.preferred)\n                    rowCount = tableRoleMapping.rowCount.preferred;\n                if (rowCount) {\n                    var len = 0;\n                    if (dataViewTable.rows && dataViewTable.rows.length)\n                        len = dataViewTable.rows.length;\n                    if (validateRange(len, rowCount) != null)\n                        return false;\n                }\n            }\n            return true;\n        }\n        function supportsScriptResult(dataView, scriptResultRoleMapping) {\n            debug.assertValue(scriptResultRoleMapping, 'scriptResultRoleMapping');\n            if (!dataView)\n                return false;\n            if (!dataView.imageBase64)\n                return false;\n            return true;\n        }\n        /**\n         * Determines whether the value conforms to the range in the role condition, returning undefined\n         * if so or an appropriate error code if not.\n         */\n        function validateRange(value, roleCondition, ignoreMin) {\n            debug.assertValue(value, 'value');\n            if (!roleCondition)\n                return;\n            if (!ignoreMin && roleCondition.min !== undefined && roleCondition.min > value)\n                return DataViewMappingMatchErrorCode.conditionRangeTooSmall;\n            if (roleCondition.max !== undefined && roleCondition.max < value)\n                return DataViewMappingMatchErrorCode.conditionRangeTooLarge;\n        }\n        DataViewAnalysis.validateRange = validateRange;\n        /**\n         * Determines whether the value conforms to the kind in the role condition, returning undefined\n         * if so or an appropriate error code if not.\n         */\n        function validateKind(roleCondition, roleName, projections, roleKindByQueryRef) {\n            if (!roleCondition || roleCondition.kind === undefined) {\n                return;\n            }\n            var expectedKind = roleCondition.kind;\n            var roleCollection = projections[roleName];\n            if (roleCollection) {\n                var roleProjections = roleCollection.all();\n                for (var _i = 0; _i < roleProjections.length; _i++) {\n                    var roleProjection = roleProjections[_i];\n                    if (roleKindByQueryRef[roleProjection.queryRef] !== expectedKind) {\n                        switch (expectedKind) {\n                            case powerbi.VisualDataRoleKind.Measure:\n                                return DataViewMappingMatchErrorCode.conditionKindExpectedMeasure;\n                            case powerbi.VisualDataRoleKind.Grouping:\n                                return DataViewMappingMatchErrorCode.conditionKindExpectedGrouping;\n                            case powerbi.VisualDataRoleKind.GroupingOrMeasure:\n                                return DataViewMappingMatchErrorCode.conditionKindExpectedGroupingOrMeasure;\n                        }\n                    }\n                }\n            }\n        }\n        /** Determines the appropriate DataViewMappings for the projections. */\n        function chooseDataViewMappings(projections, mappings, roleKindByQueryRef, objectDescriptors, objectDefinitions) {\n            debug.assertValue(projections, 'projections');\n            debug.assertValue(mappings, 'mappings');\n            var supportedMappings = [];\n            var errors = [];\n            for (var mappingIndex = 0, mappingCount = mappings.length; mappingIndex < mappingCount; mappingIndex++) {\n                var mapping = mappings[mappingIndex], mappingConditions = mapping.conditions, requiredProperties = mapping.requiredProperties;\n                var allPropertiesValid = areAllPropertiesValid(requiredProperties, objectDescriptors, objectDefinitions);\n                var conditionsMet = [];\n                if (!_.isEmpty(mappingConditions)) {\n                    for (var conditionIndex = 0, conditionCount = mappingConditions.length; conditionIndex < conditionCount; conditionIndex++) {\n                        var condition = mappingConditions[conditionIndex];\n                        var currentConditionErrors = checkForConditionErrors(projections, condition, roleKindByQueryRef);\n                        if (!_.isEmpty(currentConditionErrors)) {\n                            for (var _i = 0; _i < currentConditionErrors.length; _i++) {\n                                var error = currentConditionErrors[_i];\n                                error.mappingIndex = mappingIndex;\n                                error.conditionIndex = conditionIndex;\n                                errors.push(error);\n                            }\n                        }\n                        else\n                            conditionsMet.push(condition);\n                    }\n                }\n                else {\n                    conditionsMet.push({});\n                }\n                if (!_.isEmpty(conditionsMet) && allPropertiesValid) {\n                    var supportedMapping = _.cloneDeep(mapping);\n                    var updatedConditions = _.filter(conditionsMet, function (condition) { return Object.keys(condition).length > 0; });\n                    if (!_.isEmpty(updatedConditions))\n                        supportedMapping.conditions = updatedConditions;\n                    supportedMappings.push(supportedMapping);\n                }\n            }\n            return {\n                supportedMappings: ArrayExtensions.emptyToNull(supportedMappings),\n                mappingErrors: ArrayExtensions.emptyToNull(errors),\n            };\n        }\n        DataViewAnalysis.chooseDataViewMappings = chooseDataViewMappings;\n        function checkForConditionErrors(projections, condition, roleKindByQueryRef) {\n            debug.assertValue(projections, 'projections');\n            debug.assertValue(condition, 'condition');\n            var conditionRoles = Object.keys(condition);\n            var errors = [];\n            for (var i = 0, len = conditionRoles.length; i < len; i++) {\n                var roleName = conditionRoles[i], isDrillable = projections[roleName] && !_.isEmpty(projections[roleName].activeProjectionRefs), roleCondition = condition[roleName];\n                var roleCount = getPropertyCount(roleName, projections, isDrillable);\n                var rangeError = validateRange(roleCount, roleCondition);\n                if (rangeError != null) {\n                    errors.push({\n                        code: rangeError,\n                        roleName: roleName,\n                    });\n                }\n                var kindError = validateKind(roleCondition, roleName, projections, roleKindByQueryRef);\n                if (kindError != null) {\n                    errors.push({\n                        code: kindError,\n                        roleName: roleName,\n                    });\n                }\n            }\n            return errors;\n        }\n        function areAllPropertiesValid(requiredProperties, objectDescriptors, objectDefinitions) {\n            if (_.isEmpty(requiredProperties))\n                return true;\n            if (!objectDescriptors || !objectDefinitions)\n                return false;\n            var staticEvalContext = powerbi.data.createStaticEvalContext();\n            return _.every(requiredProperties, function (requiredProperty) {\n                var objectDescriptorValue = null;\n                var objectDescriptorProperty = objectDescriptors[requiredProperty.objectName];\n                if (objectDescriptorProperty)\n                    objectDescriptorValue = objectDescriptorProperty.properties[requiredProperty.propertyName];\n                var objectDefinitionValue = DataViewObjectDefinitions.getValue(objectDefinitions, requiredProperty, null);\n                if (!objectDescriptorValue || !objectDefinitionValue)\n                    return false;\n                return powerbi.data.DataViewObjectEvaluator.evaluateProperty(staticEvalContext, objectDescriptorValue, objectDefinitionValue);\n            });\n        }\n        function getPropertyCount(roleName, projections, useActiveIfAvailable) {\n            debug.assertValue(roleName, 'roleName');\n            debug.assertValue(projections, 'projections');\n            var projectionsForRole = projections[roleName];\n            if (projectionsForRole) {\n                if (useActiveIfAvailable)\n                    return 1;\n                return projectionsForRole.all().length;\n            }\n            return 0;\n        }\n        DataViewAnalysis.getPropertyCount = getPropertyCount;\n        function hasSameCategoryIdentity(dataView1, dataView2) {\n            if (dataView1\n                && dataView2\n                && dataView1.categorical\n                && dataView2.categorical) {\n                var dv1Categories = dataView1.categorical.categories;\n                var dv2Categories = dataView2.categorical.categories;\n                if (dv1Categories\n                    && dv2Categories\n                    && dv1Categories.length === dv2Categories.length) {\n                    for (var i = 0, len = dv1Categories.length; i < len; i++) {\n                        var dv1Identity = dv1Categories[i].identity;\n                        var dv2Identity = dv2Categories[i].identity;\n                        var dv1Length = getLengthOptional(dv1Identity);\n                        if (dv1Length !== getLengthOptional(dv2Identity))\n                            return false;\n                        for (var j = 0; j < dv1Length; j++) {\n                            if (!powerbi.DataViewScopeIdentity.equals(dv1Identity[j], dv2Identity[j]))\n                                return false;\n                        }\n                    }\n                    return true;\n                }\n            }\n            return false;\n        }\n        DataViewAnalysis.hasSameCategoryIdentity = hasSameCategoryIdentity;\n        function getLengthOptional(identity) {\n            if (identity)\n                return identity.length;\n            return 0;\n        }\n        function areMetadataColumnsEquivalent(column1, column2) {\n            if (!column1 && !column2)\n                return true;\n            if (!column1 || !column2)\n                return false;\n            if (column1.displayName !== column2.displayName)\n                return false;\n            if (column1.queryName !== column2.queryName)\n                return false;\n            if (column1.isMeasure !== column2.isMeasure)\n                return false;\n            if (column1.type !== column2.type)\n                return false;\n            if (column1.sort !== column2.sort)\n                return false;\n            return true;\n        }\n        DataViewAnalysis.areMetadataColumnsEquivalent = areMetadataColumnsEquivalent;\n        /* Returns true if the metadata columns at the same positions in the array are equivalent. */\n        function isMetadataEquivalent(metadata1, metadata2) {\n            if (!metadata1 && !metadata2)\n                return true;\n            if (!metadata1 || !metadata2)\n                return false;\n            var previousColumnsLength = metadata1.columns.length;\n            var newColumnsLength = metadata2.columns.length;\n            if (previousColumnsLength !== newColumnsLength)\n                return false;\n            for (var i = 0; i < newColumnsLength; i++) {\n                if (!DataViewAnalysis.areMetadataColumnsEquivalent(metadata1.columns[i], metadata2.columns[i]))\n                    return false;\n            }\n            return true;\n        }\n        DataViewAnalysis.isMetadataEquivalent = isMetadataEquivalent;\n    })(DataViewAnalysis = powerbi.DataViewAnalysis || (powerbi.DataViewAnalysis = {}));\n})(powerbi || (powerbi = {}));\n/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\nvar powerbi;\n(function (powerbi) {\n    var DataViewScopeIdentity;\n    (function (DataViewScopeIdentity) {\n        /** Compares the two DataViewScopeIdentity values for equality. */\n        function equals(x, y, ignoreCase) {\n            // Normalize falsy to null\n            x = x || null;\n            y = y || null;\n            if (x === y)\n                return true;\n            if (!x !== !y)\n                return false;\n            debug.assertValue(x, 'x');\n            debug.assertValue(y, 'y');\n            return data.SQExpr.equals(x.expr, y.expr, ignoreCase);\n        }\n        DataViewScopeIdentity.equals = equals;\n        function filterFromIdentity(identities, isNot) {\n            if (_.isEmpty(identities))\n                return;\n            var exprs = [];\n            for (var _i = 0; _i < identities.length; _i++) {\n                var identity = identities[_i];\n                exprs.push(identity.expr);\n            }\n            return filterFromExprs(exprs, isNot);\n        }\n        DataViewScopeIdentity.filterFromIdentity = filterFromIdentity;\n        function filterFromExprs(orExprs, isNot) {\n            if (_.isEmpty(orExprs))\n                return;\n            var resultExpr;\n            for (var _i = 0; _i < orExprs.length; _i++) {\n                var orExpr = orExprs[_i];\n                var inExpr = data.ScopeIdentityExtractor.getInExpr(orExpr);\n                if (resultExpr)\n                    resultExpr = data.SQExprBuilder.or(resultExpr, inExpr);\n                else\n                    resultExpr = inExpr || orExpr;\n            }\n            if (resultExpr) {\n                if (isNot)\n                    resultExpr = powerbi.data.SQExprBuilder.not(resultExpr);\n            }\n            return powerbi.data.SemanticFilter.fromSQExpr(resultExpr);\n        }\n        DataViewScopeIdentity.filterFromExprs = filterFromExprs;\n    })(DataViewScopeIdentity = powerbi.DataViewScopeIdentity || (powerbi.DataViewScopeIdentity = {}));\n    var data;\n    (function (data) {\n        var Lazy = jsCommon.Lazy;\n        function createDataViewScopeIdentity(expr) {\n            return new DataViewScopeIdentityImpl(expr);\n        }\n        data.createDataViewScopeIdentity = createDataViewScopeIdentity;\n        var DataViewScopeIdentityImpl = (function () {\n            function DataViewScopeIdentityImpl(expr) {\n                debug.assertValue(expr, 'expr');\n                this._expr = expr;\n                this._key = new Lazy(function () { return data.SQExprShortSerializer.serialize(expr); });\n            }\n            Object.defineProperty(DataViewScopeIdentityImpl.prototype, \"expr\", {\n                get: function () {\n                    return this._expr;\n                },\n                enumerable: true,\n                configurable: true\n            });\n            Object.defineProperty(DataViewScopeIdentityImpl.prototype, \"key\", {\n                get: function () {\n                    return this._key.getValue();\n                },\n                enumerable: true,\n                configurable: true\n            });\n            return DataViewScopeIdentityImpl;\n        })();\n    })(data = powerbi.data || (powerbi.data = {}));\n})(powerbi || (powerbi = {}));\n/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\nvar powerbi;\n(function (powerbi) {\n    var data;\n    (function (data) {\n        var Lazy = jsCommon.Lazy;\n        var DataViewScopeWildcard;\n        (function (DataViewScopeWildcard) {\n            function matches(wildcard, instance) {\n                var instanceExprs = data.ScopeIdentityExtractor.getKeys(instance.expr);\n                if (!instanceExprs)\n                    return false;\n                return data.SQExprUtils.sequenceEqual(wildcard.exprs, instanceExprs);\n            }\n            DataViewScopeWildcard.matches = matches;\n            function fromExprs(exprs) {\n                return new DataViewScopeWildcardImpl(exprs);\n            }\n            DataViewScopeWildcard.fromExprs = fromExprs;\n            var DataViewScopeWildcardImpl = (function () {\n                function DataViewScopeWildcardImpl(exprs) {\n                    debug.assertValue(exprs, 'exprs');\n                    this._exprs = exprs;\n                    this._key = new Lazy(function () { return data.SQExprShortSerializer.serializeArray(exprs); });\n                }\n                Object.defineProperty(DataViewScopeWildcardImpl.prototype, \"exprs\", {\n                    get: function () {\n                        return this._exprs;\n                    },\n                    enumerable: true,\n                    configurable: true\n                });\n                Object.defineProperty(DataViewScopeWildcardImpl.prototype, \"key\", {\n                    get: function () {\n                        return this._key.getValue();\n                    },\n                    enumerable: true,\n                    configurable: true\n                });\n                return DataViewScopeWildcardImpl;\n            })();\n        })(DataViewScopeWildcard = data.DataViewScopeWildcard || (data.DataViewScopeWildcard = {}));\n    })(data = powerbi.data || (powerbi.data = {}));\n})(powerbi || (powerbi = {}));\n/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\n/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\nvar powerbi;\n(function (powerbi) {\n    var data;\n    (function (data) {\n        var DataViewRegression;\n        (function (DataViewRegression) {\n            // TODO VSTS 6842046: Currently we are using a constant queryName since we don't have a way to generate\n            // unique ones. There is a bug filed to do this by lawong, so this part will be fixed with that bug.\n            var regressionXQueryName = 'RegressionX';\n            DataViewRegression.regressionYQueryName = 'RegressionY';\n            function run(options) {\n                debug.assertValue(options, 'options');\n                var dataViewMappings = options.dataViewMappings;\n                var transformedDataViews = options.transformedDataViews;\n                var dataRoles = options.dataRoles;\n                var objectDescriptors = options.objectDescriptors;\n                var objectDefinitions = options.objectDefinitions;\n                var colorAllocatorFactory = options.colorAllocatorFactory;\n                var transformSelects = options.transformSelects;\n                var projectionActiveItems = options.projectionActiveItems;\n                var dataView = options.dataView;\n                if (transformedDataViews.length === 1 && transformSelects && dataView.metadata) {\n                    // compute linear regression line if applicable\n                    var roleKindByQueryRef = data.DataViewSelectTransform.createRoleKindFromMetadata(transformSelects, dataView.metadata);\n                    var projections = data.DataViewSelectTransform.projectionsFromSelects(transformSelects, projectionActiveItems);\n                    if (!roleKindByQueryRef || !projections || !dataViewMappings || !objectDescriptors || !objectDefinitions)\n                        return transformedDataViews;\n                    var applicableDataViewMappings = powerbi.DataViewAnalysis.chooseDataViewMappings(projections, dataViewMappings, roleKindByQueryRef, objectDescriptors, objectDefinitions).supportedMappings;\n                    if (applicableDataViewMappings) {\n                        var regressionDataViewMapping = _.find(applicableDataViewMappings, function (dataViewMapping) {\n                            return dataViewMapping.usage && dataViewMapping.usage.regression;\n                        });\n                        if (regressionDataViewMapping) {\n                            var regressionSource = transformedDataViews[0];\n                            var regressionDataView = this.linearRegressionTransform(regressionSource, dataRoles, regressionDataViewMapping, objectDescriptors, objectDefinitions, colorAllocatorFactory);\n                            if (regressionDataView)\n                                transformedDataViews.push(regressionDataView);\n                        }\n                    }\n                }\n                return transformedDataViews;\n            }\n            DataViewRegression.run = run;\n            /**\n             * This function will compute the linear regression algorithm on the sourceDataView and create a new dataView.\n             * It works on scalar axis only.\n             * The algorithm is as follows\n             *\n             * 1. Find the cartesian X and Y roles and the columns that correspond to those roles\n             * 2. Order the X-Y value pairs by the X values\n             * 3. Linearly map dates to their respective times and normalize since regression cannot be directly computed on dates\n             * 4. Compute the actual regression:\n             *    i.   xBar: average of X values, yBar: average of Y values\n             *    ii.  ssXX: sum of squares of X values = Sum(xi - xBar)^2\n             *    iii. ssXY: sum of squares of X and Y values  = Sum((xi - xBar)(yi - yBar)\n             *    iv.  Slope: ssXY / ssXX\n             *    v.   Intercept: yBar - xBar * slope\n             * 5. Compute the X and Y points for regression line using Y = Slope * X + Intercept\n             * 6. Create the new dataView using the points computed above\n             */\n            function linearRegressionTransform(sourceDataView, dataRoles, regressionDataViewMapping, objectDescriptors, objectDefinitions, colorAllocatorFactory) {\n                debug.assertValue(sourceDataView, 'sourceDataView');\n                debug.assertValue(sourceDataView.categorical, 'sourceDataView.categorical');\n                debug.assertValue(dataRoles, 'dataRoles');\n                debug.assertValue(objectDescriptors, 'objectDescriptors');\n                debug.assertValue(objectDefinitions, 'objectDefinitions');\n                debug.assertValue(colorAllocatorFactory, 'colorAllocatorFactory');\n                // Step 1\n                var xRole = findRoleWithCartesianAxis(0 /* X */, dataRoles);\n                var yRole = findRoleWithCartesianAxis(1 /* Y */, dataRoles);\n                if (!xRole || !yRole)\n                    return;\n                var xColumn = getColumnForCategoricalRole(xRole, sourceDataView.categorical);\n                var yColumn = getColumnForCategoricalRole(yRole, sourceDataView.categorical);\n                if (!xColumn || !yColumn)\n                    return;\n                var unsortedXValues = xColumn.values;\n                var unsortedYValues = yColumn.values;\n                if (_.isEmpty(unsortedXValues) || _.isEmpty(unsortedYValues))\n                    return;\n                // get the data type for each column; we will have null type when dataPoints have different type or if a value is null\n                var xDataType = getDataType(unsortedXValues);\n                if (!xDataType)\n                    return;\n                var yDataType = getDataType(unsortedYValues);\n                if (!yDataType)\n                    return;\n                // Step 2\n                var _a = sortValues(unsortedXValues, unsortedYValues), xValues = _a.xValues, yValues = _a.yValues;\n                var minCategoryValue = xValues[0];\n                var maxCategoryValue = xValues[xValues.length - 1];\n                // Step 3\n                if (xDataType === 'Date')\n                    xValues = normalizeDateValues(xValues);\n                // Step 4\n                var _b = computeRegressionLine(xValues, yValues), slope = _b.slope, intercept = _b.intercept;\n                // Step 5\n                var minXValue = xValues[0];\n                var maxXValue = xValues[xValues.length - 1];\n                var newCategories = [minCategoryValue, maxCategoryValue];\n                var newValues = [minXValue * slope + intercept, maxXValue * slope + intercept];\n                // Step 6\n                var regressionDataView = createRegressionDataView(xColumn, yColumn, newCategories, newValues, sourceDataView, regressionDataViewMapping, objectDescriptors, objectDefinitions, colorAllocatorFactory);\n                return regressionDataView;\n            }\n            DataViewRegression.linearRegressionTransform = linearRegressionTransform;\n            function findRoleWithCartesianAxis(cartesianRole, dataRoles) {\n                debug.assertValue(cartesianRole, 'cartesianRole');\n                debug.assertValue(dataRoles, 'dataRoles');\n                for (var _i = 0; _i < dataRoles.length; _i++) {\n                    var dataRole = dataRoles[_i];\n                    if (dataRole.cartesianKind === cartesianRole)\n                        return dataRole.name;\n                }\n            }\n            function getColumnForCategoricalRole(roleName, categorical) {\n                debug.assertValue(roleName, 'roleName');\n                debug.assertValue(categorical, 'categorical');\n                debug.assertValue(categorical.categories, 'categorical.categories');\n                debug.assertValue(categorical.values, 'categorical.values');\n                var categoryColumn = getRoleFromColumn(roleName, categorical.categories);\n                if (categoryColumn)\n                    return categoryColumn;\n                // Regression is not supported for multiple series yet, so return null column back\n                if (categorical.values.source)\n                    return null;\n                var valueColumn = getRoleFromColumn(roleName, categorical.values);\n                if (valueColumn)\n                    return valueColumn;\n                return null;\n            }\n            function getRoleFromColumn(roleName, columns) {\n                debug.assertValue(roleName, 'roleName');\n                debug.assertValue(columns, 'columns');\n                return _.find(columns, function (column) {\n                    return column.source.roles[roleName];\n                });\n            }\n            function getDataType(values) {\n                if (_.isEmpty(values) || values[0] == null)\n                    return;\n                var dataType = typeof values[0];\n                if (_.some(values, function (value) { return value === null || typeof value !== dataType; }))\n                    return;\n                return dataType;\n            }\n            function sortValues(unsortedXValues, unsortedYValues) {\n                debug.assertValue(unsortedXValues, 'unsortedXValues');\n                debug.assertValue(unsortedYValues, 'unsortedYValues');\n                var zippedValues = _.zip(unsortedXValues, unsortedYValues);\n                var sortedValues = _.sortBy(zippedValues, function (valuePair) {\n                    return valuePair[0];\n                });\n                var _a = _.unzip(sortedValues), xValues = _a[0], yValues = _a[1];\n                return {\n                    xValues: xValues,\n                    yValues: yValues\n                };\n            }\n            function normalizeDateValues(xValues) {\n                debug.assertValue(xValues, 'xValues');\n                var initialTime = xValues[0].getTime();\n                for (var i = 0; i < xValues.length; i++) {\n                    xValues[i] = xValues[i].getTime() - initialTime;\n                }\n                return xValues;\n            }\n            function computeRegressionLine(xValues, yValues) {\n                debug.assertValue(xValues, 'xValues');\n                debug.assertValue(yValues, 'yValues');\n                var xBar = _.sum(xValues) / xValues.length;\n                var yBar = _.sum(yValues) / yValues.length;\n                var ssXX = _.chain(xValues)\n                    .map(function (x) {\n                    return Math.pow((x - xBar), 2);\n                })\n                    .sum();\n                var ssXY = _.chain(xValues)\n                    .map(function (x, i) {\n                    return (x - xBar) * (yValues[i] - yBar);\n                })\n                    .sum();\n                var slope = ssXY / ssXX;\n                var intercept = yBar - (xBar * slope);\n                return {\n                    slope: slope,\n                    intercept: intercept\n                };\n            }\n            function createRegressionDataView(xColumn, yColumn, newCategories, newValues, sourceDataView, regressionDataViewMapping, objectDescriptors, objectDefinitions, colorAllocatorFactory) {\n                debug.assertValue(xColumn, 'xColumn');\n                debug.assertValue(yColumn, 'yColumn');\n                debug.assertValue(newCategories, 'newCategories');\n                debug.assertValue(newValues, 'newValues');\n                debug.assertValue(sourceDataView, 'sourceDataView');\n                debug.assertValue(objectDescriptors, 'objectDescriptors');\n                debug.assertValue(objectDefinitions, 'objectDefinitions');\n                debug.assertValue(colorAllocatorFactory, 'colorAllocatorFactory');\n                var xRole = regressionDataViewMapping.categorical.categories.for.in;\n                var yRole = regressionDataViewMapping.categorical.values.for.in;\n                var categoricalRoles = {};\n                categoricalRoles[xRole] = true;\n                var valueRoles = {};\n                valueRoles[yRole] = true;\n                var regressionDataView = data.createCategoricalDataViewBuilder()\n                    .withCategories([{\n                        source: {\n                            displayName: xColumn.source.displayName,\n                            queryName: regressionXQueryName,\n                            type: xColumn.source.type,\n                            isMeasure: xColumn.source.isMeasure,\n                            roles: categoricalRoles\n                        },\n                        values: newCategories\n                    }])\n                    .withValues({\n                    columns: [{\n                            source: {\n                                displayName: yColumn.source.displayName,\n                                queryName: DataViewRegression.regressionYQueryName,\n                                type: yColumn.source.type,\n                                isMeasure: yColumn.source.isMeasure,\n                                roles: valueRoles\n                            },\n                            values: newValues\n                        }]\n                })\n                    .build();\n                data.DataViewTransform.transformObjects(regressionDataView, 1 /* Categorical */, objectDescriptors, objectDefinitions, [], colorAllocatorFactory);\n                return regressionDataView;\n            }\n        })(DataViewRegression = data.DataViewRegression || (data.DataViewRegression = {}));\n    })(data = powerbi.data || (powerbi.data = {}));\n})(powerbi || (powerbi = {}));\n/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\nvar powerbi;\n(function (powerbi) {\n    var data;\n    (function (data) {\n        var DataViewSelectTransform;\n        (function (DataViewSelectTransform) {\n            /** Convert selection info to projections */\n            function projectionsFromSelects(selects, projectionActiveItems) {\n                debug.assertAnyValue(selects, \"selects\");\n                debug.assertAnyValue(projectionActiveItems, \"projectionActiveItems\");\n                var projections = {};\n                for (var _i = 0; _i < selects.length; _i++) {\n                    var select = selects[_i];\n                    var roles = select.roles;\n                    if (!roles)\n                        continue;\n                    for (var roleName in roles) {\n                        if (roles[roleName]) {\n                            var qp = projections[roleName];\n                            if (!qp)\n                                qp = projections[roleName] = new data.QueryProjectionCollection([]);\n                            qp.all().push({ queryRef: select.queryName });\n                            if (projectionActiveItems && projectionActiveItems[roleName])\n                                qp.activeProjectionRefs = projectionActiveItems[roleName];\n                        }\n                    }\n                }\n                return projections;\n            }\n            DataViewSelectTransform.projectionsFromSelects = projectionsFromSelects;\n            /** Use selections and metadata to fashion query role kinds */\n            function createRoleKindFromMetadata(selects, metadata) {\n                var roleKindByQueryRef = {};\n                for (var _i = 0, _a = metadata.columns; _i < _a.length; _i++) {\n                    var column = _a[_i];\n                    if ((!column.index && column.index !== 0) || column.index < 0 || column.index >= selects.length)\n                        continue;\n                    var select = selects[column.index];\n                    if (select) {\n                        var queryRef = select.queryName;\n                        if (queryRef && roleKindByQueryRef[queryRef] === undefined) {\n                            roleKindByQueryRef[queryRef] = column.isMeasure ? powerbi.VisualDataRoleKind.Measure : powerbi.VisualDataRoleKind.Grouping;\n                        }\n                    }\n                }\n                return roleKindByQueryRef;\n            }\n            DataViewSelectTransform.createRoleKindFromMetadata = createRoleKindFromMetadata;\n        })(DataViewSelectTransform = data.DataViewSelectTransform || (data.DataViewSelectTransform = {}));\n    })(data = powerbi.data || (powerbi.data = {}));\n})(powerbi || (powerbi = {}));\n/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\nvar powerbi;\n(function (powerbi) {\n    var data;\n    (function (data) {\n        function createCategoricalEvalContext(dataViewCategorical) {\n            return new CategoricalEvalContext(dataViewCategorical);\n        }\n        data.createCategoricalEvalContext = createCategoricalEvalContext;\n        var CategoricalEvalContext = (function () {\n            function CategoricalEvalContext(dataView) {\n                debug.assertValue(dataView, 'dataView');\n                this.dataView = dataView;\n                this.columnsByRole = {};\n            }\n            CategoricalEvalContext.prototype.getExprValue = function (expr) {\n                return;\n            };\n            CategoricalEvalContext.prototype.getRoleValue = function (roleName) {\n                var columnsByRole = this.columnsByRole;\n                var column = columnsByRole[roleName];\n                if (!column)\n                    column = columnsByRole[roleName] = findRuleInputColumn(this.dataView, roleName);\n                if (!column)\n                    return;\n                var index = this.index;\n                if (index != null)\n                    return column.values[this.index];\n            };\n            CategoricalEvalContext.prototype.setCurrentRowIndex = function (index) {\n                debug.assertValue(index, 'index');\n                this.index = index;\n            };\n            return CategoricalEvalContext;\n        })();\n        function findRuleInputColumn(dataViewCategorical, inputRole) {\n            debug.assertValue(dataViewCategorical, 'dataViewCategorical');\n            return findRuleInputInColumns(dataViewCategorical.values, inputRole) ||\n                findRuleInputInColumns(dataViewCategorical.categories, inputRole);\n        }\n        function findRuleInputInColumns(columns, inputRole) {\n            debug.assertAnyValue(columns, 'columns');\n            if (!columns)\n                return;\n            for (var _i = 0; _i < columns.length; _i++) {\n                var column = columns[_i];\n                var roles = column.source.roles;\n                if (!roles || !roles[inputRole])\n                    continue;\n                return column;\n            }\n        }\n    })(data = powerbi.data || (powerbi.data = {}));\n})(powerbi || (powerbi = {}));\n/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\nvar powerbi;\n(function (powerbi) {\n    var data;\n    (function (data) {\n        function createTableEvalContext(dataViewTable, selectTransforms) {\n            return new TableEvalContext(dataViewTable, selectTransforms);\n        }\n        data.createTableEvalContext = createTableEvalContext;\n        var TableEvalContext = (function () {\n            function TableEvalContext(dataView, selectTransforms) {\n                debug.assertValue(dataView, 'dataView');\n                debug.assertValue(selectTransforms, 'selectTransforms');\n                this.dataView = dataView;\n                this.selectTransforms = selectTransforms;\n            }\n            TableEvalContext.prototype.getExprValue = function (expr) {\n                debug.assertValue(expr, 'expr');\n                var rowIdx = this.rowIdx;\n                if (rowIdx == null)\n                    return;\n                return data.getExprValueFromTable(expr, this.selectTransforms, this.dataView, rowIdx);\n            };\n            TableEvalContext.prototype.getRoleValue = function (roleName) {\n                return;\n            };\n            TableEvalContext.prototype.setCurrentRowIndex = function (index) {\n                debug.assertValue(index, 'index');\n                this.rowIdx = index;\n            };\n            return TableEvalContext;\n        })();\n    })(data = powerbi.data || (powerbi.data = {}));\n})(powerbi || (powerbi = {}));\n/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\nvar powerbi;\n(function (powerbi) {\n    var data;\n    (function (data) {\n        var RuleEvaluation = (function () {\n            function RuleEvaluation() {\n            }\n            // NOTE: even though this class has no behaviour, we still use a class to facilitate instanceof checks.\n            RuleEvaluation.prototype.evaluate = function (evalContext) {\n                debug.assertFail('Abstract method RuleEvaluation.evaluate not implemented.');\n            };\n            return RuleEvaluation;\n        })();\n        data.RuleEvaluation = RuleEvaluation;\n    })(data = powerbi.data || (powerbi.data = {}));\n})(powerbi || (powerbi = {}));\n/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\nvar powerbi;\n(function (powerbi) {\n    var data;\n    (function (data) {\n        var ColorRuleEvaluation = (function (_super) {\n            __extends(ColorRuleEvaluation, _super);\n            function ColorRuleEvaluation(inputRole, allocator) {\n                debug.assertValue(inputRole, 'inputRole');\n                debug.assertValue(allocator, 'allocator');\n                _super.call(this);\n                this.inputRole = inputRole;\n                this.allocator = allocator;\n            }\n            ColorRuleEvaluation.prototype.evaluate = function (evalContext) {\n                debug.assertValue(evalContext, 'evalContext');\n                var value = evalContext.getRoleValue(this.inputRole);\n                if (value !== undefined)\n                    return this.allocator.color(value);\n            };\n            return ColorRuleEvaluation;\n        })(data.RuleEvaluation);\n        data.ColorRuleEvaluation = ColorRuleEvaluation;\n    })(data = powerbi.data || (powerbi.data = {}));\n})(powerbi || (powerbi = {}));\n/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\nvar powerbi;\n(function (powerbi) {\n    var data;\n    (function (data) {\n        var utils;\n        (function (utils) {\n            var DataViewMatrixUtils;\n            (function (DataViewMatrixUtils) {\n                /**\n                 * Invokes the specified callback once per descendent leaf node of the specified matrixNode, with an optional\n                 * index parameter in the callback that is the 0-based index of the particular leaf node in the context of this\n                 * visitLeafNodes(...) invocation.\n                 */\n                function visitLeafNodes(matrixNode, callback) {\n                    debug.assertValue(matrixNode, 'matrixNode');\n                    debug.assertValue(callback, 'callback');\n                    visitLeafNodesRecursive(matrixNode, 0, callback);\n                }\n                DataViewMatrixUtils.visitLeafNodes = visitLeafNodes;\n                function visitLeafNodesRecursive(matrixNode, nextIndex, callback) {\n                    debug.assertValue(matrixNode, 'matrixNode');\n                    debug.assertValue(callback, 'callback');\n                    if (_.isEmpty(matrixNode.children)) {\n                        callback(matrixNode, nextIndex);\n                        nextIndex++;\n                    }\n                    else {\n                        var children = matrixNode.children;\n                        for (var i = 0, len = children.length; i < len; i++) {\n                            var nextChild = children[i];\n                            if (nextChild) {\n                                nextIndex = visitLeafNodesRecursive(nextChild, nextIndex, callback);\n                            }\n                        }\n                    }\n                    return nextIndex;\n                }\n            })(DataViewMatrixUtils = utils.DataViewMatrixUtils || (utils.DataViewMatrixUtils = {}));\n        })(utils = data.utils || (data.utils = {}));\n    })(data = powerbi.data || (powerbi.data = {}));\n})(powerbi || (powerbi = {}));\n/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\nvar powerbi;\n(function (powerbi) {\n    var data;\n    (function (data) {\n        var ConceptualSchema = (function () {\n            function ConceptualSchema() {\n            }\n            ConceptualSchema.prototype.findProperty = function (entityName, propertyName) {\n                var entity = this.entities.withName(entityName);\n                if (!entity || _.isEmpty(entity.properties))\n                    return;\n                return entity.properties.withName(propertyName);\n            };\n            ConceptualSchema.prototype.findHierarchy = function (entityName, name) {\n                var entity = this.entities.withName(entityName);\n                if (!entity || _.isEmpty(entity.hierarchies))\n                    return;\n                return entity.hierarchies.withName(name);\n            };\n            ConceptualSchema.prototype.findHierarchyByVariation = function (variationEntityName, variationColumnName, variationName, hierarchyName) {\n                var variationEntity = this.entities.withName(variationEntityName);\n                if (!variationEntity || _.isEmpty(variationEntity.properties))\n                    return;\n                var variationProperty = variationEntity.properties.withName(variationColumnName);\n                if (!variationProperty)\n                    return;\n                var variationColumn = variationProperty.column;\n                if (!variationColumn || _.isEmpty(variationColumn.variations))\n                    return;\n                var variation = variationColumn.variations.withName(variationName);\n                if (variation) {\n                    var targetEntity = variation.navigationProperty ? variation.navigationProperty.targetEntity : variationEntity;\n                    if (!targetEntity || _.isEmpty(targetEntity.hierarchies))\n                        return;\n                    return targetEntity.hierarchies.withName(hierarchyName);\n                }\n            };\n            /**\n            * Returns the first property of the entity whose kpi is tied to kpiProperty\n            */\n            ConceptualSchema.prototype.findPropertyWithKpi = function (entityName, kpiProperty) {\n                debug.assertValue(kpiProperty, 'kpiProperty');\n                var entity = this.entities.withName(entityName);\n                if (!entity || _.isEmpty(entity.properties))\n                    return;\n                for (var _i = 0, _a = entity.properties; _i < _a.length; _i++) {\n                    var prop = _a[_i];\n                    if (prop &&\n                        prop.measure &&\n                        prop.measure.kpi &&\n                        (prop.measure.kpi.status === kpiProperty || prop.measure.kpi.goal === kpiProperty))\n                        return prop;\n                }\n                return;\n            };\n            return ConceptualSchema;\n        })();\n        data.ConceptualSchema = ConceptualSchema;\n        // TODO: Remove this (replaced by ValueType)\n        (function (ConceptualDataCategory) {\n            ConceptualDataCategory[ConceptualDataCategory[\"None\"] = 0] = \"None\";\n            ConceptualDataCategory[ConceptualDataCategory[\"Address\"] = 1] = \"Address\";\n            ConceptualDataCategory[ConceptualDataCategory[\"City\"] = 2] = \"City\";\n            ConceptualDataCategory[ConceptualDataCategory[\"Company\"] = 3] = \"Company\";\n            ConceptualDataCategory[ConceptualDataCategory[\"Continent\"] = 4] = \"Continent\";\n            ConceptualDataCategory[ConceptualDataCategory[\"Country\"] = 5] = \"Country\";\n            ConceptualDataCategory[ConceptualDataCategory[\"County\"] = 6] = \"County\";\n            ConceptualDataCategory[ConceptualDataCategory[\"Date\"] = 7] = \"Date\";\n            ConceptualDataCategory[ConceptualDataCategory[\"Image\"] = 8] = \"Image\";\n            ConceptualDataCategory[ConceptualDataCategory[\"ImageUrl\"] = 9] = \"ImageUrl\";\n            ConceptualDataCategory[ConceptualDataCategory[\"Latitude\"] = 10] = \"Latitude\";\n            ConceptualDataCategory[ConceptualDataCategory[\"Longitude\"] = 11] = \"Longitude\";\n            ConceptualDataCategory[ConceptualDataCategory[\"Organization\"] = 12] = \"Organization\";\n            ConceptualDataCategory[ConceptualDataCategory[\"Place\"] = 13] = \"Place\";\n            ConceptualDataCategory[ConceptualDataCategory[\"PostalCode\"] = 14] = \"PostalCode\";\n            ConceptualDataCategory[ConceptualDataCategory[\"Product\"] = 15] = \"Product\";\n            ConceptualDataCategory[ConceptualDataCategory[\"StateOrProvince\"] = 16] = \"StateOrProvince\";\n            ConceptualDataCategory[ConceptualDataCategory[\"WebUrl\"] = 17] = \"WebUrl\";\n        })(data.ConceptualDataCategory || (data.ConceptualDataCategory = {}));\n        var ConceptualDataCategory = data.ConceptualDataCategory;\n    })(data = powerbi.data || (powerbi.data = {}));\n})(powerbi || (powerbi = {}));\n/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\nvar powerbi;\n(function (powerbi) {\n    var StringExtensions = jsCommon.StringExtensions;\n    var DefaultSQExprVisitor = powerbi.data.DefaultSQExprVisitor;\n    var SQExprConverter = powerbi.data.SQExprConverter;\n    var FieldExprPattern = powerbi.data.FieldExprPattern;\n    var ScriptResultUtil;\n    (function (ScriptResultUtil) {\n        function findScriptResult(dataViewMappings) {\n            if (dataViewMappings && dataViewMappings.length === 1) {\n                return dataViewMappings[0].scriptResult;\n            }\n            return undefined;\n        }\n        ScriptResultUtil.findScriptResult = findScriptResult;\n        function extractScriptResult(dataViewMappings) {\n            var scriptResult = findScriptResult(dataViewMappings);\n            if (scriptResult) {\n                var objects = dataViewMappings[0].metadata.objects;\n                var source = powerbi.DataViewObjects.getValue(objects, scriptResult.script.source);\n                var provider = powerbi.DataViewObjects.getValue(objects, scriptResult.script.provider);\n                return {\n                    source: source,\n                    provider: provider\n                };\n            }\n            return undefined;\n        }\n        ScriptResultUtil.extractScriptResult = extractScriptResult;\n        function extractScriptResultFromVisualConfig(dataViewMappings, objects) {\n            var scriptResult = findScriptResult(dataViewMappings);\n            if (scriptResult && objects) {\n                var scriptSource = powerbi.data.DataViewObjectDefinitions.getValue(objects, scriptResult.script.source, null);\n                var provider = powerbi.data.DataViewObjectDefinitions.getValue(objects, scriptResult.script.provider, null);\n                return {\n                    source: scriptSource ? scriptSource.value : null,\n                    provider: provider ? provider.value : null\n                };\n            }\n            return undefined;\n        }\n        ScriptResultUtil.extractScriptResultFromVisualConfig = extractScriptResultFromVisualConfig;\n        function getScriptInput(projections, selects, schema) {\n            var scriptInput = {\n                VariableName: \"dataset\",\n                Columns: []\n            };\n            // Go over all the projections, and create an input column according to the order\n            // of the projections (including duplicate expressions)\n            if (projections && selects && !_.isEmpty(selects)) {\n                var scriptInputColumnNames = [];\n                var scriptInputColumns = [];\n                for (var role in projections) {\n                    for (var _i = 0, _a = projections[role].all(); _i < _a.length; _i++) {\n                        var projection = _a[_i];\n                        var select = selects.withName(projection.queryRef);\n                        if (select) {\n                            var scriptInputColumn = {\n                                QueryName: select.name,\n                                Name: select.expr.accept(new ScriptInputColumnNameVisitor(schema))\n                            };\n                            scriptInputColumns.push(scriptInputColumn);\n                            scriptInputColumnNames.push(scriptInputColumn.Name);\n                        }\n                    }\n                }\n                // Make sure the names of the columns are unique\n                scriptInputColumnNames = StringExtensions.ensureUniqueNames(scriptInputColumnNames);\n                // Update the names of the columns\n                for (var i = 0; i < scriptInputColumnNames.length; i++) {\n                    var scriptInputColumn = scriptInputColumns[i];\n                    scriptInputColumn.Name = scriptInputColumnNames[i];\n                }\n                scriptInput.Columns = scriptInputColumns;\n            }\n            return scriptInput;\n        }\n        ScriptResultUtil.getScriptInput = getScriptInput;\n        var ScriptInputColumnNameVisitor = (function (_super) {\n            __extends(ScriptInputColumnNameVisitor, _super);\n            function ScriptInputColumnNameVisitor(federatedSchema) {\n                _super.call(this);\n                this.federatedSchema = federatedSchema;\n            }\n            ScriptInputColumnNameVisitor.prototype.visitEntity = function (expr) {\n                return expr.entity;\n            };\n            ScriptInputColumnNameVisitor.prototype.visitColumnRef = function (expr) {\n                return ScriptInputColumnNameVisitor.getNameForProperty(expr, this.federatedSchema);\n            };\n            ScriptInputColumnNameVisitor.prototype.visitMeasureRef = function (expr) {\n                return ScriptInputColumnNameVisitor.getNameForProperty(expr, this.federatedSchema);\n            };\n            ScriptInputColumnNameVisitor.prototype.visitAggr = function (expr) {\n                return ScriptInputColumnNameVisitor.getNameForAggregate(expr, this.federatedSchema);\n            };\n            ScriptInputColumnNameVisitor.prototype.visitHierarchy = function (expr) {\n                return ScriptInputColumnNameVisitor.getNameForHierarchy(expr, this.federatedSchema);\n            };\n            ScriptInputColumnNameVisitor.prototype.visitHierarchyLevel = function (expr) {\n                return ScriptInputColumnNameVisitor.getNameForHierarchyLevel(expr, this.federatedSchema);\n            };\n            ScriptInputColumnNameVisitor.getNameForProperty = function (expr, federatedSchema) {\n                debug.assertValue(expr, 'expr');\n                var fieldExpr = SQExprConverter.asFieldPattern(expr);\n                var fieldExprItem = fieldExpr.column || fieldExpr.measure;\n                var schema = federatedSchema.schema(fieldExprItem.schema), property = schema.findProperty(fieldExprItem.entity, fieldExprItem.name);\n                if (property)\n                    return property.name;\n            };\n            ScriptInputColumnNameVisitor.getNameForAggregate = function (expr, federatedSchema) {\n                debug.assertValue(expr, 'expr');\n                var field = SQExprConverter.asFieldPattern(expr);\n                var fieldAggregate = field.columnAggr || field.entityAggr;\n                var entity = federatedSchema\n                    .schema(fieldAggregate.schema)\n                    .entities\n                    .withName(fieldAggregate.entity);\n                if (!entity)\n                    return;\n                var backingProperty = entity.properties.withName(FieldExprPattern.getFieldExprName(field));\n                return backingProperty.name;\n            };\n            ScriptInputColumnNameVisitor.getNameForHierarchy = function (expr, federatedScheam) {\n                var fieldExpr = SQExprConverter.asFieldPattern(expr);\n                var fieldExprItem = fieldExpr.hierarchy;\n                if (fieldExprItem) {\n                    var schema = federatedScheam.schema(fieldExprItem.schema), hierarchy = schema.findHierarchy(fieldExprItem.entity, fieldExprItem.name);\n                    if (hierarchy)\n                        return hierarchy.name;\n                }\n            };\n            ScriptInputColumnNameVisitor.getNameForHierarchyLevel = function (expr, federatedScheam) {\n                debug.assertValue(expr, 'expr');\n                var field = SQExprConverter.asFieldPattern(expr);\n                if (field.columnHierarchyLevelVariation) {\n                    return ScriptInputColumnNameVisitor.getVariationLevelName(expr, federatedScheam);\n                }\n                /*Hierarchies are not supported yet*/\n            };\n            ScriptInputColumnNameVisitor.getVariationLevelName = function (expr, federatedSchema) {\n                debug.assertValue(expr, 'expr');\n                var field = SQExprConverter.asFieldPattern(expr);\n                var fieldEntity = FieldExprPattern.toFieldExprEntityItemPattern(field);\n                if (field.columnHierarchyLevelVariation) {\n                    var prop = federatedSchema.schema(fieldEntity.schema).findProperty(fieldEntity.entity, field.columnHierarchyLevelVariation.source.name);\n                    if (!prop)\n                        return;\n                    var variations = prop.column.variations;\n                    for (var _i = 0; _i < variations.length; _i++) {\n                        var variation = variations[_i];\n                        if (variation.name === field.columnHierarchyLevelVariation.variationName)\n                            for (var _a = 0, _b = variation.defaultHierarchy.levels; _a < _b.length; _a++) {\n                                var level = _b[_a];\n                                if (level.name === field.columnHierarchyLevelVariation.level.level)\n                                    return level.column.name;\n                            }\n                    }\n                }\n            };\n            return ScriptInputColumnNameVisitor;\n        })(DefaultSQExprVisitor);\n    })(ScriptResultUtil = powerbi.ScriptResultUtil || (powerbi.ScriptResultUtil = {}));\n})(powerbi || (powerbi = {}));\n/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\nvar powerbi;\n(function (powerbi) {\n    var data;\n    (function (data) {\n        var segmentation;\n        (function (segmentation) {\n            var DataViewMerger;\n            (function (DataViewMerger) {\n                function mergeDataViews(source, segment) {\n                    if (!powerbi.DataViewAnalysis.isMetadataEquivalent(source.metadata, segment.metadata)) {\n                        debug.assertFail(\"Cannot merge data views with different metadata columns\");\n                    }\n                    // The last segment is complete. We mark the source as complete.\n                    if (!segment.metadata.segment)\n                        delete source.metadata.segment;\n                    if (source.table && segment.table)\n                        mergeTables(source.table, segment.table);\n                    if (source.categorical && segment.categorical)\n                        mergeCategorical(source.categorical, segment.categorical);\n                    // Tree cannot support subtotals hence we can get into situations\n                    // where a node has no children in one segment and more than 1 child\n                    // in another segment.\n                    if (source.tree && segment.tree)\n                        mergeTreeNodes(source.tree.root, segment.tree.root, true /*allowDifferentStructure*/);\n                    if (source.matrix && segment.matrix)\n                        mergeTreeNodes(source.matrix.rows.root, segment.matrix.rows.root, false /*allowDifferentStructure*/);\n                }\n                DataViewMerger.mergeDataViews = mergeDataViews;\n                /** Note: Public for testability */\n                function mergeTables(source, segment) {\n                    debug.assertValue(source, 'source');\n                    debug.assertValue(segment, 'segment');\n                    if (segment.rows.length === 0)\n                        return;\n                    merge(source.rows, segment.rows, segment.lastMergeIndex + 1);\n                }\n                DataViewMerger.mergeTables = mergeTables;\n                /**\n                 * Merge categories values and identities\n                 *\n                 * Note: Public for testability\n                 */\n                function mergeCategorical(source, segment) {\n                    debug.assertValue(source, 'source');\n                    debug.assertValue(segment, 'segment');\n                    // Merge categories values and identities\n                    if (source.categories && segment.categories) {\n                        var segmentCategoriesLength = segment.categories.length;\n                        debug.assert(source.categories.length === segmentCategoriesLength, \"Source and segment categories have different lengths.\");\n                        for (var categoryIndex = 0; categoryIndex < segmentCategoriesLength; categoryIndex++) {\n                            var segmentCategory = segment.categories[categoryIndex];\n                            var sourceCategory = source.categories[categoryIndex];\n                            debug.assert(powerbi.DataViewAnalysis.areMetadataColumnsEquivalent(sourceCategory.source, segmentCategory.source), \"Source and segment category have different sources.\");\n                            if (!sourceCategory.values && segmentCategory.values) {\n                                sourceCategory.values = [];\n                                debug.assert(!sourceCategory.identity, \"Source category is missing values but has identities.\");\n                            }\n                            if (segmentCategory.values) {\n                                merge(sourceCategory.values, segmentCategory.values, segment.lastMergeIndex + 1);\n                            }\n                            if (!sourceCategory.identity && segmentCategory.identity) {\n                                sourceCategory.identity = [];\n                            }\n                            if (segmentCategory.identity) {\n                                merge(sourceCategory.identity, segmentCategory.identity, segment.lastMergeIndex + 1);\n                            }\n                        }\n                    }\n                    // Merge values for each value column\n                    if (source.values && segment.values) {\n                        var segmentValuesLength = segment.values.length;\n                        debug.assert(source.values.length === segmentValuesLength, \"Source and segment values have different lengths.\");\n                        for (var valueIndex = 0; valueIndex < segmentValuesLength; valueIndex++) {\n                            var segmentValue = segment.values[valueIndex];\n                            var sourceValue = source.values[valueIndex];\n                            debug.assert(jsCommon.JsonComparer.equals(sourceValue.source, segmentValue.source), \"Source and segment value have different sources.\");\n                            if (!sourceValue.values && segmentValue.values) {\n                                sourceValue.values = [];\n                            }\n                            if (segmentValue.values) {\n                                merge(sourceValue.values, segmentValue.values, segment.lastMergeIndex + 1);\n                            }\n                            if (segmentValue.highlights) {\n                                merge(sourceValue.highlights, segmentValue.highlights, segment.lastMergeIndex + 1);\n                            }\n                        }\n                    }\n                }\n                DataViewMerger.mergeCategorical = mergeCategorical;\n                /**\n                 * Merges the segment array starting at the specified index into the source array\n                 * and returns the segment slice that wasn't merged.\n                 * The segment array is spliced up to specified index in the process.\n                 */\n                function merge(source, segment, index) {\n                    if (index >= segment.length)\n                        return segment;\n                    var result = [];\n                    if (index !== undefined)\n                        result = segment.splice(0, index);\n                    Array.prototype.push.apply(source, segment);\n                    return result;\n                }\n                /** Note: Public for testability */\n                function mergeTreeNodes(sourceRoot, segmentRoot, allowDifferentStructure) {\n                    debug.assertValue(sourceRoot, 'sourceRoot');\n                    debug.assertValue(segmentRoot, 'segmentRoot');\n                    if (!segmentRoot.children || segmentRoot.children.length === 0)\n                        return;\n                    if (allowDifferentStructure && (!sourceRoot.children || sourceRoot.children.length === 0)) {\n                        sourceRoot.children = segmentRoot.children;\n                        return;\n                    }\n                    debug.assert(sourceRoot.children && sourceRoot.children.length >= 0, \"Source tree has different structure than segment.\");\n                    var firstAppendIndex = findFirstAppendIndex(segmentRoot.children);\n                    var lastSourceChild = sourceRoot.children[sourceRoot.children.length - 1];\n                    var mergedChildren = merge(sourceRoot.children, segmentRoot.children, firstAppendIndex);\n                    if (mergedChildren.length > 0)\n                        mergeTreeNodes(lastSourceChild, mergedChildren[mergedChildren.length - 1], allowDifferentStructure);\n                }\n                DataViewMerger.mergeTreeNodes = mergeTreeNodes;\n                function findFirstAppendIndex(children) {\n                    if (children.length === 0)\n                        return 0;\n                    var i = 0;\n                    for (; i < children.length; i++) {\n                        var childSegment = children[i];\n                        if (!childSegment.isMerge)\n                            break;\n                    }\n                    return i;\n                }\n            })(DataViewMerger = segmentation.DataViewMerger || (segmentation.DataViewMerger = {}));\n        })(segmentation = data.segmentation || (data.segmentation = {}));\n    })(data = powerbi.data || (powerbi.data = {}));\n})(powerbi || (powerbi = {}));\n/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\nvar powerbi;\n(function (powerbi) {\n    var data;\n    (function (data) {\n        var ArrayExtensions = jsCommon.ArrayExtensions;\n        /** Rewrites an expression tree, including all descendant nodes. */\n        var SQExprRewriter = (function () {\n            function SQExprRewriter() {\n            }\n            SQExprRewriter.prototype.visitColumnRef = function (expr) {\n                var origArg = expr.source, rewrittenArg = origArg.accept(this);\n                if (origArg === rewrittenArg)\n                    return expr;\n                return new data.SQColumnRefExpr(rewrittenArg, expr.ref);\n            };\n            SQExprRewriter.prototype.visitMeasureRef = function (expr) {\n                var origArg = expr.source, rewrittenArg = origArg.accept(this);\n                if (origArg === rewrittenArg)\n                    return expr;\n                return new data.SQMeasureRefExpr(rewrittenArg, expr.ref);\n            };\n            SQExprRewriter.prototype.visitAggr = function (expr) {\n                var origArg = expr.arg, rewrittenArg = origArg.accept(this);\n                if (origArg === rewrittenArg)\n                    return expr;\n                return new data.SQAggregationExpr(rewrittenArg, expr.func);\n            };\n            SQExprRewriter.prototype.visitHierarchy = function (expr) {\n                var origArg = expr.arg, rewrittenArg = origArg.accept(this);\n                if (origArg === rewrittenArg)\n                    return expr;\n                return new data.SQHierarchyExpr(rewrittenArg, expr.hierarchy);\n            };\n            SQExprRewriter.prototype.visitHierarchyLevel = function (expr) {\n                var origArg = expr.arg, rewrittenArg = origArg.accept(this);\n                if (origArg === rewrittenArg)\n                    return expr;\n                return new data.SQHierarchyLevelExpr(rewrittenArg, expr.level);\n            };\n            SQExprRewriter.prototype.visitPropertyVariationSource = function (expr) {\n                var origArg = expr.arg, rewrittenArg = origArg.accept(this);\n                if (origArg === rewrittenArg)\n                    return expr;\n                return new data.SQPropertyVariationSourceExpr(rewrittenArg, expr.name, expr.property);\n            };\n            SQExprRewriter.prototype.visitEntity = function (expr) {\n                return expr;\n            };\n            SQExprRewriter.prototype.visitAnd = function (orig) {\n                var origLeft = orig.left, rewrittenLeft = origLeft.accept(this), origRight = orig.right, rewrittenRight = origRight.accept(this);\n                if (origLeft === rewrittenLeft && origRight === rewrittenRight)\n                    return orig;\n                return new data.SQAndExpr(rewrittenLeft, rewrittenRight);\n            };\n            SQExprRewriter.prototype.visitBetween = function (orig) {\n                var origArg = orig.arg, rewrittenArg = origArg.accept(this), origLower = orig.lower, rewrittenLower = origLower.accept(this), origUpper = orig.upper, rewrittenUpper = origUpper.accept(this);\n                if (origArg === rewrittenArg && origLower === rewrittenLower && origUpper === rewrittenUpper)\n                    return orig;\n                return new data.SQBetweenExpr(rewrittenArg, rewrittenLower, rewrittenUpper);\n            };\n            SQExprRewriter.prototype.visitIn = function (orig) {\n                var origArgs = orig.args, rewrittenArgs = this.rewriteAll(origArgs), origValues = orig.values, rewrittenValues;\n                for (var i = 0, len = origValues.length; i < len; i++) {\n                    var origValueTuple = origValues[i], rewrittenValueTuple = this.rewriteAll(origValueTuple);\n                    if (origValueTuple !== rewrittenValueTuple && !rewrittenValues)\n                        rewrittenValues = ArrayExtensions.take(origValues, i);\n                    if (rewrittenValues)\n                        rewrittenValues.push(rewrittenValueTuple);\n                }\n                if (origArgs === rewrittenArgs && !rewrittenValues)\n                    return orig;\n                return new data.SQInExpr(rewrittenArgs, rewrittenValues || origValues);\n            };\n            SQExprRewriter.prototype.rewriteAll = function (origExprs) {\n                debug.assertValue(origExprs, 'origExprs');\n                var rewrittenResult;\n                for (var i = 0, len = origExprs.length; i < len; i++) {\n                    var origExpr = origExprs[i], rewrittenExpr = origExpr.accept(this);\n                    if (origExpr !== rewrittenExpr && !rewrittenResult)\n                        rewrittenResult = ArrayExtensions.take(origExprs, i);\n                    if (rewrittenResult)\n                        rewrittenResult.push(rewrittenExpr);\n                }\n                return rewrittenResult || origExprs;\n            };\n            SQExprRewriter.prototype.visitOr = function (orig) {\n                var origLeft = orig.left, rewrittenLeft = origLeft.accept(this), origRight = orig.right, rewrittenRight = origRight.accept(this);\n                if (origLeft === rewrittenLeft && origRight === rewrittenRight)\n                    return orig;\n                return new data.SQOrExpr(rewrittenLeft, rewrittenRight);\n            };\n            SQExprRewriter.prototype.visitCompare = function (orig) {\n                var origLeft = orig.left, rewrittenLeft = origLeft.accept(this), origRight = orig.right, rewrittenRight = origRight.accept(this);\n                if (origLeft === rewrittenLeft && origRight === rewrittenRight)\n                    return orig;\n                return new data.SQCompareExpr(orig.comparison, rewrittenLeft, rewrittenRight);\n            };\n            SQExprRewriter.prototype.visitContains = function (orig) {\n                var origLeft = orig.left, rewrittenLeft = origLeft.accept(this), origRight = orig.right, rewrittenRight = origRight.accept(this);\n                if (origLeft === rewrittenLeft && origRight === rewrittenRight)\n                    return orig;\n                return new data.SQContainsExpr(rewrittenLeft, rewrittenRight);\n            };\n            SQExprRewriter.prototype.visitExists = function (orig) {\n                var origArg = orig.arg, rewrittenArg = origArg.accept(this);\n                if (origArg === rewrittenArg)\n                    return orig;\n                return new data.SQExistsExpr(rewrittenArg);\n            };\n            SQExprRewriter.prototype.visitNot = function (orig) {\n                var origArg = orig.arg, rewrittenArg = origArg.accept(this);\n                if (origArg === rewrittenArg)\n                    return orig;\n                return new data.SQNotExpr(rewrittenArg);\n            };\n            SQExprRewriter.prototype.visitStartsWith = function (orig) {\n                var origLeft = orig.left, rewrittenLeft = origLeft.accept(this), origRight = orig.right, rewrittenRight = origRight.accept(this);\n                if (origLeft === rewrittenLeft && origRight === rewrittenRight)\n                    return orig;\n                return new data.SQStartsWithExpr(rewrittenLeft, rewrittenRight);\n            };\n            SQExprRewriter.prototype.visitConstant = function (expr) {\n                return expr;\n            };\n            SQExprRewriter.prototype.visitDateSpan = function (orig) {\n                var origArg = orig.arg, rewrittenArg = origArg.accept(this);\n                if (origArg === rewrittenArg)\n                    return orig;\n                return new data.SQDateSpanExpr(orig.unit, rewrittenArg);\n            };\n            SQExprRewriter.prototype.visitDateAdd = function (orig) {\n                var origArg = orig.arg, rewrittenArg = origArg.accept(this);\n                if (origArg === rewrittenArg)\n                    return orig;\n                return new data.SQDateAddExpr(orig.unit, orig.amount, rewrittenArg);\n            };\n            SQExprRewriter.prototype.visitNow = function (orig) {\n                return orig;\n            };\n            SQExprRewriter.prototype.visitDefaultValue = function (orig) {\n                return orig;\n            };\n            SQExprRewriter.prototype.visitAnyValue = function (orig) {\n                return orig;\n            };\n            return SQExprRewriter;\n        })();\n        data.SQExprRewriter = SQExprRewriter;\n    })(data = powerbi.data || (powerbi.data = {}));\n})(powerbi || (powerbi = {}));\n/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\nvar powerbi;\n(function (powerbi) {\n    var data;\n    (function (data) {\n        /** Responsible for writing equality comparisons against a field to an SQInExpr. */\n        var EqualsToInRewriter;\n        (function (EqualsToInRewriter) {\n            function run(expr) {\n                debug.assertValue(expr, 'expr');\n                return expr.accept(new Rewriter());\n            }\n            EqualsToInRewriter.run = run;\n            var Rewriter = (function (_super) {\n                __extends(Rewriter, _super);\n                function Rewriter() {\n                    _super.call(this);\n                }\n                Rewriter.prototype.visitCompare = function (expr) {\n                    if (expr.comparison !== data.QueryComparisonKind.Equal)\n                        return this.visitUnsupported(expr);\n                    if (!this.isSupported(expr.left) || !this.isSupported(expr.right))\n                        return this.visitUnsupported(expr);\n                    var leftIsComparand = this.isComparand(expr.left);\n                    var rightIsComparand = this.isComparand(expr.right);\n                    if (leftIsComparand === rightIsComparand)\n                        return this.visitUnsupported(expr);\n                    var operand = leftIsComparand\n                        ? expr.left\n                        : expr.right;\n                    var value = leftIsComparand\n                        ? expr.right\n                        : expr.left;\n                    var current = this.current;\n                    if (!current) {\n                        return data.SQExprBuilder.inExpr([operand], [[value]]);\n                    }\n                    current.add(operand, value);\n                    return expr;\n                };\n                Rewriter.prototype.visitOr = function (expr) {\n                    if (!this.isSupported(expr.left) || !this.isSupported(expr.right))\n                        return this.visitUnsupported(expr);\n                    var current;\n                    if (!this.current) {\n                        current = this.current = new InBuilder();\n                    }\n                    expr.left.accept(this);\n                    expr.right.accept(this);\n                    if (current) {\n                        this.current = null;\n                        return current.complete() || expr;\n                    }\n                    return expr;\n                };\n                Rewriter.prototype.visitAnd = function (expr) {\n                    if (!this.isSupported(expr.left) || !this.isSupported(expr.right))\n                        return this.visitUnsupported(expr);\n                    var current = this.current;\n                    if (current) {\n                        // NOTE: Composite keys are not supported by this algorithm.\n                        current.cancel();\n                        return expr;\n                    }\n                    return _super.prototype.visitAnd.call(this, expr);\n                };\n                Rewriter.prototype.visitUnsupported = function (expr) {\n                    var current = this.current;\n                    if (current)\n                        current.cancel();\n                    return expr;\n                };\n                Rewriter.prototype.isSupported = function (expr) {\n                    debug.assertValue(expr, 'expr');\n                    return expr instanceof data.SQCompareExpr\n                        || expr instanceof data.SQColumnRefExpr\n                        || expr instanceof data.SQConstantExpr\n                        || expr instanceof data.SQHierarchyLevelExpr\n                        || expr instanceof data.SQOrExpr\n                        || expr instanceof data.SQAndExpr;\n                };\n                Rewriter.prototype.isComparand = function (expr) {\n                    return expr instanceof data.SQColumnRefExpr\n                        || expr instanceof data.SQHierarchyLevelExpr;\n                };\n                return Rewriter;\n            })(data.SQExprRewriter);\n            var InBuilder = (function () {\n                function InBuilder() {\n                }\n                InBuilder.prototype.add = function (operand, value) {\n                    debug.assertValue(operand, 'operand');\n                    debug.assertValue(value, 'value');\n                    if (this.cancelled)\n                        return;\n                    if (this.operand && !data.SQExpr.equals(operand, this.operand)) {\n                        this.cancel();\n                        return;\n                    }\n                    this.operand = operand;\n                    var values = this.values;\n                    if (!values)\n                        values = this.values = [];\n                    values.push(value);\n                };\n                InBuilder.prototype.cancel = function () {\n                    this.cancelled = true;\n                };\n                InBuilder.prototype.complete = function () {\n                    if (this.cancelled || !this.operand)\n                        return;\n                    return data.SQExprBuilder.inExpr([this.operand], _.map(this.values, function (v) { return [v]; }));\n                };\n                return InBuilder;\n            })();\n        })(EqualsToInRewriter = data.EqualsToInRewriter || (data.EqualsToInRewriter = {}));\n    })(data = powerbi.data || (powerbi.data = {}));\n})(powerbi || (powerbi = {}));\n/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\nvar powerbi;\n(function (powerbi) {\n    var data;\n    (function (data) {\n        var SQExprConverter;\n        (function (SQExprConverter) {\n            function asScopeIdsContainer(filter, fieldSQExprs) {\n                debug.assertValue(filter, 'filter');\n                debug.assertValue(fieldSQExprs, 'fieldSQExprs');\n                debug.assert(fieldSQExprs.length > 0, 'There should be at least 1 field expression.');\n                var filterItems = filter.conditions();\n                debug.assert(filterItems.length === 1, 'There should be exactly 1 filter expression.');\n                var filterItem = filterItems[0];\n                if (filterItem) {\n                    var visitor = new FilterScopeIdsCollectorVisitor(fieldSQExprs);\n                    if (filterItem.accept(visitor))\n                        return visitor.getResult();\n                }\n            }\n            SQExprConverter.asScopeIdsContainer = asScopeIdsContainer;\n            /** Gets a comparand value from the given DataViewScopeIdentity. */\n            function getFirstComparandValue(identity) {\n                debug.assertValue(identity, 'identity');\n                var comparandExpr = identity.expr.accept(new FindComparandVisitor());\n                if (comparandExpr)\n                    return comparandExpr.value;\n            }\n            SQExprConverter.getFirstComparandValue = getFirstComparandValue;\n        })(SQExprConverter = data.SQExprConverter || (data.SQExprConverter = {}));\n        /** Collect filter values from simple semantic filter that is similar to 'is any of' or 'is not any of', getResult() returns a collection of scopeIds.**/\n        var FilterScopeIdsCollectorVisitor = (function (_super) {\n            __extends(FilterScopeIdsCollectorVisitor, _super);\n            function FilterScopeIdsCollectorVisitor(fieldSQExprs) {\n                _super.call(this);\n                this.isRoot = true;\n                this.isNot = false;\n                this.keyExprsCount = null;\n                this.valueExprs = [];\n                // Need to drop the entitylet before create the scopeIdentity. The ScopeIdentity created on the client is used to\n                // compare the ScopeIdentity came from the server. But server doesn't have the entity variable concept, so we will\n                // need to drop it in order to use JsonComparer.\n                this.fieldExprs = [];\n                for (var _i = 0; _i < fieldSQExprs.length; _i++) {\n                    var field = fieldSQExprs[_i];\n                    this.fieldExprs.push(data.SQExprBuilder.removeEntityVariables(field));\n                }\n            }\n            FilterScopeIdsCollectorVisitor.prototype.getResult = function () {\n                debug.assert(this.fieldExprs.length > 0, 'fieldExprs has at least one fieldExpr');\n                var valueExprs = this.valueExprs, scopeIds = [];\n                var valueCount = this.keyExprsCount || 1;\n                for (var startIndex = 0, endIndex = valueCount, len = valueExprs.length; startIndex < len && endIndex <= len;) {\n                    var values = valueExprs.slice(startIndex, endIndex);\n                    var scopeId = FilterScopeIdsCollectorVisitor.getScopeIdentity(this.fieldExprs, values);\n                    if (!jsCommon.ArrayExtensions.isInArray(scopeIds, scopeId, powerbi.DataViewScopeIdentity.equals))\n                        scopeIds.push(scopeId);\n                    startIndex += valueCount;\n                    endIndex += valueCount;\n                }\n                return {\n                    isNot: this.isNot,\n                    scopeIds: scopeIds,\n                };\n            };\n            FilterScopeIdsCollectorVisitor.getScopeIdentity = function (fieldExprs, valueExprs) {\n                debug.assert(valueExprs.length > 0, 'valueExprs has at least one valueExpr');\n                debug.assert(valueExprs.length === fieldExprs.length, 'fieldExpr and valueExpr count should match');\n                var compoundSQExpr;\n                for (var i = 0, len = fieldExprs.length; i < len; i++) {\n                    var equalsExpr = data.SQExprBuilder.equal(fieldExprs[i], valueExprs[i]);\n                    if (!compoundSQExpr)\n                        compoundSQExpr = equalsExpr;\n                    else\n                        compoundSQExpr = data.SQExprBuilder.and(compoundSQExpr, equalsExpr);\n                }\n                return data.createDataViewScopeIdentity(compoundSQExpr);\n            };\n            FilterScopeIdsCollectorVisitor.prototype.visitOr = function (expr) {\n                if (this.keyExprsCount !== null)\n                    return this.unsupportedSQExpr();\n                this.isRoot = false;\n                return expr.left.accept(this) && expr.right.accept(this);\n            };\n            FilterScopeIdsCollectorVisitor.prototype.visitNot = function (expr) {\n                if (!this.isRoot)\n                    return this.unsupportedSQExpr();\n                this.isNot = true;\n                return expr.arg.accept(this);\n            };\n            FilterScopeIdsCollectorVisitor.prototype.visitConstant = function (expr) {\n                if (this.isRoot && expr.type.primitiveType === powerbi.PrimitiveType.Null)\n                    return this.unsupportedSQExpr();\n                this.valueExprs.push(expr);\n                return true;\n            };\n            FilterScopeIdsCollectorVisitor.prototype.visitCompare = function (expr) {\n                if (this.keyExprsCount !== null)\n                    return this.unsupportedSQExpr();\n                this.isRoot = false;\n                if (expr.comparison !== data.QueryComparisonKind.Equal)\n                    return this.unsupportedSQExpr();\n                return expr.left.accept(this) && expr.right.accept(this);\n            };\n            FilterScopeIdsCollectorVisitor.prototype.visitIn = function (expr) {\n                this.keyExprsCount = 0;\n                var result;\n                this.isRoot = false;\n                for (var _i = 0, _a = expr.args; _i < _a.length; _i++) {\n                    var arg = _a[_i];\n                    result = arg.accept(this);\n                    if (!result)\n                        return this.unsupportedSQExpr();\n                    this.keyExprsCount++;\n                }\n                if (this.keyExprsCount !== this.fieldExprs.length)\n                    return this.unsupportedSQExpr();\n                var values = expr.values;\n                for (var _b = 0; _b < values.length; _b++) {\n                    var valueTuple = values[_b];\n                    var jlen = valueTuple.length;\n                    debug.assert(jlen === this.keyExprsCount, \"keys count and values count should match\");\n                    for (var _c = 0; _c < valueTuple.length; _c++) {\n                        var value = valueTuple[_c];\n                        result = value.accept(this);\n                        if (!result)\n                            return this.unsupportedSQExpr();\n                    }\n                }\n                return result;\n            };\n            FilterScopeIdsCollectorVisitor.prototype.visitColumnRef = function (expr) {\n                if (this.isRoot)\n                    return this.unsupportedSQExpr();\n                var fixedExpr = data.SQExprBuilder.removeEntityVariables(expr);\n                if (this.keyExprsCount !== null)\n                    return data.SQExpr.equals(this.fieldExprs[this.keyExprsCount], fixedExpr);\n                return data.SQExpr.equals(this.fieldExprs[0], fixedExpr);\n            };\n            FilterScopeIdsCollectorVisitor.prototype.visitDefaultValue = function (expr) {\n                if (this.isRoot || this.keyExprsCount !== null)\n                    return this.unsupportedSQExpr();\n                this.valueExprs.push(expr);\n                return true;\n            };\n            FilterScopeIdsCollectorVisitor.prototype.visitAnyValue = function (expr) {\n                if (this.isRoot || this.keyExprsCount !== null)\n                    return this.unsupportedSQExpr();\n                this.valueExprs.push(expr);\n                return true;\n            };\n            FilterScopeIdsCollectorVisitor.prototype.visitDefault = function (expr) {\n                return this.unsupportedSQExpr();\n            };\n            FilterScopeIdsCollectorVisitor.prototype.unsupportedSQExpr = function () {\n                return false;\n            };\n            return FilterScopeIdsCollectorVisitor;\n        })(data.DefaultSQExprVisitor);\n        var FindComparandVisitor = (function (_super) {\n            __extends(FindComparandVisitor, _super);\n            function FindComparandVisitor() {\n                _super.apply(this, arguments);\n            }\n            FindComparandVisitor.prototype.visitAnd = function (expr) {\n                return expr.left.accept(this) || expr.right.accept(this);\n            };\n            FindComparandVisitor.prototype.visitCompare = function (expr) {\n                if (expr.comparison === data.QueryComparisonKind.Equal) {\n                    if (expr.right instanceof data.SQConstantExpr)\n                        return expr.right;\n                    if (expr.left instanceof data.SQConstantExpr)\n                        return expr.left;\n                }\n            };\n            return FindComparandVisitor;\n        })(data.DefaultSQExprVisitor);\n    })(data = powerbi.data || (powerbi.data = {}));\n})(powerbi || (powerbi = {}));\n/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\nvar powerbi;\n(function (powerbi) {\n    var data;\n    (function (data) {\n        var ArrayExtensions = jsCommon.ArrayExtensions;\n        /** Recognizes DataViewScopeIdentity expression trees to extract comparison keys. */\n        var ScopeIdentityExtractor;\n        (function (ScopeIdentityExtractor) {\n            function getKeys(expr) {\n                var extractor = new ScopeIdExtractorImpl();\n                expr.accept(extractor);\n                if (extractor.malformed)\n                    return null;\n                return ArrayExtensions.emptyToNull(extractor.keys);\n            }\n            ScopeIdentityExtractor.getKeys = getKeys;\n            function getInExpr(expr) {\n                var extractor = new ScopeIdExtractorImpl();\n                expr.accept(extractor);\n                if (extractor.malformed)\n                    return;\n                var keys = ArrayExtensions.emptyToNull(extractor.keys);\n                var keyValues = ArrayExtensions.emptyToNull(extractor.values);\n                if (keys && keyValues)\n                    return data.SQExprBuilder.inExpr(keys, [keyValues]);\n            }\n            ScopeIdentityExtractor.getInExpr = getInExpr;\n            /**\n             * Recognizes expressions of the form:\n             * 1) Equals(ColRef, Constant)\n             * 2) And(Equals(ColRef1, Constant1), Equals(ColRef2, Constant2))\n             * or And(And(Equals(ColRef1, Constant1), Equals(ColRef2, Constant2)), Equals(ColRef3, Constant3)) etc..\n             */\n            var ScopeIdExtractorImpl = (function (_super) {\n                __extends(ScopeIdExtractorImpl, _super);\n                function ScopeIdExtractorImpl() {\n                    _super.apply(this, arguments);\n                    this.keys = [];\n                    this.values = [];\n                }\n                ScopeIdExtractorImpl.prototype.visitAnd = function (expr) {\n                    expr.left.accept(this);\n                    expr.right.accept(this);\n                };\n                ScopeIdExtractorImpl.prototype.visitCompare = function (expr) {\n                    if (expr.comparison !== data.QueryComparisonKind.Equal) {\n                        this.visitDefault(expr);\n                        return;\n                    }\n                    debug.assert(expr.left instanceof data.SQExpr && expr.right instanceof data.SQConstantExpr, 'invalid compare expr operands');\n                    expr.left.accept(this);\n                    expr.right.accept(this);\n                };\n                ScopeIdExtractorImpl.prototype.visitColumnRef = function (expr) {\n                    this.keys.push(expr);\n                };\n                ScopeIdExtractorImpl.prototype.visitHierarchyLevel = function (expr) {\n                    this.keys.push(expr);\n                };\n                ScopeIdExtractorImpl.prototype.visitConstant = function (expr) {\n                    this.values.push(expr);\n                };\n                ScopeIdExtractorImpl.prototype.visitDefault = function (expr) {\n                    this.malformed = true;\n                };\n                return ScopeIdExtractorImpl;\n            })(data.DefaultSQExprVisitor);\n        })(ScopeIdentityExtractor = data.ScopeIdentityExtractor || (data.ScopeIdentityExtractor = {}));\n    })(data = powerbi.data || (powerbi.data = {}));\n})(powerbi || (powerbi = {}));\n/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\nvar powerbi;\n(function (powerbi) {\n    var data;\n    (function (data) {\n        var PrimitiveValueEncoding;\n        (function (PrimitiveValueEncoding) {\n            var SingleQuoteRegex = /'/g;\n            function decimal(value) {\n                debug.assertValue(value, 'value');\n                return value + 'M';\n            }\n            PrimitiveValueEncoding.decimal = decimal;\n            function double(value) {\n                debug.assertValue(value, 'value');\n                return value + 'D';\n            }\n            PrimitiveValueEncoding.double = double;\n            function integer(value) {\n                debug.assertValue(value, 'value');\n                return value + 'L';\n            }\n            PrimitiveValueEncoding.integer = integer;\n            function dateTime(value) {\n                debug.assertValue(value, 'value');\n                // Currently, server doesn't support timezone. All date time data on the server don't have time zone information.\n                // So, when we construct a dateTime object on the client, we will need to ignor user's time zone and force it to be UTC time.\n                // When we subtract the timeZone offset, the date time object will remain the same value as you entered but dropped the local timeZone.\n                var date = new Date(value.getTime() - (value.getTimezoneOffset() * 60000));\n                var dateTimeString = date.toISOString();\n                // If it ends with Z, we want to get rid of it, because with trailing Z, it will assume the dateTime is UTC, but we don't want any timeZone information, so\n                // we will drop it.\n                // Also, we need to add Prefix and Suffix to match the dsr value format for dateTime object.\n                if (jsCommon.StringExtensions.endsWith(dateTimeString, 'Z'))\n                    dateTimeString = dateTimeString.substr(0, dateTimeString.length - 1);\n                return \"datetime'\" + dateTimeString + \"'\";\n            }\n            PrimitiveValueEncoding.dateTime = dateTime;\n            function text(value) {\n                debug.assertValue(value, 'value');\n                return \"'\" + value.replace(SingleQuoteRegex, \"''\") + \"'\";\n            }\n            PrimitiveValueEncoding.text = text;\n            function nullEncoding() {\n                return 'null';\n            }\n            PrimitiveValueEncoding.nullEncoding = nullEncoding;\n            function boolean(value) {\n                return value ? 'true' : 'false';\n            }\n            PrimitiveValueEncoding.boolean = boolean;\n        })(PrimitiveValueEncoding = data.PrimitiveValueEncoding || (data.PrimitiveValueEncoding = {}));\n    })(data = powerbi.data || (powerbi.data = {}));\n})(powerbi || (powerbi = {}));\n/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\nvar powerbi;\n(function (powerbi) {\n    var data;\n    (function (data) {\n        var SQHierarchyExprUtils;\n        (function (SQHierarchyExprUtils) {\n            function getConceptualHierarchyLevelFromExpr(conceptualSchema, fieldExpr) {\n                var fieldExprItem = data.FieldExprPattern.toFieldExprEntityItemPattern(fieldExpr);\n                var hierarchyLevel = fieldExpr.hierarchyLevel || fieldExpr.hierarchyLevelAggr;\n                if (hierarchyLevel)\n                    return SQHierarchyExprUtils.getConceptualHierarchyLevel(conceptualSchema, fieldExprItem.schema, fieldExprItem.entity, hierarchyLevel.name, hierarchyLevel.level);\n            }\n            SQHierarchyExprUtils.getConceptualHierarchyLevelFromExpr = getConceptualHierarchyLevelFromExpr;\n            function getConceptualHierarchyLevel(conceptualSchema, schemaName, entity, hierarchy, hierarchyLevel) {\n                var schema = conceptualSchema.schema(schemaName);\n                var conceptualHierarchy = schema.findHierarchy(entity, hierarchy);\n                if (conceptualHierarchy) {\n                    return conceptualHierarchy.levels.withName(hierarchyLevel);\n                }\n            }\n            SQHierarchyExprUtils.getConceptualHierarchyLevel = getConceptualHierarchyLevel;\n            function getConceptualHierarchy(sqExpr, federatedSchema) {\n                if (sqExpr instanceof data.SQHierarchyExpr) {\n                    var hierarchy = sqExpr;\n                    if (sqExpr.arg instanceof data.SQEntityExpr) {\n                        var entityExpr = sqExpr.arg;\n                        return federatedSchema\n                            .schema(entityExpr.schema)\n                            .findHierarchy(entityExpr.entity, hierarchy.hierarchy);\n                    }\n                    else if (sqExpr.arg instanceof data.SQPropertyVariationSourceExpr) {\n                        var variationExpr = sqExpr.arg;\n                        var sourceEntityExpr = variationExpr.arg;\n                        return federatedSchema\n                            .schema(sourceEntityExpr.schema)\n                            .findHierarchyByVariation(sourceEntityExpr.entity, variationExpr.property, variationExpr.name, hierarchy.hierarchy);\n                    }\n                }\n            }\n            SQHierarchyExprUtils.getConceptualHierarchy = getConceptualHierarchy;\n            function expandExpr(schema, expr, suppressHierarchyLevelExpansion) {\n                return SQExprHierarchyToHierarchyLevelConverter.convert(expr, schema) ||\n                    SQExprVariationConverter.expand(expr, schema) ||\n                    // If we are calling expandExpr from suppressHierarchyLevelExpansion, we should not expand the hierarchylevels\n                    (!suppressHierarchyLevelExpansion && SQExprHierarchyLevelConverter.expand(expr, schema)) ||\n                    expr;\n            }\n            SQHierarchyExprUtils.expandExpr = expandExpr;\n            function isHierarchyOrVariation(schema, expr) {\n                if (expr instanceof data.SQHierarchyExpr || expr instanceof data.SQHierarchyLevelExpr)\n                    return true;\n                var conceptualProperty = expr.getConceptualProperty(schema);\n                if (conceptualProperty) {\n                    var column = conceptualProperty.column;\n                    if (column && column.variations && column.variations.length > 0)\n                        return true;\n                }\n                return false;\n            }\n            SQHierarchyExprUtils.isHierarchyOrVariation = isHierarchyOrVariation;\n            // Return column reference expression for hierarchy level expression.\n            function getSourceVariationExpr(hierarchyLevelExpr) {\n                var fieldExprPattern = data.SQExprConverter.asFieldPattern(hierarchyLevelExpr);\n                if (fieldExprPattern.columnHierarchyLevelVariation) {\n                    var entity = data.SQExprBuilder.entity(fieldExprPattern.columnHierarchyLevelVariation.source.schema, fieldExprPattern.columnHierarchyLevelVariation.source.entity);\n                    return data.SQExprBuilder.columnRef(entity, fieldExprPattern.columnHierarchyLevelVariation.source.name);\n                }\n            }\n            SQHierarchyExprUtils.getSourceVariationExpr = getSourceVariationExpr;\n            // Return hierarchy expression for hierarchy level expression.\n            function getSourceHierarchy(hierarchyLevelExpr) {\n                var fieldExprPattern = data.SQExprConverter.asFieldPattern(hierarchyLevelExpr);\n                var hierarchyLevel = fieldExprPattern.hierarchyLevel;\n                if (hierarchyLevel) {\n                    var entity = data.SQExprBuilder.entity(hierarchyLevel.schema, hierarchyLevel.entity, hierarchyLevel.entityVar);\n                    return data.SQExprBuilder.hierarchy(entity, hierarchyLevel.name);\n                }\n            }\n            SQHierarchyExprUtils.getSourceHierarchy = getSourceHierarchy;\n            function getHierarchySourceAsVariationSource(hierarchyLevelExpr) {\n                // Make sure the hierarchy level source is a hierarchy\n                if (!(hierarchyLevelExpr.arg instanceof data.SQHierarchyExpr))\n                    return;\n                // Check if the hierarchy source if a variation\n                var hierarchyRef = hierarchyLevelExpr.arg;\n                if (hierarchyRef.arg instanceof data.SQPropertyVariationSourceExpr)\n                    return hierarchyRef.arg;\n            }\n            SQHierarchyExprUtils.getHierarchySourceAsVariationSource = getHierarchySourceAsVariationSource;\n            /**\n            * Returns true if firstExpr and secondExpr are levels in the same hierarchy and firstExpr is before secondExpr in allLevels.\n            */\n            function areHierarchyLevelsOrdered(allLevels, firstExpr, secondExpr) {\n                // Validate that both items hierarchy levels\n                if (!(firstExpr instanceof data.SQHierarchyLevelExpr) || !(secondExpr instanceof data.SQHierarchyLevelExpr))\n                    return false;\n                var firstLevel = firstExpr;\n                var secondLevel = secondExpr;\n                // Validate that both items belong to the same hierarchy\n                if (!data.SQExpr.equals(firstLevel.arg, secondLevel.arg))\n                    return false;\n                // Determine the order\n                var firstIndex = data.SQExprUtils.indexOfExpr(allLevels, firstLevel);\n                var secondIndex = data.SQExprUtils.indexOfExpr(allLevels, secondLevel);\n                return firstIndex !== -1 && secondIndex !== -1 && firstIndex < secondIndex;\n            }\n            SQHierarchyExprUtils.areHierarchyLevelsOrdered = areHierarchyLevelsOrdered;\n            /**\n             * Given an ordered set of levels and an ordered subset of those levels, returns the index where\n             * expr should be inserted into the subset to maintain the correct order.\n             */\n            function getInsertionIndex(allLevels, orderedSubsetOfLevels, expr) {\n                var insertIndex = 0;\n                // Loop through the supplied levels until the insertion would no longer be in the correct order\n                while (insertIndex < orderedSubsetOfLevels.length &&\n                    areHierarchyLevelsOrdered(allLevels, orderedSubsetOfLevels[insertIndex], expr)) {\n                    insertIndex++;\n                }\n                return insertIndex;\n            }\n            SQHierarchyExprUtils.getInsertionIndex = getInsertionIndex;\n        })(SQHierarchyExprUtils = data.SQHierarchyExprUtils || (data.SQHierarchyExprUtils = {}));\n        var SQExprHierarchyToHierarchyLevelConverter;\n        (function (SQExprHierarchyToHierarchyLevelConverter) {\n            function convert(sqExpr, federatedSchema) {\n                debug.assertValue(sqExpr, 'sqExpr');\n                debug.assertValue(federatedSchema, 'federatedSchema');\n                if (sqExpr instanceof data.SQHierarchyExpr) {\n                    var hierarchyExpr = sqExpr;\n                    var conceptualHierarchy = SQHierarchyExprUtils.getConceptualHierarchy(hierarchyExpr, federatedSchema);\n                    if (conceptualHierarchy)\n                        return _.map(conceptualHierarchy.levels, function (hierarchyLevel) { return data.SQExprBuilder.hierarchyLevel(sqExpr, hierarchyLevel.name); });\n                }\n            }\n            SQExprHierarchyToHierarchyLevelConverter.convert = convert;\n        })(SQExprHierarchyToHierarchyLevelConverter = data.SQExprHierarchyToHierarchyLevelConverter || (data.SQExprHierarchyToHierarchyLevelConverter = {}));\n        var SQExprHierarchyLevelConverter;\n        (function (SQExprHierarchyLevelConverter) {\n            function expand(expr, schema) {\n                debug.assertValue(expr, 'sqExpr');\n                debug.assertValue(schema, 'federatedSchema');\n                var exprs = [];\n                if (expr instanceof data.SQHierarchyLevelExpr) {\n                    var fieldExpr = data.SQExprConverter.asFieldPattern(expr);\n                    if (fieldExpr.hierarchyLevel) {\n                        var fieldExprItem = data.FieldExprPattern.toFieldExprEntityItemPattern(fieldExpr);\n                        var hierarchy = schema\n                            .schema(fieldExprItem.schema)\n                            .findHierarchy(fieldExprItem.entity, fieldExpr.hierarchyLevel.name);\n                        if (hierarchy) {\n                            var hierarchyLevels = hierarchy.levels;\n                            for (var _i = 0; _i < hierarchyLevels.length; _i++) {\n                                var hierarchyLevel = hierarchyLevels[_i];\n                                if (hierarchyLevel.name === fieldExpr.hierarchyLevel.level) {\n                                    exprs.push(expr);\n                                    break;\n                                }\n                                else\n                                    exprs.push(data.SQExprBuilder.hierarchyLevel(data.SQExprBuilder.hierarchy(data.SQExprBuilder.entity(fieldExprItem.schema, fieldExprItem.entity, fieldExprItem.entityVar), hierarchy.name), hierarchyLevel.name));\n                            }\n                        }\n                    }\n                }\n                if (!_.isEmpty(exprs))\n                    return exprs;\n            }\n            SQExprHierarchyLevelConverter.expand = expand;\n        })(SQExprHierarchyLevelConverter || (SQExprHierarchyLevelConverter = {}));\n        var SQExprVariationConverter;\n        (function (SQExprVariationConverter) {\n            function expand(expr, schema) {\n                debug.assertValue(expr, 'sqExpr');\n                debug.assertValue(schema, 'federatedSchema');\n                var exprs;\n                var conceptualProperty = expr.getConceptualProperty(schema);\n                if (conceptualProperty) {\n                    var column = conceptualProperty.column;\n                    if (column && column.variations && column.variations.length > 0) {\n                        var variations = column.variations;\n                        // for SU11, we support only one variation\n                        debug.assert(variations.length === 1, \"variations.length\");\n                        var variation = variations[0];\n                        var fieldExpr = data.SQExprConverter.asFieldPattern(expr);\n                        var fieldExprItem = data.FieldExprPattern.toFieldExprEntityItemPattern(fieldExpr);\n                        exprs = [];\n                        if (variation.defaultHierarchy) {\n                            var hierarchyExpr = data.SQExprBuilder.hierarchy(data.SQExprBuilder.propertyVariationSource(data.SQExprBuilder.entity(fieldExprItem.schema, fieldExprItem.entity, fieldExprItem.entityVar), variation.name, conceptualProperty.name), variation.defaultHierarchy.name);\n                            for (var _i = 0, _a = variation.defaultHierarchy.levels; _i < _a.length; _i++) {\n                                var level = _a[_i];\n                                exprs.push(data.SQExprBuilder.hierarchyLevel(hierarchyExpr, level.name));\n                            }\n                        }\n                    }\n                }\n                return exprs;\n            }\n            SQExprVariationConverter.expand = expand;\n        })(SQExprVariationConverter || (SQExprVariationConverter = {}));\n    })(data = powerbi.data || (powerbi.data = {}));\n})(powerbi || (powerbi = {}));\n/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\nvar powerbi;\n(function (powerbi) {\n    var data;\n    (function (data) {\n        ;\n        var SQExprGroupUtils;\n        (function (SQExprGroupUtils) {\n            /** Group all projections. Eacch group can consist of either a single property, or a collection of hierarchy items. */\n            function groupExprs(schema, exprs) {\n                var groups = [];\n                for (var i = 0, len = exprs.length; i < len; i++) {\n                    var expr = exprs[i];\n                    debug.assertValue(expr, \"Expression not found\");\n                    if (!(expr instanceof data.SQHierarchyLevelExpr)) {\n                        groups.push({ expr: expr, children: null, selectQueryIndex: i });\n                    }\n                    else {\n                        addChildToGroup(schema, groups, expr, i);\n                    }\n                }\n                return groups;\n            }\n            SQExprGroupUtils.groupExprs = groupExprs;\n            function addChildToGroup(schema, groups, expr, selectQueryIndex) {\n                // shouldAddExpressionToNewGroup is used to control whether we should add the passed expr to \n                // a new Group or to the last Group\n                var shouldAddExpressionToNewGroup = true;\n                var exprSource = data.SQHierarchyExprUtils.getSourceVariationExpr(expr) || data.SQHierarchyExprUtils.getSourceHierarchy(expr);\n                var lastGroup = _.last(groups);\n                // The relevant group is always the last added. If it has the same source hierarchy,\n                // and is properly ordered within that hierarchy, we will need to add to this group.\n                if (lastGroup && lastGroup.children && data.SQExpr.equals(lastGroup.expr, exprSource)) {\n                    var expandedExpr = data.SQHierarchyExprUtils.expandExpr(schema, expr.arg);\n                    if (expandedExpr instanceof Array) {\n                        var allHierarchyLevels = expandedExpr;\n                        shouldAddExpressionToNewGroup = !data.SQHierarchyExprUtils.areHierarchyLevelsOrdered(allHierarchyLevels, _.last(lastGroup.children), expr);\n                    }\n                }\n                if (shouldAddExpressionToNewGroup)\n                    // Use the Sourcevariation as the expression for the group.\n                    groups.push({ expr: exprSource, children: [expr], selectQueryIndex: selectQueryIndex });\n                else {\n                    debug.assertValue(lastGroup, 'There should be a group to add the variation to');\n                    debug.assertValue(lastGroup.children, 'The group should have children to add the variation to');\n                    lastGroup.children.push(expr);\n                }\n            }\n        })(SQExprGroupUtils = data.SQExprGroupUtils || (data.SQExprGroupUtils = {}));\n    })(data = powerbi.data || (powerbi.data = {}));\n})(powerbi || (powerbi = {}));\n/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\nvar powerbi;\n(function (powerbi) {\n    var data;\n    (function (data) {\n        var StringExtensions = jsCommon.StringExtensions;\n        /** Represents an immutable expression within a SemanticQuery. */\n        var SQExpr = (function () {\n            function SQExpr(kind) {\n                debug.assertValue(kind, 'kind');\n                this._kind = kind;\n            }\n            SQExpr.equals = function (x, y, ignoreCase) {\n                return SQExprEqualityVisitor.run(x, y, ignoreCase);\n            };\n            SQExpr.prototype.validate = function (schema, errors) {\n                var validator = new SQExprValidationVisitor(schema, errors);\n                this.accept(validator);\n                return validator.errors;\n            };\n            SQExpr.prototype.accept = function (visitor, arg) {\n                debug.assertFail('abstract method');\n                return;\n            };\n            Object.defineProperty(SQExpr.prototype, \"kind\", {\n                get: function () {\n                    return this._kind;\n                },\n                enumerable: true,\n                configurable: true\n            });\n            SQExpr.isColumn = function (expr) {\n                debug.assertValue(expr, 'expr');\n                return expr.kind === 1 /* ColumnRef */;\n            };\n            SQExpr.isConstant = function (expr) {\n                debug.assertValue(expr, 'expr');\n                return expr.kind === 16 /* Constant */;\n            };\n            SQExpr.isEntity = function (expr) {\n                debug.assertValue(expr, 'expr');\n                return expr.kind === 0 /* Entity */;\n            };\n            SQExpr.isHierarchy = function (expr) {\n                debug.assertValue(expr, 'expr');\n                return expr.kind === 5 /* Hierarchy */;\n            };\n            SQExpr.isHierarchyLevel = function (expr) {\n                debug.assertValue(expr, 'expr');\n                return expr.kind === 6 /* HierarchyLevel */;\n            };\n            SQExpr.prototype.getMetadata = function (federatedSchema) {\n                debug.assertValue(federatedSchema, 'federatedSchema');\n                var field = data.SQExprConverter.asFieldPattern(this);\n                if (!field)\n                    return;\n                if (field.column || field.columnAggr || field.measure)\n                    return this.getMetadataForProperty(field, federatedSchema);\n                if (field.hierarchyLevel || field.hierarchyLevelAggr)\n                    return this.getMetadataForHierarchyLevel(field, federatedSchema);\n                if (field.columnHierarchyLevelVariation)\n                    return this.getMetadataForVariation(field, federatedSchema);\n                return SQExpr.getMetadataForEntity(field, federatedSchema);\n            };\n            SQExpr.prototype.getDefaultAggregate = function (federatedSchema, forceAggregation) {\n                if (forceAggregation === void 0) { forceAggregation = false; }\n                debug.assertValue(federatedSchema, 'federatedSchema');\n                var property = this.getConceptualProperty(federatedSchema) || this.getHierarchyLevelConceptualProperty(federatedSchema);\n                if (!property)\n                    return;\n                var aggregate;\n                if (property && property.kind === 0 /* Column */) {\n                    var propertyDefaultAggregate = property.column ? property.column.defaultAggregate : null;\n                    if ((property.type.integer || property.type.numeric) &&\n                        propertyDefaultAggregate !== 1 /* None */) {\n                        aggregate = defaultAggregateToQueryAggregateFunction(propertyDefaultAggregate);\n                        if (aggregate === undefined)\n                            aggregate = defaultAggregateForDataType(property.type);\n                    }\n                    // If we haven't found an appropriate aggregate, and want to force aggregation anyway, \n                    // aggregate on CountNonNull.\n                    if (aggregate === undefined && forceAggregation) {\n                        aggregate = data.QueryAggregateFunction.CountNonNull;\n                    }\n                }\n                return aggregate;\n            };\n            /** Return the SQExpr[] of group on columns if it has group on keys otherwise return the SQExpr of the column.*/\n            SQExpr.prototype.getKeyColumns = function (schema) {\n                var columnRefExpr = SQExprColumnRefInfoVisitor.getColumnRefSQExpr(schema, this);\n                if (!columnRefExpr)\n                    return;\n                var keySQExprs = [];\n                var keys = this.getPropertyKeys(schema);\n                if (keys && keys.length > 0) {\n                    for (var i = 0, len = keys.length; i < len; i++) {\n                        keySQExprs.push(SQExprBuilder.columnRef(columnRefExpr.source, keys[i].name));\n                    }\n                }\n                else\n                    keySQExprs.push(columnRefExpr);\n                return keySQExprs;\n            };\n            /** Returns a value indicating whether the expression would group on keys other than itself.*/\n            SQExpr.prototype.hasGroupOnKeys = function (schema) {\n                var columnRefExpr = SQExprColumnRefInfoVisitor.getColumnRefSQExpr(schema, this);\n                if (!columnRefExpr)\n                    return;\n                var keys = this.getPropertyKeys(schema);\n                if (!keys || keys.length < 1)\n                    return false;\n                if (keys.length > 1)\n                    return true;\n                var keySqExpr = SQExprBuilder.columnRef(columnRefExpr.source, keys[0].name);\n                return !SQExpr.equals(keySqExpr, this);\n            };\n            SQExpr.prototype.getPropertyKeys = function (schema) {\n                var property = this.getConceptualProperty(schema) || this.getHierarchyLevelConceptualProperty(schema);\n                if (!property)\n                    return;\n                return property.column ? property.column.keys : undefined;\n            };\n            SQExpr.prototype.getConceptualProperty = function (federatedSchema) {\n                var field = data.SQExprConverter.asFieldPattern(this);\n                if (!field)\n                    return;\n                var fieldExprItem = data.FieldExprPattern.toFieldExprEntityItemPattern(field);\n                var propertyName = data.FieldExprPattern.getPropertyName(field);\n                if (propertyName)\n                    return federatedSchema\n                        .schema(fieldExprItem.schema)\n                        .findProperty(fieldExprItem.entity, propertyName);\n            };\n            SQExpr.prototype.getTargetEntityForVariation = function (federatedSchema, variationName) {\n                var property = this.getConceptualProperty(federatedSchema);\n                if (property && property.column && !_.isEmpty(property.column.variations)) {\n                    var variations = property.column.variations;\n                    for (var _i = 0; _i < variations.length; _i++) {\n                        var variation = variations[_i];\n                        if (variation.name === variationName)\n                            return variation.navigationProperty.targetEntity.name;\n                    }\n                }\n            };\n            SQExpr.prototype.getHierarchyLevelConceptualProperty = function (federatedSchema) {\n                var field = data.SQExprConverter.asFieldPattern(this);\n                if (!field)\n                    return;\n                var fieldExprHierachyLevel = field.hierarchyLevel || field.hierarchyLevelAggr;\n                if (fieldExprHierachyLevel) {\n                    var fieldExprEntity = data.FieldExprPattern.toFieldExprEntityItemPattern(field);\n                    var hierarchy = federatedSchema\n                        .schema(fieldExprEntity.schema)\n                        .findHierarchy(fieldExprEntity.entity, fieldExprHierachyLevel.name);\n                    if (hierarchy) {\n                        var hierarchyLevel = hierarchy.levels.withName(fieldExprHierachyLevel.level);\n                        if (hierarchyLevel)\n                            return hierarchyLevel.column;\n                    }\n                }\n            };\n            SQExpr.prototype.getMetadataForVariation = function (field, federatedSchema) {\n                debug.assertValue(field, 'field');\n                debug.assertValue(federatedSchema, 'federatedSchema');\n                var columnHierarchyLevelVariation = field.columnHierarchyLevelVariation;\n                var fieldExprItem = data.FieldExprPattern.toFieldExprEntityItemPattern(field);\n                var sourceProperty = federatedSchema\n                    .schema(fieldExprItem.schema)\n                    .findProperty(fieldExprItem.entity, columnHierarchyLevelVariation.source.name);\n                if (sourceProperty && sourceProperty.column && sourceProperty.column.variations) {\n                    for (var _i = 0, _a = sourceProperty.column.variations; _i < _a.length; _i++) {\n                        var variation = _a[_i];\n                        if (variation.defaultHierarchy && variation.defaultHierarchy.levels) {\n                            for (var _b = 0, _c = variation.defaultHierarchy.levels; _b < _c.length; _b++) {\n                                var level = _c[_b];\n                                if (level.name === columnHierarchyLevelVariation.level.level) {\n                                    var property = level.column;\n                                    return {\n                                        kind: (property.kind === 1 /* Measure */) ? 1 /* Measure */ : 0 /* Column */,\n                                        type: property.type,\n                                        format: property.format,\n                                        idOnEntityKey: property.column ? property.column.idOnEntityKey : false,\n                                        defaultAggregate: property.column ? property.column.defaultAggregate : null\n                                    };\n                                }\n                            }\n                        }\n                    }\n                }\n            };\n            SQExpr.prototype.getMetadataForHierarchyLevel = function (field, federatedSchema) {\n                debug.assertValue(field, 'field');\n                debug.assertValue(federatedSchema, 'federatedSchema');\n                var property = this.getHierarchyLevelConceptualProperty(federatedSchema);\n                if (!property)\n                    return;\n                return this.getPropertyMetadata(field, property);\n            };\n            SQExpr.prototype.getPropertyMetadata = function (field, property) {\n                var format = property.format;\n                var type = property.type;\n                var columnAggregate = field.columnAggr || field.hierarchyLevelAggr;\n                if (columnAggregate) {\n                    switch (columnAggregate.aggregate) {\n                        case data.QueryAggregateFunction.Count:\n                        case data.QueryAggregateFunction.CountNonNull:\n                            type = powerbi.ValueType.fromExtendedType(powerbi.ExtendedType.Integer);\n                            format = undefined;\n                            break;\n                        case data.QueryAggregateFunction.Avg:\n                            if (type.integer)\n                                type = powerbi.ValueType.fromExtendedType(powerbi.ExtendedType.Double);\n                            break;\n                    }\n                }\n                return {\n                    kind: (property.kind === 1 /* Measure */ || (columnAggregate && columnAggregate.aggregate !== undefined)) ? 1 /* Measure */ : 0 /* Column */,\n                    type: type,\n                    format: format,\n                    idOnEntityKey: property.column ? property.column.idOnEntityKey : false,\n                    aggregate: columnAggregate ? columnAggregate.aggregate : undefined,\n                    defaultAggregate: property.column ? property.column.defaultAggregate : null\n                };\n            };\n            SQExpr.prototype.getMetadataForProperty = function (field, federatedSchema) {\n                debug.assertValue(field, 'field');\n                debug.assertValue(federatedSchema, 'federatedSchema');\n                var property = this.getConceptualProperty(federatedSchema);\n                if (!property)\n                    return;\n                return this.getPropertyMetadata(field, property);\n            };\n            SQExpr.getMetadataForEntity = function (field, federatedSchema) {\n                debug.assertValue(field, 'field');\n                debug.assertValue(federatedSchema, 'federatedSchema');\n                var fieldExprItem = data.FieldExprPattern.toFieldExprEntityItemPattern(field);\n                var entity = federatedSchema\n                    .schema(fieldExprItem.schema)\n                    .entities\n                    .withName(fieldExprItem.entity);\n                if (!entity)\n                    return;\n                // We only support count and countnonnull for entity.\n                if (field.entityAggr) {\n                    switch (field.entityAggr.aggregate) {\n                        case data.QueryAggregateFunction.Count:\n                        case data.QueryAggregateFunction.CountNonNull:\n                            return {\n                                kind: 1 /* Measure */,\n                                type: powerbi.ValueType.fromExtendedType(powerbi.ExtendedType.Integer),\n                                format: undefined,\n                                idOnEntityKey: false,\n                                aggregate: field.entityAggr.aggregate\n                            };\n                    }\n                }\n            };\n            return SQExpr;\n        })();\n        data.SQExpr = SQExpr;\n        /** Note: Exported for testability */\n        function defaultAggregateForDataType(type) {\n            if (type.integer || type.numeric)\n                return data.QueryAggregateFunction.Sum;\n            return data.QueryAggregateFunction.Count;\n        }\n        data.defaultAggregateForDataType = defaultAggregateForDataType;\n        /** Note: Exported for testability */\n        function defaultAggregateToQueryAggregateFunction(aggregate) {\n            switch (aggregate) {\n                case 6 /* Average */:\n                    return data.QueryAggregateFunction.Avg;\n                case 3 /* Count */:\n                    return data.QueryAggregateFunction.CountNonNull;\n                case 7 /* DistinctCount */:\n                    return data.QueryAggregateFunction.Count;\n                case 5 /* Max */:\n                    return data.QueryAggregateFunction.Max;\n                case 4 /* Min */:\n                    return data.QueryAggregateFunction.Min;\n                case 2 /* Sum */:\n                    return data.QueryAggregateFunction.Sum;\n                default:\n                    return;\n            }\n        }\n        data.defaultAggregateToQueryAggregateFunction = defaultAggregateToQueryAggregateFunction;\n        var SQEntityExpr = (function (_super) {\n            __extends(SQEntityExpr, _super);\n            function SQEntityExpr(schema, entity, variable) {\n                debug.assertValue(entity, 'entity');\n                _super.call(this, 0 /* Entity */);\n                this.schema = schema;\n                this.entity = entity;\n                if (variable)\n                    this.variable = variable;\n            }\n            SQEntityExpr.prototype.accept = function (visitor, arg) {\n                return visitor.visitEntity(this, arg);\n            };\n            return SQEntityExpr;\n        })(SQExpr);\n        data.SQEntityExpr = SQEntityExpr;\n        var SQPropRefExpr = (function (_super) {\n            __extends(SQPropRefExpr, _super);\n            function SQPropRefExpr(kind, source, ref) {\n                debug.assertValue(kind, 'kind');\n                debug.assertValue(source, 'source');\n                debug.assertValue(ref, 'ref');\n                _super.call(this, kind);\n                this.source = source;\n                this.ref = ref;\n            }\n            return SQPropRefExpr;\n        })(SQExpr);\n        data.SQPropRefExpr = SQPropRefExpr;\n        var SQColumnRefExpr = (function (_super) {\n            __extends(SQColumnRefExpr, _super);\n            function SQColumnRefExpr(source, ref) {\n                _super.call(this, 1 /* ColumnRef */, source, ref);\n            }\n            SQColumnRefExpr.prototype.accept = function (visitor, arg) {\n                return visitor.visitColumnRef(this, arg);\n            };\n            return SQColumnRefExpr;\n        })(SQPropRefExpr);\n        data.SQColumnRefExpr = SQColumnRefExpr;\n        var SQMeasureRefExpr = (function (_super) {\n            __extends(SQMeasureRefExpr, _super);\n            function SQMeasureRefExpr(source, ref) {\n                _super.call(this, 2 /* MeasureRef */, source, ref);\n            }\n            SQMeasureRefExpr.prototype.accept = function (visitor, arg) {\n                return visitor.visitMeasureRef(this, arg);\n            };\n            return SQMeasureRefExpr;\n        })(SQPropRefExpr);\n        data.SQMeasureRefExpr = SQMeasureRefExpr;\n        var SQAggregationExpr = (function (_super) {\n            __extends(SQAggregationExpr, _super);\n            function SQAggregationExpr(arg, func) {\n                debug.assertValue(arg, 'arg');\n                debug.assertValue(func, 'func');\n                _super.call(this, 3 /* Aggregation */);\n                this.arg = arg;\n                this.func = func;\n            }\n            SQAggregationExpr.prototype.accept = function (visitor, arg) {\n                return visitor.visitAggr(this, arg);\n            };\n            return SQAggregationExpr;\n        })(SQExpr);\n        data.SQAggregationExpr = SQAggregationExpr;\n        var SQPropertyVariationSourceExpr = (function (_super) {\n            __extends(SQPropertyVariationSourceExpr, _super);\n            function SQPropertyVariationSourceExpr(arg, name, property) {\n                debug.assertValue(arg, 'arg');\n                debug.assertValue(name, 'name');\n                debug.assertValue(property, 'property');\n                _super.call(this, 4 /* PropertyVariationSource */);\n                this.arg = arg;\n                this.name = name;\n                this.property = property;\n            }\n            SQPropertyVariationSourceExpr.prototype.accept = function (visitor, arg) {\n                return visitor.visitPropertyVariationSource(this, arg);\n            };\n            return SQPropertyVariationSourceExpr;\n        })(SQExpr);\n        data.SQPropertyVariationSourceExpr = SQPropertyVariationSourceExpr;\n        var SQHierarchyExpr = (function (_super) {\n            __extends(SQHierarchyExpr, _super);\n            function SQHierarchyExpr(arg, hierarchy) {\n                debug.assertValue(arg, 'arg');\n                debug.assertValue(hierarchy, 'hierarchy');\n                _super.call(this, 5 /* Hierarchy */);\n                this.arg = arg;\n                this.hierarchy = hierarchy;\n            }\n            SQHierarchyExpr.prototype.accept = function (visitor, arg) {\n                return visitor.visitHierarchy(this, arg);\n            };\n            return SQHierarchyExpr;\n        })(SQExpr);\n        data.SQHierarchyExpr = SQHierarchyExpr;\n        var SQHierarchyLevelExpr = (function (_super) {\n            __extends(SQHierarchyLevelExpr, _super);\n            function SQHierarchyLevelExpr(arg, level) {\n                debug.assertValue(arg, 'arg');\n                debug.assertValue(level, 'level');\n                _super.call(this, 6 /* HierarchyLevel */);\n                this.arg = arg;\n                this.level = level;\n            }\n            SQHierarchyLevelExpr.prototype.accept = function (visitor, arg) {\n                return visitor.visitHierarchyLevel(this, arg);\n            };\n            return SQHierarchyLevelExpr;\n        })(SQExpr);\n        data.SQHierarchyLevelExpr = SQHierarchyLevelExpr;\n        var SQAndExpr = (function (_super) {\n            __extends(SQAndExpr, _super);\n            function SQAndExpr(left, right) {\n                debug.assertValue(left, 'left');\n                debug.assertValue(right, 'right');\n                _super.call(this, 7 /* And */);\n                this.left = left;\n                this.right = right;\n            }\n            SQAndExpr.prototype.accept = function (visitor, arg) {\n                return visitor.visitAnd(this, arg);\n            };\n            return SQAndExpr;\n        })(SQExpr);\n        data.SQAndExpr = SQAndExpr;\n        var SQBetweenExpr = (function (_super) {\n            __extends(SQBetweenExpr, _super);\n            function SQBetweenExpr(arg, lower, upper) {\n                debug.assertValue(arg, 'arg');\n                debug.assertValue(lower, 'lower');\n                debug.assertValue(upper, 'upper');\n                _super.call(this, 8 /* Between */);\n                this.arg = arg;\n                this.lower = lower;\n                this.upper = upper;\n            }\n            SQBetweenExpr.prototype.accept = function (visitor, arg) {\n                return visitor.visitBetween(this, arg);\n            };\n            return SQBetweenExpr;\n        })(SQExpr);\n        data.SQBetweenExpr = SQBetweenExpr;\n        var SQInExpr = (function (_super) {\n            __extends(SQInExpr, _super);\n            function SQInExpr(args, values) {\n                debug.assertValue(args, 'args');\n                debug.assertValue(values, 'values');\n                _super.call(this, 9 /* In */);\n                this.args = args;\n                this.values = values;\n            }\n            SQInExpr.prototype.accept = function (visitor, arg) {\n                return visitor.visitIn(this, arg);\n            };\n            return SQInExpr;\n        })(SQExpr);\n        data.SQInExpr = SQInExpr;\n        var SQOrExpr = (function (_super) {\n            __extends(SQOrExpr, _super);\n            function SQOrExpr(left, right) {\n                debug.assertValue(left, 'left');\n                debug.assertValue(right, 'right');\n                _super.call(this, 10 /* Or */);\n                this.left = left;\n                this.right = right;\n            }\n            SQOrExpr.prototype.accept = function (visitor, arg) {\n                return visitor.visitOr(this, arg);\n            };\n            return SQOrExpr;\n        })(SQExpr);\n        data.SQOrExpr = SQOrExpr;\n        var SQCompareExpr = (function (_super) {\n            __extends(SQCompareExpr, _super);\n            function SQCompareExpr(comparison, left, right) {\n                debug.assertValue(comparison, 'kind');\n                debug.assertValue(left, 'left');\n                debug.assertValue(right, 'right');\n                _super.call(this, 12 /* Compare */);\n                this.comparison = comparison;\n                this.left = left;\n                this.right = right;\n            }\n            SQCompareExpr.prototype.accept = function (visitor, arg) {\n                return visitor.visitCompare(this, arg);\n            };\n            return SQCompareExpr;\n        })(SQExpr);\n        data.SQCompareExpr = SQCompareExpr;\n        var SQContainsExpr = (function (_super) {\n            __extends(SQContainsExpr, _super);\n            function SQContainsExpr(left, right) {\n                debug.assertValue(left, 'left');\n                debug.assertValue(right, 'right');\n                _super.call(this, 11 /* Contains */);\n                this.left = left;\n                this.right = right;\n            }\n            SQContainsExpr.prototype.accept = function (visitor, arg) {\n                return visitor.visitContains(this, arg);\n            };\n            return SQContainsExpr;\n        })(SQExpr);\n        data.SQContainsExpr = SQContainsExpr;\n        var SQStartsWithExpr = (function (_super) {\n            __extends(SQStartsWithExpr, _super);\n            function SQStartsWithExpr(left, right) {\n                debug.assertValue(left, 'left');\n                debug.assertValue(right, 'right');\n                _super.call(this, 13 /* StartsWith */);\n                this.left = left;\n                this.right = right;\n            }\n            SQStartsWithExpr.prototype.accept = function (visitor, arg) {\n                return visitor.visitStartsWith(this, arg);\n            };\n            return SQStartsWithExpr;\n        })(SQExpr);\n        data.SQStartsWithExpr = SQStartsWithExpr;\n        var SQExistsExpr = (function (_super) {\n            __extends(SQExistsExpr, _super);\n            function SQExistsExpr(arg) {\n                debug.assertValue(arg, 'arg');\n                _super.call(this, 14 /* Exists */);\n                this.arg = arg;\n            }\n            SQExistsExpr.prototype.accept = function (visitor, arg) {\n                return visitor.visitExists(this, arg);\n            };\n            return SQExistsExpr;\n        })(SQExpr);\n        data.SQExistsExpr = SQExistsExpr;\n        var SQNotExpr = (function (_super) {\n            __extends(SQNotExpr, _super);\n            function SQNotExpr(arg) {\n                debug.assertValue(arg, 'arg');\n                _super.call(this, 15 /* Not */);\n                this.arg = arg;\n            }\n            SQNotExpr.prototype.accept = function (visitor, arg) {\n                return visitor.visitNot(this, arg);\n            };\n            return SQNotExpr;\n        })(SQExpr);\n        data.SQNotExpr = SQNotExpr;\n        var SQConstantExpr = (function (_super) {\n            __extends(SQConstantExpr, _super);\n            function SQConstantExpr(type, value, valueEncoded) {\n                debug.assertValue(type, 'type');\n                _super.call(this, 16 /* Constant */);\n                this.type = type;\n                this.value = value;\n                this.valueEncoded = valueEncoded;\n            }\n            SQConstantExpr.prototype.accept = function (visitor, arg) {\n                return visitor.visitConstant(this, arg);\n            };\n            SQConstantExpr.prototype.getMetadata = function (federatedSchema) {\n                debug.assertValue(federatedSchema, 'federatedSchema');\n                return {\n                    // Returning Measure as the kind for a SQConstantExpr is slightly ambiguous allowing the return object to conform to SQEXprMetadata.\n                    // A getType or similiar function in the future would be more appropriate. \n                    kind: 1 /* Measure */,\n                    type: this.type,\n                };\n            };\n            return SQConstantExpr;\n        })(SQExpr);\n        data.SQConstantExpr = SQConstantExpr;\n        var SQDateSpanExpr = (function (_super) {\n            __extends(SQDateSpanExpr, _super);\n            function SQDateSpanExpr(unit, arg) {\n                debug.assertValue(unit, 'unit');\n                debug.assertValue(arg, 'arg');\n                _super.call(this, 17 /* DateSpan */);\n                this.unit = unit;\n                this.arg = arg;\n            }\n            SQDateSpanExpr.prototype.accept = function (visitor, arg) {\n                return visitor.visitDateSpan(this, arg);\n            };\n            return SQDateSpanExpr;\n        })(SQExpr);\n        data.SQDateSpanExpr = SQDateSpanExpr;\n        var SQDateAddExpr = (function (_super) {\n            __extends(SQDateAddExpr, _super);\n            function SQDateAddExpr(unit, amount, arg) {\n                debug.assertValue(unit, 'unit');\n                debug.assertValue(amount, 'amount');\n                debug.assertValue(arg, 'arg');\n                _super.call(this, 18 /* DateAdd */);\n                this.unit = unit;\n                this.arg = arg;\n                this.amount = amount;\n            }\n            SQDateAddExpr.prototype.accept = function (visitor, arg) {\n                return visitor.visitDateAdd(this, arg);\n            };\n            return SQDateAddExpr;\n        })(SQExpr);\n        data.SQDateAddExpr = SQDateAddExpr;\n        var SQNowExpr = (function (_super) {\n            __extends(SQNowExpr, _super);\n            function SQNowExpr() {\n                _super.call(this, 19 /* Now */);\n            }\n            SQNowExpr.prototype.accept = function (visitor, arg) {\n                return visitor.visitNow(this, arg);\n            };\n            return SQNowExpr;\n        })(SQExpr);\n        data.SQNowExpr = SQNowExpr;\n        var SQDefaultValueExpr = (function (_super) {\n            __extends(SQDefaultValueExpr, _super);\n            function SQDefaultValueExpr() {\n                _super.call(this, 21 /* DefaultValue */);\n            }\n            SQDefaultValueExpr.prototype.accept = function (visitor, arg) {\n                return visitor.visitDefaultValue(this, arg);\n            };\n            return SQDefaultValueExpr;\n        })(SQExpr);\n        data.SQDefaultValueExpr = SQDefaultValueExpr;\n        var SQAnyValueExpr = (function (_super) {\n            __extends(SQAnyValueExpr, _super);\n            function SQAnyValueExpr() {\n                _super.call(this, 20 /* AnyValue */);\n            }\n            SQAnyValueExpr.prototype.accept = function (visitor, arg) {\n                return visitor.visitAnyValue(this, arg);\n            };\n            return SQAnyValueExpr;\n        })(SQExpr);\n        data.SQAnyValueExpr = SQAnyValueExpr;\n        /** Provides utilities for creating & manipulating expressions. */\n        var SQExprBuilder;\n        (function (SQExprBuilder) {\n            function entity(schema, entity, variable) {\n                return new SQEntityExpr(schema, entity, variable);\n            }\n            SQExprBuilder.entity = entity;\n            function columnRef(source, prop) {\n                return new SQColumnRefExpr(source, prop);\n            }\n            SQExprBuilder.columnRef = columnRef;\n            function measureRef(source, prop) {\n                return new SQMeasureRefExpr(source, prop);\n            }\n            SQExprBuilder.measureRef = measureRef;\n            function aggregate(source, aggregate) {\n                return new SQAggregationExpr(source, aggregate);\n            }\n            SQExprBuilder.aggregate = aggregate;\n            function hierarchy(source, hierarchy) {\n                return new SQHierarchyExpr(source, hierarchy);\n            }\n            SQExprBuilder.hierarchy = hierarchy;\n            function propertyVariationSource(source, name, property) {\n                return new SQPropertyVariationSourceExpr(source, name, property);\n            }\n            SQExprBuilder.propertyVariationSource = propertyVariationSource;\n            function hierarchyLevel(source, level) {\n                return new SQHierarchyLevelExpr(source, level);\n            }\n            SQExprBuilder.hierarchyLevel = hierarchyLevel;\n            function and(left, right) {\n                if (!left)\n                    return right;\n                if (!right)\n                    return left;\n                return new SQAndExpr(left, right);\n            }\n            SQExprBuilder.and = and;\n            function between(arg, lower, upper) {\n                return new SQBetweenExpr(arg, lower, upper);\n            }\n            SQExprBuilder.between = between;\n            function inExpr(args, values) {\n                return new SQInExpr(args, values);\n            }\n            SQExprBuilder.inExpr = inExpr;\n            function or(left, right) {\n                if (!left)\n                    return right;\n                if (!right)\n                    return left;\n                if (left instanceof SQInExpr && right instanceof SQInExpr) {\n                    var inExpr_1 = tryUseInExprs(left, right);\n                    if (inExpr_1)\n                        return inExpr_1;\n                }\n                return new SQOrExpr(left, right);\n            }\n            SQExprBuilder.or = or;\n            function tryUseInExprs(left, right) {\n                if (!left.args || !right.args)\n                    return;\n                var leftArgLen = left.args.length;\n                var rightArgLen = right.args.length;\n                if (leftArgLen !== rightArgLen)\n                    return;\n                for (var i = 0; i < leftArgLen; ++i) {\n                    if (!SQExpr.equals(left.args[i], right.args[i]))\n                        return;\n                }\n                var combinedValues = left.values.concat(right.values);\n                return SQExprBuilder.inExpr(left.args, combinedValues);\n            }\n            function compare(kind, left, right) {\n                return new SQCompareExpr(kind, left, right);\n            }\n            SQExprBuilder.compare = compare;\n            function contains(left, right) {\n                return new SQContainsExpr(left, right);\n            }\n            SQExprBuilder.contains = contains;\n            function exists(arg) {\n                return new SQExistsExpr(arg);\n            }\n            SQExprBuilder.exists = exists;\n            function equal(left, right) {\n                return compare(data.QueryComparisonKind.Equal, left, right);\n            }\n            SQExprBuilder.equal = equal;\n            function not(arg) {\n                return new SQNotExpr(arg);\n            }\n            SQExprBuilder.not = not;\n            function startsWith(left, right) {\n                return new SQStartsWithExpr(left, right);\n            }\n            SQExprBuilder.startsWith = startsWith;\n            function nullConstant() {\n                return new SQConstantExpr(powerbi.ValueType.fromExtendedType(powerbi.ExtendedType.Null), null, data.PrimitiveValueEncoding.nullEncoding());\n            }\n            SQExprBuilder.nullConstant = nullConstant;\n            function now() {\n                return new SQNowExpr();\n            }\n            SQExprBuilder.now = now;\n            function defaultValue() {\n                return new SQDefaultValueExpr();\n            }\n            SQExprBuilder.defaultValue = defaultValue;\n            function anyValue() {\n                return new SQAnyValueExpr();\n            }\n            SQExprBuilder.anyValue = anyValue;\n            function boolean(value) {\n                return new SQConstantExpr(powerbi.ValueType.fromExtendedType(powerbi.ExtendedType.Boolean), value, data.PrimitiveValueEncoding.boolean(value));\n            }\n            SQExprBuilder.boolean = boolean;\n            function dateAdd(unit, amount, arg) {\n                return new SQDateAddExpr(unit, amount, arg);\n            }\n            SQExprBuilder.dateAdd = dateAdd;\n            function dateTime(value, valueEncoded) {\n                if (valueEncoded === undefined)\n                    valueEncoded = data.PrimitiveValueEncoding.dateTime(value);\n                return new SQConstantExpr(powerbi.ValueType.fromExtendedType(powerbi.ExtendedType.DateTime), value, valueEncoded);\n            }\n            SQExprBuilder.dateTime = dateTime;\n            function dateSpan(unit, arg) {\n                return new SQDateSpanExpr(unit, arg);\n            }\n            SQExprBuilder.dateSpan = dateSpan;\n            function decimal(value, valueEncoded) {\n                if (valueEncoded === undefined)\n                    valueEncoded = data.PrimitiveValueEncoding.decimal(value);\n                return new SQConstantExpr(powerbi.ValueType.fromExtendedType(powerbi.ExtendedType.Decimal), value, valueEncoded);\n            }\n            SQExprBuilder.decimal = decimal;\n            function double(value, valueEncoded) {\n                if (valueEncoded === undefined)\n                    valueEncoded = data.PrimitiveValueEncoding.double(value);\n                return new SQConstantExpr(powerbi.ValueType.fromExtendedType(powerbi.ExtendedType.Double), value, valueEncoded);\n            }\n            SQExprBuilder.double = double;\n            function integer(value, valueEncoded) {\n                if (valueEncoded === undefined)\n                    valueEncoded = data.PrimitiveValueEncoding.integer(value);\n                return new SQConstantExpr(powerbi.ValueType.fromExtendedType(powerbi.ExtendedType.Integer), value, valueEncoded);\n            }\n            SQExprBuilder.integer = integer;\n            function text(value, valueEncoded) {\n                debug.assert(!valueEncoded || valueEncoded === data.PrimitiveValueEncoding.text(value), 'Incorrect encoded value specified.');\n                return new SQConstantExpr(powerbi.ValueType.fromExtendedType(powerbi.ExtendedType.Text), value, valueEncoded || data.PrimitiveValueEncoding.text(value));\n            }\n            SQExprBuilder.text = text;\n            /** Returns an SQExpr that evaluates to the constant value. */\n            function typedConstant(value, type) {\n                if (value == null)\n                    return nullConstant();\n                if (_.isBoolean(value)) {\n                    return boolean(value);\n                }\n                if (_.isString(value)) {\n                    return text(value);\n                }\n                if (_.isNumber(value)) {\n                    if (type.integer && powerbi.Double.isInteger(value))\n                        return integer(value);\n                    return double(value);\n                }\n                if (value instanceof Date) {\n                    return dateTime(value);\n                }\n            }\n            SQExprBuilder.typedConstant = typedConstant;\n            function setAggregate(expr, aggregate) {\n                return SQExprChangeAggregateRewriter.rewrite(expr, aggregate);\n            }\n            SQExprBuilder.setAggregate = setAggregate;\n            function removeAggregate(expr) {\n                return SQExprRemoveAggregateRewriter.rewrite(expr);\n            }\n            SQExprBuilder.removeAggregate = removeAggregate;\n            function removeEntityVariables(expr) {\n                return SQExprRemoveEntityVariablesRewriter.rewrite(expr);\n            }\n            SQExprBuilder.removeEntityVariables = removeEntityVariables;\n            function createExprWithAggregate(expr, schema, aggregateNonNumericFields, preferredAggregate) {\n                debug.assertValue(expr, 'expr');\n                debug.assertValue(expr, 'schema');\n                var aggregate;\n                if (preferredAggregate != null && data.SQExprUtils.isSupportedAggregate(expr, schema, preferredAggregate)) {\n                    aggregate = preferredAggregate;\n                }\n                else {\n                    aggregate = expr.getDefaultAggregate(schema, aggregateNonNumericFields);\n                }\n                if (aggregate !== undefined)\n                    expr = SQExprBuilder.aggregate(expr, aggregate);\n                return expr;\n            }\n            SQExprBuilder.createExprWithAggregate = createExprWithAggregate;\n        })(SQExprBuilder = data.SQExprBuilder || (data.SQExprBuilder = {}));\n        /** Provides utilities for obtaining information about expressions. */\n        var SQExprInfo;\n        (function (SQExprInfo) {\n            function getAggregate(expr) {\n                return SQExprAggregateInfoVisitor.getAggregate(expr);\n            }\n            SQExprInfo.getAggregate = getAggregate;\n        })(SQExprInfo = data.SQExprInfo || (data.SQExprInfo = {}));\n        var SQExprEqualityVisitor = (function () {\n            function SQExprEqualityVisitor(ignoreCase) {\n                this.ignoreCase = ignoreCase;\n            }\n            SQExprEqualityVisitor.run = function (x, y, ignoreCase) {\n                // Normalize falsy to null\n                x = x || null;\n                y = y || null;\n                if (x === y)\n                    return true;\n                if (!x !== !y)\n                    return false;\n                debug.assertValue(x, 'x');\n                debug.assertValue(y, 'y');\n                if (ignoreCase)\n                    return x.accept(SQExprEqualityVisitor.ignoreCaseInstance, y);\n                return x.accept(SQExprEqualityVisitor.instance, y);\n            };\n            SQExprEqualityVisitor.prototype.visitColumnRef = function (expr, comparand) {\n                return comparand instanceof SQColumnRefExpr &&\n                    expr.ref === comparand.ref &&\n                    this.equals(expr.source, comparand.source);\n            };\n            SQExprEqualityVisitor.prototype.visitMeasureRef = function (expr, comparand) {\n                return comparand instanceof SQMeasureRefExpr &&\n                    expr.ref === comparand.ref &&\n                    this.equals(expr.source, comparand.source);\n            };\n            SQExprEqualityVisitor.prototype.visitAggr = function (expr, comparand) {\n                return comparand instanceof SQAggregationExpr &&\n                    expr.func === comparand.func &&\n                    this.equals(expr.arg, comparand.arg);\n            };\n            SQExprEqualityVisitor.prototype.visitHierarchy = function (expr, comparand) {\n                return comparand instanceof SQHierarchyExpr &&\n                    expr.hierarchy === comparand.hierarchy &&\n                    this.equals(expr.arg, comparand.arg);\n            };\n            SQExprEqualityVisitor.prototype.visitHierarchyLevel = function (expr, comparand) {\n                return comparand instanceof SQHierarchyLevelExpr &&\n                    expr.level === comparand.level &&\n                    this.equals(expr.arg, comparand.arg);\n            };\n            SQExprEqualityVisitor.prototype.visitPropertyVariationSource = function (expr, comparand) {\n                return comparand instanceof SQPropertyVariationSourceExpr &&\n                    expr.name === comparand.name &&\n                    expr.property === comparand.property &&\n                    this.equals(expr.arg, comparand.arg);\n            };\n            SQExprEqualityVisitor.prototype.visitBetween = function (expr, comparand) {\n                return comparand instanceof SQBetweenExpr &&\n                    this.equals(expr.arg, comparand.arg) &&\n                    this.equals(expr.lower, comparand.lower) &&\n                    this.equals(expr.upper, comparand.upper);\n            };\n            SQExprEqualityVisitor.prototype.visitIn = function (expr, comparand) {\n                if (!(comparand instanceof SQInExpr) || !this.equalsAll(expr.args, comparand.args))\n                    return false;\n                var values = expr.values, compareValues = comparand.values;\n                if (values.length !== compareValues.length)\n                    return false;\n                for (var i = 0, len = values.length; i < len; i++) {\n                    if (!this.equalsAll(values[i], compareValues[i]))\n                        return false;\n                }\n                return true;\n            };\n            SQExprEqualityVisitor.prototype.visitEntity = function (expr, comparand) {\n                return comparand instanceof SQEntityExpr &&\n                    expr.schema === comparand.schema &&\n                    expr.entity === comparand.entity &&\n                    this.optionalEqual(expr.variable, comparand.variable);\n            };\n            SQExprEqualityVisitor.prototype.visitAnd = function (expr, comparand) {\n                return comparand instanceof SQAndExpr &&\n                    this.equals(expr.left, comparand.left) &&\n                    this.equals(expr.right, comparand.right);\n            };\n            SQExprEqualityVisitor.prototype.visitOr = function (expr, comparand) {\n                return comparand instanceof SQOrExpr &&\n                    this.equals(expr.left, comparand.left) &&\n                    this.equals(expr.right, comparand.right);\n            };\n            SQExprEqualityVisitor.prototype.visitCompare = function (expr, comparand) {\n                return comparand instanceof SQCompareExpr &&\n                    expr.comparison === comparand.comparison &&\n                    this.equals(expr.left, comparand.left) &&\n                    this.equals(expr.right, comparand.right);\n            };\n            SQExprEqualityVisitor.prototype.visitContains = function (expr, comparand) {\n                return comparand instanceof SQContainsExpr &&\n                    this.equals(expr.left, comparand.left) &&\n                    this.equals(expr.right, comparand.right);\n            };\n            SQExprEqualityVisitor.prototype.visitDateSpan = function (expr, comparand) {\n                return comparand instanceof SQDateSpanExpr &&\n                    expr.unit === comparand.unit &&\n                    this.equals(expr.arg, comparand.arg);\n            };\n            SQExprEqualityVisitor.prototype.visitDateAdd = function (expr, comparand) {\n                return comparand instanceof SQDateAddExpr &&\n                    expr.unit === comparand.unit &&\n                    expr.amount === comparand.amount &&\n                    this.equals(expr.arg, comparand.arg);\n            };\n            SQExprEqualityVisitor.prototype.visitExists = function (expr, comparand) {\n                return comparand instanceof SQExistsExpr &&\n                    this.equals(expr.arg, comparand.arg);\n            };\n            SQExprEqualityVisitor.prototype.visitNot = function (expr, comparand) {\n                return comparand instanceof SQNotExpr &&\n                    this.equals(expr.arg, comparand.arg);\n            };\n            SQExprEqualityVisitor.prototype.visitNow = function (expr, comparand) {\n                return comparand instanceof SQNowExpr;\n            };\n            SQExprEqualityVisitor.prototype.visitDefaultValue = function (expr, comparand) {\n                return comparand instanceof SQDefaultValueExpr;\n            };\n            SQExprEqualityVisitor.prototype.visitAnyValue = function (expr, comparand) {\n                return comparand instanceof SQAnyValueExpr;\n            };\n            SQExprEqualityVisitor.prototype.visitStartsWith = function (expr, comparand) {\n                return comparand instanceof SQStartsWithExpr &&\n                    this.equals(expr.left, comparand.left) &&\n                    this.equals(expr.right, comparand.right);\n            };\n            SQExprEqualityVisitor.prototype.visitConstant = function (expr, comparand) {\n                if (comparand instanceof SQConstantExpr && expr.type === comparand.type)\n                    return expr.type.text && this.ignoreCase ?\n                        StringExtensions.equalIgnoreCase(expr.valueEncoded, comparand.valueEncoded) :\n                        expr.valueEncoded === comparand.valueEncoded;\n                return false;\n            };\n            SQExprEqualityVisitor.prototype.optionalEqual = function (x, y) {\n                // Only check equality if both values are specified.\n                if (x && y)\n                    return x === y;\n                return true;\n            };\n            SQExprEqualityVisitor.prototype.equals = function (x, y) {\n                return x.accept(this, y);\n            };\n            SQExprEqualityVisitor.prototype.equalsAll = function (x, y) {\n                var len = x.length;\n                if (len !== y.length)\n                    return false;\n                for (var i = 0; i < len; i++) {\n                    if (!this.equals(x[i], y[i]))\n                        return false;\n                }\n                return true;\n            };\n            SQExprEqualityVisitor.instance = new SQExprEqualityVisitor(/* ignoreCase */ false);\n            SQExprEqualityVisitor.ignoreCaseInstance = new SQExprEqualityVisitor(true);\n            return SQExprEqualityVisitor;\n        })();\n        /** Rewrites a root-level expression. */\n        var SQExprRootRewriter = (function (_super) {\n            __extends(SQExprRootRewriter, _super);\n            function SQExprRootRewriter() {\n                _super.apply(this, arguments);\n            }\n            SQExprRootRewriter.prototype.visitDefault = function (expr) {\n                return expr;\n            };\n            return SQExprRootRewriter;\n        })(data.DefaultSQExprVisitor);\n        var SQExprValidationVisitor = (function (_super) {\n            __extends(SQExprValidationVisitor, _super);\n            function SQExprValidationVisitor(schema, errors) {\n                debug.assertValue(schema, 'schema');\n                _super.call(this);\n                this.schema = schema;\n                if (errors)\n                    this.errors = errors;\n            }\n            SQExprValidationVisitor.prototype.visitIn = function (expr) {\n                var inExpr = _super.prototype.visitIn.call(this, expr);\n                var args = inExpr.args;\n                var values = inExpr.values;\n                for (var _i = 0; _i < values.length; _i++) {\n                    var valueTuple = values[_i];\n                    debug.assert(valueTuple.length === args.length, 'args and value tuple are not the same length');\n                    for (var i = 0, len = valueTuple.length; i < len; ++i)\n                        this.validateCompatibleType(args[i], valueTuple[i]);\n                }\n                return inExpr;\n            };\n            SQExprValidationVisitor.prototype.visitCompare = function (expr) {\n                var compareExpr = _super.prototype.visitCompare.call(this, expr);\n                this.validateCompatibleType(compareExpr.left, compareExpr.right);\n                return compareExpr;\n            };\n            SQExprValidationVisitor.prototype.visitColumnRef = function (expr) {\n                var fieldExpr = data.SQExprConverter.asFieldPattern(expr);\n                if (fieldExpr) {\n                    var fieldExprItem = data.FieldExprPattern.toFieldExprEntityItemPattern(fieldExpr);\n                    var entity = this.validateEntity(fieldExprItem.schema, fieldExprItem.entity);\n                    if (entity) {\n                        var prop = entity.properties.withName(fieldExpr.column.name);\n                        if (!prop ||\n                            prop.kind !== 0 /* Column */ ||\n                            !this.isQueryable(fieldExpr))\n                            this.register(3 /* invalidColumnReference */);\n                    }\n                }\n                return expr;\n            };\n            SQExprValidationVisitor.prototype.visitMeasureRef = function (expr) {\n                var fieldExpr = data.SQExprConverter.asFieldPattern(expr);\n                if (fieldExpr) {\n                    var fieldExprItem = data.FieldExprPattern.toFieldExprEntityItemPattern(fieldExpr);\n                    var entity = this.validateEntity(fieldExprItem.schema, fieldExprItem.entity);\n                    if (entity) {\n                        var prop = entity.properties.withName(fieldExpr.measure.name);\n                        if (!prop ||\n                            prop.kind !== 1 /* Measure */ ||\n                            !this.isQueryable(fieldExpr))\n                            this.register(4 /* invalidMeasureReference */);\n                    }\n                }\n                return expr;\n            };\n            SQExprValidationVisitor.prototype.visitAggr = function (expr) {\n                var aggregateExpr = _super.prototype.visitAggr.call(this, expr);\n                var columnRefExpr = SQExprColumnRefInfoVisitor.getColumnRefSQExpr(this.schema, aggregateExpr.arg);\n                if (columnRefExpr) {\n                    if (!data.SQExprUtils.isSupportedAggregate(expr, this.schema, expr.func))\n                        this.register(0 /* invalidAggregateFunction */);\n                }\n                return aggregateExpr;\n            };\n            SQExprValidationVisitor.prototype.visitHierarchy = function (expr) {\n                var fieldExpr = data.SQExprConverter.asFieldPattern(expr);\n                if (fieldExpr) {\n                    var fieldExprItem = fieldExpr.hierarchy;\n                    if (fieldExprItem) {\n                        this.validateHierarchy(fieldExprItem.schema, fieldExprItem.entity, fieldExprItem.name);\n                    }\n                    else {\n                        this.register(5 /* invalidHierarchyReference */);\n                    }\n                }\n                return expr;\n            };\n            SQExprValidationVisitor.prototype.visitHierarchyLevel = function (expr) {\n                var fieldExpr = data.SQExprConverter.asFieldPattern(expr);\n                if (fieldExpr) {\n                    var hierarchyLevelFieldExprItem = fieldExpr.hierarchyLevel;\n                    if (hierarchyLevelFieldExprItem) {\n                        this.validateHierarchyLevel(hierarchyLevelFieldExprItem.schema, hierarchyLevelFieldExprItem.entity, hierarchyLevelFieldExprItem.name, hierarchyLevelFieldExprItem.level);\n                    }\n                    else if (!fieldExpr.columnHierarchyLevelVariation) {\n                        this.register(6 /* invalidHierarchyLevelReference */);\n                    }\n                }\n                return expr;\n            };\n            SQExprValidationVisitor.prototype.visitEntity = function (expr) {\n                this.validateEntity(expr.schema, expr.entity);\n                return expr;\n            };\n            SQExprValidationVisitor.prototype.visitContains = function (expr) {\n                this.validateOperandsAndTypeForStartOrContains(expr.left, expr.right);\n                return expr;\n            };\n            SQExprValidationVisitor.prototype.visitStartsWith = function (expr) {\n                this.validateOperandsAndTypeForStartOrContains(expr.left, expr.right);\n                return expr;\n            };\n            SQExprValidationVisitor.prototype.validateOperandsAndTypeForStartOrContains = function (left, right) {\n                if (left instanceof SQColumnRefExpr) {\n                    this.visitColumnRef(left);\n                }\n                else if (left instanceof SQHierarchyLevelExpr) {\n                    this.visitHierarchyLevel(left);\n                }\n                else {\n                    this.register(7 /* invalidLeftOperandType */);\n                }\n                if (!(right instanceof SQConstantExpr) || !right.type.text)\n                    this.register(8 /* invalidRightOperandType */);\n                else\n                    this.validateCompatibleType(left, right);\n            };\n            SQExprValidationVisitor.prototype.validateCompatibleType = function (left, right) {\n                var leftMetadata = left.getMetadata(this.schema), leftType = leftMetadata && leftMetadata.type, rightMetadata = right.getMetadata(this.schema), rightType = rightMetadata && rightMetadata.type;\n                if (leftType && rightType && !leftType.isCompatibleFrom(rightType))\n                    this.register(9 /* invalidValueType */);\n            };\n            SQExprValidationVisitor.prototype.validateEntity = function (schemaName, entityName) {\n                var schema = this.schema.schema(schemaName);\n                if (schema) {\n                    var entity = schema.entities.withName(entityName);\n                    if (entity)\n                        return entity;\n                    this.register(2 /* invalidEntityReference */);\n                }\n                else {\n                    this.register(1 /* invalidSchemaReference */);\n                }\n            };\n            SQExprValidationVisitor.prototype.validateHierarchy = function (schemaName, entityName, hierarchyName) {\n                var entity = this.validateEntity(schemaName, entityName);\n                if (entity) {\n                    var hierarchy = entity.hierarchies.withName(hierarchyName);\n                    if (hierarchy)\n                        return hierarchy;\n                    this.register(5 /* invalidHierarchyReference */);\n                }\n            };\n            SQExprValidationVisitor.prototype.validateHierarchyLevel = function (schemaName, entityName, hierarchyName, levelName) {\n                var hierarchy = this.validateHierarchy(schemaName, entityName, hierarchyName);\n                if (hierarchy) {\n                    var hierarchyLevel = hierarchy.levels.withName(levelName);\n                    if (hierarchyLevel)\n                        return hierarchyLevel;\n                    this.register(6 /* invalidHierarchyLevelReference */);\n                }\n            };\n            SQExprValidationVisitor.prototype.register = function (error) {\n                if (!this.errors)\n                    this.errors = [];\n                this.errors.push(error);\n            };\n            SQExprValidationVisitor.prototype.isQueryable = function (fieldExpr) {\n                var fieldExprItem = data.FieldExprPattern.toFieldExprEntityItemPattern(fieldExpr);\n                if (fieldExpr.hierarchyLevel || fieldExpr.hierarchyLevelAggr) {\n                    var hierarchyLevelConceptualProperty = data.SQHierarchyExprUtils.getConceptualHierarchyLevelFromExpr(this.schema, fieldExpr);\n                    return hierarchyLevelConceptualProperty && hierarchyLevelConceptualProperty.column.queryable !== 1 /* Error */;\n                }\n                return this.schema.schema(fieldExprItem.schema).findProperty(fieldExprItem.entity, data.FieldExprPattern.getPropertyName(fieldExpr)).queryable !== 1 /* Error */;\n            };\n            return SQExprValidationVisitor;\n        })(data.SQExprRewriter);\n        data.SQExprValidationVisitor = SQExprValidationVisitor;\n        /** Returns an expression's aggregate function, or undefined if it doesn't have one. */\n        var SQExprAggregateInfoVisitor = (function (_super) {\n            __extends(SQExprAggregateInfoVisitor, _super);\n            function SQExprAggregateInfoVisitor() {\n                _super.apply(this, arguments);\n            }\n            SQExprAggregateInfoVisitor.prototype.visitAggr = function (expr) {\n                return expr.func;\n            };\n            SQExprAggregateInfoVisitor.prototype.visitDefault = function (expr) {\n                return;\n            };\n            SQExprAggregateInfoVisitor.getAggregate = function (expr) {\n                var visitor = new SQExprAggregateInfoVisitor();\n                return expr.accept(visitor);\n            };\n            return SQExprAggregateInfoVisitor;\n        })(data.DefaultSQExprVisitor);\n        /** Returns a SQExprColumnRef expression or undefined.*/\n        var SQExprColumnRefInfoVisitor = (function (_super) {\n            __extends(SQExprColumnRefInfoVisitor, _super);\n            function SQExprColumnRefInfoVisitor(schema) {\n                _super.call(this);\n                this.schema = schema;\n            }\n            SQExprColumnRefInfoVisitor.prototype.visitColumnRef = function (expr) {\n                return expr;\n            };\n            SQExprColumnRefInfoVisitor.prototype.visitHierarchyLevel = function (expr) {\n                var ref = expr.level;\n                var hierarchy = (expr.arg);\n                var sourceExpr = hierarchy.accept(this);\n                if (hierarchy && hierarchy.arg instanceof SQPropertyVariationSourceExpr) {\n                    var propertyVariationSource = hierarchy.arg;\n                    var targetEntity = sourceExpr.getTargetEntityForVariation(this.schema, propertyVariationSource.name);\n                    if (sourceExpr && targetEntity) {\n                        var schemaName = (sourceExpr.source).schema;\n                        var targetEntityExpr = SQExprBuilder.entity(schemaName, targetEntity);\n                        var schemaHierarchy = this.schema.schema(schemaName).findHierarchy(targetEntity, hierarchy.hierarchy);\n                        if (schemaHierarchy) {\n                            for (var _i = 0, _a = schemaHierarchy.levels; _i < _a.length; _i++) {\n                                var level = _a[_i];\n                                if (level.name === ref)\n                                    return new SQColumnRefExpr(targetEntityExpr, level.column.name);\n                            }\n                        }\n                    }\n                }\n                else {\n                    var entityExpr = (hierarchy.arg);\n                    var hierarchyLevelRef = data.SQHierarchyExprUtils.getConceptualHierarchyLevel(this.schema, entityExpr.schema, entityExpr.entity, hierarchy.hierarchy, expr.level);\n                    if (hierarchyLevelRef)\n                        return new SQColumnRefExpr(hierarchy.arg, hierarchyLevelRef.column.name);\n                }\n            };\n            SQExprColumnRefInfoVisitor.prototype.visitHierarchy = function (expr) {\n                return expr.arg.accept(this);\n            };\n            SQExprColumnRefInfoVisitor.prototype.visitPropertyVariationSource = function (expr) {\n                var propertyName = expr.property;\n                return new SQColumnRefExpr(expr.arg, propertyName);\n            };\n            SQExprColumnRefInfoVisitor.prototype.visitDefault = function (expr) {\n                return;\n            };\n            SQExprColumnRefInfoVisitor.getColumnRefSQExpr = function (schema, expr) {\n                var visitor = new SQExprColumnRefInfoVisitor(schema);\n                return expr.accept(visitor);\n            };\n            return SQExprColumnRefInfoVisitor;\n        })(data.DefaultSQExprVisitor);\n        var SQExprChangeAggregateRewriter = (function (_super) {\n            __extends(SQExprChangeAggregateRewriter, _super);\n            function SQExprChangeAggregateRewriter(func) {\n                debug.assertValue(func, 'func');\n                _super.call(this);\n                this.func = func;\n            }\n            SQExprChangeAggregateRewriter.prototype.visitAggr = function (expr) {\n                if (expr.func === this.func)\n                    return expr;\n                return new SQAggregationExpr(expr.arg, this.func);\n            };\n            SQExprChangeAggregateRewriter.prototype.visitColumnRef = function (expr) {\n                return new SQAggregationExpr(expr, this.func);\n            };\n            SQExprChangeAggregateRewriter.rewrite = function (expr, func) {\n                debug.assertValue(expr, 'expr');\n                debug.assertValue(func, 'func');\n                var rewriter = new SQExprChangeAggregateRewriter(func);\n                return expr.accept(rewriter);\n            };\n            return SQExprChangeAggregateRewriter;\n        })(SQExprRootRewriter);\n        var SQExprRemoveAggregateRewriter = (function (_super) {\n            __extends(SQExprRemoveAggregateRewriter, _super);\n            function SQExprRemoveAggregateRewriter() {\n                _super.apply(this, arguments);\n            }\n            SQExprRemoveAggregateRewriter.prototype.visitAggr = function (expr) {\n                return expr.arg;\n            };\n            SQExprRemoveAggregateRewriter.rewrite = function (expr) {\n                debug.assertValue(expr, 'expr');\n                return expr.accept(SQExprRemoveAggregateRewriter.instance);\n            };\n            SQExprRemoveAggregateRewriter.instance = new SQExprRemoveAggregateRewriter();\n            return SQExprRemoveAggregateRewriter;\n        })(SQExprRootRewriter);\n        var SQExprRemoveEntityVariablesRewriter = (function (_super) {\n            __extends(SQExprRemoveEntityVariablesRewriter, _super);\n            function SQExprRemoveEntityVariablesRewriter() {\n                _super.apply(this, arguments);\n            }\n            SQExprRemoveEntityVariablesRewriter.prototype.visitEntity = function (expr) {\n                if (expr.variable)\n                    return SQExprBuilder.entity(expr.schema, expr.entity);\n                return expr;\n            };\n            SQExprRemoveEntityVariablesRewriter.rewrite = function (expr) {\n                debug.assertValue(expr, 'expr');\n                return expr.accept(SQExprRemoveEntityVariablesRewriter.instance);\n            };\n            SQExprRemoveEntityVariablesRewriter.instance = new SQExprRemoveEntityVariablesRewriter();\n            return SQExprRemoveEntityVariablesRewriter;\n        })(data.SQExprRewriter);\n    })(data = powerbi.data || (powerbi.data = {}));\n})(powerbi || (powerbi = {}));\n/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\nvar powerbi;\n(function (powerbi) {\n    var data;\n    (function (data) {\n        var StringExtensions = jsCommon.StringExtensions;\n        var SQExprUtils;\n        (function (SQExprUtils) {\n            /** Returns an array of supported aggregates for a given expr and role. */\n            function getSupportedAggregates(expr, schema) {\n                var emptyList = [];\n                var metadata = getMetadataForUnderlyingType(expr, schema);\n                // don't use expr.validate as validate will be using this function and we end up in a recursive loop\n                if (!metadata)\n                    return emptyList;\n                var valueType = metadata.type, fieldKind = metadata.kind, isPropertyIdentity = metadata.idOnEntityKey, Agg = data.QueryAggregateFunction; // alias\n                if (!valueType)\n                    return emptyList;\n                // Cannot aggregate on model measures\n                if (fieldKind === 1 /* Measure */)\n                    return emptyList;\n                if (valueType.numeric || valueType.integer) {\n                    var aggregates = [Agg.Sum, Agg.Avg, Agg.Min, Agg.Max, Agg.Count, Agg.CountNonNull, Agg.StandardDeviation, Agg.Variance];\n                    var fieldExpr = data.SQExprConverter.asFieldPattern(expr);\n                    var fieldExprItem = data.FieldExprPattern.toFieldExprEntityItemPattern(fieldExpr);\n                    var currentSchema = schema.schema(fieldExprItem.schema);\n                    if (currentSchema.capabilities.supportsMedian)\n                        aggregates.push(Agg.Median);\n                    return aggregates;\n                }\n                else if (valueType.text || valueType.bool || valueType.dateTime) {\n                    // The supported aggregation types for an identity field are restricted to 'Count Non-Null' (e.g. for the field well aggregation options)\n                    // but a valid semantic query can return a less-restricted aggregation option which we should honor. (e.g. this results from Q&A)\n                    var distinctCountAggExists = data.SQExprInfo.getAggregate(expr) === Agg.Count;\n                    if (isPropertyIdentity && !distinctCountAggExists)\n                        return [Agg.CountNonNull];\n                    return [Agg.Count, Agg.CountNonNull];\n                }\n                debug.assertFail(\"Unexpected expr or role.\");\n                return emptyList;\n            }\n            SQExprUtils.getSupportedAggregates = getSupportedAggregates;\n            function isSupportedAggregate(expr, schema, aggregate) {\n                var supportedAggregates = getSupportedAggregates(expr, schema);\n                return _.contains(supportedAggregates, aggregate);\n            }\n            SQExprUtils.isSupportedAggregate = isSupportedAggregate;\n            function indexOfExpr(items, searchElement) {\n                debug.assertValue(items, 'items');\n                debug.assertValue(searchElement, 'searchElement');\n                for (var i = 0, len = items.length; i < len; i++) {\n                    if (data.SQExpr.equals(items[i], searchElement))\n                        return i;\n                }\n                return -1;\n            }\n            SQExprUtils.indexOfExpr = indexOfExpr;\n            function sequenceEqual(x, y) {\n                debug.assertValue(x, 'x');\n                debug.assertValue(y, 'y');\n                var len = x.length;\n                if (len !== y.length)\n                    return false;\n                for (var i = 0; i < len; i++) {\n                    if (!data.SQExpr.equals(x[i], y[i]))\n                        return false;\n                }\n                return true;\n            }\n            SQExprUtils.sequenceEqual = sequenceEqual;\n            function uniqueName(namedItems, expr, exprDefaultName) {\n                debug.assertValue(namedItems, 'namedItems');\n                // Determine all names\n                var names = {};\n                for (var i = 0, len = namedItems.length; i < len; i++)\n                    names[namedItems[i].name] = true;\n                return StringExtensions.findUniqueName(names, exprDefaultName || defaultName(expr));\n            }\n            SQExprUtils.uniqueName = uniqueName;\n            /** Generates a default expression name  */\n            function defaultName(expr, fallback) {\n                if (fallback === void 0) { fallback = 'select'; }\n                if (!expr)\n                    return fallback;\n                return expr.accept(SQExprDefaultNameGenerator.instance, fallback);\n            }\n            SQExprUtils.defaultName = defaultName;\n            /** Gets a value indicating whether the expr is a model measure or an aggregate. */\n            function isMeasure(expr) {\n                debug.assertValue(expr, 'expr');\n                return expr.accept(IsMeasureVisitor.instance);\n            }\n            SQExprUtils.isMeasure = isMeasure;\n            /** Gets a value indicating whether the expr is an AnyValue or equals comparison to AnyValue*/\n            function isAnyValue(expr) {\n                debug.assertValue(expr, 'expr');\n                return expr.accept(IsAnyValueVisitor.instance);\n            }\n            SQExprUtils.isAnyValue = isAnyValue;\n            /** Gets a value indicating whether the expr is a DefaultValue or equals comparison to DefaultValue*/\n            function isDefaultValue(expr) {\n                debug.assertValue(expr, 'expr');\n                return expr.accept(IsDefaultValueVisitor.instance);\n            }\n            SQExprUtils.isDefaultValue = isDefaultValue;\n            function discourageAggregation(expr, schema) {\n                var capabilities = getSchemaCapabilities(expr, schema);\n                return capabilities && capabilities.discourageQueryAggregateUsage;\n            }\n            SQExprUtils.discourageAggregation = discourageAggregation;\n            function getAggregateBehavior(expr, schema) {\n                debug.assertValue(expr, 'expr');\n                debug.assertValue(schema, 'schema');\n                var column = getConceptualColumn(expr, schema);\n                if (column)\n                    return column.aggregateBehavior;\n            }\n            SQExprUtils.getAggregateBehavior = getAggregateBehavior;\n            function getSchemaCapabilities(expr, schema) {\n                debug.assertValue(expr, 'expr');\n                debug.assertValue(schema, 'schema');\n                var field = data.SQExprConverter.asFieldPattern(expr);\n                if (!field)\n                    return;\n                var fieldExprItem = data.FieldExprPattern.toFieldExprEntityItemPattern(field);\n                var conceptualSchema = schema.schema(fieldExprItem.schema);\n                if (conceptualSchema)\n                    return conceptualSchema.capabilities;\n            }\n            SQExprUtils.getSchemaCapabilities = getSchemaCapabilities;\n            function getKpiMetadata(expr, schema) {\n                var kpiStatusProperty = getKpiStatusProperty(expr, schema);\n                if (kpiStatusProperty)\n                    return kpiStatusProperty.kpiValue.measure.kpi.statusMetadata;\n                var kpiTrendProperty = getKpiTrendProperty(expr, schema);\n                if (kpiTrendProperty)\n                    return kpiTrendProperty.kpiValue.measure.kpi.trendMetadata;\n            }\n            SQExprUtils.getKpiMetadata = getKpiMetadata;\n            function getKpiStatusProperty(expr, schema) {\n                var property = expr.getConceptualProperty(schema);\n                if (!property)\n                    return;\n                var kpiValue = property.kpiValue;\n                if (kpiValue && kpiValue.measure.kpi.status === property)\n                    return property;\n            }\n            function getKpiTrendProperty(expr, schema) {\n                var property = expr.getConceptualProperty(schema);\n                if (!property)\n                    return;\n                var kpiValue = property.kpiValue;\n                if (kpiValue && kpiValue.measure.kpi.trend === property)\n                    return property;\n            }\n            function getMetadataForUnderlyingType(expr, schema) {\n                // Unwrap the aggregate (if the expr has one), and look at the underlying type.\n                var metadata = data.SQExprBuilder.removeAggregate(expr).getMetadata(schema);\n                if (!metadata)\n                    metadata = expr.getMetadata(schema);\n                return metadata;\n            }\n            function getDefaultValue(fieldSQExpr, schema) {\n                var column = getConceptualColumn(fieldSQExpr, schema);\n                if (column)\n                    return column.defaultValue;\n            }\n            SQExprUtils.getDefaultValue = getDefaultValue;\n            function getConceptualColumn(fieldSQExpr, schema) {\n                if (!fieldSQExpr || !schema)\n                    return;\n                var sqField = data.SQExprConverter.asFieldPattern(fieldSQExpr);\n                if (!sqField)\n                    return;\n                var column = sqField.column;\n                if (column) {\n                    if (schema.schema(column.schema) && sqField.column.name) {\n                        var property = schema.schema(column.schema).findProperty(column.entity, sqField.column.name);\n                        if (property)\n                            return property.column;\n                    }\n                }\n                else {\n                    var hierarchyLevelField = sqField.hierarchyLevel;\n                    if (hierarchyLevelField) {\n                        var fieldExprItem = data.FieldExprPattern.toFieldExprEntityItemPattern(sqField);\n                        var schemaName = fieldExprItem.schema;\n                        if (schema.schema(schemaName)) {\n                            var hierarchy = schema.schema(schemaName)\n                                .findHierarchy(fieldExprItem.entity, hierarchyLevelField.name);\n                            if (hierarchy) {\n                                var hierarchyLevel = hierarchy.levels.withName(hierarchyLevelField.level);\n                                if (hierarchyLevel && hierarchyLevel.column)\n                                    return hierarchyLevel.column.column;\n                            }\n                        }\n                    }\n                }\n            }\n            function getDefaultValues(fieldSQExprs, schema) {\n                if (_.isEmpty(fieldSQExprs) || !schema)\n                    return;\n                var result = [];\n                for (var _i = 0; _i < fieldSQExprs.length; _i++) {\n                    var sqExpr = fieldSQExprs[_i];\n                    var defaultValue = getDefaultValue(sqExpr, schema);\n                    if (defaultValue)\n                        result.push(defaultValue);\n                }\n                return result;\n            }\n            SQExprUtils.getDefaultValues = getDefaultValues;\n            /** Return compare or and expression for key value pairs. */\n            function getDataViewScopeIdentityComparisonExpr(fieldsExpr, values) {\n                debug.assert(fieldsExpr.length === values.length, \"fileds and values need to be the same size\");\n                var compareExprs = [];\n                for (var i = 0; i < fieldsExpr.length; i++) {\n                    compareExprs.push(data.SQExprBuilder.compare(data.QueryComparisonKind.Equal, fieldsExpr[i], values[i]));\n                }\n                if (_.isEmpty(compareExprs))\n                    return;\n                var resultExpr;\n                for (var _i = 0; _i < compareExprs.length; _i++) {\n                    var compareExpr = compareExprs[_i];\n                    resultExpr = data.SQExprBuilder.and(resultExpr, compareExpr);\n                }\n                return resultExpr;\n            }\n            SQExprUtils.getDataViewScopeIdentityComparisonExpr = getDataViewScopeIdentityComparisonExpr;\n            function getActiveTablesNames(queryDefn) {\n                var tables = [];\n                if (queryDefn) {\n                    var selectedItems = queryDefn.from();\n                    if (selectedItems !== undefined) {\n                        for (var _i = 0, _a = selectedItems.keys(); _i < _a.length; _i++) {\n                            var key = _a[_i];\n                            var entityObj = selectedItems.entity(key);\n                            if (tables.indexOf(entityObj.entity) < 0)\n                                tables.push(entityObj.entity);\n                        }\n                    }\n                }\n                return tables;\n            }\n            SQExprUtils.getActiveTablesNames = getActiveTablesNames;\n            var SQExprDefaultNameGenerator = (function (_super) {\n                __extends(SQExprDefaultNameGenerator, _super);\n                function SQExprDefaultNameGenerator() {\n                    _super.apply(this, arguments);\n                }\n                SQExprDefaultNameGenerator.prototype.visitEntity = function (expr) {\n                    return expr.entity;\n                };\n                SQExprDefaultNameGenerator.prototype.visitColumnRef = function (expr) {\n                    return expr.source.accept(this) + '.' + expr.ref;\n                };\n                SQExprDefaultNameGenerator.prototype.visitMeasureRef = function (expr, fallback) {\n                    return expr.source.accept(this) + '.' + expr.ref;\n                };\n                SQExprDefaultNameGenerator.prototype.visitAggr = function (expr, fallback) {\n                    return data.QueryAggregateFunction[expr.func] + '(' + expr.arg.accept(this) + ')';\n                };\n                SQExprDefaultNameGenerator.prototype.visitConstant = function (expr) {\n                    return 'const';\n                };\n                SQExprDefaultNameGenerator.prototype.visitDefault = function (expr, fallback) {\n                    return fallback || 'expr';\n                };\n                SQExprDefaultNameGenerator.instance = new SQExprDefaultNameGenerator();\n                return SQExprDefaultNameGenerator;\n            })(data.DefaultSQExprVisitorWithArg);\n            var IsMeasureVisitor = (function (_super) {\n                __extends(IsMeasureVisitor, _super);\n                function IsMeasureVisitor() {\n                    _super.apply(this, arguments);\n                }\n                IsMeasureVisitor.prototype.visitMeasureRef = function (expr) {\n                    return true;\n                };\n                IsMeasureVisitor.prototype.visitAggr = function (expr) {\n                    return true;\n                };\n                IsMeasureVisitor.prototype.visitDefault = function (expr) {\n                    return false;\n                };\n                IsMeasureVisitor.instance = new IsMeasureVisitor();\n                return IsMeasureVisitor;\n            })(data.DefaultSQExprVisitor);\n            var IsDefaultValueVisitor = (function (_super) {\n                __extends(IsDefaultValueVisitor, _super);\n                function IsDefaultValueVisitor() {\n                    _super.apply(this, arguments);\n                }\n                IsDefaultValueVisitor.prototype.visitCompare = function (expr) {\n                    if (expr.comparison !== data.QueryComparisonKind.Equal)\n                        return false;\n                    return expr.right.accept(this);\n                };\n                IsDefaultValueVisitor.prototype.visitAnd = function (expr) {\n                    return expr.left.accept(this) && expr.right.accept(this);\n                };\n                IsDefaultValueVisitor.prototype.visitDefaultValue = function (expr) {\n                    return true;\n                };\n                IsDefaultValueVisitor.prototype.visitDefault = function (expr) {\n                    return false;\n                };\n                IsDefaultValueVisitor.instance = new IsDefaultValueVisitor();\n                return IsDefaultValueVisitor;\n            })(data.DefaultSQExprVisitor);\n            var IsAnyValueVisitor = (function (_super) {\n                __extends(IsAnyValueVisitor, _super);\n                function IsAnyValueVisitor() {\n                    _super.apply(this, arguments);\n                }\n                IsAnyValueVisitor.prototype.visitCompare = function (expr) {\n                    if (expr.comparison !== data.QueryComparisonKind.Equal)\n                        return false;\n                    return expr.right.accept(this);\n                };\n                IsAnyValueVisitor.prototype.visitAnd = function (expr) {\n                    return expr.left.accept(this) && expr.right.accept(this);\n                };\n                IsAnyValueVisitor.prototype.visitAnyValue = function (expr) {\n                    return true;\n                };\n                IsAnyValueVisitor.prototype.visitDefault = function (expr) {\n                    return false;\n                };\n                IsAnyValueVisitor.instance = new IsAnyValueVisitor();\n                return IsAnyValueVisitor;\n            })(data.DefaultSQExprVisitor);\n        })(SQExprUtils = data.SQExprUtils || (data.SQExprUtils = {}));\n    })(data = powerbi.data || (powerbi.data = {}));\n})(powerbi || (powerbi = {}));\n/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\nvar powerbi;\n(function (powerbi) {\n    var data;\n    (function (data) {\n        var SemanticQueryRewriter = (function () {\n            function SemanticQueryRewriter(exprRewriter) {\n                this.exprRewriter = exprRewriter;\n            }\n            SemanticQueryRewriter.prototype.rewriteFrom = function (fromValue) {\n                var fromContents = {};\n                var originalFrom = fromValue, originalFromKeys = originalFrom.keys();\n                for (var i = 0, len = originalFromKeys.length; i < len; i++) {\n                    var keyName = originalFromKeys[i], originalEntityRef = originalFrom.entity(keyName), originalEntityExpr = data.SQExprBuilder.entity(originalEntityRef.schema, originalEntityRef.entity, keyName), updatedEntityExpr = originalEntityExpr.accept(this.exprRewriter);\n                    fromContents[keyName] = {\n                        schema: updatedEntityExpr.schema,\n                        entity: updatedEntityExpr.entity,\n                    };\n                }\n                return new data.SQFrom(fromContents);\n            };\n            SemanticQueryRewriter.prototype.rewriteSelect = function (selectItems, from) {\n                debug.assertValue(selectItems, 'selectItems');\n                debug.assertValue(from, 'from');\n                return this.rewriteNamedSQExpressions(selectItems, from);\n            };\n            SemanticQueryRewriter.prototype.rewriteGroupBy = function (groupByitems, from) {\n                debug.assertAnyValue(groupByitems, 'groupByitems');\n                debug.assertValue(from, 'from');\n                if (_.isEmpty(groupByitems))\n                    return;\n                return this.rewriteNamedSQExpressions(groupByitems, from);\n            };\n            SemanticQueryRewriter.prototype.rewriteNamedSQExpressions = function (expressions, from) {\n                var _this = this;\n                debug.assertValue(expressions, 'expressions');\n                return _.map(expressions, function (item) {\n                    return {\n                        name: item.name,\n                        expr: data.SQExprRewriterWithSourceRenames.rewrite(item.expr.accept(_this.exprRewriter), from)\n                    };\n                });\n            };\n            SemanticQueryRewriter.prototype.rewriteOrderBy = function (orderByItems, from) {\n                debug.assertAnyValue(orderByItems, 'orderByItems');\n                debug.assertValue(from, 'from');\n                if (_.isEmpty(orderByItems))\n                    return;\n                var orderBy = [];\n                for (var i = 0, len = orderByItems.length; i < len; i++) {\n                    var item = orderByItems[i], updatedExpr = data.SQExprRewriterWithSourceRenames.rewrite(item.expr.accept(this.exprRewriter), from);\n                    orderBy.push({\n                        direction: item.direction,\n                        expr: updatedExpr,\n                    });\n                }\n                return orderBy;\n            };\n            SemanticQueryRewriter.prototype.rewriteWhere = function (whereItems, from) {\n                var _this = this;\n                debug.assertAnyValue(whereItems, 'whereItems');\n                debug.assertValue(from, 'from');\n                if (_.isEmpty(whereItems))\n                    return;\n                var where = [];\n                for (var i = 0, len = whereItems.length; i < len; i++) {\n                    var originalWhere = whereItems[i];\n                    var updatedWhere = {\n                        condition: data.SQExprRewriterWithSourceRenames.rewrite(originalWhere.condition.accept(this.exprRewriter), from),\n                    };\n                    if (originalWhere.target)\n                        updatedWhere.target = _.map(originalWhere.target, function (e) { return data.SQExprRewriterWithSourceRenames.rewrite(e.accept(_this.exprRewriter), from); });\n                    where.push(updatedWhere);\n                }\n                return where;\n            };\n            return SemanticQueryRewriter;\n        })();\n        data.SemanticQueryRewriter = SemanticQueryRewriter;\n    })(data = powerbi.data || (powerbi.data = {}));\n})(powerbi || (powerbi = {}));\n/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\nvar powerbi;\n(function (powerbi) {\n    var data;\n    (function (data) {\n        var ArrayExtensions = jsCommon.ArrayExtensions;\n        /**\n         * Represents a semantic query that is:\n         * 1) Round-trippable with a JSON QueryDefinition.\n         * 2) Immutable\n         * 3) Long-lived and does not have strong references to a conceptual model (only names).\n         */\n        var SemanticQuery = (function () {\n            function SemanticQuery(from, where, orderBy, select, groupBy) {\n                debug.assertValue(from, 'from');\n                debug.assertValue(select, 'select');\n                this.fromValue = from;\n                this.whereItems = where;\n                this.orderByItems = orderBy;\n                this.selectItems = select;\n                this.groupByItems = groupBy;\n            }\n            SemanticQuery.create = function () {\n                if (!SemanticQuery.empty)\n                    SemanticQuery.empty = new SemanticQuery(new SQFrom(), null, null, [], null);\n                return SemanticQuery.empty;\n            };\n            SemanticQuery.createWithTrimmedFrom = function (from, where, orderBy, select, groupBy) {\n                var unreferencedKeyFinder = new UnreferencedKeyFinder(from.keys());\n                // Where\n                if (where) {\n                    for (var i = 0, len = where.length; i < len; i++) {\n                        var filter = where[i];\n                        filter.condition.accept(unreferencedKeyFinder);\n                        var filterTarget = filter.target;\n                        if (filterTarget) {\n                            for (var j = 0, jlen = filterTarget.length; j < jlen; j++)\n                                if (filterTarget[j])\n                                    filterTarget[j].accept(unreferencedKeyFinder);\n                        }\n                    }\n                }\n                // OrderBy\n                if (orderBy) {\n                    for (var i = 0, len = orderBy.length; i < len; i++)\n                        orderBy[i].expr.accept(unreferencedKeyFinder);\n                }\n                // Select\n                for (var i = 0, len = select.length; i < len; i++)\n                    select[i].expr.accept(unreferencedKeyFinder);\n                // GroupBy\n                if (groupBy) {\n                    for (var i = 0, len = groupBy.length; i < len; i++)\n                        groupBy[i].expr.accept(unreferencedKeyFinder);\n                }\n                var unreferencedKeys = unreferencedKeyFinder.result();\n                for (var i = 0, len = unreferencedKeys.length; i < len; i++)\n                    from.remove(unreferencedKeys[i]);\n                return new SemanticQuery(from, where, orderBy, select, groupBy);\n            };\n            SemanticQuery.prototype.from = function () {\n                return this.fromValue.clone();\n            };\n            SemanticQuery.prototype.select = function (values) {\n                if (_.isEmpty(arguments))\n                    return this.getSelect();\n                return this.setSelect(values);\n            };\n            SemanticQuery.prototype.getSelect = function () {\n                return SemanticQuery.createNamedExpressionArray(this.selectItems);\n            };\n            SemanticQuery.createNamedExpressionArray = function (items) {\n                return ArrayExtensions.extendWithName(_.map(items, function (s) {\n                    return {\n                        name: s.name,\n                        expr: s.expr,\n                    };\n                }));\n            };\n            SemanticQuery.prototype.setSelect = function (values) {\n                var from = this.fromValue.clone();\n                var selectItems = SemanticQuery.rewriteExpressionsWithSourceRenames(values, from);\n                return SemanticQuery.createWithTrimmedFrom(from, this.whereItems, this.orderByItems, selectItems, this.groupByItems);\n            };\n            SemanticQuery.rewriteExpressionsWithSourceRenames = function (values, from) {\n                var items = [];\n                for (var i = 0, len = values.length; i < len; i++) {\n                    var value = values[i];\n                    items.push({\n                        name: value.name,\n                        expr: SQExprRewriterWithSourceRenames.rewrite(value.expr, from)\n                    });\n                }\n                return items;\n            };\n            /** Removes the given expression from the select. */\n            SemanticQuery.prototype.removeSelect = function (expr) {\n                debug.assertValue(expr, 'expr');\n                var originalItems = this.selectItems, selectItems = [];\n                for (var i = 0, len = originalItems.length; i < len; i++) {\n                    var originalExpr = originalItems[i];\n                    if (data.SQExpr.equals(originalExpr.expr, expr))\n                        continue;\n                    selectItems.push(originalExpr);\n                }\n                return SemanticQuery.createWithTrimmedFrom(this.fromValue.clone(), this.whereItems, this.orderByItems, selectItems, this.groupByItems);\n            };\n            /** Removes the given expression from order by. */\n            SemanticQuery.prototype.removeOrderBy = function (expr) {\n                var sorts = this.orderBy();\n                for (var i = sorts.length - 1; i >= 0; i--) {\n                    if (data.SQExpr.equals(sorts[i].expr, expr))\n                        sorts.splice(i, 1);\n                }\n                return SemanticQuery.createWithTrimmedFrom(this.fromValue.clone(), this.whereItems, sorts, this.selectItems, this.groupByItems);\n            };\n            SemanticQuery.prototype.selectNameOf = function (expr) {\n                var index = data.SQExprUtils.indexOfExpr(_.map(this.selectItems, function (s) { return s.expr; }), expr);\n                if (index >= 0)\n                    return this.selectItems[index].name;\n            };\n            SemanticQuery.prototype.setSelectAt = function (index, expr) {\n                debug.assertValue(expr, 'expr');\n                if (index >= this.selectItems.length)\n                    return;\n                var select = this.select(), from = this.fromValue.clone(), originalName = select[index].name;\n                select[index] = {\n                    name: originalName,\n                    expr: SQExprRewriterWithSourceRenames.rewrite(expr, from)\n                };\n                return SemanticQuery.createWithTrimmedFrom(from, this.whereItems, this.orderByItems, select, this.groupByItems);\n            };\n            /** Adds a the expression to the select clause. */\n            SemanticQuery.prototype.addSelect = function (expr, exprName) {\n                debug.assertValue(expr, 'expr');\n                var selectItems = this.select(), from = this.fromValue.clone();\n                selectItems.push({\n                    name: data.SQExprUtils.uniqueName(selectItems, expr, exprName),\n                    expr: SQExprRewriterWithSourceRenames.rewrite(expr, from)\n                });\n                return SemanticQuery.createWithTrimmedFrom(from, this.whereItems, this.orderByItems, selectItems, this.groupByItems);\n            };\n            SemanticQuery.prototype.groupBy = function (values) {\n                if (_.isEmpty(arguments))\n                    return this.getGroupBy();\n                return this.setGroupBy(values);\n            };\n            SemanticQuery.prototype.getGroupBy = function () {\n                return SemanticQuery.createNamedExpressionArray(this.groupByItems);\n            };\n            SemanticQuery.prototype.setGroupBy = function (values) {\n                var from = this.fromValue.clone();\n                var groupByItems = SemanticQuery.rewriteExpressionsWithSourceRenames(values, from);\n                return SemanticQuery.createWithTrimmedFrom(from, this.whereItems, this.orderByItems, this.selectItems, groupByItems);\n            };\n            SemanticQuery.prototype.orderBy = function (values) {\n                if (_.isEmpty(arguments))\n                    return this.getOrderBy();\n                return this.setOrderBy(values);\n            };\n            SemanticQuery.prototype.getOrderBy = function () {\n                var result = [];\n                var orderBy = this.orderByItems;\n                if (orderBy) {\n                    for (var i = 0, len = orderBy.length; i < len; i++) {\n                        var clause = orderBy[i];\n                        result.push({\n                            expr: clause.expr,\n                            direction: clause.direction,\n                        });\n                    }\n                }\n                return result;\n            };\n            SemanticQuery.prototype.setOrderBy = function (values) {\n                debug.assertValue(values, 'values');\n                var updatedOrderBy = [], from = this.fromValue.clone();\n                for (var i = 0, len = values.length; i < len; i++) {\n                    var clause = values[i];\n                    updatedOrderBy.push({\n                        expr: SQExprRewriterWithSourceRenames.rewrite(clause.expr, from),\n                        direction: clause.direction,\n                    });\n                }\n                return SemanticQuery.createWithTrimmedFrom(from, this.whereItems, updatedOrderBy, this.selectItems, this.groupByItems);\n            };\n            SemanticQuery.prototype.where = function (values) {\n                if (_.isEmpty(arguments))\n                    return this.getWhere();\n                return this.setWhere(values);\n            };\n            SemanticQuery.prototype.getWhere = function () {\n                var result = [];\n                var whereItems = this.whereItems;\n                if (whereItems) {\n                    for (var i = 0, len = whereItems.length; i < len; i++)\n                        result.push(whereItems[i]);\n                }\n                return result;\n            };\n            SemanticQuery.prototype.setWhere = function (values) {\n                debug.assertValue(values, 'values');\n                var updatedWhere = [], from = this.fromValue.clone();\n                for (var i = 0, len = values.length; i < len; i++) {\n                    var filter = values[i];\n                    var updatedFilter = {\n                        condition: SQExprRewriterWithSourceRenames.rewrite(filter.condition, from),\n                    };\n                    var filterTarget = filter.target;\n                    if (filterTarget) {\n                        updatedFilter.target = [];\n                        for (var j = 0, jlen = filterTarget.length; j < jlen; j++)\n                            if (filterTarget[j]) {\n                                var updatedTarget = SQExprRewriterWithSourceRenames.rewrite(filterTarget[j], from);\n                                updatedFilter.target.push(updatedTarget);\n                            }\n                    }\n                    updatedWhere.push(updatedFilter);\n                }\n                return SemanticQuery.createWithTrimmedFrom(from, updatedWhere, this.orderByItems, this.selectItems, this.groupByItems);\n            };\n            SemanticQuery.prototype.addWhere = function (filter) {\n                debug.assertValue(filter, 'filter');\n                var updatedWhere = this.where(), incomingWhere = filter.where(), from = this.fromValue.clone();\n                for (var i = 0, len = incomingWhere.length; i < len; i++) {\n                    var clause = incomingWhere[i];\n                    var updatedClause = {\n                        condition: SQExprRewriterWithSourceRenames.rewrite(clause.condition, from),\n                    };\n                    if (clause.target)\n                        updatedClause.target = _.map(clause.target, function (t) { return SQExprRewriterWithSourceRenames.rewrite(t, from); });\n                    updatedWhere.push(updatedClause);\n                }\n                return SemanticQuery.createWithTrimmedFrom(from, updatedWhere, this.orderByItems, this.selectItems, this.groupByItems);\n            };\n            SemanticQuery.prototype.rewrite = function (exprRewriter) {\n                var rewriter = new data.SemanticQueryRewriter(exprRewriter);\n                var from = rewriter.rewriteFrom(this.fromValue);\n                var where = rewriter.rewriteWhere(this.whereItems, from);\n                var orderBy = rewriter.rewriteOrderBy(this.orderByItems, from);\n                var select = rewriter.rewriteSelect(this.selectItems, from);\n                var groupBy = rewriter.rewriteGroupBy(this.groupByItems, from);\n                return SemanticQuery.createWithTrimmedFrom(from, where, orderBy, select, groupBy);\n            };\n            return SemanticQuery;\n        })();\n        data.SemanticQuery = SemanticQuery;\n        /** Represents a semantic filter condition.  Round-trippable with a JSON FilterDefinition.  Instances of this class are immutable. */\n        var SemanticFilter = (function () {\n            function SemanticFilter(from, where) {\n                debug.assertValue(from, 'from');\n                debug.assertValue(where, 'where');\n                this.fromValue = from;\n                this.whereItems = where;\n            }\n            SemanticFilter.fromSQExpr = function (contract) {\n                debug.assertValue(contract, 'contract');\n                var from = new SQFrom();\n                var rewrittenContract = SQExprRewriterWithSourceRenames.rewrite(contract, from);\n                // DEVNOTE targets of some filters are visual specific and will get resolved only during query generation.\n                //         Thus not setting a target here.\n                var where = [{\n                        condition: rewrittenContract\n                    }];\n                return new SemanticFilter(from, where);\n            };\n            SemanticFilter.getDefaultValueFilter = function (fieldSQExprs) {\n                return SemanticFilter.getDataViewScopeIdentityComparisonFilters(fieldSQExprs, data.SQExprBuilder.defaultValue());\n            };\n            SemanticFilter.getAnyValueFilter = function (fieldSQExprs) {\n                return SemanticFilter.getDataViewScopeIdentityComparisonFilters(fieldSQExprs, data.SQExprBuilder.anyValue());\n            };\n            SemanticFilter.getDataViewScopeIdentityComparisonFilters = function (fieldSQExprs, value) {\n                debug.assertValue(fieldSQExprs, 'fieldSQExprs');\n                debug.assertValue(value, 'value');\n                if (fieldSQExprs instanceof Array) {\n                    var values = Array.apply(null, Array(fieldSQExprs.length)).map(function () { return value; });\n                    return SemanticFilter.fromSQExpr(data.SQExprUtils.getDataViewScopeIdentityComparisonExpr(fieldSQExprs, values));\n                }\n                return SemanticFilter.fromSQExpr(data.SQExprBuilder.equal(fieldSQExprs, value));\n            };\n            SemanticFilter.prototype.from = function () {\n                return this.fromValue.clone();\n            };\n            SemanticFilter.prototype.conditions = function () {\n                var expressions = [];\n                var where = this.whereItems;\n                for (var i = 0, len = where.length; i < len; i++) {\n                    var filter = where[i];\n                    expressions.push(filter.condition);\n                }\n                return expressions;\n            };\n            SemanticFilter.prototype.where = function () {\n                var result = [];\n                var whereItems = this.whereItems;\n                for (var i = 0, len = whereItems.length; i < len; i++)\n                    result.push(whereItems[i]);\n                return result;\n            };\n            SemanticFilter.prototype.rewrite = function (exprRewriter) {\n                var rewriter = new data.SemanticQueryRewriter(exprRewriter);\n                var from = rewriter.rewriteFrom(this.fromValue);\n                var where = rewriter.rewriteWhere(this.whereItems, from);\n                return new SemanticFilter(from, where);\n            };\n            SemanticFilter.prototype.validate = function (schema, errors) {\n                var validator = new data.SQExprValidationVisitor(schema, errors);\n                this.rewrite(validator);\n                return validator.errors;\n            };\n            /** Merges a list of SemanticFilters into one. */\n            SemanticFilter.merge = function (filters) {\n                if (_.isEmpty(filters))\n                    return null;\n                if (filters.length === 1)\n                    return filters[0];\n                var firstFilter = filters[0];\n                var from = firstFilter.from(), where = ArrayExtensions.take(firstFilter.whereItems, firstFilter.whereItems.length);\n                for (var i = 1, len = filters.length; i < len; i++)\n                    SemanticFilter.applyFilter(filters[i], from, where);\n                return new SemanticFilter(from, where);\n            };\n            SemanticFilter.isDefaultFilter = function (filter) {\n                if (!filter || filter.where().length !== 1)\n                    return false;\n                return data.SQExprUtils.isDefaultValue(filter.where()[0].condition);\n            };\n            SemanticFilter.isAnyFilter = function (filter) {\n                if (!filter || filter.where().length !== 1)\n                    return false;\n                return data.SQExprUtils.isAnyValue(filter.where()[0].condition);\n            };\n            SemanticFilter.isSameFilter = function (leftFilter, rightFilter) {\n                if (jsCommon.JsonComparer.equals(leftFilter, rightFilter)) {\n                    return !((SemanticFilter.isDefaultFilter(leftFilter) && SemanticFilter.isAnyFilter(rightFilter))\n                        || (SemanticFilter.isAnyFilter(leftFilter) && SemanticFilter.isDefaultFilter(rightFilter)));\n                }\n                return false;\n            };\n            SemanticFilter.applyFilter = function (filter, from, where) {\n                debug.assertValue(filter, 'filter');\n                debug.assertValue(from, 'from');\n                debug.assertValue(where, 'where');\n                // Where\n                var filterWhereItems = filter.whereItems;\n                for (var i = 0; i < filterWhereItems.length; i++) {\n                    var filterWhereItem = filterWhereItems[i];\n                    var updatedWhereItem = {\n                        condition: SQExprRewriterWithSourceRenames.rewrite(filterWhereItem.condition, from),\n                    };\n                    if (filterWhereItem.target)\n                        updatedWhereItem.target = _.map(filterWhereItem.target, function (e) { return SQExprRewriterWithSourceRenames.rewrite(e, from); });\n                    where.push(updatedWhereItem);\n                }\n            };\n            return SemanticFilter;\n        })();\n        data.SemanticFilter = SemanticFilter;\n        /** Represents a SemanticQuery/SemanticFilter from clause. */\n        var SQFrom = (function () {\n            function SQFrom(items) {\n                this.items = items || {};\n            }\n            SQFrom.prototype.keys = function () {\n                return Object.keys(this.items);\n            };\n            SQFrom.prototype.entity = function (key) {\n                return this.items[key];\n            };\n            SQFrom.prototype.ensureEntity = function (entity, desiredVariableName) {\n                debug.assertValue(entity, 'entity');\n                // 1) Reuse a reference to the entity among the already referenced\n                var keys = this.keys();\n                for (var i_1 = 0, len = keys.length; i_1 < len; i_1++) {\n                    var key = keys[i_1], item = this.items[key];\n                    if (item && entity.entity === item.entity && entity.schema === item.schema)\n                        return { name: key };\n                }\n                // 2) Add a reference to the entity\n                var candidateName = desiredVariableName || this.candidateName(entity.entity), uniqueName = candidateName, i = 2;\n                while (this.items[uniqueName]) {\n                    uniqueName = candidateName + i++;\n                }\n                this.items[uniqueName] = entity;\n                return { name: uniqueName, new: true };\n            };\n            SQFrom.prototype.remove = function (key) {\n                delete this.items[key];\n            };\n            /** Converts the entity name into a short reference name.  Follows the Semantic Query convention of a short name. */\n            SQFrom.prototype.candidateName = function (ref) {\n                debug.assertValue(ref, 'ref');\n                var idx = ref.lastIndexOf('.');\n                if (idx >= 0 && (idx !== ref.length - 1))\n                    ref = ref.substr(idx + 1);\n                return ref.substring(0, 1).toLowerCase();\n            };\n            SQFrom.prototype.clone = function () {\n                // NOTE: consider deprecating this method and instead making QueryFrom be CopyOnWrite (currently we proactively clone).\n                var cloned = new SQFrom();\n                // NOTE: we use extend rather than prototypical inheritance on items because we use Object.keys.\n                $.extend(cloned.items, this.items);\n                return cloned;\n            };\n            return SQFrom;\n        })();\n        data.SQFrom = SQFrom;\n        var SQExprRewriterWithSourceRenames = (function (_super) {\n            __extends(SQExprRewriterWithSourceRenames, _super);\n            function SQExprRewriterWithSourceRenames(renames) {\n                debug.assertValue(renames, 'renames');\n                _super.call(this);\n                this.renames = renames;\n            }\n            SQExprRewriterWithSourceRenames.prototype.visitEntity = function (expr) {\n                var updatedName = this.renames[expr.entity];\n                if (updatedName)\n                    return new data.SQEntityExpr(expr.schema, expr.entity, updatedName);\n                return _super.prototype.visitEntity.call(this, expr);\n            };\n            SQExprRewriterWithSourceRenames.prototype.rewriteFilter = function (filter) {\n                debug.assertValue(filter, 'filter');\n                var updatedTargets = undefined;\n                if (filter.target)\n                    updatedTargets = this.rewriteArray(filter.target);\n                var updatedCondition = filter.condition.accept(this);\n                if (filter.condition === updatedCondition && filter.target === updatedTargets)\n                    return filter;\n                var updatedFilter = {\n                    condition: updatedCondition,\n                };\n                if (updatedTargets)\n                    updatedFilter.target = updatedTargets;\n                return updatedFilter;\n            };\n            SQExprRewriterWithSourceRenames.prototype.rewriteArray = function (exprs) {\n                debug.assertValue(exprs, 'exprs');\n                var updatedExprs;\n                for (var i = 0, len = exprs.length; i < len; i++) {\n                    var expr = exprs[i], rewrittenExpr = expr.accept(this);\n                    if (expr !== rewrittenExpr && !updatedExprs)\n                        updatedExprs = ArrayExtensions.take(exprs, i);\n                    if (updatedExprs)\n                        updatedExprs.push(rewrittenExpr);\n                }\n                return updatedExprs || exprs;\n            };\n            SQExprRewriterWithSourceRenames.rewrite = function (expr, from) {\n                debug.assertValue(expr, 'expr');\n                debug.assertValue(from, 'from');\n                var renames = QuerySourceRenameDetector.run(expr, from);\n                var rewriter = new SQExprRewriterWithSourceRenames(renames);\n                return expr.accept(rewriter);\n            };\n            return SQExprRewriterWithSourceRenames;\n        })(data.SQExprRewriter);\n        data.SQExprRewriterWithSourceRenames = SQExprRewriterWithSourceRenames;\n        /** Responsible for updating a QueryFrom based on SQExpr references. */\n        var QuerySourceRenameDetector = (function (_super) {\n            __extends(QuerySourceRenameDetector, _super);\n            function QuerySourceRenameDetector(from) {\n                debug.assertValue(from, 'from');\n                _super.call(this);\n                this.from = from;\n                this.renames = {};\n            }\n            QuerySourceRenameDetector.run = function (expr, from) {\n                var detector = new QuerySourceRenameDetector(from);\n                expr.accept(detector);\n                return detector.renames;\n            };\n            QuerySourceRenameDetector.prototype.visitEntity = function (expr) {\n                // TODO: Renames must take the schema into account, not just entity set name.\n                var existingEntity = this.from.entity(expr.variable);\n                if (existingEntity && existingEntity.schema === expr.schema && existingEntity.entity === expr.entity)\n                    return;\n                var actualEntity = this.from.ensureEntity({\n                    schema: expr.schema,\n                    entity: expr.entity,\n                }, expr.variable);\n                this.renames[expr.entity] = actualEntity.name;\n            };\n            return QuerySourceRenameDetector;\n        })(data.DefaultSQExprVisitorWithTraversal);\n        /** Visitor for finding unreferenced sources. */\n        var UnreferencedKeyFinder = (function (_super) {\n            __extends(UnreferencedKeyFinder, _super);\n            function UnreferencedKeyFinder(keys) {\n                debug.assertValue(keys, 'keys');\n                _super.call(this);\n                this.keys = keys;\n            }\n            UnreferencedKeyFinder.prototype.visitEntity = function (expr) {\n                var index = this.keys.indexOf(expr.variable);\n                if (index >= 0)\n                    this.keys.splice(index, 1);\n            };\n            UnreferencedKeyFinder.prototype.result = function () {\n                return this.keys;\n            };\n            return UnreferencedKeyFinder;\n        })(data.DefaultSQExprVisitorWithTraversal);\n    })(data = powerbi.data || (powerbi.data = {}));\n})(powerbi || (powerbi = {}));\n/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\nvar powerbi;\n(function (powerbi) {\n    var data;\n    (function (data_4) {\n        var DataViewTransform = powerbi.data.DataViewTransform;\n        var SQExprBuilder = powerbi.data.SQExprBuilder;\n        function createCategoricalDataViewBuilder() {\n            return new CategoricalDataViewBuilder();\n        }\n        data_4.createCategoricalDataViewBuilder = createCategoricalDataViewBuilder;\n        var CategoricalDataViewBuilder = (function () {\n            function CategoricalDataViewBuilder() {\n                this.categories = [];\n                this.measureColumns = [];\n                this.columnIndex = 0;\n            }\n            CategoricalDataViewBuilder.prototype.withCategory = function (options) {\n                var categoryValues = options.values, identityFrom = options.identityFrom, type = options.source.type;\n                var categoryColumn = {\n                    source: options.source,\n                    identityFields: options.identityFrom.fields,\n                    identity: options.identityFrom.identities || [],\n                    values: categoryValues,\n                };\n                if (!options.identityFrom.identities) {\n                    for (var categoryIndex = 0, categoryLength = categoryValues.length; categoryIndex < categoryLength; categoryIndex++) {\n                        categoryColumn.identity.push(getScopeIdentity(identityFrom, categoryIndex, categoryValues[categoryIndex], type));\n                    }\n                }\n                if (!this.categories)\n                    this.categories = [];\n                this.categories.push(categoryColumn);\n                return this;\n            };\n            CategoricalDataViewBuilder.prototype.withCategories = function (categories) {\n                if (_.isEmpty(this.categories))\n                    this.categories = categories;\n                else\n                    Array.prototype.push.apply(this.categories, categories);\n                return this;\n            };\n            CategoricalDataViewBuilder.prototype.withValues = function (options) {\n                debug.assertValue(options, 'options');\n                var columns = options.columns;\n                debug.assertValue(columns, 'columns');\n                for (var _i = 0; _i < columns.length; _i++) {\n                    var column = columns[_i];\n                    this.measureColumns.push(column.source);\n                }\n                this.data = columns;\n                return this;\n            };\n            CategoricalDataViewBuilder.prototype.withGroupedValues = function (options) {\n                debug.assertValue(options, 'options');\n                this.hasDynamicSeries = true;\n                var groupColumn = options.groupColumn;\n                debug.assertValue(groupColumn, 'groupColumn');\n                this.dynamicSeriesMetadata = {\n                    column: groupColumn.source,\n                    identityFrom: groupColumn.identityFrom,\n                    values: groupColumn.values,\n                };\n                var valueColumns = options.valueColumns;\n                for (var _i = 0; _i < valueColumns.length; _i++) {\n                    var valueColumn = valueColumns[_i];\n                    this.measureColumns.push(valueColumn.source);\n                }\n                this.data = options.data;\n                return this;\n            };\n            CategoricalDataViewBuilder.prototype.fillData = function (dataViewValues, groups) {\n                var categoryColumn = _.first(this.categories);\n                var categoryLength = (categoryColumn && categoryColumn.values) ? categoryColumn.values.length : 1;\n                if (this.hasDynamicSeries) {\n                    // Dynamic series\n                    var data_5 = this.data;\n                    for (var seriesIndex = 0; seriesIndex < this.dynamicSeriesMetadata.values.length; seriesIndex++) {\n                        var seriesMeasures = data_5[seriesIndex];\n                        debug.assert(seriesMeasures.length === this.measureColumns.length, 'seriesMeasures.length === this.measureColumns.length');\n                        for (var measureIndex = 0, measuresLen = this.measureColumns.length; measureIndex < measuresLen; measureIndex++) {\n                            var groupIndex = seriesIndex * measuresLen + measureIndex;\n                            applySeriesData(dataViewValues[groupIndex], seriesMeasures[measureIndex], categoryLength);\n                        }\n                    }\n                }\n                else {\n                    // Static series\n                    var data_6 = this.data;\n                    for (var measureIndex = 0, measuresLen = this.measureColumns.length; measureIndex < measuresLen; measureIndex++) {\n                        applySeriesData(dataViewValues[measureIndex], data_6[measureIndex], categoryLength);\n                    }\n                }\n            };\n            CategoricalDataViewBuilder.prototype.build = function () {\n                var metadataColumns = [];\n                var categorical = {};\n                var groups;\n                var categoryMetadata = this.categories;\n                var dynamicSeriesMetadata = this.dynamicSeriesMetadata;\n                // --- Build metadata columns and value groups ---\n                for (var _i = 0; _i < categoryMetadata.length; _i++) {\n                    var columnMetadata = categoryMetadata[_i];\n                    pushIfNotExists(metadataColumns, columnMetadata.source);\n                }\n                if (this.hasDynamicSeries) {\n                    pushIfNotExists(metadataColumns, dynamicSeriesMetadata.column);\n                }\n                if (this.hasDynamicSeries) {\n                    // Dynamic series\n                    categorical.values = DataViewTransform.createValueColumns([], dynamicSeriesMetadata.identityFrom.fields, dynamicSeriesMetadata.column);\n                    var measures = this.measureColumns;\n                    groups = [];\n                    // For each series value we will make one column per measure\n                    var seriesValues = dynamicSeriesMetadata.values;\n                    for (var seriesIndex = 0; seriesIndex < seriesValues.length; seriesIndex++) {\n                        var seriesValue = seriesValues[seriesIndex];\n                        var seriesIdentity = getScopeIdentity(dynamicSeriesMetadata.identityFrom, seriesIndex, seriesValue, dynamicSeriesMetadata.column.type);\n                        for (var _a = 0; _a < measures.length; _a++) {\n                            var measure = measures[_a];\n                            var column = _.clone(measure);\n                            column.groupName = seriesValue;\n                            groups.push(column);\n                            pushIfNotExists(metadataColumns, column);\n                            categorical.values.push({\n                                source: column,\n                                values: [],\n                                identity: seriesIdentity,\n                            });\n                        }\n                    }\n                }\n                else {\n                    // Static series / no series\n                    categorical.values = DataViewTransform.createValueColumns();\n                    groups = this.measureColumns;\n                    for (var _b = 0; _b < groups.length; _b++) {\n                        var measure = groups[_b];\n                        var column = measure;\n                        pushIfNotExists(metadataColumns, column);\n                        categorical.values.push({\n                            source: column,\n                            values: [],\n                        });\n                    }\n                }\n                var categories = this.categories;\n                if (!_.isEmpty(categories))\n                    categorical.categories = categories;\n                // --- Fill in data point values ---\n                this.fillData(categorical.values, groups);\n                return {\n                    metadata: {\n                        columns: metadataColumns,\n                    },\n                    categorical: categorical,\n                };\n            };\n            return CategoricalDataViewBuilder;\n        })();\n        function getScopeIdentity(source, index, value, valueType) {\n            var identities = source.identities;\n            if (identities) {\n                return identities[index];\n            }\n            debug.assert(source.fields && source.fields.length === 1, 'Inferring identity, expect exactly one field.');\n            return data_4.createDataViewScopeIdentity(SQExprBuilder.equal(source.fields[0], SQExprBuilder.typedConstant(value, valueType)));\n        }\n        function pushIfNotExists(items, itemToAdd) {\n            if (_.contains(items, itemToAdd))\n                return;\n            items.push(itemToAdd);\n        }\n        function applySeriesData(target, source, categoryLength) {\n            debug.assertValue(target, 'target');\n            debug.assertValue(source, 'source');\n            debug.assertValue(categoryLength, 'categoryLength');\n            var values = source.values;\n            debug.assert(categoryLength === values.length, 'categoryLength === values.length');\n            target.values = values;\n            var highlights = source.highlights;\n            if (highlights) {\n                debug.assert(categoryLength === highlights.length, 'categoryLength === highlights.length');\n                target.highlights = highlights;\n            }\n            if (source.minLocal !== undefined)\n                target.minLocal = source.minLocal;\n            if (source.maxLocal !== undefined)\n                target.maxLocal = source.maxLocal;\n        }\n    })(data = powerbi.data || (powerbi.data = {}));\n})(powerbi || (powerbi = {}));\n/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\nvar powerbi;\n(function (powerbi) {\n    var data;\n    (function (data) {\n        var SQExpr = powerbi.data.SQExpr;\n        function createStaticEvalContext(dataView, selectTransforms) {\n            return new StaticEvalContext(dataView || { metadata: { columns: [] } }, selectTransforms);\n        }\n        data.createStaticEvalContext = createStaticEvalContext;\n        /**\n         * Represents an eval context over a potentially empty DataView.  Only static repetition data view objects\n         * are supported.\n         */\n        var StaticEvalContext = (function () {\n            function StaticEvalContext(dataView, selectTransforms) {\n                debug.assertValue(dataView, 'dataView');\n                debug.assertAnyValue(selectTransforms, 'selectTransforms');\n                this.dataView = dataView;\n                this.selectTransforms = selectTransforms;\n            }\n            StaticEvalContext.prototype.getExprValue = function (expr) {\n                var dataView = this.dataView, selectTransforms = this.selectTransforms;\n                if (dataView && dataView.table && selectTransforms)\n                    return getExprValueFromTable(expr, selectTransforms, dataView.table, /*rowIdx*/ 0);\n            };\n            StaticEvalContext.prototype.getRoleValue = function (roleName) {\n                return;\n            };\n            return StaticEvalContext;\n        })();\n        function getExprValueFromTable(expr, selectTransforms, table, rowIdx) {\n            debug.assertValue(expr, 'expr');\n            debug.assertValue(selectTransforms, 'selectTransforms');\n            debug.assertValue(table, 'table');\n            debug.assertValue(rowIdx, 'rowIdx');\n            var rows = table.rows;\n            if (_.isEmpty(rows) || rows.length <= rowIdx)\n                return;\n            var cols = table.columns;\n            for (var selectIdx = 0, selectLen = selectTransforms.length; selectIdx < selectLen; selectIdx++) {\n                var selectTransform = selectTransforms[selectIdx];\n                if (!SQExpr.equals(selectTransform.expr, expr) || !selectTransform.queryName)\n                    continue;\n                for (var colIdx = 0, colLen = cols.length; colIdx < colLen; colIdx++) {\n                    if (selectIdx !== cols[colIdx].index)\n                        continue;\n                    return rows[rowIdx][colIdx];\n                }\n            }\n        }\n        data.getExprValueFromTable = getExprValueFromTable;\n    })(data = powerbi.data || (powerbi.data = {}));\n})(powerbi || (powerbi = {}));\n/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\nvar powerbi;\n(function (powerbi) {\n    var data;\n    (function (data) {\n        function createMatrixEvalContext(dataViewMatrix) {\n            // NOTE: Matrix context-sensitive evaluation is not yet implemented.\n            return data.createStaticEvalContext();\n        }\n        data.createMatrixEvalContext = createMatrixEvalContext;\n    })(data = powerbi.data || (powerbi.data = {}));\n})(powerbi || (powerbi = {}));\n/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\nvar powerbi;\n(function (powerbi_1) {\n    var StringExtensions = jsCommon.StringExtensions;\n    var Formatting = jsCommon.Formatting;\n    var RegExpExtensions = jsCommon.RegExpExtensions;\n    /** Formatting Encoder */\n    var FormattingEncoder;\n    (function (FormattingEncoder) {\n        function preserveEscaped(format, specialChars) {\n            // Unicode U+E000 - U+F8FF is a private area and so we can use the chars from the range to encode the escaped sequences\n            var length = specialChars.length;\n            for (var i = 0; i < length; i++) {\n                var oldText = \"\\\\\" + specialChars[i];\n                var newText = String.fromCharCode(0xE000 + i);\n                format = StringExtensions.replaceAll(format, oldText, newText);\n            }\n            return format;\n        }\n        FormattingEncoder.preserveEscaped = preserveEscaped;\n        function restoreEscaped(format, specialChars) {\n            // After formatting is complete we should restore the encoded escaped chars into the unescaped chars\n            var length = specialChars.length;\n            for (var i = 0; i < length; i++) {\n                var oldText = String.fromCharCode(0xE000 + i);\n                var newText = specialChars[i];\n                format = StringExtensions.replaceAll(format, oldText, newText);\n            }\n            return StringExtensions.replaceAll(format, \"\\\\\", \"\");\n        }\n        FormattingEncoder.restoreEscaped = restoreEscaped;\n        function preserveLiterals(format, literals) {\n            // Unicode U+E000 - U+F8FF is a private area and so we can use the chars from the range to encode the escaped sequences\n            format = StringExtensions.replaceAll(format, \"\\\"\", \"'\");\n            for (var i = 0;; i++) {\n                var fromIndex = format.indexOf(\"'\");\n                if (fromIndex < 0) {\n                    break;\n                }\n                var toIndex = format.indexOf(\"'\", fromIndex + 1);\n                if (toIndex < 0) {\n                    break;\n                }\n                var literal = format.substring(fromIndex, toIndex + 1);\n                literals.push(literal.substring(1, toIndex - fromIndex));\n                var token = String.fromCharCode(0xE100 + i);\n                format = format.replace(literal, token);\n            }\n            return format;\n        }\n        FormattingEncoder.preserveLiterals = preserveLiterals;\n        function restoreLiterals(format, literals) {\n            var count = literals.length;\n            for (var i = 0; i < count; i++) {\n                var token = String.fromCharCode(0xE100 + i);\n                var literal = literals[i];\n                format = format.replace(token, literal);\n            }\n            return format;\n        }\n        FormattingEncoder.restoreLiterals = restoreLiterals;\n    })(FormattingEncoder || (FormattingEncoder = {}));\n    var IndexedTokensRegex = /({{)|(}})|{(\\d+[^}]*)}/g;\n    var ZeroPlaceholder = '0';\n    var DigitPlaceholder = '#';\n    var ExponentialFormatChar = 'E';\n    var NumericPlaceholders = [ZeroPlaceholder, DigitPlaceholder];\n    var NumericPlaceholderRegex = new RegExp(NumericPlaceholders.join('|'), 'g');\n    /** Formatting Service */\n    var FormattingService = (function () {\n        function FormattingService() {\n        }\n        FormattingService.prototype.formatValue = function (value, format, culture) {\n            // Handle special cases\n            if (value === undefined || value === null) {\n                return '';\n            }\n            var gculture = this.getCulture(culture);\n            if (DateTimeFormat.canFormat(value)) {\n                // Dates\n                return DateTimeFormat.format(value, format, gculture);\n            }\n            else if (NumberFormat.canFormat(value)) {\n                // Numbers\n                return NumberFormat.format(value, format, gculture);\n            }\n            else {\n                // Other data types - return as string\n                return value.toString();\n            }\n        };\n        FormattingService.prototype.format = function (formatWithIndexedTokens, args, culture) {\n            var _this = this;\n            if (!formatWithIndexedTokens) {\n                return \"\";\n            }\n            var result = formatWithIndexedTokens.replace(IndexedTokensRegex, function (match, left, right, argToken) {\n                if (left) {\n                    return \"{\";\n                }\n                else if (right) {\n                    return \"}\";\n                }\n                else {\n                    var parts = argToken.split(\":\");\n                    var argIndex = parseInt(parts[0], 10);\n                    var argFormat = parts[1];\n                    return _this.formatValue(args[argIndex], argFormat, culture);\n                }\n                return \"\";\n            });\n            return result;\n        };\n        FormattingService.prototype.isStandardNumberFormat = function (format) {\n            return NumberFormat.isStandardFormat(format);\n        };\n        FormattingService.prototype.formatNumberWithCustomOverride = function (value, format, nonScientificOverrideFormat, culture) {\n            var gculture = this.getCulture(culture);\n            return NumberFormat.formatWithCustomOverride(value, format, nonScientificOverrideFormat, gculture);\n        };\n        FormattingService.prototype.dateFormatString = function (unit) {\n            return this._dateTimeScaleFormatInfo.getFormatString(unit);\n        };\n        /**\n         * Sets the current localization culture\n         * @param cultureSelector - name of a culture: \"en\", \"en-UK\", \"fr-FR\" etc. (See National Language Support (NLS) for full lists. Use \"default\" for invariant culture).\n         */\n        FormattingService.prototype.setCurrentCulture = function (cultureSelector) {\n            if (this._currentCultureSelector !== cultureSelector) {\n                this._currentCulture = this.getCulture(cultureSelector);\n                this._currentCultureSelector = cultureSelector;\n                this._dateTimeScaleFormatInfo = new DateTimeScaleFormatInfo(this._currentCulture);\n            }\n        };\n        /**\n         * Gets the culture assotiated with the specified cultureSelector (\"en\", \"en-US\", \"fr-FR\" etc).\n         * @param cultureSelector - name of a culture: \"en\", \"en-UK\", \"fr-FR\" etc. (See National Language Support (NLS) for full lists. Use \"default\" for invariant culture).\n         * Exposing this function for testability of unsupported cultures\n         */\n        FormattingService.prototype.getCulture = function (cultureSelector) {\n            if (cultureSelector == null) {\n                if (this._currentCulture == null) {\n                    this.initialize();\n                }\n                return this._currentCulture;\n            }\n            else {\n                var culture = Globalize.findClosestCulture(cultureSelector);\n                if (!culture)\n                    culture = Globalize.culture(\"en-US\");\n                return culture;\n            }\n        };\n        /** By default the Globalization module initializes to the culture/calendar provided in the language/culture URL params */\n        FormattingService.prototype.initialize = function () {\n            var cultureName = this.getCurrentCulture();\n            this.setCurrentCulture(cultureName);\n            var calendarName = this.getUrlParam(\"calendar\");\n            if (calendarName) {\n                var culture = this._currentCulture;\n                var c = culture.calendars[calendarName];\n                if (c) {\n                    culture.calendar = c;\n                }\n            }\n        };\n        /**\n         *  Exposing this function for testability\n         */\n        FormattingService.prototype.getCurrentCulture = function () {\n            var urlParam = this.getUrlParam(\"language\");\n            if (urlParam) {\n                return urlParam;\n            }\n            if (powerbi && powerbi.common && powerbi.common.cultureInfo) {\n                // Get cultureInfo set in powerbi\n                return powerbi.common.cultureInfo;\n            }\n            return window.navigator.userLanguage || window.navigator[\"language\"] || Globalize.culture().name;\n        };\n        /**\n         *  Exposing this function for testability\n         *  @param name: queryString name\n         */\n        FormattingService.prototype.getUrlParam = function (name) {\n            var param = window.location.search.match(RegExp(\"[?&]\" + name + \"=([^&]*)\"));\n            return param ? param[1] : undefined;\n        };\n        return FormattingService;\n    })();\n    /**\n     * DateTimeFormat module contains the static methods for formatting the DateTimes.\n     * It extends the JQuery.Globalize functionality to support complete set of .NET\n     * formatting expressions for dates.\n     */\n    var DateTimeFormat;\n    (function (DateTimeFormat) {\n        var _currentCachedFormat;\n        var _currentCachedProcessedFormat;\n        /** Evaluates if the value can be formatted using the NumberFormat */\n        function canFormat(value) {\n            var result = value instanceof Date;\n            return result;\n        }\n        DateTimeFormat.canFormat = canFormat;\n        /** Formats the date using provided format and culture */\n        function format(value, format, culture) {\n            format = format || \"G\";\n            var isStandard = format.length === 1;\n            try {\n                if (isStandard) {\n                    return formatDateStandard(value, format, culture);\n                }\n                else {\n                    return formatDateCustom(value, format, culture);\n                }\n            }\n            catch (e) {\n                return formatDateStandard(value, \"G\", culture);\n            }\n        }\n        DateTimeFormat.format = format;\n        /** Formats the date using standard format expression */\n        function formatDateStandard(value, format, culture) {\n            // In order to provide parity with .NET we have to support additional set of DateTime patterns.\n            var patterns = culture.calendar.patterns;\n            // Extend supported set of patterns\n            ensurePatterns(culture.calendar);\n            // Handle extended set of formats\n            var output = Formatting.findDateFormat(value, format, culture.name);\n            if (output.format.length === 1)\n                format = patterns[output.format];\n            else\n                format = output.format;\n            //need to revisit when globalization is enabled\n            culture = Globalize.culture(\"en-US\");\n            return Globalize.format(output.value, format, culture);\n        }\n        /** Formats the date using custom format expression */\n        function formatDateCustom(value, format, culture) {\n            var result;\n            var literals = [];\n            format = FormattingEncoder.preserveEscaped(format, \"\\\\dfFghHKmstyz:/%'\\\"\");\n            format = FormattingEncoder.preserveLiterals(format, literals);\n            format = StringExtensions.replaceAll(format, \"\\\"\", \"'\");\n            if (format.indexOf(\"F\") > -1) {\n                // F is not supported so we need to replace the F with f based on the milliseconds\n                // Replace all sequences of F longer than 3 with \"FFF\"\n                format = StringExtensions.replaceAll(format, \"FFFF\", \"FFF\");\n                // Based on milliseconds update the format to use fff\n                var milliseconds = value.getMilliseconds();\n                if (milliseconds % 10 >= 1) {\n                    format = StringExtensions.replaceAll(format, \"FFF\", \"fff\");\n                }\n                format = StringExtensions.replaceAll(format, \"FFF\", \"FF\");\n                if ((milliseconds % 100) / 10 >= 1) {\n                    format = StringExtensions.replaceAll(format, \"FF\", \"ff\");\n                }\n                format = StringExtensions.replaceAll(format, \"FF\", \"F\");\n                if ((milliseconds % 1000) / 100 >= 1) {\n                    format = StringExtensions.replaceAll(format, \"F\", \"f\");\n                }\n                format = StringExtensions.replaceAll(format, \"F\", \"\");\n                if (format === \"\" || format === \"%\")\n                    return \"\";\n            }\n            format = processCustomDateTimeFormat(format);\n            result = Globalize.format(value, format, culture);\n            result = localize(result, culture.calendar);\n            result = FormattingEncoder.restoreLiterals(result, literals);\n            result = FormattingEncoder.restoreEscaped(result, \"\\\\dfFghHKmstyz:/%'\\\"\");\n            return result;\n        }\n        /** Translates unsupported .NET custom format expressions to the custom expressions supported by JQuery.Globalize */\n        function processCustomDateTimeFormat(format) {\n            if (format === _currentCachedFormat) {\n                return _currentCachedProcessedFormat;\n            }\n            _currentCachedFormat = format;\n            format = Formatting.fixDateTimeFormat(format);\n            _currentCachedProcessedFormat = format;\n            return format;\n        }\n        /** Localizes the time separator symbol */\n        function localize(value, dictionary) {\n            var timeSeparator = dictionary[\":\"];\n            if (timeSeparator === \":\") {\n                return value;\n            }\n            var result = \"\";\n            var count = value.length;\n            for (var i = 0; i < count; i++) {\n                var char = value.charAt(i);\n                switch (char) {\n                    case \":\":\n                        result += timeSeparator;\n                        break;\n                    default:\n                        result += char;\n                        break;\n                }\n            }\n            return result;\n        }\n        function ensurePatterns(calendar) {\n            var patterns = calendar.patterns;\n            if (patterns[\"g\"] === undefined) {\n                patterns[\"g\"] = patterns[\"f\"].replace(patterns[\"D\"], patterns[\"d\"]); // Generic: Short date, short time\n                patterns[\"G\"] = patterns[\"F\"].replace(patterns[\"D\"], patterns[\"d\"]); // Generic: Short date, long time\n            }\n        }\n    })(DateTimeFormat || (DateTimeFormat = {}));\n    /**\n     * NumberFormat module contains the static methods for formatting the numbers.\n     * It extends the JQuery.Globalize functionality to support complete set of .NET\n     * formatting expressions for numeric types including custom formats.\n     */\n    var NumberFormat;\n    (function (NumberFormat) {\n        var NonScientificFormatRegex = /^\\{.+\\}.*/;\n        var NumericalPlaceHolderRegex = /\\{.+\\}/;\n        var ScientificFormatRegex = /e[+-]*[0#]+/i;\n        var StandardFormatRegex = /^[a-z]\\d{0,2}$/i; // a letter + up to 2 digits for precision specifier\n        var TrailingZerosRegex = /0+$/;\n        var DecimalFormatRegex = /\\.([0#]*)/g;\n        var NumericFormatRegex = /[0#,\\.]+[0,#]*/g;\n        var LastNumericPlaceholderRegex = /(0|#)([^(0|#)]*)$/;\n        var DecimalFormatCharacter = '.';\n        NumberFormat.NumberFormatComponentsDelimeter = ';';\n        function getNonScientificFormatWithPrecision(baseFormat, numericFormat) {\n            if (!numericFormat || baseFormat === undefined)\n                return baseFormat;\n            var newFormat = \"{0:\" + numericFormat + \"}\";\n            return baseFormat.replace(\"{0}\", newFormat);\n        }\n        function getNumericFormat(value, baseFormat) {\n            if (baseFormat == null)\n                return baseFormat;\n            if (hasFormatComponents(baseFormat)) {\n                var _a = NumberFormat.getComponents(baseFormat), positive = _a.positive, negative = _a.negative, zero = _a.zero;\n                if (value > 0)\n                    return getNumericFormatFromComponent(value, positive);\n                else if (value === 0)\n                    return getNumericFormatFromComponent(value, zero);\n                return getNumericFormatFromComponent(value, negative);\n            }\n            return getNumericFormatFromComponent(value, baseFormat);\n        }\n        NumberFormat.getNumericFormat = getNumericFormat;\n        function getNumericFormatFromComponent(value, format) {\n            var match = RegExpExtensions.run(NumericFormatRegex, format);\n            if (match)\n                return match[0];\n            return format;\n        }\n        function addDecimalsToFormat(baseFormat, decimals, trailingZeros) {\n            if (decimals == null)\n                return baseFormat;\n            // Default format string\n            if (baseFormat == null)\n                baseFormat = ZeroPlaceholder;\n            if (hasFormatComponents(baseFormat)) {\n                var _a = NumberFormat.getComponents(baseFormat), positive = _a.positive, negative = _a.negative, zero = _a.zero;\n                var formats = [positive, negative, zero];\n                for (var i = 0; i < formats.length; i++) {\n                    // Update format in formats array\n                    formats[i] = addDecimalsToFormatComponent(formats[i], decimals, trailingZeros);\n                }\n                return formats.join(NumberFormat.NumberFormatComponentsDelimeter);\n            }\n            return addDecimalsToFormatComponent(baseFormat, decimals, trailingZeros);\n        }\n        NumberFormat.addDecimalsToFormat = addDecimalsToFormat;\n        function addDecimalsToFormatComponent(format, decimals, trailingZeros) {\n            decimals = Math.abs(decimals);\n            if (decimals >= 0) {\n                var placeholder = trailingZeros ? ZeroPlaceholder : DigitPlaceholder;\n                var decimalPlaceholders = StringExtensions.repeat(placeholder, Math.abs(decimals));\n                var match = RegExpExtensions.run(DecimalFormatRegex, format);\n                if (match) {\n                    var beforeDecimal = format.substr(0, match.index);\n                    var formatDecimal = format.substr(match.index + 1, match[1].length);\n                    var afterDecimal = format.substr(match.index + match[0].length);\n                    if (trailingZeros)\n                        // Use explicit decimals argument as placeholders\n                        formatDecimal = decimalPlaceholders;\n                    else {\n                        var decimalChange = decimalPlaceholders.length - formatDecimal.length;\n                        if (decimalChange > 0)\n                            // Append decimalPlaceholders to existing decimal portion of format string\n                            formatDecimal = formatDecimal + decimalPlaceholders.slice(-decimalChange);\n                        else if (decimalChange < 0)\n                            // Remove decimals from formatDecimal\n                            formatDecimal = formatDecimal.slice(0, decimalChange);\n                    }\n                    if (formatDecimal.length > 0)\n                        formatDecimal = DecimalFormatCharacter + formatDecimal;\n                    return beforeDecimal + formatDecimal + afterDecimal;\n                }\n                else if (decimalPlaceholders.length > 0)\n                    // Replace last numeric placeholder with decimal portion\n                    return format.replace(LastNumericPlaceholderRegex, '$1' + DecimalFormatCharacter + decimalPlaceholders);\n            }\n            return format;\n        }\n        function hasFormatComponents(format) {\n            return format.indexOf(NumberFormat.NumberFormatComponentsDelimeter) !== -1;\n        }\n        NumberFormat.hasFormatComponents = hasFormatComponents;\n        function getComponents(format) {\n            var signFormat = {\n                hasNegative: false,\n                positive: format,\n                negative: format,\n                zero: format,\n            };\n            var signSpecificFormats = format.split(NumberFormat.NumberFormatComponentsDelimeter);\n            var formatCount = signSpecificFormats.length;\n            debug.assert(!(formatCount > 3), 'format string should be of form positive[;negative;zero]');\n            if (formatCount > 1) {\n                signFormat.hasNegative = true;\n                signFormat.positive = signFormat.zero = signSpecificFormats[0];\n                signFormat.negative = signSpecificFormats[1];\n                if (formatCount > 2)\n                    signFormat.zero = signSpecificFormats[2];\n            }\n            return signFormat;\n        }\n        NumberFormat.getComponents = getComponents;\n        var _lastCustomFormatMeta;\n        /** Evaluates if the value can be formatted using the NumberFormat */\n        function canFormat(value) {\n            var result = typeof (value) === \"number\";\n            return result;\n        }\n        NumberFormat.canFormat = canFormat;\n        function isStandardFormat(format) {\n            debug.assertValue(format, 'format');\n            return StandardFormatRegex.test(format);\n        }\n        NumberFormat.isStandardFormat = isStandardFormat;\n        /** Formats the number using specified format expression and culture */\n        function format(value, format, culture) {\n            format = format || \"G\";\n            try {\n                if (isStandardFormat(format))\n                    return formatNumberStandard(value, format, culture);\n                return formatNumberCustom(value, format, culture);\n            }\n            catch (e) {\n                return Globalize.format(value, undefined, culture);\n            }\n        }\n        NumberFormat.format = format;\n        /** Performs a custom format with a value override.  Typically used for custom formats showing scaled values. */\n        function formatWithCustomOverride(value, format, nonScientificOverrideFormat, culture) {\n            debug.assertValue(value, 'value');\n            debug.assertValue(format, 'format');\n            debug.assertValue(nonScientificOverrideFormat, 'nonScientificOverrideFormat');\n            debug.assertValue(culture, 'culture');\n            debug.assert(!isStandardFormat(format), 'Standard format');\n            return formatNumberCustom(value, format, culture, nonScientificOverrideFormat);\n        }\n        NumberFormat.formatWithCustomOverride = formatWithCustomOverride;\n        /** Formats the number using standard format expression */\n        function formatNumberStandard(value, format, culture) {\n            var result;\n            var precision = (format.length > 1 ? parseInt(format.substr(1, format.length - 1), 10) : undefined);\n            var numberFormatInfo = culture.numberFormat;\n            var formatChar = format.charAt(0);\n            switch (formatChar) {\n                case \"e\":\n                case \"E\":\n                    if (precision === undefined) {\n                        precision = 6;\n                    }\n                    var mantissaDecimalDigits = StringExtensions.repeat(\"0\", precision);\n                    format = \"0.\" + mantissaDecimalDigits + formatChar + \"+000\";\n                    result = formatNumberCustom(value, format, culture);\n                    break;\n                case \"f\":\n                case \"F\":\n                    result = precision !== undefined ? value.toFixed(precision) : value.toFixed(numberFormatInfo.decimals);\n                    result = localize(result, numberFormatInfo);\n                    break;\n                case \"g\":\n                case \"G\":\n                    var abs = Math.abs(value);\n                    if (abs === 0 || (1E-4 <= abs && abs < 1E15)) {\n                        // For the range of 0.0001 to 1,000,000,000,000,000 - use the normal form\n                        result = precision !== undefined ? value.toPrecision(precision) : value.toString();\n                    }\n                    else {\n                        // Otherwise use exponential\n                        result = precision !== undefined ? value.toExponential(precision) : value.toExponential();\n                        result = result.replace(\"e\", \"E\");\n                    }\n                    result = localize(result, numberFormatInfo);\n                    break;\n                case \"r\":\n                case \"R\":\n                    result = value.toString();\n                    result = localize(result, numberFormatInfo);\n                    break;\n                case \"x\":\n                case \"X\":\n                    result = value.toString(16);\n                    if (formatChar === \"X\") {\n                        result = result.toUpperCase();\n                    }\n                    if (precision !== undefined) {\n                        var actualPrecision = result.length;\n                        var isNegative = value < 0;\n                        if (isNegative) {\n                            actualPrecision--;\n                        }\n                        var paddingZerosCount = precision - actualPrecision;\n                        var paddingZeros = undefined;\n                        if (paddingZerosCount > 0) {\n                            paddingZeros = StringExtensions.repeat(\"0\", paddingZerosCount);\n                        }\n                        if (isNegative) {\n                            result = \"-\" + paddingZeros + result.substr(1);\n                        }\n                        else {\n                            result = paddingZeros + result;\n                        }\n                    }\n                    result = localize(result, numberFormatInfo);\n                    break;\n                default:\n                    result = Globalize.format(value, format, culture);\n            }\n            return result;\n        }\n        /** Formats the number using custom format expression */\n        function formatNumberCustom(value, format, culture, nonScientificOverrideFormat) {\n            var result;\n            var numberFormatInfo = culture.numberFormat;\n            if (isFinite(value)) {\n                // Split format by positive[;negative;zero] pattern\n                var formatComponents = getComponents(format);\n                // Pick a format based on the sign of value\n                if (value > 0) {\n                    format = formatComponents.positive;\n                }\n                else if (value === 0) {\n                    format = formatComponents.zero;\n                }\n                else {\n                    format = formatComponents.negative;\n                }\n                // Normalize value if we have an explicit negative format\n                if (formatComponents.hasNegative)\n                    value = Math.abs(value);\n                // Get format metadata\n                var formatMeta = getCustomFormatMetadata(format, true /*calculatePrecision*/);\n                // Preserve literals and escaped chars\n                if (formatMeta.hasEscapes) {\n                    format = FormattingEncoder.preserveEscaped(format, \"\\\\0#.,%‰\");\n                }\n                var literals = [];\n                if (formatMeta.hasQuotes) {\n                    format = FormattingEncoder.preserveLiterals(format, literals);\n                }\n                // Scientific format\n                if (formatMeta.hasE && !nonScientificOverrideFormat) {\n                    var scientificMatch = RegExpExtensions.run(ScientificFormatRegex, format);\n                    if (scientificMatch) {\n                        // Case 2.1. Scientific custom format\n                        var formatM = format.substr(0, scientificMatch.index);\n                        var formatE = format.substr(scientificMatch.index + 2); // E(+|-)\n                        var precision = getCustomFormatPrecision(formatM, formatMeta);\n                        var scale = getCustomFormatScale(formatM, formatMeta);\n                        if (scale !== 1) {\n                            value = value * scale;\n                        }\n                        var s = value.toExponential(precision);\n                        var indexOfE = s.indexOf(\"e\");\n                        var mantissa = s.substr(0, indexOfE);\n                        var exp = s.substr(indexOfE + 1);\n                        var resultM = fuseNumberWithCustomFormat(mantissa, formatM, numberFormatInfo);\n                        var resultE = fuseNumberWithCustomFormat(exp, formatE, numberFormatInfo);\n                        if (resultE.charAt(0) === \"+\" && scientificMatch[0].charAt(1) !== \"+\") {\n                            resultE = resultE.substr(1);\n                        }\n                        var e = scientificMatch[0].charAt(0);\n                        result = resultM + e + resultE;\n                    }\n                }\n                // Non scientific format\n                if (result === undefined) {\n                    var valueFormatted;\n                    var isValueGlobalized = false;\n                    var precision = getCustomFormatPrecision(format, formatMeta);\n                    var scale = getCustomFormatScale(format, formatMeta);\n                    if (scale !== 1)\n                        value = value * scale;\n                    // Rounding\n                    value = parseFloat(toNonScientific(value, precision));\n                    if (nonScientificOverrideFormat) {\n                        // Get numeric format from format string\n                        var numericFormat = NumberFormat.getNumericFormat(value, format);\n                        // Add separators and decimalFormat to nonScientificFormat\n                        nonScientificOverrideFormat = getNonScientificFormatWithPrecision(nonScientificOverrideFormat, numericFormat);\n                        // Format the value\n                        valueFormatted = powerbi_1.formattingService.format(nonScientificOverrideFormat, [value], culture.name);\n                        isValueGlobalized = true;\n                    }\n                    else\n                        valueFormatted = toNonScientific(value, precision);\n                    result = fuseNumberWithCustomFormat(valueFormatted, format, numberFormatInfo, nonScientificOverrideFormat, isValueGlobalized);\n                }\n                if (formatMeta.hasQuotes) {\n                    result = FormattingEncoder.restoreLiterals(result, literals);\n                }\n                if (formatMeta.hasEscapes) {\n                    result = FormattingEncoder.restoreEscaped(result, \"\\\\0#.,%‰\");\n                }\n                _lastCustomFormatMeta = formatMeta;\n            }\n            else {\n                return Globalize.format(value, undefined);\n            }\n            return result;\n        }\n        /** Returns string with the fixed point respresentation of the number */\n        function toNonScientific(value, precision) {\n            var result = \"\";\n            var precisionZeros = 0;\n            // Double precision numbers support actual 15-16 decimal digits of precision.\n            if (precision > 16) {\n                precisionZeros = precision - 16;\n                precision = 16;\n            }\n            var digitsBeforeDecimalPoint = powerbi_1.Double.log10(Math.abs(value));\n            if (digitsBeforeDecimalPoint < 16) {\n                if (digitsBeforeDecimalPoint > 0) {\n                    var maxPrecision = 16 - digitsBeforeDecimalPoint;\n                    if (precision > maxPrecision) {\n                        precisionZeros += precision - maxPrecision;\n                        precision = maxPrecision;\n                    }\n                }\n                result = value.toFixed(precision);\n            }\n            else if (digitsBeforeDecimalPoint === 16) {\n                result = value.toFixed(0);\n                precisionZeros += precision;\n                if (precisionZeros > 0) {\n                    result += \".\";\n                }\n            }\n            else {\n                // Different browsers have different implementations of the toFixed().\n                // In IE it returns fixed format no matter what's the number. In FF and Chrome the method returns exponential format for numbers greater than 1E21.\n                // So we need to check for range and convert the to exponential with the max precision.\n                // Then we convert exponential string to fixed by removing the dot and padding with \"power\" zeros.\n                result = value.toExponential(15);\n                var indexOfE = result.indexOf(\"e\");\n                if (indexOfE > 0) {\n                    var indexOfDot = result.indexOf(\".\");\n                    var mantissa = result.substr(0, indexOfE);\n                    var exp = result.substr(indexOfE + 1);\n                    var powerZeros = parseInt(exp, 10) - (mantissa.length - indexOfDot - 1);\n                    result = mantissa.replace(\".\", \"\") + StringExtensions.repeat(\"0\", powerZeros);\n                    if (precision > 0) {\n                        result = result + \".\" + StringExtensions.repeat(\"0\", precision);\n                    }\n                }\n            }\n            if (precisionZeros > 0) {\n                result = result + StringExtensions.repeat(\"0\", precisionZeros);\n            }\n            return result;\n        }\n        /**\n         * Returns the formatMetadata of the format\n         * When calculating precision and scale, if format string of\n         * positive[;negative;zero] => positive format will be used\n         * @param (required) format - format string\n         * @param (optional) calculatePrecision - calculate precision of positive format\n         * @param (optional) calculateScale - calculate scale of positive format\n         */\n        function getCustomFormatMetadata(format, calculatePrecision, calculateScale) {\n            if (_lastCustomFormatMeta !== undefined && format === _lastCustomFormatMeta.format) {\n                return _lastCustomFormatMeta;\n            }\n            var result = {\n                format: format,\n                hasEscapes: false,\n                hasQuotes: false,\n                hasE: false,\n                hasCommas: false,\n                hasDots: false,\n                hasPercent: false,\n                hasPermile: false,\n                precision: undefined,\n                scale: undefined,\n            };\n            for (var i = 0, length_1 = format.length; i < length_1; i++) {\n                var c = format.charAt(i);\n                switch (c) {\n                    case \"\\\\\":\n                        result.hasEscapes = true;\n                        break;\n                    case \"'\":\n                    case \"\\\"\":\n                        result.hasQuotes = true;\n                        break;\n                    case \"e\":\n                    case \"E\":\n                        result.hasE = true;\n                        break;\n                    case \",\":\n                        result.hasCommas = true;\n                        break;\n                    case \".\":\n                        result.hasDots = true;\n                        break;\n                    case \"%\":\n                        result.hasPercent = true;\n                        break;\n                    case \"‰\":\n                        result.hasPermile = true;\n                        break;\n                }\n            }\n            // Use positive format for calculating these values\n            var formatComponents = getComponents(format);\n            if (calculatePrecision)\n                result.precision = getCustomFormatPrecision(formatComponents.positive, result);\n            if (calculateScale)\n                result.scale = getCustomFormatScale(formatComponents.positive, result);\n            return result;\n        }\n        NumberFormat.getCustomFormatMetadata = getCustomFormatMetadata;\n        /** Returns the decimal precision of format based on the number of # and 0 chars after the decimal point\n          * Important: The input format string needs to be split to the appropriate pos/neg/zero portion to work correctly */\n        function getCustomFormatPrecision(format, formatMeta) {\n            if (formatMeta.precision > -1) {\n                return formatMeta.precision;\n            }\n            var result = 0;\n            if (formatMeta.hasDots) {\n                var dotIndex = format.indexOf(\".\");\n                if (dotIndex > -1) {\n                    var count = format.length;\n                    for (var i = dotIndex; i < count; i++) {\n                        var char = format.charAt(i);\n                        if (char.match(NumericPlaceholderRegex))\n                            result++;\n                        // 0.00E+0 :: Break before counting 0 in\n                        // exponential portion of format string\n                        if (char === ExponentialFormatChar)\n                            break;\n                    }\n                    result = Math.min(19, result);\n                }\n            }\n            formatMeta.precision = result;\n            return result;\n        }\n        /** Returns the scale factor of the format based on the \"%\" and scaling \",\" chars in the format */\n        function getCustomFormatScale(format, formatMeta) {\n            if (formatMeta.scale > -1) {\n                return formatMeta.scale;\n            }\n            var result = 1;\n            if (formatMeta.hasPercent && format.indexOf(\"%\") > -1) {\n                result = result * 100;\n            }\n            if (formatMeta.hasPermile && format.indexOf(\"‰\") > -1) {\n                result = result * 1000;\n            }\n            if (formatMeta.hasCommas) {\n                var dotIndex = format.indexOf(\".\");\n                if (dotIndex === -1) {\n                    dotIndex = format.length;\n                }\n                for (var i = dotIndex - 1; i > -1; i--) {\n                    var char = format.charAt(i);\n                    if (char === \",\") {\n                        result = result / 1000;\n                    }\n                    else {\n                        break;\n                    }\n                }\n            }\n            formatMeta.scale = result;\n            return result;\n        }\n        function fuseNumberWithCustomFormat(value, format, numberFormatInfo, nonScientificOverrideFormat, isValueGlobalized) {\n            var suppressModifyValue = !!nonScientificOverrideFormat;\n            var formatParts = format.split(\".\", 2);\n            if (formatParts.length === 2) {\n                var wholeFormat = formatParts[0];\n                var fractionFormat = formatParts[1];\n                var displayUnit = \"\";\n                // Remove display unit from value before splitting on \".\" as localized display units sometimes end with \".\"\n                if (nonScientificOverrideFormat) {\n                    debug.assert(NonScientificFormatRegex.test(nonScientificOverrideFormat), \"Number should always precede the display unit\");\n                    displayUnit = nonScientificOverrideFormat.replace(NumericalPlaceHolderRegex, \"\");\n                    value = value.replace(displayUnit, \"\");\n                }\n                var globalizedDecimalSeparator = numberFormatInfo[\".\"];\n                var decimalSeparator = isValueGlobalized ? globalizedDecimalSeparator : \".\";\n                var valueParts = value.split(decimalSeparator, 2);\n                var wholeValue = valueParts.length === 1 ? valueParts[0] + displayUnit : valueParts[0];\n                var fractionValue = valueParts.length === 2 ? valueParts[1] + displayUnit : \"\";\n                fractionValue = fractionValue.replace(TrailingZerosRegex, \"\");\n                var wholeFormattedValue = fuseNumberWithCustomFormatLeft(wholeValue, wholeFormat, numberFormatInfo, suppressModifyValue);\n                var fractionFormattedValue = fuseNumberWithCustomFormatRight(fractionValue, fractionFormat, suppressModifyValue);\n                if (fractionFormattedValue.fmtOnly || fractionFormattedValue.value === \"\")\n                    return wholeFormattedValue + fractionFormattedValue.value;\n                return wholeFormattedValue + globalizedDecimalSeparator + fractionFormattedValue.value;\n            }\n            return fuseNumberWithCustomFormatLeft(value, format, numberFormatInfo, suppressModifyValue);\n        }\n        function fuseNumberWithCustomFormatLeft(value, format, numberFormatInfo, suppressModifyValue) {\n            var groupSymbolIndex = format.indexOf(\",\");\n            var enableGroups = groupSymbolIndex > -1 && groupSymbolIndex < Math.max(format.lastIndexOf(\"0\"), format.lastIndexOf(\"#\")) && numberFormatInfo[\",\"];\n            var groupDigitCount = 0;\n            var groupIndex = 0;\n            var groupSizes = numberFormatInfo.groupSizes || [3];\n            var groupSize = groupSizes[0];\n            var groupSeparator = numberFormatInfo[\",\"];\n            var sign = \"\";\n            var firstChar = value.charAt(0);\n            if (firstChar === \"+\" || firstChar === \"-\") {\n                sign = numberFormatInfo[firstChar];\n                value = value.substr(1);\n            }\n            var isZero = value === \"0\";\n            var result = \"\";\n            var leftBuffer = \"\";\n            var vi = value.length - 1;\n            var fmtOnly = true;\n            // Iterate through format chars and replace 0 and # with the digits from the value string\n            for (var fi = format.length - 1; fi > -1; fi--) {\n                var formatChar = format.charAt(fi);\n                switch (formatChar) {\n                    case ZeroPlaceholder:\n                    case DigitPlaceholder:\n                        fmtOnly = false;\n                        if (leftBuffer !== \"\") {\n                            result = leftBuffer + result;\n                            leftBuffer = \"\";\n                        }\n                        if (!suppressModifyValue) {\n                            if (vi > -1 || formatChar === ZeroPlaceholder) {\n                                if (enableGroups) {\n                                    // If the groups are enabled we'll need to keep track of the current group index and periodically insert group separator,\n                                    if (groupDigitCount === groupSize) {\n                                        result = groupSeparator + result;\n                                        groupIndex++;\n                                        if (groupIndex < groupSizes.length) {\n                                            groupSize = groupSizes[groupIndex];\n                                        }\n                                        groupDigitCount = 1;\n                                    }\n                                    else {\n                                        groupDigitCount++;\n                                    }\n                                }\n                            }\n                            if (vi > -1) {\n                                if (isZero && formatChar === DigitPlaceholder) {\n                                }\n                                else {\n                                    result = value.charAt(vi) + result;\n                                }\n                                vi--;\n                            }\n                            else if (formatChar !== DigitPlaceholder) {\n                                result = formatChar + result;\n                            }\n                        }\n                        break;\n                    case \",\":\n                        // We should skip all the , chars\n                        break;\n                    default:\n                        leftBuffer = formatChar + leftBuffer;\n                        break;\n                }\n            }\n            // If the value didn't fit into the number of zeros provided in the format then we should insert the missing part of the value into the result\n            if (!suppressModifyValue) {\n                if (vi > -1 && result !== \"\") {\n                    if (enableGroups) {\n                        while (vi > -1) {\n                            if (groupDigitCount === groupSize) {\n                                result = groupSeparator + result;\n                                groupIndex++;\n                                if (groupIndex < groupSizes.length) {\n                                    groupSize = groupSizes[groupIndex];\n                                }\n                                groupDigitCount = 1;\n                            }\n                            else {\n                                groupDigitCount++;\n                            }\n                            result = value.charAt(vi) + result;\n                            vi--;\n                        }\n                    }\n                    else {\n                        result = value.substr(0, vi + 1) + result;\n                    }\n                }\n                // Insert sign in front of the leftBuffer and result\n                return sign + leftBuffer + result;\n            }\n            if (fmtOnly)\n                // If the format doesn't specify any digits to be displayed, then just return the format we've parsed up until now.\n                return sign + leftBuffer + result;\n            return sign + leftBuffer + value + result;\n        }\n        function fuseNumberWithCustomFormatRight(value, format, suppressModifyValue) {\n            var vi = 0;\n            var fCount = format.length;\n            var vCount = value.length;\n            if (suppressModifyValue) {\n                debug.assert(fCount > 0, \"Empty formatting string\");\n                var lastChar = format.charAt(fCount - 1);\n                if (!lastChar.match(NumericPlaceholderRegex))\n                    return {\n                        value: value + lastChar,\n                        fmtOnly: value === \"\",\n                    };\n                return {\n                    value: value,\n                    fmtOnly: value === \"\",\n                };\n            }\n            var result = \"\", fmtOnly = true;\n            for (var fi = 0; fi < fCount; fi++) {\n                var formatChar = format.charAt(fi);\n                if (vi < vCount) {\n                    switch (formatChar) {\n                        case ZeroPlaceholder:\n                        case DigitPlaceholder:\n                            result += value[vi++];\n                            fmtOnly = false;\n                            break;\n                        default:\n                            result += formatChar;\n                    }\n                }\n                else {\n                    if (formatChar !== DigitPlaceholder) {\n                        result += formatChar;\n                        fmtOnly = fmtOnly && (formatChar !== ZeroPlaceholder);\n                    }\n                }\n            }\n            return {\n                value: result,\n                fmtOnly: fmtOnly,\n            };\n        }\n        function localize(value, dictionary) {\n            var plus = dictionary[\"+\"];\n            var minus = dictionary[\"-\"];\n            var dot = dictionary[\".\"];\n            var comma = dictionary[\",\"];\n            if (plus === \"+\" && minus === \"-\" && dot === \".\" && comma === \",\") {\n                return value;\n            }\n            var count = value.length;\n            var result = \"\";\n            for (var i = 0; i < count; i++) {\n                var char = value.charAt(i);\n                switch (char) {\n                    case \"+\":\n                        result = result + plus;\n                        break;\n                    case \"-\":\n                        result = result + minus;\n                        break;\n                    case \".\":\n                        result = result + dot;\n                        break;\n                    case \",\":\n                        result = result + comma;\n                        break;\n                    default:\n                        result = result + char;\n                        break;\n                }\n            }\n            return result;\n        }\n    })(NumberFormat = powerbi_1.NumberFormat || (powerbi_1.NumberFormat = {}));\n    /** DateTimeScaleFormatInfo is used to calculate and keep the Date formats used for different units supported by the DateTimeScaleModel */\n    var DateTimeScaleFormatInfo = (function () {\n        // Constructor\n        /**\n         * Creates new instance of the DateTimeScaleFormatInfo class.\n         * @param culture - culture which calendar info is going to be used to derive the formats.\n         */\n        function DateTimeScaleFormatInfo(culture) {\n            var calendar = culture.calendar;\n            var patterns = calendar.patterns;\n            var monthAbbreviations = calendar[\"months\"][\"namesAbbr\"];\n            var cultureHasMonthAbbr = monthAbbreviations && monthAbbreviations[0];\n            var yearMonthPattern = patterns[\"Y\"];\n            var monthDayPattern = patterns[\"M\"];\n            var fullPattern = patterns[\"f\"];\n            var longTimePattern = patterns[\"T\"];\n            var shortTimePattern = patterns[\"t\"];\n            var separator = fullPattern.indexOf(\",\") > -1 ? \", \" : \" \";\n            var hasYearSymbol = yearMonthPattern.indexOf(\"yyyy'\") === 0 && yearMonthPattern.length > 6 && yearMonthPattern[6] === '\\'';\n            this.YearPattern = hasYearSymbol ? yearMonthPattern.substr(0, 7) : \"yyyy\";\n            var yearPos = fullPattern.indexOf(\"yy\");\n            var monthPos = fullPattern.indexOf(\"MMMM\");\n            this.MonthPattern = cultureHasMonthAbbr && monthPos > -1 ? (yearPos > monthPos ? \"MMM yyyy\" : \"yyyy MMM\") : yearMonthPattern;\n            this.DayPattern = cultureHasMonthAbbr ? monthDayPattern.replace(\"MMMM\", \"MMM\") : monthDayPattern;\n            var minutePos = fullPattern.indexOf(\"mm\");\n            var pmPos = fullPattern.indexOf(\"tt\");\n            var shortHourPattern = pmPos > -1 ? shortTimePattern.replace(\":mm \", \"\") : shortTimePattern;\n            this.HourPattern = yearPos < minutePos ? this.DayPattern + separator + shortHourPattern : shortHourPattern + separator + this.DayPattern;\n            this.MinutePattern = shortTimePattern;\n            this.SecondPattern = longTimePattern;\n            this.MillisecondPattern = longTimePattern.replace(\"ss\", \"ss.fff\");\n            // Special cases\n            switch (culture.name) {\n                case \"fi-FI\":\n                    this.DayPattern = this.DayPattern.replace(\"'ta'\", \"\"); // Fix for finish 'ta' suffix for month names.\n                    this.HourPattern = this.HourPattern.replace(\"'ta'\", \"\");\n                    break;\n            }\n        }\n        // Methods\n        /**\n         * Returns the format string of the provided DateTimeUnit.\n         * @param unit - date or time unit\n         */\n        DateTimeScaleFormatInfo.prototype.getFormatString = function (unit) {\n            switch (unit) {\n                case powerbi_1.DateTimeUnit.Year:\n                    return this.YearPattern;\n                case powerbi_1.DateTimeUnit.Month:\n                    return this.MonthPattern;\n                case powerbi_1.DateTimeUnit.Week:\n                case powerbi_1.DateTimeUnit.Day:\n                    return this.DayPattern;\n                case powerbi_1.DateTimeUnit.Hour:\n                    return this.HourPattern;\n                case powerbi_1.DateTimeUnit.Minute:\n                    return this.MinutePattern;\n                case powerbi_1.DateTimeUnit.Second:\n                    return this.SecondPattern;\n                case powerbi_1.DateTimeUnit.Millisecond:\n                    return this.MillisecondPattern;\n            }\n            debug.assertFail('Unexpected unit: ' + unit);\n        };\n        return DateTimeScaleFormatInfo;\n    })();\n    powerbi_1.formattingService = new FormattingService();\n})(powerbi || (powerbi = {}));\n/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\nvar powerbi;\n(function (powerbi) {\n    var data;\n    (function (data) {\n        /** Serializes SQExpr in a form optimized in-memory comparison, but not intended for storage on disk. */\n        var SQExprShortSerializer;\n        (function (SQExprShortSerializer) {\n            function serialize(expr) {\n                return JSON.stringify(expr.accept(SQExprSerializer.instance));\n            }\n            SQExprShortSerializer.serialize = serialize;\n            function serializeArray(exprs) {\n                var str = '[';\n                for (var i = 0, len = exprs.length; i < len; i++) {\n                    if (i > 0)\n                        str += ',';\n                    str += SQExprShortSerializer.serialize(exprs[i]);\n                }\n                return str + ']';\n            }\n            SQExprShortSerializer.serializeArray = serializeArray;\n            /** Responsible for serializing an SQExpr into a comparable string. */\n            var SQExprSerializer = (function (_super) {\n                __extends(SQExprSerializer, _super);\n                function SQExprSerializer() {\n                    _super.apply(this, arguments);\n                }\n                SQExprSerializer.prototype.visitColumnRef = function (expr) {\n                    return {\n                        col: {\n                            s: expr.source.accept(this),\n                            r: expr.ref,\n                        }\n                    };\n                };\n                SQExprSerializer.prototype.visitMeasureRef = function (expr) {\n                    return {\n                        measure: {\n                            s: expr.source.accept(this),\n                            r: expr.ref,\n                        }\n                    };\n                };\n                SQExprSerializer.prototype.visitAggr = function (expr) {\n                    return {\n                        agg: {\n                            a: expr.arg.accept(this),\n                            f: expr.func,\n                        }\n                    };\n                };\n                SQExprSerializer.prototype.visitEntity = function (expr) {\n                    debug.assertValue(expr, 'expr');\n                    debug.assertValue(expr.entity, 'expr.entity');\n                    return {\n                        e: expr.entity\n                    };\n                };\n                SQExprSerializer.prototype.visitAnd = function (expr) {\n                    debug.assertValue(expr, 'expr');\n                    return {\n                        and: {\n                            l: expr.left.accept(this),\n                            r: expr.right.accept(this),\n                        }\n                    };\n                };\n                SQExprSerializer.prototype.visitCompare = function (expr) {\n                    debug.assertValue(expr, 'expr');\n                    return {\n                        comp: {\n                            k: expr.comparison,\n                            l: expr.left.accept(this),\n                            r: expr.right.accept(this),\n                        }\n                    };\n                };\n                SQExprSerializer.prototype.visitConstant = function (expr) {\n                    debug.assertValue(expr, 'expr');\n                    return {\n                        const: {\n                            t: expr.type.primitiveType,\n                            v: expr.value,\n                        }\n                    };\n                };\n                SQExprSerializer.prototype.visitDefault = function (expr) {\n                    debug.assertFail('Unexpected expression type found in DataViewScopeIdentity.');\n                    return;\n                };\n                SQExprSerializer.instance = new SQExprSerializer();\n                return SQExprSerializer;\n            })(data.DefaultSQExprVisitor);\n        })(SQExprShortSerializer = data.SQExprShortSerializer || (data.SQExprShortSerializer = {}));\n    })(data = powerbi.data || (powerbi.data = {}));\n})(powerbi || (powerbi = {}));\n\n\n","/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved. \n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *   \n *  The above copyright notice and this permission notice shall be included in \n *  all copies or substantial portions of the Software.\n *   \n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\n\nmodule powerbi.data {\n\n    /** Allows generic traversal and type discovery for a SQExpr tree. */\n    export interface ISQExprVisitorWithArg<T, TArg> {\n        visitEntity(expr: SQEntityExpr, arg: TArg): T;\n        visitColumnRef(expr: SQColumnRefExpr, arg: TArg): T;\n        visitMeasureRef(expr: SQMeasureRefExpr, arg: TArg): T;\n        visitAggr(expr: SQAggregationExpr, arg: TArg): T;\n        visitHierarchy(expr: SQHierarchyExpr, arg: TArg): T;\n        visitHierarchyLevel(expr: SQHierarchyLevelExpr, arg: TArg): T;\n        visitPropertyVariationSource(expr: SQPropertyVariationSourceExpr, arg: TArg): T;\n        visitAnd(expr: SQAndExpr, arg: TArg): T;\n        visitBetween(expr: SQBetweenExpr, arg: TArg): T;\n        visitIn(expr: SQInExpr, arg: TArg): T;\n        visitOr(expr: SQOrExpr, arg: TArg): T;\n        visitCompare(expr: SQCompareExpr, arg: TArg): T;\n        visitContains(expr: SQContainsExpr, arg: TArg): T;\n        visitExists(expr: SQExistsExpr, arg: TArg): T;\n        visitNot(expr: SQNotExpr, arg: TArg): T;\n        visitStartsWith(expr: SQStartsWithExpr, arg: TArg): T;\n        visitConstant(expr: SQConstantExpr, arg: TArg): T;\n        visitDateSpan(expr: SQDateSpanExpr, arg: TArg): T;\n        visitDateAdd(expr: SQDateAddExpr, arg: TArg): T;\n        visitNow(expr: SQNowExpr, arg: TArg): T;\n        visitDefaultValue(expr: SQDefaultValueExpr, arg: TArg): T;\n        visitAnyValue(expr: SQAnyValueExpr, arg: TArg): T;\n    }\n\n    export interface ISQExprVisitor<T> extends ISQExprVisitorWithArg<T, void> {\n    }\n\n    /** Default IQueryExprVisitorWithArg implementation that others may derive from. */\n    export class DefaultSQExprVisitorWithArg<T, TArg> implements ISQExprVisitorWithArg<T, TArg> {\n        public visitEntity(expr: SQEntityExpr, arg: TArg): T {\n            return this.visitDefault(expr, arg);\n        }\n\n        public visitColumnRef(expr: SQColumnRefExpr, arg: TArg): T {\n            return this.visitDefault(expr, arg);\n        }\n\n        public visitMeasureRef(expr: SQMeasureRefExpr, arg: TArg): T {\n            return this.visitDefault(expr, arg);\n        }\n\n        public visitAggr(expr: SQAggregationExpr, arg: TArg): T {\n            return this.visitDefault(expr, arg);\n        }\n\n        public visitHierarchy(expr: SQHierarchyExpr, arg: TArg): T {\n            return this.visitDefault(expr, arg);\n        }\n\n        public visitHierarchyLevel(expr: SQHierarchyLevelExpr, arg: TArg): T {\n            return this.visitDefault(expr, arg);\n        }\n\n        public visitPropertyVariationSource(expr: SQPropertyVariationSourceExpr, arg: TArg): T {\n            return this.visitDefault(expr, arg);\n        }\n\n        public visitBetween(expr: SQBetweenExpr, arg: TArg): T {\n            return this.visitDefault(expr, arg);\n        }\n\n        public visitIn(expr: SQInExpr, arg: TArg): T {\n            return this.visitDefault(expr, arg);\n        }\n\n        public visitAnd(expr: SQAndExpr, arg: TArg): T {\n            return this.visitDefault(expr, arg);\n        }\n\n        public visitOr(expr: SQOrExpr, arg: TArg): T {\n            return this.visitDefault(expr, arg);\n        }\n\n        public visitCompare(expr: SQCompareExpr, arg: TArg): T {\n            return this.visitDefault(expr, arg);\n        }\n\n        public visitContains(expr: SQContainsExpr, arg: TArg): T {\n            return this.visitDefault(expr, arg);\n        }\n\n        public visitExists(expr: SQExistsExpr, arg: TArg): T {\n            return this.visitDefault(expr, arg);\n        }\n\n        public visitNot(expr: SQNotExpr, arg: TArg): T {\n            return this.visitDefault(expr, arg);\n        }\n\n        public visitStartsWith(expr: SQStartsWithExpr, arg: TArg): T {\n            return this.visitDefault(expr, arg);\n        }\n\n        public visitConstant(expr: SQConstantExpr, arg: TArg): T {\n            return this.visitDefault(expr, arg);\n        }\n\n        public visitDateSpan(expr: SQDateSpanExpr, arg: TArg): T {\n            return this.visitDefault(expr, arg);\n        }\n\n        public visitDateAdd(expr: SQDateAddExpr, arg: TArg): T {\n            return this.visitDefault(expr, arg);\n        }\n\n        public visitNow(expr: SQNowExpr, arg: TArg): T {\n            return this.visitDefault(expr, arg);\n        }\n\n        public visitDefaultValue(expr: SQDefaultValueExpr, arg: TArg): T {\n            return this.visitDefault(expr, arg);\n        }\n\n        public visitAnyValue(expr: SQAnyValueExpr, arg: TArg): T {\n            return this.visitDefault(expr, arg);\n        }\n\n        public visitDefault(expr: SQExpr, arg: TArg): T {\n            return;\n        }\n    }\n\n    /** Default ISQExprVisitor implementation that others may derive from. */\n    export class DefaultSQExprVisitor<T> extends DefaultSQExprVisitorWithArg<T, void> implements ISQExprVisitor<T> {\n    }\n\n    /** Default ISQExprVisitor implementation that implements default traversal and that others may derive from. */\n    export class DefaultSQExprVisitorWithTraversal implements ISQExprVisitor<void> {\n        public visitEntity(expr: SQEntityExpr): void {\n            this.visitDefault(expr);\n        }\n\n        public visitColumnRef(expr: SQColumnRefExpr): void {\n            expr.source.accept(this);\n        }\n\n        public visitMeasureRef(expr: SQMeasureRefExpr): void {\n            expr.source.accept(this);\n        }\n\n        public visitAggr(expr: SQAggregationExpr): void {\n            expr.arg.accept(this);\n        } \n\n        public visitHierarchy(expr: SQHierarchyExpr): void {\n            expr.arg.accept(this);\n        }\n\n        public visitHierarchyLevel(expr: SQHierarchyLevelExpr): void {\n            expr.arg.accept(this);\n        }\n\n        public visitPropertyVariationSource(expr: SQPropertyVariationSourceExpr): void {\n            expr.arg.accept(this);\n        }\n\n        public visitBetween(expr: SQBetweenExpr): void {\n            expr.arg.accept(this);\n            expr.lower.accept(this);\n            expr.upper.accept(this);\n        }\n\n        public visitIn(expr: SQInExpr): void {\n            let args = expr.args;\n            for (let i = 0, len = args.length; i < len; i++)\n                args[i].accept(this);\n\n            let values = expr.values;\n            for (let i = 0, len = values.length; i < len; i++) {\n                let valueTuple = values[i];\n                for (let j = 0, jlen = valueTuple.length; j < jlen; j++)\n                    valueTuple[j].accept(this);\n            }\n        }\n\n        public visitAnd(expr: SQAndExpr): void {\n            expr.left.accept(this);\n            expr.right.accept(this);\n        }\n\n        public visitOr(expr: SQOrExpr): void {\n            expr.left.accept(this);\n            expr.right.accept(this);\n        }\n\n        public visitCompare(expr: SQCompareExpr): void {\n            expr.left.accept(this);\n            expr.right.accept(this);\n        }\n\n        public visitContains(expr: SQContainsExpr): void {\n            expr.left.accept(this);\n            expr.right.accept(this);\n        }\n\n        public visitExists(expr: SQExistsExpr): void {\n            expr.arg.accept(this);\n        }\n\n        public visitNot(expr: SQNotExpr): void {\n            expr.arg.accept(this);\n        }\n\n        public visitStartsWith(expr: SQStartsWithExpr): void {\n            expr.left.accept(this);\n            expr.right.accept(this);\n        }\n\n        public visitConstant(expr: SQConstantExpr): void {\n            this.visitDefault(expr);\n        }\n\n        public visitDateSpan(expr: SQDateSpanExpr): void {\n            expr.arg.accept(this);\n        }\n\n        public visitDateAdd(expr: SQDateAddExpr): void {\n            expr.arg.accept(this);\n        }\n\n        public visitNow(expr: SQNowExpr): void {\n            this.visitDefault(expr);\n        }\n\n        public visitDefaultValue(expr: SQDefaultValueExpr): void {\n            this.visitDefault(expr);\n        }\n\n        public visitAnyValue(expr: SQAnyValueExpr): void {\n            this.visitDefault(expr);\n        }\n\n        public visitDefault(expr: SQExpr): void {\n            return;\n        }\n    }\n} ","/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved. \n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *   \n *  The above copyright notice and this permission notice shall be included in \n *  all copies or substantial portions of the Software.\n *   \n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\n\nmodule powerbi {\n    /** Defines a custom enumeration data type, and its values. */\n    export interface IEnumType {\n        /** Gets the members of the enumeration, limited to the validMembers, if appropriate. */\n        members(validMembers?: EnumMemberValue[]): IEnumMember[];\n    }\n\n    export function createEnumType(members: IEnumMember[]): IEnumType {\n        return new EnumType(members);\n    }\n\n    class EnumType implements IEnumType {\n        private allMembers: IEnumMember[];\n\n        constructor(allMembers: IEnumMember[]) {\n            debug.assertValue(allMembers, 'allMembers');\n\n            this.allMembers = allMembers;\n        }\n\n        public members(validMembers?: EnumMemberValue[]): IEnumMember[] {\n            let allMembers = this.allMembers;\n            if (!validMembers)\n                return allMembers;\n\n            let membersToReturn: IEnumMember[] = [];\n            for (let member of allMembers) {\n                if (_.contains(validMembers, member.value))\n                    membersToReturn.push(member);\n            }\n            return membersToReturn;\n        }\n    }\n}","/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved. \n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *   \n *  The above copyright notice and this permission notice shall be included in \n *  all copies or substantial portions of the Software.\n *   \n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\n\nmodule powerbi {\n    import SQExpr = powerbi.data.SQExpr;\n\n    export interface FillDefinition {\n        solid?: {\n            color?: SQExpr;\n        };\n        gradient?: {\n            startColor?: SQExpr;\n            endColor?: SQExpr;\n        };\n        pattern?: {\n            patternKind?: SQExpr;\n            color?: SQExpr;\n        };\n    }\n\n    export module FillSolidColorTypeDescriptor {\n        /** Gets a value indicating whether the descriptor is nullable or not. */\n        export function nullable(descriptor: FillSolidColorTypeDescriptor): boolean {\n            debug.assertValue(descriptor, 'descriptor');\n\n            if (descriptor === true)\n                return false;\n\n            let advancedDescriptor = <FillSolidColorAdvancedTypeDescriptor>descriptor;\n            return !!advancedDescriptor.nullable;\n        }\n    }\n}","/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved. \n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *   \n *  The above copyright notice and this permission notice shall be included in \n *  all copies or substantial portions of the Software.\n *   \n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\n\nmodule powerbi {\n    import SQExpr = powerbi.data.SQExpr;\n\n    export interface ImageTypeDescriptor {\n    }\n\n    export type ImageDefinition = ImageDefinitionGeneric<SQExpr>;\n\n    export module ImageDefinition {\n        export const urlType: ValueTypeDescriptor = { misc: { imageUrl: true } };\n    }\n}","/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved. \n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *   \n *  The above copyright notice and this permission notice shall be included in \n *  all copies or substantial portions of the Software.\n *   \n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\n\nmodule powerbi {\n    import SemanticFilter = powerbi.data.SemanticFilter;\n\n    export type StructuralObjectDefinition =\n        FillDefinition |\n        FillRuleDefinition |\n        SemanticFilter |\n        DefaultValueDefinition |\n        ImageDefinition |\n        ParagraphsDefinition;\n\n    export module StructuralTypeDescriptor {\n        export function isValid(type: StructuralTypeDescriptor): boolean {\n            debug.assertValue(type, 'type');\n\n            if (type.fill ||\n                type.fillRule ||\n                type.filter ||\n                type.expression ||\n                type.image ||\n                type.paragraphs) {\n                return true;\n            }\n\n            return false;\n        }\n    }\n}","/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved. \n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *   \n *  The above copyright notice and this permission notice shall be included in \n *  all copies or substantial portions of the Software.\n *   \n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\n\nmodule powerbi {\n    import EnumExtensions = jsCommon.EnumExtensions;\n\n    export interface ValueTypeDescriptor {\n        extendedType?: ExtendedType;\n    }\n    \n    /** Describes a data value type, including a primitive type and extended type if any (derived from data category). */\n    export class ValueType implements ValueTypeDescriptor {\n        private static typeCache: { [id: string]: ValueType } = {};\n\n        private underlyingType: ExtendedType;\n        private category: string;\n\n        private temporalType: TemporalType;\n        private geographyType: GeographyType;\n        private miscType: MiscellaneousType;\n        private formattingType: FormattingType;\n        private enumType: IEnumType;\n        private scriptingType: ScriptType;\n\n        /** Do not call the ValueType constructor directly. Use the ValueType.fromXXX methods. */\n        constructor(type: ExtendedType, category?: string, enumType?: IEnumType) {\n            debug.assert((!!type && ExtendedType[type] != null) || type === ExtendedType.Null, 'type');\n            debug.assert(!!category || category === null, 'category');\n            debug.assert(type !== ExtendedType.Enumeration || !!enumType, 'enumType');\n\n            this.underlyingType = type;\n            this.category = category;\n\n            if (EnumExtensions.hasFlag(type, ExtendedType.Temporal)) {\n                this.temporalType = new TemporalType(type);\n            }\n            if (EnumExtensions.hasFlag(type, ExtendedType.Geography)) {\n                this.geographyType = new GeographyType(type);\n            }\n            if (EnumExtensions.hasFlag(type, ExtendedType.Miscellaneous)) {\n                this.miscType = new MiscellaneousType(type);\n            }\n            if (EnumExtensions.hasFlag(type, ExtendedType.Formatting)) {\n                this.formattingType = new FormattingType(type);\n            }\n            if (EnumExtensions.hasFlag(type, ExtendedType.Enumeration)) {\n                this.enumType = enumType;\n            }\n            if (EnumExtensions.hasFlag(type, ExtendedType.Scripting)) {\n                this.scriptingType = new ScriptType(type);\n            }\n        }\n\n        /** Creates or retrieves a ValueType object based on the specified ValueTypeDescriptor. */\n        public static fromDescriptor(descriptor: ValueTypeDescriptor): ValueType {\n            descriptor = descriptor || {};\n\n            // Simplified primitive types\n            if (descriptor.text) return ValueType.fromExtendedType(ExtendedType.Text);\n            if (descriptor.integer) return ValueType.fromExtendedType(ExtendedType.Integer);\n            if (descriptor.numeric) return ValueType.fromExtendedType(ExtendedType.Double);\n            if (descriptor.bool) return ValueType.fromExtendedType(ExtendedType.Boolean);\n            if (descriptor.dateTime) return ValueType.fromExtendedType(ExtendedType.DateTime);\n            if (descriptor.duration) return ValueType.fromExtendedType(ExtendedType.Duration);\n            if (descriptor.binary) return ValueType.fromExtendedType(ExtendedType.Binary);\n            if (descriptor.none) return ValueType.fromExtendedType(ExtendedType.None);\n\n            // Extended types\n            if (descriptor.scripting) {\n                if (descriptor.scripting.source) return ValueType.fromExtendedType(ExtendedType.ScriptSource);\n            }\n            if (descriptor.enumeration) return ValueType.fromEnum(descriptor.enumeration);\n            if (descriptor.temporal) {\n                if (descriptor.temporal.year) return ValueType.fromExtendedType(ExtendedType.Year_Integer);\n                if (descriptor.temporal.month) return ValueType.fromExtendedType(ExtendedType.Month_Integer);\n            }\n            if (descriptor.geography) {\n                if (descriptor.geography.address) return ValueType.fromExtendedType(ExtendedType.Address);\n                if (descriptor.geography.city) return ValueType.fromExtendedType(ExtendedType.City);\n                if (descriptor.geography.continent) return ValueType.fromExtendedType(ExtendedType.Continent);\n                if (descriptor.geography.country) return ValueType.fromExtendedType(ExtendedType.Country);\n                if (descriptor.geography.county) return ValueType.fromExtendedType(ExtendedType.County);\n                if (descriptor.geography.region) return ValueType.fromExtendedType(ExtendedType.Region);\n                if (descriptor.geography.postalCode) return ValueType.fromExtendedType(ExtendedType.PostalCode_Text);\n                if (descriptor.geography.stateOrProvince) return ValueType.fromExtendedType(ExtendedType.StateOrProvince);\n                if (descriptor.geography.place) return ValueType.fromExtendedType(ExtendedType.Place);\n                if (descriptor.geography.latitude) return ValueType.fromExtendedType(ExtendedType.Latitude_Double);\n                if (descriptor.geography.longitude) return ValueType.fromExtendedType(ExtendedType.Longitude_Double);\n            }\n            if (descriptor.misc) {\n                if (descriptor.misc.image) return ValueType.fromExtendedType(ExtendedType.Image);\n                if (descriptor.misc.imageUrl) return ValueType.fromExtendedType(ExtendedType.ImageUrl);\n                if (descriptor.misc.webUrl) return ValueType.fromExtendedType(ExtendedType.WebUrl);\n            }\n            if (descriptor.formatting) {\n                if (descriptor.formatting.color) return ValueType.fromExtendedType(ExtendedType.Color);\n                if (descriptor.formatting.formatString) return ValueType.fromExtendedType(ExtendedType.FormatString);\n                if (descriptor.formatting.alignment) return ValueType.fromExtendedType(ExtendedType.Alignment);\n                if (descriptor.formatting.labelDisplayUnits) return ValueType.fromExtendedType(ExtendedType.LabelDisplayUnits);\n                if (descriptor.formatting.fontSize) return ValueType.fromExtendedType(ExtendedType.FontSize);\n                if (descriptor.formatting.labelDensity) return ValueType.fromExtendedType(ExtendedType.LabelDensity);\n            }\n            if (descriptor.extendedType) {\n                return ValueType.fromExtendedType(descriptor.extendedType);\n            }\n\n            return ValueType.fromExtendedType(ExtendedType.Null);\n        }\n\n        /** Advanced: Generally use fromDescriptor instead. Creates or retrieves a ValueType object for the specified ExtendedType. */\n        public static fromExtendedType(extendedType: ExtendedType): ValueType {\n            extendedType = extendedType || ExtendedType.Null;\n\n            let primitiveType = getPrimitiveType(extendedType),\n                category = getCategoryFromExtendedType(extendedType);\n            debug.assert(\n                primitiveType !== PrimitiveType.Null || extendedType === ExtendedType.Null,\n                'Cannot create ValueType for abstract extended type. Consider using fromDescriptor instead.');\n            return ValueType.fromPrimitiveTypeAndCategory(primitiveType, category);\n        }\n\n        /** Creates or retrieves a ValueType object for the specified PrimitiveType and data category. */\n        public static fromPrimitiveTypeAndCategory(primitiveType: PrimitiveType, category?: string): ValueType {\n            primitiveType = primitiveType || PrimitiveType.Null;\n            category = category || null;\n\n            let id = primitiveType.toString();\n            if (category)\n                id += '|' + category;\n\n            return ValueType.typeCache[id] || (ValueType.typeCache[id] = new ValueType(toExtendedType(primitiveType, category), category));\n        }\n\n        /** Creates a ValueType to describe the given IEnumType. */\n        public static fromEnum(enumType: IEnumType): ValueType {\n            debug.assertValue(enumType, 'enumType');\n\n            return new ValueType(ExtendedType.Enumeration, null, enumType);\n        }\n\n        /** Determines if the instance ValueType is convertable from the 'other' ValueType. */\n        public isCompatibleFrom(other: ValueType): boolean {\n            debug.assertValue(other, 'other');\n\n            let otherPrimitiveType = other.primitiveType;\n            if (this === other ||\n                this.primitiveType === otherPrimitiveType ||\n                otherPrimitiveType === PrimitiveType.Null)\n                return true;\n            return false;\n        }\n\n        /** Gets the exact primitive type of this ValueType. */\n        public get primitiveType(): PrimitiveType {\n            return getPrimitiveType(this.underlyingType);\n        }\n\n        /** Gets the exact extended type of this ValueType. */\n        public get extendedType(): ExtendedType {\n            return this.underlyingType;\n        }\n\n        /** Gets the data category string (if any) for this ValueType. */\n        public get categoryString(): string {\n            return this.category;\n        }\n\n        // Simplified primitive types\n\n        /** Indicates whether the type represents text values. */\n        public get text(): boolean {\n            return this.primitiveType === PrimitiveType.Text;\n        }\n\n        /** Indicates whether the type represents any numeric value. */\n        public get numeric(): boolean {\n            return EnumExtensions.hasFlag(this.underlyingType, ExtendedType.Numeric);\n        }\n\n        /** Indicates whether the type represents integer numeric values. */\n        public get integer(): boolean {\n            return this.primitiveType === PrimitiveType.Integer;\n        }\n\n        /** Indicates whether the type represents Boolean values. */\n        public get bool(): boolean {\n            return this.primitiveType === PrimitiveType.Boolean;\n        }\n\n        /** Indicates whether the type represents any date/time values. */\n        public get dateTime(): boolean {\n            return this.primitiveType === PrimitiveType.DateTime ||\n                this.primitiveType === PrimitiveType.Date ||\n                this.primitiveType === PrimitiveType.Time;\n        }\n\n        /** Indicates whether the type represents duration values. */\n        public get duration(): boolean {\n            return this.primitiveType === PrimitiveType.Duration;\n        }\n\n        /** Indicates whether the type represents binary values. */\n        public get binary(): boolean {\n            return this.primitiveType === PrimitiveType.Binary;\n        }\n\n        /** Indicates whether the type represents none values. */\n        public get none(): boolean {\n            return this.primitiveType === PrimitiveType.None;\n        }\n\n        // Extended types\n\n        /** Returns an object describing temporal values represented by the type, if it represents a temporal type. */\n        public get temporal(): TemporalType {\n            return this.temporalType;\n        }\n\n        /** Returns an object describing geographic values represented by the type, if it represents a geographic type. */\n        public get geography(): GeographyType {\n            return this.geographyType;\n        }\n\n        /** Returns an object describing the specific values represented by the type, if it represents a miscellaneous extended type. */\n        public get misc(): MiscellaneousType {\n            return this.miscType;\n        }\n\n        /** Returns an object describing the formatting values represented by the type, if it represents a formatting type. */\n        public get formatting(): FormattingType {\n            return this.formattingType;\n        }\n\n        /** Returns an object describing the enum values represented by the type, if it represents an enumeration type. */\n        public get enum(): IEnumType {\n            return this.enumType;\n        }\n\n        public get scripting(): ScriptType {\n            return this.scriptingType;\n        }\n    }\n\n    export class ScriptType implements ScriptTypeDescriptor {\n        private underlyingType: ExtendedType;\n\n        constructor(type: ExtendedType) {\n            debug.assert(!!type && EnumExtensions.hasFlag(type, ExtendedType.Scripting), 'type');\n            this.underlyingType = type;\n        }\n\n        public get source(): boolean {\n            return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.ScriptSource);\n        }\n    }\n\n    export class TemporalType implements TemporalTypeDescriptor {\n        private underlyingType: ExtendedType;\n\n        constructor(type: ExtendedType) {\n            debug.assert(!!type && EnumExtensions.hasFlag(type, ExtendedType.Temporal), 'type');\n            this.underlyingType = type;\n        }\n\n        public get year(): boolean {\n            return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Year);\n        }\n        public get month(): boolean {\n            return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Month);\n        }\n    }\n\n    export class GeographyType implements GeographyTypeDescriptor {\n        private underlyingType: ExtendedType;\n\n        constructor(type: ExtendedType) {\n            debug.assert(!!type && EnumExtensions.hasFlag(type, ExtendedType.Geography), 'type');\n            this.underlyingType = type;\n        }\n\n        public get address(): boolean {\n            return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Address);\n        }\n        public get city(): boolean {\n            return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.City);\n        }\n        public get continent(): boolean {\n            return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Continent);\n        }\n        public get country(): boolean {\n            return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Country);\n        }\n        public get county(): boolean {\n            return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.County);\n        }\n        public get region(): boolean {\n            return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Region);\n        }\n        public get postalCode(): boolean {\n            return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.PostalCode);\n        }\n        public get stateOrProvince(): boolean {\n            return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.StateOrProvince);\n        }\n        public get place(): boolean {\n            return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Place);\n        }\n        public get latitude(): boolean {\n            return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Latitude);\n        }\n        public get longitude(): boolean {\n            return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Longitude);\n        }\n    }\n\n    export class MiscellaneousType implements MiscellaneousTypeDescriptor {\n        private underlyingType: ExtendedType;\n\n        constructor(type: ExtendedType) {\n            debug.assert(!!type && EnumExtensions.hasFlag(type, ExtendedType.Miscellaneous), 'type');\n            this.underlyingType = type;\n        }\n\n        public get image(): boolean {\n            return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Image);\n        }\n        public get imageUrl(): boolean {\n            return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.ImageUrl);\n        }\n        public get webUrl(): boolean {\n            return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.WebUrl);\n        }\n    }\n\n    export class FormattingType implements FormattingTypeDescriptor {\n        private underlyingType: ExtendedType;\n\n        constructor(type: ExtendedType) {\n            debug.assert(!!type && EnumExtensions.hasFlag(type, ExtendedType.Formatting), 'type');\n            this.underlyingType = type;\n        }\n\n        public get color(): boolean {\n            return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Color);\n        }\n\n        public get formatString(): boolean {\n            return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.FormatString);\n        }\n\n        public get alignment(): boolean {\n            return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Alignment);\n        }\n\n        public get labelDisplayUnits(): boolean {\n            return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.LabelDisplayUnits);\n        }\n\n        public get fontSize(): boolean {\n            return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.FontSize);\n        }\n\n        public get labelDensity(): boolean {\n            return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.LabelDensity);\n        }\n    }\n\n    /** Defines primitive value types. Must be consistent with types defined by server conceptual schema. */\n    export enum PrimitiveType {\n        Null = 0,\n        Text = 1,\n        Decimal = 2,\n        Double = 3,\n        Integer = 4,\n        Boolean = 5,\n        Date = 6,\n        DateTime = 7,\n        DateTimeZone = 8,\n        Time = 9,\n        Duration = 10,\n        Binary = 11,\n        None = 12,\n    }\n\n    /** Defines extended value types, which include primitive types and known data categories constrained to expected primitive types. */\n    export enum ExtendedType {\n        // Flags (1 << 8-15 range [0xFF00])\n        // Important: Enum members must be declared before they are used in TypeScript.\n        Numeric = 1 << 8,\n        Temporal = 1 << 9,\n        Geography = 1 << 10,\n        Miscellaneous = 1 << 11,\n        Formatting = 1 << 12,\n        Scripting = 1 << 13,        \n\n        // Primitive types (0-255 range [0xFF] | flags)\n        // The member names and base values must match those in PrimitiveType.\n        Null = 0,\n        Text = 1,\n        Decimal = Numeric | 2,\n        Double = Numeric | 3,\n        Integer = Numeric | 4,\n        Boolean = 5,\n        Date = Temporal | 6,\n        DateTime = Temporal | 7,\n        DateTimeZone = Temporal | 8,\n        Time = Temporal | 9,\n        Duration = 10,\n        Binary = 11,\n        None = 12,\n\n        // Extended types (0-32767 << 16 range [0xFFFF0000] | corresponding primitive type | flags)\n        // Temporal\n        Year = Temporal | (1 << 16),\n        Year_Text = Year | Text,\n        Year_Integer = Year | Integer,\n        Year_Date = Year | Date,\n        Year_DateTime = Year | DateTime,\n        Month = Temporal | (2 << 16),\n        Month_Text = Month | Text,\n        Month_Integer = Month | Integer,\n        Month_Date = Month | Date,\n        Month_DateTime = Month | DateTime,\n        // Geography\n        Address = Text | Geography | (100 << 16),\n        City = Text | Geography | (101 << 16),\n        Continent = Text | Geography | (102 << 16),\n        Country = Text | Geography | (103 << 16),\n        County = Text | Geography | (104 << 16),\n        Region = Text | Geography | (105 << 16),\n        PostalCode = Geography | (106 << 16),\n        PostalCode_Text = PostalCode | Text,\n        PostalCode_Integer = PostalCode | Integer,\n        StateOrProvince = Text | Geography | (107 << 16),\n        Place = Text | Geography | (108 << 16),\n        Latitude = Geography | (109 << 16),\n        Latitude_Decimal = Latitude | Decimal,\n        Latitude_Double = Latitude | Double,\n        Longitude = Geography | (110 << 16),\n        Longitude_Decimal = Longitude | Decimal,\n        Longitude_Double = Longitude | Double,\n        // Miscellaneous\n        Image = Binary | Miscellaneous | (200 << 16),\n        ImageUrl = Text | Miscellaneous | (201 << 16),\n        WebUrl = Text | Miscellaneous | (202 << 16),\n        // Formatting\n        Color = Text | Formatting | (300 << 16),\n        FormatString = Text | Formatting | (301 << 16),\n        Alignment = Text | Formatting | (306 << 16),\n        LabelDisplayUnits = Text | Formatting | (307 << 16),\n        FontSize = Double | Formatting | (308 << 16),\n        LabelDensity = Double | Formatting | (309 << 16),\n        // Enumeration\n        Enumeration = Text | 400 << 16,\n        // Scripting\n        ScriptSource = Text | Scripting | (500 << 16),        \n        // NOTE: To avoid confusion, underscores should be used only to delimit primitive type variants of an extended type\n        // (e.g. Year_Integer or Latitude_Double above)\n    }\n\n    const PrimitiveTypeMask = 0xFF;\n    const PrimitiveTypeWithFlagsMask = 0xFFFF;\n    const PrimitiveTypeFlagsExcludedMask = 0xFFFF0000;\n\n    function getPrimitiveType(extendedType: ExtendedType): PrimitiveType {\n        return extendedType & PrimitiveTypeMask;\n    }\n\n    function isPrimitiveType(extendedType: ExtendedType): boolean {\n        return (extendedType & PrimitiveTypeWithFlagsMask) === extendedType;\n    }\n\n    function getCategoryFromExtendedType(extendedType: ExtendedType): string {\n        if (isPrimitiveType(extendedType))\n            return null;\n\n        let category = ExtendedType[extendedType];\n        if (category) {\n            // Check for ExtendedType declaration without a primitive type.\n            // If exists, use it as category (e.g. Longitude rather than Longitude_Double)\n            // Otherwise use the ExtendedType declaration with a primitive type (e.g. Address)\n            let delimIdx = category.lastIndexOf('_');\n            if (delimIdx > 0) {\n                let baseCategory = category.slice(0, delimIdx);\n                if (ExtendedType[baseCategory]) {\n                    debug.assert(\n                        (ExtendedType[baseCategory] & PrimitiveTypeFlagsExcludedMask) === (extendedType & PrimitiveTypeFlagsExcludedMask),\n                        'Unexpected value for ExtendedType base member of ' + extendedType);\n                    category = baseCategory;\n                }\n            }\n        }\n        return category || null;\n    }\n\n    function toExtendedType(primitiveType: PrimitiveType, category?: string): ExtendedType {\n        let primitiveString = PrimitiveType[primitiveType];\n        let t = ExtendedType[primitiveString];\n        if (t == null) {\n            debug.assertFail('Unexpected primitiveType ' + primitiveType);\n            t = ExtendedType.Null;\n        }\n\n        if (primitiveType && category) {\n            let categoryType: ExtendedType = ExtendedType[category];\n            if (categoryType) {\n                let categoryPrimitiveType = getPrimitiveType(categoryType);\n                if (categoryPrimitiveType === PrimitiveType.Null) {\n                    // Category supports multiple primitive types, check if requested primitive type is supported\n                    // (note: important to use t here rather than primitiveType as it may include primitive type flags)\n                    categoryType = t | categoryType;\n                    if (ExtendedType[categoryType]) {\n                        debug.assert(\n                            ExtendedType[categoryType] === (category + '_' + primitiveString),\n                            'Unexpected name for ExtendedType member ' + categoryType);\n                        t = categoryType;\n                    }\n                }\n                else if (categoryPrimitiveType === primitiveType) {\n                    // Primitive type matches the single supported type for the category\n                    t = categoryType;\n                }\n            }\n        }\n\n        return t;\n    }\n\n    function matchesExtendedTypeWithAnyPrimitive(a: ExtendedType, b: ExtendedType): boolean {\n        return (a & PrimitiveTypeFlagsExcludedMask) === (b & PrimitiveTypeFlagsExcludedMask);\n    }\n}","/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved. \n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *   \n *  The above copyright notice and this permission notice shall be included in \n *  all copies or substantial portions of the Software.\n *   \n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\n\nmodule powerbi.data {\n    /**\n     * Represents the versions of the data shape binding structure.\n     * NOTE Keep this file in sync with the Sql\\InfoNav\\src\\Data\\Contracts\\DsqGeneration\\DataShapeBindingVersions.cs\n     * file in the TFS Dev branch.\n     */\n    export const enum DataShapeBindingVersions {\n        /** The initial version of data shape binding */\n        Version0 = 0,\n        /** Explicit subtotal support for axis groupings. */\n        Version1 = 1,\n    }\n\n    export interface DataShapeBindingLimitTarget {\n        Primary?: number;\n    }\n\n    export enum DataShapeBindingLimitType {\n        Top = 0,\n        First = 1,\n        Last = 2,\n        Sample = 3,\n        Bottom = 4,\n    }\n\n    export interface DataShapeBindingLimit {\n        Count?: number;\n        Target: DataShapeBindingLimitTarget;\n        Type: DataShapeBindingLimitType;\n    }\n\n    export interface DataShapeBinding {\n        Version?: number;\n        Primary: DataShapeBindingAxis;\n        Secondary?: DataShapeBindingAxis;\n        Projections?: number[];\n        Limits?: DataShapeBindingLimit[];\n        Highlights?: FilterDefinition[];\n        DataReduction?: DataShapeBindingDataReduction;\n        IncludeEmptyGroups?: boolean;\n    }\n\n    export interface DataShapeBindingDataReduction {\n        Primary?: DataShapeBindingDataReductionAlgorithm;\n        Secondary?: DataShapeBindingDataReductionAlgorithm;\n        DataVolume?: number;\n    }\n\n    export interface DataShapeBindingDataReductionAlgorithm {\n        Top?: DataShapeBindingDataReductionTopLimit;\n        Sample?: DataShapeBindingDataReductionSampleLimit;\n        Bottom?: DataShapeBindingDataReductionBottomLimit;\n        Window?: DataShapeBindingDataReductionDataWindow;\n    }\n\n    export interface DataShapeBindingDataReductionTopLimit {\n        Count?: number;\n    }\n\n    export interface DataShapeBindingDataReductionSampleLimit {\n        Count?: number;\n    }\n\n    export interface DataShapeBindingDataReductionBottomLimit {\n        Count?: number;\n    }\n\n    export interface DataShapeBindingDataReductionDataWindow {\n        Count?: number;\n        RestartTokens?: RestartToken;\n    }\n\n    export interface DataShapeBindingAxis {\n        Groupings: DataShapeBindingAxisGrouping[];\n    }\n\n    export enum SubtotalType {\n        None = 0,\n        Before = 1,\n        After = 2\n    }\n\n    export interface DataShapeBindingAxisGrouping {\n        Projections: number[];\n        SuppressedProjections?: number[];\n        Subtotal?: SubtotalType;\n        ShowItemsWithNoData?: number[];\n    }    \n} ","/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\n\nmodule powerbi.data {\n    export module DataShapeBindingDataReduction {\n\n        export function createFrom(reduction: ReductionAlgorithm): DataShapeBindingDataReductionAlgorithm {\n            if (!reduction)\n                return;\n\n            var result: DataShapeBindingDataReductionAlgorithm;\n            if (reduction.top) {\n                result = {\n                    Top: {}\n                };\n\n                if (reduction.top.count)\n                    result.Top.Count = reduction.top.count;\n            }\n\n            if (reduction.bottom) {\n                result = {\n                    Bottom: {}\n                };\n\n                if (reduction.bottom.count)\n                    result.Bottom.Count = reduction.bottom.count;\n            }\n\n            if (reduction.sample) {\n                result = {\n                    Sample: {}\n                };\n\n                if (reduction.sample.count)\n                    result.Sample.Count = reduction.sample.count;\n            }\n\n            if (reduction.window) {\n                result = {\n                    Window: {}\n                };\n\n                if (reduction.window.count)\n                    result.Window.Count = reduction.window.count;\n            }\n\n            return result;\n        }\n    }\n}","/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved. \n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *   \n *  The above copyright notice and this permission notice shall be included in \n *  all copies or substantial portions of the Software.\n *   \n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\n\nmodule powerbi.data {\n    export interface FederatedConceptualSchemaInitOptions {\n        schemas: { [name: string]: ConceptualSchema };\n        links?: ConceptualSchemaLink[];\n    }\n\n    /** Represents a federated conceptual schema. */\n    export class FederatedConceptualSchema {\n        private schemas: { [name: string]: ConceptualSchema };\n        private links: ConceptualSchemaLink[];\n\n        constructor(options: FederatedConceptualSchemaInitOptions) {\n            debug.assertValue(options, 'options');\n\n            this.schemas = options.schemas; \n            if (options.links)\n                this.links = options.links;\n        }\n\n        public schema(name: string): ConceptualSchema {\n            return this.schemas[name];\n        }\n    }\n\n    /** Describes a semantic relationship between ConceptualSchemas. */\n    export interface ConceptualSchemaLink {\n    }\n}","/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved. \n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *   \n *  The above copyright notice and this permission notice shall be included in \n *  all copies or substantial portions of the Software.\n *   \n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\n\nmodule powerbi.data {\n\n    export module Selector {\n        export function filterFromSelector(selectors: Selector[], isNot?: boolean): SemanticFilter {\n            if (_.isEmpty(selectors))\n                return;\n\n            let exprs: SQExpr[] = [];\n            for (let i = 0, ilen = selectors.length; i < ilen; i++) {\n                let identity = selectors[i];\n                let data = identity.data;\n                let exprToAdd: SQExpr = undefined;\n                if (data && data.length) {\n                    for (let j = 0, jlen = data.length; j < jlen; j++) {\n                        exprToAdd = SQExprBuilder.and(exprToAdd, <SQExpr>(<DataViewScopeIdentity>identity.data[j]).expr);\n                    }\n                }\n\n                if (exprToAdd)\n                    exprs.push(exprToAdd);\n            }\n\n            if (!_.isEmpty(exprs))\n                return DataViewScopeIdentity.filterFromExprs(exprs, isNot);\n        }\n\n        export function matchesData(selector: Selector, identities: DataViewScopeIdentity[]): boolean {\n            debug.assertValue(selector, 'selector');\n            debug.assertValue(selector.data, 'selector.data');\n            debug.assertValue(identities, 'identities');\n\n            let selectorData = selector.data;\n            if (selectorData.length !== identities.length)\n                return false;\n\n            for (let i = 0, len = selectorData.length; i < len; i++) {\n                let dataItem = selector.data[i];\n                let selectorDataItem = <DataViewScopeIdentity>dataItem;\n                if (selectorDataItem.expr) {\n                    if (!DataViewScopeIdentity.equals(selectorDataItem, identities[i]))\n                        return false;\n                }\n                else {\n                    if (!DataViewScopeWildcard.matches(<DataViewScopeWildcard>dataItem, identities[i]))\n                        return false;\n                }\n            }\n\n            return true;\n        }\n\n        export function matchesKeys(selector: Selector, keysList: SQExpr[][]): boolean {\n            debug.assertValue(selector, 'selector');\n            debug.assertValue(selector.data, 'selector.data');\n            debug.assertValue(keysList, 'keysList');\n\n            let selectorData = selector.data,\n                selectorDataLength = selectorData.length;\n            if (selectorDataLength !== keysList.length)\n                return false;\n\n            for (let i = 0; i < selectorDataLength; i++) {\n                let selectorDataItem = selector.data[i],\n                    selectorDataExprs: SQExpr[];\n\n                if ((<DataViewScopeIdentity>selectorDataItem).expr) {\n                    selectorDataExprs = ScopeIdentityExtractor.getKeys(<SQExpr>(<DataViewScopeIdentity>selectorDataItem).expr);\n                }\n                else {\n                    selectorDataExprs = <SQExpr[]>(<DataViewScopeWildcard>selectorDataItem).exprs;\n                }\n\n                if (!selectorDataExprs)\n                    continue;\n                if (!SQExprUtils.sequenceEqual(keysList[i], selectorDataExprs))\n                    return false;\n            }\n\n            return true;\n        }\n\n        /** Determines whether two selectors are equal. */\n        export function equals(x: Selector, y: Selector): boolean {\n            // Normalize falsy to null\n            x = x || null;\n            y = y || null;\n\n            if (x === y)\n                return true;\n\n            if (!x !== !y)\n                return false;\n\n            debug.assertValue(x, 'x');\n            debug.assertValue(y, 'y');\n\n            if (x.id !== y.id)\n                return false;\n            if (x.metadata !== y.metadata)\n                return false;\n            if (!equalsDataArray(x.data, y.data))\n                return false;\n\n            return true;\n        }\n\n        function equalsDataArray(x: DataRepetitionSelector[], y: DataRepetitionSelector[]): boolean {\n            // Normalize falsy to null\n            x = x || null;\n            y = y || null;\n\n            if (x === y)\n                return true;\n\n            if (!x !== !y)\n                return false;\n\n            if (x.length !== y.length)\n                return false;\n\n            for (let i = 0, len = x.length; i < len; i++) {\n                if (!equalsData(x[i], y[i]))\n                    return false;\n            }\n\n            return true;\n        }\n\n        function equalsData(x: DataRepetitionSelector, y: DataRepetitionSelector): boolean {\n            if (!(<DataViewScopeIdentity>x).expr && (<DataViewScopeIdentity>y).expr) {\n                // TODO: We need to also check wildcard selectors too (once that's supported/figured out).\n                return false;\n            }\n\n            return DataViewScopeIdentity.equals(<DataViewScopeIdentity>x, <DataViewScopeIdentity>y);\n        }\n\n        export function getKey(selector: Selector): string {\n            let toStringify: any = {};\n            if (selector.data) {\n                let data = [];\n                for (let i = 0, ilen = selector.data.length; i < ilen; i++) {\n                    data.push(selector.data[i].key);\n                }\n                toStringify.data = data;\n            }\n            if (selector.metadata)\n                toStringify.metadata = selector.metadata;\n            if (selector.id)\n                toStringify.id = selector.id;\n            return JSON.stringify(toStringify);\n        }\n\n        export function containsWildcard(selector: Selector): boolean {\n            debug.assertValue(selector, 'selector');\n\n            let dataItems = selector.data;\n            if (!dataItems)\n                return false;\n\n            for (let i = 0, len = dataItems.length; i < len; i++) {\n                let wildcard = <DataViewScopeWildcard>dataItems[i];\n                if (wildcard.exprs)\n                    return true;\n            }\n\n            return false;\n        }\n    }\n}","/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved. \n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *   \n *  The above copyright notice and this permission notice shall be included in \n *  all copies or substantial portions of the Software.\n *   \n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\n\nmodule powerbi.data {\n\n    export interface QueryDefinition {\n        Version?: number;\n        From: EntitySource[];\n        Where?: QueryFilter[];\n        OrderBy?: QuerySortClause[];\n        Select: QueryExpressionContainer[];\n        GroupBy?: QueryExpressionContainer[];\n    }\n\n    export interface FilterDefinition {\n        Version?: number;\n        From: EntitySource[];\n        Where: QueryFilter[];\n    }    \n\n    export enum EntitySourceType {\n        Table = 0,\n        Pod = 1,\n    }\n\n    export interface EntitySource {\n        Name: string;\n        EntitySet?: string; // TODO: Remove this when Q&A Silverlight is removed and make Entity required\n        Entity?: string;\n        Schema?: string;\n        Type?: EntitySourceType;\n    }\n\n    export interface QueryFilter {\n        Target?: QueryExpressionContainer[];\n        Condition: QueryExpressionContainer;\n    }\n\n    export interface QuerySortClause {\n        Expression: QueryExpressionContainer;\n        Direction: SortDirection;\n    }\n\n    export interface QueryExpressionContainer {\n        Name?: string;\n\n        SourceRef?: QuerySourceRefExpression;\n        Column?: QueryColumnExpression;\n        Measure?: QueryMeasureExpression;\n        Aggregation?: QueryAggregationExpression;\n        Hierarchy?: QueryHierarchyExpression;\n        HierarchyLevel?: QueryHierarchyLevelExpression;\n        PropertyVariationSource?: QueryPropertyVariationSourceExpression;\n\n        // Logical\n        And?: QueryBinaryExpression;\n        Between?: QueryBetweenExpression;\n        In?: QueryInExpression;\n        Or?: QueryBinaryExpression;\n        Comparison?: QueryComparisonExpression;\n        Not?: QueryNotExpression;\n        Contains?: QueryContainsExpression;\n        StartsWith?: QueryStartsWithExpression;\n        Exists?: QueryExistsExpression;\n\n        // Constants\n        Boolean?: QueryBooleanExpression;\n        DateTime?: QueryDateTimeExpression;\n        DateTimeSecond?: QueryDateTimeSecondExpression;\n        Date?: QueryDateTimeExpression;\n        Decimal?: QueryDecimalExpression;\n        Integer?: QueryIntegerExpression;\n        Null?: QueryNullExpression;\n        Number?: QueryNumberExpression;\n        String?: QueryStringExpression;\n        Literal?: QueryLiteralExpression;\n\n        DateSpan?: QueryDateSpanExpression;\n        DateAdd?: QueryDateAddExpression;\n        Now?: QueryNowExpression;\n\n        // Default Values\n        DefaultValue?: QueryDefaultValueExpression;\n        AnyValue?: QueryAnyValueExpression;\n\n        // TODO: Still need to add the rest of the QueryExpression types.\n    }\n\n    export interface QueryPropertyExpression {\n        Expression: QueryExpressionContainer;\n        Property: string;\n    }\n\n    export interface QueryColumnExpression extends QueryPropertyExpression {\n    }\n\n    export interface QueryMeasureExpression extends QueryPropertyExpression  {\n    }\n\n    export interface QuerySourceRefExpression {\n        Source: string;\n    }\n\n    export interface QueryAggregationExpression {\n        Function: QueryAggregateFunction;\n        Expression: QueryExpressionContainer;\n    }\n\n    export interface QueryHierarchyExpression {\n        Expression: QueryExpressionContainer;\n        Hierarchy: string;\n    }\n\n    export interface QueryHierarchyLevelExpression {\n        Expression: QueryExpressionContainer;\n        Level: string;\n    }\n\n    export interface QueryPropertyVariationSourceExpression {\n        Expression: QueryExpressionContainer;\n        Name: string;\n        Property: string;\n    }\n\n    export interface QueryBinaryExpression {\n        Left: QueryExpressionContainer;\n        Right: QueryExpressionContainer;\n    }\n\n    export interface QueryBetweenExpression {\n        Expression: QueryExpressionContainer;\n        LowerBound: QueryExpressionContainer;\n        UpperBound: QueryExpressionContainer;\n    }\n\n    export interface QueryInExpression {\n        Expressions: QueryExpressionContainer[];\n        Values: QueryExpressionContainer[][];\n    }\n\n    export interface QueryComparisonExpression extends QueryBinaryExpression {\n        ComparisonKind: QueryComparisonKind;\n    }\n\n    export interface QueryContainsExpression extends QueryBinaryExpression { }\n\n    export interface QueryNotExpression {\n        Expression: QueryExpressionContainer;\n    }\n\n    export interface QueryStartsWithExpression extends QueryBinaryExpression { }\n\n    export interface QueryExistsExpression {\n        Expression: QueryExpressionContainer;\n    }\n\n    export interface QueryConstantExpression<T> {\n        Value: T;\n    }\n\n    export interface QueryLiteralExpression {\n        Value: string;\n    }\n\n    export interface QueryBooleanExpression extends QueryConstantExpression<boolean> { }\n    export interface QueryDateTimeExpression extends QueryConstantExpression<string> { }\n    export interface QueryDateTimeSecondExpression extends QueryConstantExpression<string> { }\n    export interface QueryDecimalExpression extends QueryConstantExpression<number> { }\n    export interface QueryIntegerExpression extends QueryConstantExpression<number> { }\n    export interface QueryNumberExpression extends QueryConstantExpression<string> { }\n    export interface QueryNullExpression { }\n    export interface QueryStringExpression extends QueryConstantExpression<string> { }\n\n    export interface QueryDateSpanExpression {\n        TimeUnit: TimeUnit;\n        Expression: QueryExpressionContainer;\n    }\n\n    export interface QueryDateAddExpression {\n        Amount: number;\n        TimeUnit: TimeUnit;\n        Expression: QueryExpressionContainer;\n    }\n\n    export interface QueryNowExpression { }\n\n    export interface QueryDefaultValueExpression { }\n\n    export interface QueryAnyValueExpression { }\n\n    export enum TimeUnit {\n        Day = 0,\n        Week = 1,\n        Month = 2,\n        Year = 3,\n        Decade = 4,\n        Second = 5,\n        Minute = 6,\n        Hour = 7,\n    }\n\n    export enum QueryAggregateFunction {\n        Sum = 0,\n        Avg = 1,\n        Count = 2,\n        Min = 3,\n        Max = 4,\n        CountNonNull = 5,\n        Median = 6,\n        StandardDeviation = 7,\n        Variance = 8,\n    }\n\n    export enum QueryComparisonKind {\n        Equal = 0,\n        GreaterThan = 1,\n        GreaterThanOrEqual = 2,\n        LessThan = 3,\n        LessThanOrEqual = 4,\n    }\n\n    /** Defines semantic data types. */\n    export enum SemanticType {\n        None = 0x0,\n        Number = 0x1,\n        Integer = Number + 0x2,\n        DateTime = 0x4,\n        Time = 0x08,\n        Date = DateTime + 0x10,\n        Month = Integer + 0x20,\n        Year = Integer + 0x40,\n        YearAndMonth = 0x80,\n        MonthAndDay = 0x100,\n        Decade = Integer + 0x200,\n        YearAndWeek = 0x400,\n        String = 0x800,\n        Boolean = 0x1000,\n        Table = 0x2000,\n        Range = 0x4000,\n    }\n\n    export interface QueryMetadata {\n        Select?: SelectMetadata[];\n        Filters?: FilterMetadata[];\n    }\n\n    // TODO: Stop using SemanticType and ConceptualDataCategory here (may need server contract changes)\n    export interface SelectMetadata {\n        Restatement: string;\n        \n        /* SemanticType or PrimitiveType. */\n        Type?: number; \n\n        Format?: string;\n        DataCategory?: ConceptualDataCategory;\n\n        /** The select projection name. */\n        Name?: string;\n\n        /* If defined, this indicates the KPI class*/\n        kpiStatusGraphic?: string; // old version of kpi data\n\n        /* If defined, this indicates the KPI metadata*/\n        kpi?: DataViewKpiColumnMetadata;\n    }\n\n    export interface FilterMetadata {\n        Restatement: string;\n        Kind?: FilterKind;\n    }\n\n    export enum FilterKind {\n        Default,\n        Period,\n    }\n}","/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\n\nmodule powerbi.data {\n\n    /** Represents a projection from a query result. */\n    export interface QueryProjection {\n        /** Name of item in the semantic query Select clause. */\n        queryRef: string;\n\n        /** Optional format string. */\n        format?: string; // TODO: Deprecate this, and populate format string through objects instead.\n    }\n\n    /** A set of QueryProjections, grouped by visualization property, and ordered within that property. */\n    export interface QueryProjectionsByRole {\n        [roleName: string]: QueryProjectionCollection;\n    }\n\n    export class QueryProjectionCollection {\n        private items: QueryProjection[];\n\n        /* The activeProjectionReference is an array that contains all the items that we are grouping on in case of a drillable\n           role. For example, if you have a drill role with [Country, State, City] and the user drilled to state, the active items\n           will include [Country and State]. This means that the query will group on both country and state and the state \"last item\"\n           is the item that the user drilled to.\n        */\n        private _activeProjectionRefs: string[];\n        private _showAll: boolean;\n\n        public constructor(items: QueryProjection[], activeProjectionRefs?: string[], showAll?: boolean) {\n            debug.assertValue(items, 'items');\n\n            this.items = items;\n            this._activeProjectionRefs = activeProjectionRefs;\n            this._showAll = showAll;\n        }\n\n        /** Returns all projections in a mutable array. */\n        public all(): QueryProjection[] {\n            return this.items;\n        }\n\n        public get activeProjectionRefs(): string[] {\n            return this._activeProjectionRefs;\n        }\n\n        public set activeProjectionRefs(queryReferences: string[]) {\n            if (!_.isEmpty(queryReferences)) {\n                let queryRefs = this.items.map(val => val.queryRef);\n\n                for (let queryReference of queryReferences) {\n                    if (!_.contains(queryRefs, queryReference))\n                        return;\n                }\n\n                this._activeProjectionRefs = queryReferences;\n            }\n        }\n\n        public get showAll(): boolean {\n            return this._showAll;\n        }\n\n        public set showAll(value: boolean) {\n            this._showAll = value;\n        }\n\n        public addActiveQueryReference(queryRef: string): void {\n            if (!this._activeProjectionRefs)\n                this._activeProjectionRefs = [queryRef];\n            else\n                this._activeProjectionRefs.push(queryRef);\n        }\n\n        public getLastActiveQueryReference(): string {\n            if (!_.isEmpty(this._activeProjectionRefs)) {\n                return this._activeProjectionRefs[this._activeProjectionRefs.length - 1];\n            }\n        }\n\n        public clone(): QueryProjectionCollection {\n            return new QueryProjectionCollection(_.clone(this.items), _.clone(this._activeProjectionRefs), this._showAll);\n        }\n    }\n\n    export module QueryProjectionsByRole {\n        /** Clones the QueryProjectionsByRole. */\n        export function clone(roles: QueryProjectionsByRole): QueryProjectionsByRole {\n            if (!roles)\n                return roles;\n\n            let clonedRoles: QueryProjectionsByRole = {};\n\n            for (let roleName in roles)\n                clonedRoles[roleName] = roles[roleName].clone();\n\n            return clonedRoles;\n        }\n\n        /** Returns the QueryProjectionCollection for that role.  Even returns empty collections so that 'drillable' and 'activeProjection' fields are preserved. */\n        export function getRole(roles: QueryProjectionsByRole, name: string): QueryProjectionCollection {\n            debug.assertAnyValue(roles, 'roles');\n            debug.assertValue(name, 'name');\n\n            if (!roles)\n                return;\n\n            return roles[name];\n        }\n    }\n}","/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved. \n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *   \n *  The above copyright notice and this permission notice shall be included in \n *  all copies or substantial portions of the Software.\n *   \n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\n\nmodule powerbi {\n\n    export interface VisualElement {\n        DataRoles?: DataRole[];\n        Settings?: VisualElementSettings;\n    }\n\n    /** Defines common settings for a visual element. */\n    export interface VisualElementSettings {\n        DisplayUnitSystemType?: DisplayUnitSystemType;\n    }\n\n    export interface DataRole {\n        Name: string;\n        Projection: number;\n        isActive?: boolean;\n    }\n\n    /** The system used to determine display units used during formatting */\n    export enum DisplayUnitSystemType {\n        /** Default display unit system, which saves space by using units such as K, M, bn with PowerView rules for when to pick a unit. Suitable for chart axes. */\n        Default,\n\n        /** A verbose display unit system that will only respect the formatting defined in the model. Suitable for explore mode single-value cards. */\n        Verbose,\n\n        /**\n         * A display unit system that uses units such as K, M, bn if we have at least one of those units (e.g. 0.9M is not valid as it's less than 1 million).\n         * Suitable for dashboard tile cards\n         */\n        WholeUnits,\n\n        /**A display unit system that also contains Auto and None units for data labels*/\n        DataLabels,\n    }\n}\n\nmodule powerbi.data.contracts {\n\n    export interface DataViewSource {\n        data: any;\n        type?: string;\n    }\n}","/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved. \n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *   \n *  The above copyright notice and this permission notice shall be included in \n *  all copies or substantial portions of the Software.\n *   \n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\n\nmodule powerbi.data {\n    export module DataRoleHelper {\n        export function getMeasureIndexOfRole(grouped: DataViewValueColumnGroup[], roleName: string): number {\n            if (!_.isEmpty(grouped)) {\n                let firstGroup = grouped[0];\n                if (firstGroup.values && firstGroup.values.length > 0) {\n                    for (let i = 0, len = firstGroup.values.length; i < len; ++i) {\n                        let value = firstGroup.values[i];\n                        if (value && value.source) {\n                            if (hasRole(value.source, roleName))\n                                return i;\n                        }\n                    }\n                }\n            }\n            return -1;\n        }\n\n        export function getCategoryIndexOfRole(categories: DataViewCategoryColumn[], roleName: string): number {\n            if (!_.isEmpty(categories)) {\n                for (let i = 0, ilen = categories.length; i < ilen; i++) {\n                    if (hasRole(categories[i].source, roleName))\n                        return i;\n                }\n            }\n            return -1;\n        }\n\n        export function hasRole(column: DataViewMetadataColumn, name: string): boolean {\n            let roles = column.roles;\n            return roles && roles[name];\n        }\n\n        export function hasRoleInDataView(dataView: DataView, name: string): boolean {\n            return dataView != null\n                && dataView.metadata != null\n                && dataView.metadata.columns\n                && _.any(dataView.metadata.columns, c => c.roles && c.roles[name] !== undefined);\n        }\n    }\n}","/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved. \n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *   \n *  The above copyright notice and this permission notice shall be included in \n *  all copies or substantial portions of the Software.\n *   \n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\n\nmodule powerbi.data {\n    import DataRoleHelper = powerbi.data.DataRoleHelper;\n\n    export function createIDataViewCategoricalReader(dataView): IDataViewCategoricalReader {\n        return new DataViewCategoricalReader(dataView);\n    }\n\n    export interface IDataViewCategoricalReader {\n        // Category functions\n        hasCategories(): boolean;\n        getCategoryCount(): number;\n        getCategoryValues(roleName: string): any;\n        getCategoryValue(categoryIndex: number, roleName: string): any;\n        getCategoryColumn(roleName: string): DataViewCategoryColumn;\n        getCategoryMetadataColumn(roleName: string): DataViewMetadataColumn;\n        getCategoryDisplayName(roleName: string): string;\n        hasCompositeCategories(): boolean;\n        hasCategoryWithRole(roleName: string): boolean;\n        getCategoryObjects(categoryIndex: number, roleName: string): DataViewObjects;\n        // Value functions\n        hasValues(roleName: string): boolean;\n        getValues(roleName: string, seriesIndex?: number): any[];\n        getValue(roleName: string, categoryIndex: number, seriesIndex?: number): any;\n        /**\n         * Obtains the first non-null value for the given role name and category index.\n         * It should mainly be used for values that are expected to be the same across\n         * series, but avoids false nulls when the data is sparse.\n         */\n        getFirstNonNullValueForCategory(roleName: string, categoryIndex: number): any;\n        getMeasureQueryName(roleName: string): string;\n        getValueColumn(roleName: string, seriesIndex?: number): DataViewValueColumn;\n        getValueMetadataColumn(roleName: string, seriesIndex?: number): DataViewMetadataColumn;\n        getValueDisplayName(roleName: string, seriesIndex?: number): string;\n        // Series Methods\n        hasDynamicSeries(): boolean;\n        getSeriesCount(): number;\n        getSeriesObjects(seriesIndex: number): DataViewObjects;\n        getSeriesColumn(seriesIndex: number): DataViewValueColumn;\n        getSeriesColumns(): DataViewValueColumns;\n        getSeriesMetadataColumn(): DataViewMetadataColumn;\n        getSeriesColumnIdentifier(): powerbi.data.ISQExpr[];\n        getSeriesName(seriesIndex: number): PrimitiveValue;\n        getSeriesDisplayName(): string;\n    }\n\n    class DataViewCategoricalReader implements IDataViewCategoricalReader {\n        private dataView: DataView;\n        private categories: DataViewCategoryColumn[];\n        private grouped: DataViewValueColumnGroup[];\n        private dataHasDynamicSeries: boolean;\n        \n        // Validation variables\n        private hasValidCategories: boolean;\n        private hasAnyValidValues: boolean;\n        private hasCategoryObjects: boolean;\n\n        constructor(dataView: DataView) {\n            debug.assertValue(dataView, 'dataView');\n            this.dataView = dataView;\n            // Validate categories\n            let categorical: DataViewCategorical;\n            if (dataView)\n                categorical = dataView.categorical;\n            let categories: DataViewCategoryColumn[];\n            if (categorical)\n                categories = this.categories = categorical.categories;\n            this.hasValidCategories = !_.isEmpty(categories);\n            if (this.hasValidCategories) {\n                this.hasCategoryObjects = !!(categories[0].objects);\n            }\n\n            // Validate values\n            let values: DataViewValueColumns;\n            if (categorical)\n                values = categorical.values;\n            let hasAnyValidValues = this.hasAnyValidValues = !_.isEmpty(values);\n            if (hasAnyValidValues)\n                this.grouped = dataView.categorical.values.grouped();\n\n            if (this.hasAnyValidValues)\n                this.dataHasDynamicSeries = !!this.dataView.categorical.values.source;\n        }\n\n        // Category methods\n        \n        public hasCategories(): boolean {\n            return this.hasValidCategories;\n        }\n\n        public getCategoryCount(): number {\n            if (this.hasValidCategories)\n                return this.categories[0].values.length;\n            else\n                return 0;\n        }\n\n        public getCategoryValues(roleName: string): any {\n            if (this.hasValidCategories) {\n                let categories = this.getCategoryFromRole(roleName);\n                return categories ? categories.values : undefined;\n            }\n        }\n\n        public getCategoryValue(categoryIndex: number, roleName: string): any {\n            if (this.hasValidCategories) {\n                let categories = this.getCategoryFromRole(roleName);\n                return categories ? categories.values[categoryIndex] : undefined;\n            }\n        }\n\n        public getCategoryColumn(roleName: string): DataViewCategoryColumn {\n            if (this.hasValidCategories)\n                return this.getCategoryFromRole(roleName);\n        }\n\n        public getCategoryMetadataColumn(roleName: string): DataViewMetadataColumn {\n            if (this.hasValidCategories) {\n                let categories = this.getCategoryFromRole(roleName);\n                return categories ? categories.source : undefined;\n            }\n        }\n\n        public getCategoryDisplayName(roleName: string): string {\n            if (this.hasValidCategories) {\n                let targetColumn = this.getCategoryColumn(roleName);\n                if (targetColumn && targetColumn.source) {\n                    return targetColumn.source.displayName;\n                }\n            }\n        }\n\n        public hasCompositeCategories(): boolean {\n            if (this.hasValidCategories)\n                return this.categories.length > 1;\n        }\n\n        public hasCategoryWithRole(roleName: string): boolean {\n            return DataRoleHelper.getCategoryIndexOfRole(this.categories, roleName) !== -1;\n        }\n\n        public getCategoryObjects(categoryIndex: number, roleName: string): DataViewObjects {\n            if (this.hasValidCategories && this.hasCategoryObjects)\n                return this.getCategoryFromRole(roleName).objects[categoryIndex];\n        }\n\n        private getCategoryFromRole(roleName: string): DataViewCategoryColumn {\n            let categories = this.categories;\n            return categories[DataRoleHelper.getCategoryIndexOfRole(categories, roleName)];\n        }\n\n        // Value and measure methods\n\n        public hasValues(roleName: string): boolean {\n            return this.getMeasureIndex(roleName) !== -1;\n        }\n\n        public getValues(roleName: string, seriesIndex: number = 0): any[] {\n            let measureIndex = this.getMeasureIndex(roleName);\n            if (this.hasAnyValidValues && measureIndex !== -1)\n                return this.grouped[seriesIndex].values[measureIndex].values;\n        }\n\n        public getValue(roleName: string, categoryIndex: number, seriesIndex?: number): any {\n            if (this.hasAnyValidValues) {\n                let values = this.getValues(roleName, seriesIndex);\n                return values ? values[categoryIndex] : undefined;\n            }\n        }\n\n        public getFirstNonNullValueForCategory(roleName: string, categoryIndex: number): any {\n            if (this.hasAnyValidValues) {\n                if (!this.dataHasDynamicSeries) {\n                    debug.assert(this.grouped.length === 1, \"getFirstNonNullValueForCategory shouldn't be called if you have a static series\");\n                    return this.getValue(roleName, categoryIndex);\n                }\n                for (let seriesIndex = 0, seriesCount = this.grouped.length; seriesIndex < seriesCount; seriesIndex++) {\n                    let values = this.getValues(roleName, seriesIndex);\n                    let value = !_.isEmpty(values) ? values[categoryIndex] : undefined;\n                    if (value != null) {\n                        return value;\n                    }\n                }\n            }\n        }\n\n        public getMeasureQueryName(roleName: string): string {\n            let measureIndex = this.getMeasureIndex(roleName);\n            if (this.hasAnyValidValues && measureIndex !== -1)\n                return this.grouped[0].values[measureIndex].source.queryName;\n        }\n\n        public getValueColumn(roleName: string, seriesIndex: number = 0): DataViewValueColumn {\n            let measureIndex = this.getMeasureIndex(roleName);\n            if (this.hasAnyValidValues && measureIndex !== -1)\n                return this.grouped[seriesIndex].values[measureIndex];\n        }\n\n        public getValueMetadataColumn(roleName: string, seriesIndex: number = 0): DataViewMetadataColumn {\n            let measureIndex = this.getMeasureIndex(roleName);\n            if (this.hasAnyValidValues && measureIndex !== -1)\n                return this.grouped[seriesIndex].values[measureIndex].source;\n        }\n\n        public getValueDisplayName(roleName: string, seriesIndex?: number): string {\n            if (this.hasAnyValidValues) {\n                let targetColumn = this.getValueColumn(roleName, seriesIndex);\n                if (targetColumn && targetColumn.source) {\n                    return targetColumn.source.displayName;\n                }\n            }\n        }\n\n        private getMeasureIndex(roleName: string): number {\n            return DataRoleHelper.getMeasureIndexOfRole(this.grouped, roleName);\n        }\n\n        // Series methods\n\n        public hasDynamicSeries(): boolean {\n            return this.dataHasDynamicSeries;\n        }\n\n        public getSeriesCount(): number {\n            if (this.hasAnyValidValues)\n                return this.grouped.length;\n        }\n\n        public getSeriesObjects(seriesIndex: number): DataViewObjects {\n            if (this.hasAnyValidValues)\n                return this.grouped[seriesIndex].objects;\n        }\n\n        public getSeriesColumn(seriesIndex: number): DataViewValueColumn {\n            if (this.hasAnyValidValues)\n                return this.dataView.categorical.values[seriesIndex];\n        }\n\n        public getSeriesColumns(): DataViewValueColumns {\n            if (this.hasAnyValidValues)\n                return this.dataView.categorical.values;\n        }\n\n        public getSeriesMetadataColumn(): DataViewMetadataColumn {\n            if (this.hasAnyValidValues)\n                return this.dataView.categorical.values.source;\n        }\n\n        public getSeriesColumnIdentifier(): powerbi.data.ISQExpr[] {\n            if (this.hasAnyValidValues)\n                return this.dataView.categorical.values.identityFields;\n        }\n\n        public getSeriesName(seriesIndex: number): PrimitiveValue {\n            if (this.hasAnyValidValues)\n                return this.grouped[seriesIndex].name;\n        }\n\n        public getSeriesDisplayName(): string {\n            if (this.hasAnyValidValues && this.dataHasDynamicSeries)\n                return this.dataView.categorical.values.source.displayName;\n        }\n    }\n}","/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved. \n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *   \n *  The above copyright notice and this permission notice shall be included in \n *  all copies or substantial portions of the Software.\n *   \n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\n\nmodule powerbi.data {\n    import inheritSingle = Prototype.inheritSingle;\n    import RoleKindByQueryRef = DataViewAnalysis.RoleKindByQueryRef;\n\n    export module DataViewConcatenateCategoricalColumns {\n\n        /* Represents a collection of DataViewCategoryColumn that are tied to the same role. */\n        interface CategoryColumnsByRole {\n            /* The name of the role shared by all the objects in the categories property. */\n            roleName: string;\n\n            /**\n             * The list of columns that are tied to roleName, in the same order as they appear\n             * in the categories property of their owner DataViewCategorical object.\n             */\n            categories: DataViewCategoryColumn[];\n        }\n\n        export function detectAndApply(dataView: DataView, roleMappings: DataViewMapping[], projectionOrdering: DataViewProjectionOrdering, selects: DataViewSelectTransform[], projectionActiveItems: DataViewProjectionActiveItems): DataView {\n            debug.assertValue(dataView, 'dataView');\n            debug.assertAnyValue(roleMappings, 'roleMappings');\n            debug.assertAnyValue(projectionOrdering, 'projectionOrdering');\n\n            let result = dataView;\n            let dataViewCategorical: DataViewCategorical = dataView.categorical;\n\n            if (dataViewCategorical) {\n                let concatenationSource: CategoryColumnsByRole = detectCategoricalRoleForHierarchicalGroup(dataViewCategorical, dataView.metadata, roleMappings, selects, projectionActiveItems);\n\n                if (concatenationSource) {\n                    let columnsSortedByProjectionOrdering = sortColumnsByProjectionOrdering(projectionOrdering, concatenationSource.roleName, concatenationSource.categories);\n                    if (columnsSortedByProjectionOrdering.length >= 2) {\n                        result = applyConcatenation(dataView, concatenationSource.roleName, columnsSortedByProjectionOrdering);\n                    }\n                }\n            }\n\n            return result;\n        }\n\n        /**\n         * Returns the role and its assocated category columns (from dataViewCategorical.categories)\n         * that should be concatenated for the case of hierarchical group.\n         *\n         * Note: In the future if we support sibling hierarchical groups in categorical,\n         * change the return type to CategoryColumnsByRole[] and update detection logic.\n         */\n        function detectCategoricalRoleForHierarchicalGroup(dataViewCategorical: DataViewCategorical, metadata: DataViewMetadata, dataViewMappings: DataViewMapping[], selects: DataViewSelectTransform[], projectionActiveItems: DataViewProjectionActiveItems): CategoryColumnsByRole {\n            debug.assertValue(dataViewCategorical, 'dataViewCategorical');\n            debug.assertAnyValue(dataViewMappings, 'dataViewMappings');\n\n            let result: CategoryColumnsByRole;\n\n            // For now, just handle the case where roleMappings.length === 1.\n            // In the future, if there is more than 1, we might want to proceed if, \n            // for example, all role mappings map category to the same role name and they all have { max: 1 } conditions.\n            let roleKinds: RoleKindByQueryRef = DataViewSelectTransform.createRoleKindFromMetadata(selects, metadata);\n            let projections = DataViewSelectTransform.projectionsFromSelects(selects, projectionActiveItems);\n            let roleMappings = DataViewAnalysis.chooseDataViewMappings(projections, dataViewMappings, roleKinds).supportedMappings;\n\n            let roleMappingForCategorical: DataViewMapping = (roleMappings && roleMappings.length === 1 && !!roleMappings[0].categorical) ? roleMappings[0] : undefined;\n            if (roleMappingForCategorical) {\n                let roleNamesForCategory: string[] = getAllRolesInCategories(roleMappingForCategorical.categorical);\n\n                // With \"list\" in role mapping, is it possible to have multiple role names for category.\n                // For now, proceed to concatenate category columns only when categories are bound to 1 Role.\n                // We can change this if we want to support independent (sibling) group hierarchies in categorical.\n                if (roleNamesForCategory && roleNamesForCategory.length === 1) {\n                    let targetRoleName = roleNamesForCategory[0];\n\n                    let isVisualExpectingMaxOneCategoryColumn: boolean =\n                        !_.isEmpty(roleMappingForCategorical.conditions) &&\n                        _.every(roleMappingForCategorical.conditions, condition => condition[targetRoleName] && condition[targetRoleName].max === 1);\n\n                    if (isVisualExpectingMaxOneCategoryColumn) {\n                        let categoriesForTargetRole: DataViewCategoryColumn[] = _.filter(\n                            dataViewCategorical.categories,\n                            (categoryColumn: DataViewCategoryColumn) => categoryColumn.source.roles && !!categoryColumn.source.roles[targetRoleName]);\n\n                        // At least for now, we expect all category columns for the same role to have the same number of value entries.\n                        // If that's not the case, we won't run the concatenate logic for that role at all...\n                        let areValuesCountsEqual: boolean = _.every(\n                            categoriesForTargetRole,\n                            (categoryColumn: DataViewCategoryColumn) => categoryColumn.values.length === categoriesForTargetRole[0].values.length);\n\n                        // Also, there is no need to concatenate columns unless there is actually more than one column\n                        if (areValuesCountsEqual &&\n                            categoriesForTargetRole.length >= 2) {\n                            result = {\n                                roleName: targetRoleName,\n                                categories: categoriesForTargetRole\n                            };\n                        }\n                    }\n                }\n            }\n\n            return result;\n        }\n        \n        /**\n         * Returns the array of role names that are mapped to categorical categories.\n         * Returns an empty array if none exists.\n         */\n        function getAllRolesInCategories(categoricalRoleMapping: DataViewCategoricalMapping): string[] {\n            debug.assertValue(categoricalRoleMapping, 'categoricalRoleMapping');\n\n            let roleNames: string[] = [];\n            DataViewMapping.visitCategoricalCategories(\n                categoricalRoleMapping.categories,\n                {\n                    visitRole: (roleName: string) => {\n                        roleNames.push(roleName);\n                    }\n                });\n\n            return roleNames;\n        }\n\n        function applyConcatenation(dataView: DataView, roleName: string, columnsSortedByProjectionOrdering: DataViewCategoryColumn[]): DataView {\n            debug.assertValue(dataView, 'dataView');\n            debug.assertValue(roleName, 'roleName');\n            debug.assert(columnsSortedByProjectionOrdering && columnsSortedByProjectionOrdering.length >= 2, 'columnsSortedByProjectionOrdering && columnsSortedByProjectionOrdering.length >= 2');\n\n            let concatenatedValues: string[] = concatenateValues(columnsSortedByProjectionOrdering);\n\n            let concatenatedColumnMetadata: DataViewMetadataColumn = createConcatenatedColumnMetadata(roleName, columnsSortedByProjectionOrdering);\n            let transformedDataView = inheritSingle(dataView);\n            addToMetadata(transformedDataView, concatenatedColumnMetadata);\n\n            let concatenatedCategoryColumn: DataViewCategoryColumn = createConcatenatedCategoryColumn(\n                columnsSortedByProjectionOrdering,\n                concatenatedColumnMetadata,\n                concatenatedValues);\n\n            let dataViewCategorical: DataViewCategorical = dataView.categorical;\n\n            let transformedCategoricalCategories: DataViewCategoryColumn[] = _.difference(dataViewCategorical.categories, columnsSortedByProjectionOrdering);\n            transformedCategoricalCategories.push(concatenatedCategoryColumn);\n\n            let transformedCategorical: DataViewCategorical = inheritSingle(dataViewCategorical);\n            transformedCategorical.categories = transformedCategoricalCategories;\n            transformedDataView.categorical = transformedCategorical;\n\n            return transformedDataView;\n        }\n\n        function concatenateValues(columnsSortedByProjectionOrdering: DataViewCategoryColumn[]): string[] {\n            debug.assertValue(columnsSortedByProjectionOrdering, 'columnsSortedByProjectionOrdering');\n\n            let concatenatedValues: string[] = [];\n\n            // concatenate the values in dataViewCategorical.categories[0..length-1].values[j], and store it in combinedValues[j]\n            for (let categoryColumn of columnsSortedByProjectionOrdering) {\n                for (let i = 0, len = categoryColumn.values.length; i < len; i++) {\n                    // TODO VSTS 6842107: need to clean up this value concatenation logic\n                    // This code does not have access to valueFormatter module.  So first, move valueFormatter.getFormatString(...)\n                    // and/or valueFormatter.formatValueColumn(...) to somewhere near DataViewObjects.ts, and then use it from here.\n                    let valueToAppend = categoryColumn.values && categoryColumn.values[i];\n                    concatenatedValues[i] = (concatenatedValues[i] === undefined) ? (valueToAppend + '') : (valueToAppend + ' ' + concatenatedValues[i]);\n                }\n            }\n\n            return concatenatedValues;\n        }\n\n        /**\n        * Returns a new array of elements from columns as they are ordered for the specified roleName in the specified projectionOrdering.\n        */\n        function sortColumnsByProjectionOrdering(projectionOrdering: DataViewProjectionOrdering, roleName: string, columns: DataViewCategoryColumn[]): DataViewCategoryColumn[] {\n            debug.assertAnyValue(projectionOrdering, 'projectionOrdering');\n            debug.assertValue(roleName, 'roleName');\n            debug.assertValue(columns, 'columns');\n\n            let columnsInProjectionOrdering: DataViewCategoryColumn[];\n\n            if (projectionOrdering) {\n                // the numeric values in projectionOrdering correspond to the index property of DataViewMetadataColumn\n                let columnsByIndex: { [index: number]: DataViewCategoricalColumn } = {};\n                for (let column of columns) {\n                    if (column.source.roles[roleName]) {\n                        debug.assert(!columnsByIndex[column.source.index], 'The specified columns should not contain multiple columns with same index: ' + column.source.index);\n                        columnsByIndex[column.source.index] = column;\n                    }\n                }\n\n                let columnIndicesInProjectionOrdering: number[] = projectionOrdering[roleName];\n\n                columnsInProjectionOrdering = _.chain(columnIndicesInProjectionOrdering)\n                    .map(columnIndex => columnsByIndex[columnIndex])\n                    .filter((column: DataViewCategoricalColumn) => !!column)\n                    .value();\n            }\n            else {\n                // If projectionOrder is unspecified, just return the columns for the specified role in their current order\n                columnsInProjectionOrdering = _.filter(columns, column => column.source.roles[roleName]);\n            }\n\n            return columnsInProjectionOrdering;\n        }\n\n        /**\n         * Creates the column metadata that will back the column with the concatenated values. \n         */\n        function createConcatenatedColumnMetadata(roleName: string, columnsSortedByProjectionOrdering: DataViewCategoryColumn[]): DataViewMetadataColumn {\n            debug.assertValue(roleName, 'roleName');\n            debug.assertNonEmpty(columnsSortedByProjectionOrdering, 'columnsSortedByProjectionOrdering');\n\n            let concatenatedDisplayName: string;\n\n            let columnForCurrentDrillLevel = _.last(columnsSortedByProjectionOrdering);\n\n            // By the end of the for-loop, consistentIsMeasure will be:\n            // - true if _.every(categoryColumn, c => c.source.isMeasure === true), or else\n            // - false if _.every(categoryColumn, c => c.source.isMeasure === false), or else\n            // - undefined.\n            let consistentIsMeasure: boolean = columnForCurrentDrillLevel.source.isMeasure;\n\n            for (let categoryColumn of columnsSortedByProjectionOrdering) {\n                let columnSource: DataViewMetadataColumn = categoryColumn.source;\n\n                concatenatedDisplayName = (concatenatedDisplayName == null) ? columnSource.displayName : (columnSource.displayName + ' ' + concatenatedDisplayName);\n\n                if (consistentIsMeasure !== columnSource.isMeasure) {\n                    consistentIsMeasure = undefined;\n                }\n            }\n\n            let newRoles: { [name: string]: boolean } = {};\n            newRoles[roleName] = true;\n\n            let newColumnMetadata: DataViewMetadataColumn = {\n                displayName: concatenatedDisplayName,\n                roles: newRoles,\n                type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Text)\n            };\n\n            if (consistentIsMeasure !== undefined) {\n                newColumnMetadata.isMeasure = consistentIsMeasure;\n            }\n\n            // TODO VSTS 6842046: Investigate whether we should change that property to mandatory or change the Chart visual code.\n            // If queryName is not set at all, the column chart visual will only render column for the first group instance.\n            // If queryName is set to any string other than columnForCurrentDrillLevel.source.queryName, then drilldown by group instance is broken (VSTS 6847879).\n            newColumnMetadata.queryName = columnForCurrentDrillLevel.source.queryName;\n\n            return newColumnMetadata;\n        }\n\n        function addToMetadata(transformedDataView: DataView, newColumn: DataViewMetadataColumn): void {\n            debug.assertValue(transformedDataView, 'transformedDataView');\n            debug.assertValue(newColumn, 'newColumn');\n\n            let transformedColumns = inheritSingle(transformedDataView.metadata.columns);\n            transformedColumns.push(newColumn);\n\n            let transformedMetadata = inheritSingle(transformedDataView.metadata);\n            transformedMetadata.columns = transformedColumns;\n\n            transformedDataView.metadata = transformedMetadata;\n        }\n\n        function createConcatenatedCategoryColumn(\n            sourceColumnsSortedByProjectionOrdering: DataViewCategoryColumn[],\n            columnMetadata: DataViewMetadataColumn,\n            concatenatedValues: string[]): DataViewCategoryColumn {\n            debug.assert(sourceColumnsSortedByProjectionOrdering && sourceColumnsSortedByProjectionOrdering.length >= 2, 'sourceColumnsSortedByProjectionOrdering && sourceColumnsSortedByProjectionOrdering.length >= 2');\n\n            let newCategoryColumn: DataViewCategoryColumn = {\n                source: columnMetadata,\n                values: concatenatedValues\n            };\n\n            // We expect every DataViewCategoryColumn in concatenationSourceColumns to have the same set of identities, always.\n            // So, we'll just take the identities and identityFields from the first column\n            let firstColumn = sourceColumnsSortedByProjectionOrdering[0];\n\n            if (firstColumn.identity) {\n                newCategoryColumn.identity = firstColumn.identity;\n            }\n\n            if (firstColumn.identityFields) {\n                newCategoryColumn.identityFields = firstColumn.identityFields;\n            }\n\n            // I doubt that any firstColumn.objects property would still make sense in the new column,\n            // so I won't copy that over for now.\n\n            return newCategoryColumn;\n        }\n    }\n}","/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved. \n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *   \n *  The above copyright notice and this permission notice shall be included in \n *  all copies or substantial portions of the Software.\n *   \n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\n\nmodule powerbi {\n    export const enum RoleItemContext {\n        CategoricalValue,\n        CategoricalValueGroup,\n    }\n\n    export interface IDataViewMappingVisitor {\n        visitRole(role: string, context?: RoleItemContext): void;\n        visitReduction?(reductionAlgorithm?: ReductionAlgorithm): void;\n    }\n\n    export module DataViewMapping {\n        export function visitMapping(mapping: DataViewMapping, visitor: IDataViewMappingVisitor): void {\n            debug.assertValue(mapping, 'mapping');\n            debug.assertValue(visitor, 'visitor');\n\n            let categorical = mapping.categorical;\n            if (categorical)\n                visitCategorical(categorical, visitor);\n\n            let table = mapping.table;\n            if (table)\n                visitTable(table, visitor);\n\n            let matrix = mapping.matrix;\n            if (matrix)\n                visitMatrix(matrix, visitor);\n\n            let tree = mapping.tree;\n            if (tree)\n                visitTree(tree, visitor);\n            \n            let single = mapping.single;\n            if (single)\n                visitSingle(single, visitor);\n        }\n\n        export function visitCategorical(mapping: DataViewCategoricalMapping, visitor: IDataViewMappingVisitor): void {\n            debug.assertValue(mapping, 'mapping');\n            debug.assertValue(visitor, 'visitor');\n\n            visitCategoricalCategories(mapping.categories, visitor);\n\n            let values = mapping.values;\n            visitCategoricalValues(values, visitor);\n            visitGrouped(<DataViewGroupedRoleMapping>values, visitor);\n        }\n\n        export function visitCategoricalCategories(mapping: DataViewRoleMappingWithReduction | DataViewListRoleMappingWithReduction, visitor: IDataViewMappingVisitor): void {\n            debug.assertAnyValue(mapping, 'mapping');\n            debug.assertValue(visitor, 'visitor');\n\n            if (mapping) {\n                visitBind(<DataViewRoleBindMapping>mapping, visitor);\n                visitFor(<DataViewRoleForMapping>mapping, visitor);\n                visitList(<DataViewListRoleMapping>mapping, visitor);\n\n                visitReduction(mapping, visitor);\n            }\n        }\n\n        export function visitCategoricalValues(mapping: DataViewRoleMapping | DataViewGroupedRoleMapping | DataViewListRoleMapping, visitor: IDataViewMappingVisitor): void {\n            debug.assertAnyValue(mapping, 'mapping');\n            debug.assertValue(visitor, 'visitor');\n\n            if (mapping) {\n                visitBind(<DataViewRoleBindMapping>mapping, visitor, RoleItemContext.CategoricalValue);\n                visitFor(<DataViewRoleForMapping>mapping, visitor, RoleItemContext.CategoricalValue);\n                visitList(<DataViewListRoleMapping>mapping, visitor, RoleItemContext.CategoricalValue);\n\n                let group = (<DataViewGroupedRoleMapping>mapping).group;\n                if (group) {\n                    for (let item of group.select) {\n                        visitBind(<DataViewRoleBindMapping>item, visitor, RoleItemContext.CategoricalValueGroup);\n                        visitFor(<DataViewRoleForMapping>item, visitor, RoleItemContext.CategoricalValueGroup);\n                    }\n                }\n            }\n        }\n\n        export function visitTable(mapping: DataViewTableMapping, visitor: IDataViewMappingVisitor): void {\n            debug.assertValue(mapping, 'mapping');\n            debug.assertValue(visitor, 'visitor');\n\n            let rows = mapping.rows;\n            visitBind(<DataViewRoleBindMapping>rows, visitor);\n            visitFor(<DataViewRoleForMapping>rows, visitor);\n            visitList(<DataViewListRoleMapping>rows, visitor);\n\n            visitReduction(rows, visitor);\n        }\n\n        function visitMatrix(mapping: DataViewMatrixMapping, visitor: IDataViewMappingVisitor): void {\n            debug.assertValue(mapping, 'mapping');\n            debug.assertValue(visitor, 'visitor');\n\n            visitMatrixItems(mapping.rows, visitor);\n            visitMatrixItems(mapping.columns, visitor);\n            visitMatrixItems(mapping.values, visitor);\n        }\n\n        export function visitMatrixItems(mapping: DataViewRoleForMappingWithReduction | DataViewListRoleMappingWithReduction, visitor: IDataViewMappingVisitor): void {\n            debug.assertAnyValue(mapping, 'mapping');\n            debug.assertValue(visitor, 'visitor');\n\n            if (mapping) {\n                visitFor(<DataViewRoleForMapping>mapping, visitor);\n                visitList(<DataViewListRoleMapping>mapping, visitor);\n\n                visitReduction(mapping, visitor);\n            }\n        }\n\n        function visitTree(mapping: DataViewTreeMapping, visitor: IDataViewMappingVisitor): void {\n            debug.assertValue(mapping, 'mapping');\n            debug.assertValue(visitor, 'visitor');\n\n            visitTreeNodes(mapping.nodes, visitor);\n            visitTreeValues(mapping.values, visitor);\n        }\n\n        export function visitTreeNodes(mapping: DataViewRoleForMappingWithReduction, visitor: IDataViewMappingVisitor): void {\n            debug.assertAnyValue(mapping, 'mapping');\n            debug.assertValue(visitor, 'visitor');\n\n            if (mapping) {\n                visitFor(mapping, visitor);\n\n                visitReduction(mapping, visitor);\n            }\n        }\n\n        export function visitTreeValues(mapping: DataViewRoleForMapping, visitor: IDataViewMappingVisitor): void {\n            debug.assertAnyValue(mapping, 'mapping');\n            debug.assertValue(visitor, 'visitor');\n\n            if (mapping) {\n                visitFor(mapping, visitor);\n            }\n        }\n\n        function visitBind(mapping: DataViewRoleBindMapping, visitor: IDataViewMappingVisitor, context?: RoleItemContext): void {\n            debug.assertValue(mapping, 'mapping');\n            debug.assertValue(visitor, 'visitor');\n\n            let bind = mapping.bind;\n            if (bind) {\n                if (context != null)\n                    visitor.visitRole(bind.to, context);\n                else\n                    visitor.visitRole(bind.to);\n            }\n        }\n\n        function visitFor(mapping: DataViewRoleForMapping, visitor: IDataViewMappingVisitor, context?: RoleItemContext): void {\n            debug.assertValue(mapping, 'mapping');\n            debug.assertValue(visitor, 'visitor');\n\n            let forValue = mapping.for;\n            if (forValue) {\n                if (context != null)\n                    visitor.visitRole(forValue.in, context);\n                else\n                    visitor.visitRole(forValue.in);\n            }\n        }\n\n        function visitList(mapping: DataViewListRoleMapping, visitor: IDataViewMappingVisitor, context?: RoleItemContext): void {\n            debug.assertValue(mapping, 'mapping');\n            debug.assertValue(visitor, 'visitor');\n\n            let select = mapping.select;\n            if (select) {\n                for (let item of select) {\n                    visitBind(<DataViewRoleBindMapping>item, visitor, context);\n                    visitFor(<DataViewRoleForMapping>item, visitor, context);\n                }\n            }\n        }\n\n        export function visitGrouped(mapping: DataViewGroupedRoleMapping, visitor: IDataViewMappingVisitor): void {\n            debug.assertAnyValue(mapping, 'mapping');\n            debug.assertValue(visitor, 'visitor');\n\n            if (!mapping)\n                return;\n\n            let group = mapping.group;\n            if (group) {\n                visitor.visitRole(group.by);\n\n                visitReduction(group, visitor);\n            }\n        }\n\n        function visitReduction(mapping: HasReductionAlgorithm, visitor: IDataViewMappingVisitor): void {\n            debug.assertValue(mapping, 'mapping');\n            debug.assertValue(visitor, 'visitor');\n\n            if (visitor.visitReduction) {\n                let reductionAlgorithm = mapping.dataReductionAlgorithm;\n                if (reductionAlgorithm) {\n                    visitor.visitReduction(reductionAlgorithm);\n                }\n            }\n        }\n\n        function visitSingle(mapping: DataViewSingleMapping, visitor: IDataViewMappingVisitor): void {\n            debug.assertValue(mapping, 'mapping');\n            debug.assertValue(visitor, 'visitor');\n\n            visitor.visitRole(mapping.role);\n        }\n    }\n}","/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\n\nmodule powerbi.data {\n    import inheritSingle = Prototype.inheritSingle;\n\n    export interface DataViewNormalizeValuesApplyOptions {\n        dataview: DataView;\n        dataViewMappings: DataViewMapping[];\n        dataRoles: VisualDataRole[];\n    }\n\n    /**\n     * Interface of a function for deciding whether a column is tied to any role that has required type(s).\n     *\n     * @param columnIndex the position of the column in the select statement, i.e. the same semantic as the index property on the DataViewMetadataColumn interface.\n     * @returns true iff the column in the specified columnIndex is tied to any role that has required type(s), i.e. if the value in that column potentially needs to get normalized.\n     */\n    export interface IMetadataColumnFilter {\n        (columnIndex: number): boolean;\n    }\n\n    /**\n     * Returns true iff the specified value is of matching type as required by the role assigned to the column associated with this filter object.\n     */\n    export interface IColumnValueFilter {\n        (value: any): boolean;\n    }\n\n    /**\n     * Interface of a function for deciding whether a value needs to be normalized due to not having a matching type as required by a role tied to the column associated with the specified columnIndex.\n     *\n     * @param columnIndex the position of the column in the select statement, i.e. the same semantic as the index property on the DataViewMetadataColumn interface.\n     * @returns false iff the specified value needs to be normalized due to not having a matching type as required by a role tied to the column associated with the specified columnIndex.\n     */\n    export interface IValueFilter {\n        (columnIndex: number, value: any): boolean;\n    }\n\n    export module DataViewNormalizeValues {\n        export function apply(options: DataViewNormalizeValuesApplyOptions): void {\n            debug.assertValue(options, 'options');\n\n            let rolesToNormalize = _.filter(options.dataRoles, role => !_.isEmpty(role.requiredTypes));\n\n            filterVariantMeasures(options.dataview, options.dataViewMappings, rolesToNormalize);\n        }\n\n        export function filterVariantMeasures(dataview: DataView, dataViewMappings: DataViewMapping[], rolesToNormalize: VisualDataRole[]): void {\n            debug.assertValue(dataview, 'dataview');\n\n            // Don't perform this unless we actually have dataViewMappings and variant measures to suppress\n            // When we switch to lazy per-visual DataView creation, we'll be able to remove this check.\n            if (_.isEmpty(dataViewMappings) || _.isEmpty(rolesToNormalize))\n                return;\n\n            let columnFilter = generateMetadataColumnFilter(dataview.metadata.columns, rolesToNormalize);\n            let valueFilter = generateValueFilter(dataview.metadata.columns, rolesToNormalize);\n\n            let usedMappings = {};\n            for (let dataViewMapping of dataViewMappings) {\n                // Get dataview specified in mappings which are also in dataview\n                for (let dataViewMappingProp in dataViewMapping) {\n                    if (dataview[dataViewMappingProp] != null)\n                        usedMappings[dataViewMappingProp] = true;\n                }\n            }\n\n            if (usedMappings['categorical'])\n                filterVariantMeasuresCategorical(dataview.categorical, columnFilter, valueFilter);\n            if (usedMappings['table'])\n                filterVariantMeasuresTable(dataview.table, columnFilter, valueFilter);\n            if (usedMappings['tree'])\n                filterVariantMeasuresTreeNode(dataview.tree.root, columnFilter, valueFilter);\n            if (usedMappings['matrix'])\n                filterVariantMeasuresMatrix(dataview.matrix, columnFilter, valueFilter);\n            if (usedMappings['single'])\n                filterVariantMeasuresSingle(dataview, dataViewMappings, rolesToNormalize, valueFilter);\n        }\n\n        export function generateMetadataColumnFilter(columns: DataViewMetadataColumn[], rolesToNormalize: VisualDataRole[]): IMetadataColumnFilter {\n            if (!columns || !rolesToNormalize)\n                return () => false;\n\n            let columnsToNormalize = {};\n            for (let column of columns) {\n                let roles = column.roles;\n                if (!roles)\n                    continue;\n                for (let role of rolesToNormalize) {\n                    if (!roles[role.name])\n                        continue;\n                    columnsToNormalize[column.index] = true;\n                    break;\n                }\n            }\n\n            return (columnIndex: number) => {\n                if (isNaN(columnIndex))\n                    return false;\n\n                return !!columnsToNormalize[columnIndex];\n            };\n        }\n\n        export function generateValueFilter(columns: DataViewMetadataColumn[], rolesToNormalize: VisualDataRole[]): IValueFilter {\n            if (!columns || !rolesToNormalize)\n                return () => true;\n\n            let columnValueFilters: IColumnValueFilter[] = [];\n\n            // Build columnValueFilters based on role requiredTypes\n            for (let column of columns) {\n                let columnValueFilter = generateColumnValueFilter(column, rolesToNormalize);\n\n                if (columnValueFilter)\n                    columnValueFilters[column.index] = columnValueFilter;\n            }\n\n            return <IValueFilter>(columnIndex: number, value: any) => {\n                if (columnValueFilters[columnIndex])\n                    return columnValueFilters[columnIndex](value);\n\n                return true;\n            };\n        }\n\n        function generateColumnValueFilter(column: DataViewMetadataColumn, rolesToNormalize: VisualDataRole[]): IColumnValueFilter {\n            let requiredTypes = getColumnRequiredTypes(column, rolesToNormalize);\n\n            if (_.isEmpty(requiredTypes))\n                return;\n\n            return (value: any): boolean => {\n                return doesValueMatchTypes(value, requiredTypes);\n            };\n        }\n\n        export function getColumnRequiredTypes(column: DataViewMetadataColumn, rolesToNormalize: VisualDataRole[]): ValueType[] {\n            let requiredTypes = [];\n            let columnRoles = column && column.roles;\n\n            if (!columnRoles)\n                return requiredTypes;\n\n            for (let role of rolesToNormalize) {\n                if (!columnRoles[role.name])\n                    continue;\n                for (let typeDescriptor of role.requiredTypes) {\n                    let type = ValueType.fromDescriptor(typeDescriptor);\n                    requiredTypes.push(type);\n                }\n            }\n\n            return requiredTypes;\n        }\n\n        function filterVariantMeasuresCategorical(dataview: DataViewCategorical, columnFilter: IMetadataColumnFilter, valueFilter: IValueFilter): void {\n            let values = dataview && dataview.values;\n            if (!values)\n                return;\n\n            let valuesGrouped = values.grouped();\n            if (!valuesGrouped)\n                return;\n\n            for (let valueGroup of valuesGrouped) {\n                let valuesInGroup = valueGroup.values;\n                for (let valueColumn of valuesInGroup) {\n                    let columnIndex = valueColumn.source.index;\n                    if (!columnFilter(columnIndex))\n                        continue;\n\n                    for (let i = 0, ilen = valueColumn.values.length; i < ilen; i++) {\n                        valueColumn.values = normalizeVariant(valueColumn.values, i, columnIndex, valueFilter);\n                    }\n                }\n            }\n        }\n\n        function filterVariantMeasuresTable(dataview: DataViewTable, columnFilter: IMetadataColumnFilter, valueFilter: IValueFilter): void {\n            let columns = dataview && dataview.columns;\n\n            if (!columns)\n                return;\n\n            let filteredColumns = [];\n            for (let column of columns) {\n                if (columnFilter(column.index))\n                    filteredColumns.push(column.index);\n            }\n\n            let rows = dataview.rows;\n            for (let i = 0, ilen = rows.length; i < ilen; i++) {\n                for (let index of filteredColumns) {\n                    rows[i] = normalizeVariant(rows[i], index, index, valueFilter);\n                }\n            }\n        }\n\n        function filterVariantMeasuresTreeNode(node: DataViewTreeNode, columnFilter: IMetadataColumnFilter, valueFilter: IValueFilter): void {\n            if (node.values) {\n                for (let columnIndex in node.values) {\n                    // In dataView.tree, the keys in node.values correspond to columnIndex of the node value\n                    if (columnFilter(columnIndex)) {\n                        // According to nojorgen, it is possible to have primitive values as values in the node.values dictionary.\n                        if (typeof (node.values[columnIndex]) === 'object' && ('value' in node.values[columnIndex]))\n                            node.values[columnIndex] = normalizeVariant(node.values[columnIndex], 'value', columnIndex, valueFilter);\n                        else // if node.values[columnIndex] is a primitive value\n                            node.values = normalizeVariant(node.values, columnIndex, columnIndex, valueFilter);\n                    }\n                }\n            }\n            else if (node.children) {\n                for (let child of node.children) {\n                    filterVariantMeasuresTreeNode(child, columnFilter, valueFilter);\n                }\n            }\n        }\n\n        function filterVariantMeasuresMatrix(dataview: DataViewMatrix, columnFilter: IMetadataColumnFilter, valueFilter: IValueFilter): void {\n            let root = dataview && dataview.rows && dataview.rows.root;\n\n            if (!root)\n                return;\n\n            // Recurse into rows.children\n            // e.g. rows.children -> .children -> .children.values\n            filterVariantMeasuresMatrixRecursive(dataview, root, columnFilter, valueFilter);\n        }\n\n        function filterVariantMeasuresMatrixRecursive(dataviewMatrix: DataViewMatrix, node: DataViewTreeNode, columnFilter: IMetadataColumnFilter, valueFilter: IValueFilter): void {\n            if (node.values) {\n                for (let id in node.values) {\n                    // Note related to VSTS 6547124: In dataView.matrix, the keys in node.values are NOT equivalent to value.valueSourceIndex.\n                    let nodeValue: DataViewMatrixNodeValue = node.values[id];\n\n                    // the property DataViewMatrixNodeValue.valueSourceIndex will not exist if valueSourceIndex is 0 for that value\n                    let valueSourceIndex: number = nodeValue.valueSourceIndex || 0;\n\n                    // index is an optional property on DataViewMetadataColumn, but I am not sure when it will ever be undefined in a matrix' column metadata\n                    let columnIndex = dataviewMatrix.valueSources[valueSourceIndex].index;\n\n                    if (_.isNumber(columnIndex) && columnFilter(columnIndex)) {\n                        node.values[id] = normalizeVariant(nodeValue, 'value', columnIndex, valueFilter);\n                    }\n                }\n            }\n            else if (node.children) {\n                for (let child of node.children) {\n                    filterVariantMeasuresMatrixRecursive(dataviewMatrix, child, columnFilter, valueFilter);\n                }\n            }\n        }\n\n        function filterVariantMeasuresSingle(dataview: DataView, dataViewMappings: DataViewMapping[], rolesToNormalize: VisualDataRole[], valueFilter: IValueFilter): void {\n            if (!dataview.single)\n                return;\n\n            let roleNames: string[] = [];\n            for (let role of rolesToNormalize) {\n                if (role.name)\n                    roleNames.push(role.name);\n            }\n\n            let columns = dataview.metadata.columns;\n            for (let dataViewMapping of dataViewMappings) {\n                let roleName = dataViewMapping.single.role;\n                if (roleNames.indexOf(roleName) !== -1) {\n                    let column = firstColumnByRoleName(columns, roleName);\n                    if (column)\n                        dataview.single = normalizeVariant(dataview.single, 'value', column.index, valueFilter);\n                    return;\n                }\n            }\n        }\n\n        export function normalizeVariant<T>(object: T, key: string|number, columnIndex: number, valueFilter: IValueFilter): T {\n            if (!object)\n                return;\n\n            let value = object[key];\n            if (value !== null && !valueFilter(columnIndex, value)) {\n                object = inheritSingle(object);\n                object[key] = null;\n            }\n\n            return object;\n        }\n\n        function doesValueMatchTypes<T>(value: T, types: ValueType[]): boolean {\n            for (let type of types) {\n                if (type.numeric || type.integer)\n                    return typeof (value) === 'number';\n            }\n\n            return false;\n        }\n\n        function firstColumnByRoleName(columns: DataViewMetadataColumn[], roleName: string): DataViewMetadataColumn {\n            for (let column of columns) {\n                let columnRoles = column && column.roles;\n                if (columnRoles && columnRoles[roleName])\n                    return column;\n            }\n        }\n    }\n}","/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved. \n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *   \n *  The above copyright notice and this permission notice shall be included in \n *  all copies or substantial portions of the Software.\n *   \n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\n\nmodule powerbi {\n\n    export module DataViewObjects {\n        /** Gets the value of the given object/property pair. */\n        export function getValue<T>(objects: DataViewObjects, propertyId: DataViewObjectPropertyIdentifier, defaultValue?: T): T {\n            debug.assertAnyValue(objects, 'objects');\n            debug.assertValue(propertyId, 'propertyId');\n\n            if (!objects)\n                return defaultValue;\n\n            let objectOrMap = objects[propertyId.objectName];\n            debug.assert(!isUserDefined(objectOrMap), 'expected DataViewObject');\n\n            let object = <DataViewObject>objectOrMap;\n            return DataViewObject.getValue(object, propertyId.propertyName, defaultValue);\n        }\n\n        /** Gets an object from objects. */\n        export function getObject(objects: DataViewObjects, objectName: string, defaultValue?: DataViewObject): DataViewObject {\n            if (objects && objects[objectName]) {\n                let object = <DataViewObject>objects[objectName];\n                debug.assert(!isUserDefined(object), 'expected DataViewObject');\n                return object;\n            }\n            else {\n                return defaultValue;\n            }\n        }\n\n        /** Gets a map of user-defined objects. */\n        export function getUserDefinedObjects(objects: DataViewObjects, objectName: string): DataViewObjectMap {\n            if (objects && objects[objectName]) {\n                let map = <DataViewObjectMap>objects[objectName];\n                debug.assert(isUserDefined(map), 'expected DataViewObjectMap');\n                return map;\n            }\n        }\n\n        /** Gets the solid color from a fill property. */\n        export function getFillColor(objects: DataViewObjects, propertyId: DataViewObjectPropertyIdentifier, defaultColor?: string): string {\n            let value: Fill = getValue(objects, propertyId);\n            if (!value || !value.solid)\n                return defaultColor;\n\n            return value.solid.color;\n        }\n\n        /** Returns true if the given object represents a collection of user-defined objects */\n        export function isUserDefined(objectOrMap: DataViewObject | DataViewObjectMap): boolean {\n            return _.isArray(objectOrMap);\n        }\n    }\n\n    export module DataViewObject {\n        export function getValue<T>(object: DataViewObject, propertyName: string, defaultValue?: T): T {\n            debug.assertAnyValue(object, 'object');\n            debug.assertValue(propertyName, 'propertyName');\n\n            if (!object)\n                return defaultValue;\n\n            let propertyValue = <T>object[propertyName];\n            if (propertyValue === undefined)\n                return defaultValue;\n\n            return propertyValue;\n        }\n\n        /** Gets the solid color from a fill property using only a propertyName */\n        export function getFillColorByPropertyName(objects: DataViewObjects, propertyName: string, defaultColor?: string): string {\n            let value: Fill = DataViewObject.getValue(objects, propertyName);\n            if (!value || !value.solid)\n                return defaultColor;\n\n            return value.solid.color;\n        }\n    }\n}","/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved. \n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *   \n *  The above copyright notice and this permission notice shall be included in \n *  all copies or substantial portions of the Software.\n *   \n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\n\nmodule powerbi.data {\n    import JsonComparer = jsCommon.JsonComparer;\n\n    /** Defines the values for particular objects. */\n    export interface DataViewObjectDefinitions {\n        [objectName: string]: DataViewObjectDefinition[];\n    }\n\n    export interface DataViewObjectDefinition {\n        selector?: Selector;\n        properties: DataViewObjectPropertyDefinitions;\n    }\n\n    export interface DataViewObjectPropertyDefinitions {\n        [name: string]: DataViewObjectPropertyDefinition;\n    }\n\n    export type DataViewObjectPropertyDefinition = SQExpr | StructuralObjectDefinition;\n\n    export module DataViewObjectDefinitions {\n\n        /** Creates or reuses a DataViewObjectDefinition for matching the given objectName and selector within the defns. */\n        export function ensure(\n            defns: DataViewObjectDefinitions,\n            objectName: string,\n            selector: Selector): DataViewObjectDefinition {\n            debug.assertValue(defns, 'defns');\n\n            let defnsForObject = defns[objectName];\n            if (!defnsForObject)\n                defns[objectName] = defnsForObject = [];\n\n            for (let i = 0, len = defnsForObject.length; i < len; i++) {\n                let defn = defnsForObject[i];\n                if (Selector.equals(defn.selector, selector))\n                    return defn;\n            }\n\n            let newDefn: DataViewObjectDefinition = {\n                selector: selector,\n                properties: {},\n            };\n            defnsForObject.push(newDefn);\n\n            return newDefn;\n        }\n\n        export function deleteProperty(\n            defns: DataViewObjectDefinitions,\n            objectName: string,\n            selector: Selector,\n            propertyName: string): void {\n            debug.assertValue(defns, 'defns');\n\n            let defn = getObjectDefinition(defns, objectName, selector);\n            if (!defn)\n                return;\n\n            DataViewObjectDefinition.deleteSingleProperty(defn, propertyName);\n        }\n        \n        export function setValue(\n            defns: DataViewObjectDefinitions,\n            propertyId: DataViewObjectPropertyIdentifier,\n            selector: Selector,\n            value: DataViewObjectPropertyDefinition): void {\n            debug.assertValue(defns, 'defns');\n            debug.assertValue(propertyId, 'propertyId');\n\n            ensure(defns, propertyId.objectName, selector).properties[propertyId.propertyName] = value;\n        }\n\n        export function getValue(\n            defns: DataViewObjectDefinitions,\n            propertyId: DataViewObjectPropertyIdentifier,\n            selector: Selector): DataViewObjectPropertyDefinition {\n\n            let properties = getPropertyContainer(defns, propertyId, selector);\n            if (!properties)\n                return;\n\n            return properties[propertyId.propertyName];\n        }\n\n        export function getPropertyContainer(\n            defns: DataViewObjectDefinitions,\n            propertyId: DataViewObjectPropertyIdentifier,\n            selector: Selector): DataViewObjectPropertyDefinitions {\n\n            let defn = getObjectDefinition(defns, propertyId.objectName, selector);\n            if (!defn)\n                return;\n\n            return defn.properties;\n        }\n\n        export function getObjectDefinition(\n            defns: DataViewObjectDefinitions,\n            objectName: string,\n            selector: Selector): DataViewObjectDefinition {\n            debug.assertAnyValue(defns, 'defns');\n            debug.assertValue(objectName, 'objectName');\n            debug.assertAnyValue(selector, 'selector');\n\n            if (!defns)\n                return;\n\n            let defnsForObject = defns[objectName];\n            if (!defnsForObject)\n                return;\n\n            for (let i = 0, len = defnsForObject.length; i < len; i++) {\n                let defn = defnsForObject[i];\n                if (Selector.equals(defn.selector, selector))\n                    return defn;\n            }\n        }\n\n        export function propertiesAreEqual(a: DataViewObjectPropertyDefinition, b: DataViewObjectPropertyDefinition): boolean {\n            if (a instanceof SemanticFilter && b instanceof SemanticFilter) {\n                return SemanticFilter.isSameFilter(<SemanticFilter>a, <SemanticFilter>b);\n            }\n\n            return JsonComparer.equals(a, b);\n        }\n\n        export function allPropertiesAreEqual(a: DataViewObjectPropertyDefinitions, b: DataViewObjectPropertyDefinitions): boolean {\n            debug.assertValue(a, 'a');\n            debug.assertValue(b, 'b');\n\n            if (Object.keys(a).length !== Object.keys(b).length)\n                return false;\n\n            for (let property in a) {\n                if (!propertiesAreEqual(a[property], b[property]))\n                    return false;\n            }\n\n            return true;\n        }\n\n        export function encodePropertyValue(value: DataViewPropertyValue, valueTypeDescriptor: ValueTypeDescriptor): DataViewObjectPropertyDefinition {\n            debug.assertAnyValue(value, 'value');\n            debug.assertValue(valueTypeDescriptor, 'valueTypeDescriptor');\n\n            if (valueTypeDescriptor.bool) {\n                if (typeof (value) !== 'boolean')\n                    value = false; // This is fallback, which doesn't really belong here.\n\n                return SQExprBuilder.boolean(<boolean>value);\n            }\n            else if (valueTypeDescriptor.text || (valueTypeDescriptor.scripting && valueTypeDescriptor.scripting.source)) {\n                return SQExprBuilder.text(<string>value);\n            }\n            else if (valueTypeDescriptor.numeric) {\n                if ($.isNumeric(value))\n                    return SQExprBuilder.double(+value);\n            }\n            else if ((<StructuralTypeDescriptor>valueTypeDescriptor).fill) {\n                if (value) {\n                    return {\n                        solid: { color: SQExprBuilder.text(<string>value) }\n                    };\n                }\n            }\n            else if (valueTypeDescriptor.formatting) {\n                if (valueTypeDescriptor.formatting.labelDisplayUnits) {\n                    return SQExprBuilder.double(+value);\n                }\n                else {\n                    return SQExprBuilder.text(<string>value);\n                }\n            }\n            else if (valueTypeDescriptor.enumeration) {\n                if ($.isNumeric(value))\n                    return SQExprBuilder.double(+value);\n                else\n                    return SQExprBuilder.text(<string>value);\n            }\n            else if (valueTypeDescriptor.misc) {\n                if (value) {\n                    value = SQExprBuilder.text(<string>value);\n                } else {\n                    value = null;\n                }\n            }\n            else if ((<StructuralTypeDescriptor>valueTypeDescriptor).image) {\n                if (value) {\n                    let imageValue = <ImageValue>value;\n                    let imageDefinition: ImageDefinition = {\n                        name: SQExprBuilder.text(imageValue.name),\n                        url: SQExprBuilder.text(imageValue.url),\n                    };\n\n                    if (imageValue.scaling)\n                        imageDefinition.scaling = SQExprBuilder.text(imageValue.scaling);\n\n                    return imageDefinition;\n                }\n            }\n\n            return value;\n        }\n\n        export function clone(original: DataViewObjectDefinitions): DataViewObjectDefinitions {\n            debug.assertValue(original, 'original');\n\n            let cloned: DataViewObjectDefinitions = {};\n\n            for (let objectName in original) {\n                let originalDefns = original[objectName];\n                if (_.isEmpty(originalDefns))\n                    continue;\n\n                let clonedDefns: DataViewObjectDefinition[] = [];\n                for (let originalDefn of originalDefns) {\n                    clonedDefns.push({\n                        properties: cloneProperties(originalDefn.properties),\n                        selector: originalDefn.selector,\n                    });\n                }\n                cloned[objectName] = clonedDefns;\n            }\n\n            return cloned;\n        }\n\n        function cloneProperties(original: DataViewObjectPropertyDefinitions): DataViewObjectPropertyDefinitions {\n            debug.assertValue(original, 'original');\n\n            // NOTE: properties are considered atomic, so a shallow clone is appropriate here.\n            return _.clone(original);\n        }\n    }\n\n    export module DataViewObjectDefinition {\n\n        export function deleteSingleProperty(\n            defn: DataViewObjectDefinition,\n            propertyName: string): void {\n\n            //note: We decided that delete is acceptable here and that we don't need optimization here\n            delete defn.properties[propertyName];\n        }\n    }\n}","/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved. \n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *   \n *  The above copyright notice and this permission notice shall be included in \n *  all copies or substantial portions of the Software.\n *   \n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\n\nmodule powerbi.data {\n\n    export module DataViewObjectDescriptors {\n        /** Attempts to find the format string property.  This can be useful for upgrade and conversion. */\n        export function findFormatString(descriptors: DataViewObjectDescriptors): DataViewObjectPropertyIdentifier {\n            return findProperty(\n                descriptors,\n                (propDesc: DataViewObjectPropertyDescriptor) => {\n                    let formattingTypeDesc = ValueType.fromDescriptor(propDesc.type).formatting;\n                    return formattingTypeDesc && formattingTypeDesc.formatString;\n                });\n        }\n\n        /** Attempts to find the filter property.  This can be useful for propagating filters from one visual to others. */\n        export function findFilterOutput(descriptors: DataViewObjectDescriptors): DataViewObjectPropertyIdentifier {\n            return findProperty(\n                descriptors,\n                (propDesc: DataViewObjectPropertyDescriptor) => {\n                    let propType: StructuralTypeDescriptor = propDesc.type;\n                    return propType && !!propType.filter;\n                });\n        }\n\n        /** Attempts to find the default value property.  This can be useful for propagating schema default value. */\n        export function findDefaultValue(descriptors: DataViewObjectDescriptors): DataViewObjectPropertyIdentifier {\n            return findProperty(\n                descriptors,\n                (propDesc: DataViewObjectPropertyDescriptor) => {\n                    let propType: StructuralTypeDescriptor = propDesc.type;\n                    return propType && !!propType.expression && propType.expression.defaultValue;\n                });\n        }\n\n        function findProperty(descriptors: DataViewObjectDescriptors, propPredicate: (propDesc: DataViewObjectPropertyDescriptor) => boolean): DataViewObjectPropertyIdentifier {\n            debug.assertAnyValue(descriptors, 'descriptors');\n            debug.assertAnyValue(propPredicate, 'propPredicate');\n\n            if (!descriptors)\n                return;\n\n            for (let objectName in descriptors) {\n                let objPropDescs = descriptors[objectName].properties;\n\n                for (let propertyName in objPropDescs) {\n                    if (propPredicate(objPropDescs[propertyName])) {\n                        return {\n                            objectName: objectName,\n                            propertyName: propertyName,\n                        };\n                    }\n                }\n            }\n        }\n    }\n}","/*\n*  Power BI Visualizations\n*\n*  Copyright (c) Microsoft Corporation\n*  All rights reserved. \n *  MIT License\n*\n*  Permission is hereby granted, free of charge, to any person obtaining a copy\n*  of this software and associated documentation files (the \"\"Software\"\"), to deal\n*  in the Software without restriction, including without limitation the rights\n*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n*  copies of the Software, and to permit persons to whom the Software is\n*  furnished to do so, subject to the following conditions:\n*   \n *  The above copyright notice and this permission notice shall be included in \n *  all copies or substantial portions of the Software.\n*   \n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n*  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n*  THE SOFTWARE.\n*/\n\nmodule powerbi.data {\n    export interface DataViewObjectDefinitionsByRepetition {\n        metadataOnce?: DataViewObjectDefinitionsForSelector;\n        userDefined?: DataViewObjectDefinitionsForSelector[];\n        metadata?: DataViewObjectDefinitionsForSelector[];\n        data: DataViewObjectDefinitionsForSelectorWithRule[];\n    }\n\n    export interface DataViewObjectDefinitionsForSelector {\n        selector?: Selector;\n        objects: DataViewNamedObjectDefinition[];\n    }\n\n    export interface DataViewObjectDefinitionsForSelectorWithRule extends DataViewObjectDefinitionsForSelector {\n        rules?: RuleEvaluation[];\n    }\n\n    export interface DataViewNamedObjectDefinition {\n        name: string;\n        properties: DataViewObjectPropertyDefinitions;\n    }\n\n    export module DataViewObjectEvaluationUtils {\n        export function evaluateDataViewObjects(\n            evalContext: IEvalContext,\n            objectDescriptors: DataViewObjectDescriptors,\n            objectDefns: DataViewNamedObjectDefinition[]): DataViewObjects {\n            debug.assertValue(evalContext, 'evalContext');\n            debug.assertValue(objectDescriptors, 'objectDescriptors');\n            debug.assertValue(objectDefns, 'objectDefns');\n\n            let objects: DataViewObjects;\n\n            for (let j = 0, jlen = objectDefns.length; j < jlen; j++) {\n                let objectDefinition = objectDefns[j],\n                    objectName = objectDefinition.name;\n\n                let evaluatedObject: DataViewObject = DataViewObjectEvaluator.run(\n                    evalContext,\n                    objectDescriptors[objectName],\n                    objectDefinition.properties);\n\n                if (!evaluatedObject)\n                    continue;\n\n                if (!objects)\n                    objects = {};\n\n                // NOTE: this currently has last-object-wins semantics.\n                objects[objectName] = evaluatedObject;\n            }\n\n            return objects;\n        }\n\n        export function groupObjectsBySelector(objectDefinitions: DataViewObjectDefinitions): DataViewObjectDefinitionsByRepetition {\n            debug.assertAnyValue(objectDefinitions, 'objectDefinitions');\n\n            let grouped: DataViewObjectDefinitionsByRepetition = {\n                data: [],\n            };\n\n            if (objectDefinitions) {\n                for (let objectName in objectDefinitions) {\n                    let objectDefnList = objectDefinitions[objectName];\n\n                    for (let i = 0, len = objectDefnList.length; i < len; i++) {\n                        let objectDefn = objectDefnList[i];\n\n                        ensureDefinitionListForSelector(grouped, objectDefn.selector).objects.push({\n                            name: objectName,\n                            properties: objectDefn.properties,\n                        });\n                    }\n                }\n            }\n\n            return grouped;\n        }\n\n        function ensureDefinitionListForSelector(grouped: DataViewObjectDefinitionsByRepetition, selector: Selector): DataViewObjectDefinitionsForSelector {\n            debug.assertValue(grouped, 'grouped');\n            debug.assertAnyValue(selector, 'selector');\n\n            if (!selector) {\n                if (!grouped.metadataOnce)\n                    grouped.metadataOnce = { objects: [] };\n                return grouped.metadataOnce;\n            }\n\n            let groupedObjects: DataViewObjectDefinitionsForSelector[];\n            if (selector.data) {\n                groupedObjects = grouped.data;\n            }\n            else if (selector.metadata) {\n                if (!grouped.metadata)\n                    grouped.metadata = [];\n                groupedObjects = grouped.metadata;\n            }\n            else if (selector.id) {\n                if (!grouped.userDefined)\n                    grouped.userDefined = [];\n                groupedObjects = grouped.userDefined;\n            }\n\n            debug.assert(!!groupedObjects, 'GroupedObjects is not defined.  Indicates malformed selector.');\n\n            for (let item of groupedObjects) {\n                if (Selector.equals(selector, item.selector))\n                    return item;\n            }\n\n            let item: DataViewObjectDefinitionsForSelector = {\n                selector: selector,\n                objects: [],\n            };\n            groupedObjects.push(item);\n\n            return item;\n        }\n\n        export function addImplicitObjects(\n            objectsForAllSelectors: DataViewObjectDefinitionsByRepetition,\n            objectDescriptors: DataViewObjectDescriptors,\n            columns: DataViewMetadataColumn[],\n            selectTransforms: DataViewSelectTransform[]): void {\n            debug.assertValue(objectsForAllSelectors, 'objectsForAllSelectors');\n            debug.assertValue(objectDescriptors, 'objectDescriptors');\n            debug.assertValue(columns, 'columns');\n            debug.assertAnyValue(selectTransforms, 'selectTransforms');\n\n            if (selectTransforms) {\n                addDefaultFormatString(objectsForAllSelectors, objectDescriptors, columns, selectTransforms);\n                addDefaultValue(objectsForAllSelectors, objectDescriptors, columns, selectTransforms);\n            }\n        }\n\n        function addDefaultFormatString(\n            objectsForAllSelectors: DataViewObjectDefinitionsByRepetition,\n            objectDescriptors: DataViewObjectDescriptors,\n            columns: DataViewMetadataColumn[],\n            selectTransforms: DataViewSelectTransform[]): void {\n            debug.assertValue(objectsForAllSelectors, 'objectsForAllSelectors');\n            debug.assertValue(objectDescriptors, 'objectDescriptors');\n            debug.assertValue(columns, 'columns');\n            debug.assertValue(selectTransforms, 'selectTransforms');\n\n            let formatStringProp = DataViewObjectDescriptors.findFormatString(objectDescriptors);\n            if (!formatStringProp)\n                return;\n\n            for (let selectIdx = 0, selectLen = selectTransforms.length; selectIdx < selectLen; selectIdx++) {\n                let selectTransform = selectTransforms[selectIdx];\n                if (!selectTransform)\n                    continue;\n                debug.assertValue(selectTransform.queryName, 'selectTransform.queryName');\n\n                applyFormatString(\n                    objectsForAllSelectors,\n                    formatStringProp,\n                    selectTransform.queryName,\n                    selectTransform.format || getColumnFormatForIndex(columns, selectIdx));\n            }\n        }\n\n        /** Registers properties for default value, if the properties are not explicitly provided. */\n        function addDefaultValue (\n            objectsForAllSelectors: DataViewObjectDefinitionsByRepetition,\n            objectDescriptors: DataViewObjectDescriptors,\n            columns: DataViewMetadataColumn[],\n            selectTransforms: DataViewSelectTransform[]): void {\n            debug.assertValue(objectsForAllSelectors, 'objectsForAllSelectors');\n            debug.assertValue(objectDescriptors, 'objectDescriptors');\n            debug.assertValue(columns, 'columns');\n            debug.assertValue(selectTransforms, 'selectTransforms');\n\n            let defaultValueProp = DataViewObjectDescriptors.findDefaultValue(objectDescriptors);\n            if (!defaultValueProp)\n                return;\n\n            for (let selectTransform of selectTransforms) {\n                if (!selectTransform)\n                    continue;\n                debug.assertValue(selectTransform.queryName, 'selectTransform.queryName');\n\n                applyDefaultValue(\n                    objectsForAllSelectors,\n                    defaultValueProp,\n                    selectTransform.queryName,\n                    selectTransform.defaultValue);\n            }\n        }\n\n        function getColumnFormatForIndex(columns: DataViewMetadataColumn[], selectIdx: number): string {\n            for (let columnIdx = 0, columnLen = columns.length; columnIdx < columnLen; columnIdx++) {\n                let column = columns[columnIdx];\n                if (!column || column.index !== selectIdx)\n                    continue;\n\n                return column.format;\n            }\n        }\n\n        function applyFormatString(\n            objectsForAllSelectors: DataViewObjectDefinitionsByRepetition,\n            formatStringProp: DataViewObjectPropertyIdentifier,\n            queryName: string,\n            formatStringValue: string): void {\n            if (!formatStringValue)\n                return;\n\n            // There is a format string specified -- apply it as an object property, if there is not already one specified.\n            applyMetadataProperty(\n                objectsForAllSelectors,\n                formatStringProp,\n                { metadata: queryName },\n                SQExprBuilder.text(formatStringValue));\n        }\n\n        function applyDefaultValue(\n            objectsForAllSelectors: DataViewObjectDefinitionsByRepetition,\n            defaultValueProp: DataViewObjectPropertyIdentifier,\n            queryName: string,\n            defaultValue: DefaultValueDefinition): void {\n            if (!defaultValue)\n                return;\n\n            // There is a default value specified -- apply it as an object property, if there is not already one specified.\n            applyMetadataProperty(\n                objectsForAllSelectors,\n                defaultValueProp,\n                { metadata: queryName },\n                defaultValue);\n        }\n\n        function applyMetadataProperty(\n            objectsForAllSelectors: DataViewObjectDefinitionsByRepetition,\n            propertyId: DataViewObjectPropertyIdentifier,\n            selector: Selector,\n            value: DataViewObjectPropertyDefinition): void {\n\n            let objectDefns: DataViewObjectDefinitionsForSelector[];\n            if (selector) {\n                let metadataObjects = objectsForAllSelectors.metadata;\n                if (!metadataObjects)\n                    metadataObjects = objectsForAllSelectors.metadata = [];\n                objectDefns = metadataObjects;\n            }\n            else {\n                let metadataOnce = objectsForAllSelectors.metadataOnce;\n                if (!metadataOnce)\n                    metadataOnce = objectsForAllSelectors.metadataOnce = { selector: selector, objects: [] };\n                objectDefns = [metadataOnce];\n            }\n\n            let targetMetadataObject = findWithMatchingSelector(objectDefns, selector);\n            let targetObjectDefn: DataViewNamedObjectDefinition;\n            if (targetMetadataObject) {\n                let targetObjectDefns = targetMetadataObject.objects;\n                targetObjectDefn = findExistingObject(targetObjectDefns, propertyId.objectName);\n                if (targetObjectDefn) {\n                    if (targetObjectDefn.properties[propertyId.propertyName])\n                        return;\n                }\n                else {\n                    targetObjectDefn = {\n                        name: propertyId.objectName,\n                        properties: {},\n                    };\n                    targetObjectDefns.push(targetObjectDefn);\n                }\n            }\n            else {\n                targetObjectDefn = {\n                    name: propertyId.objectName,\n                    properties: {}\n                };\n\n                objectDefns.push({\n                    selector: selector,\n                    objects: [targetObjectDefn],\n                });\n            }\n\n            targetObjectDefn.properties[propertyId.propertyName] = value;\n        }\n\n        function findWithMatchingSelector(objects: DataViewObjectDefinitionsForSelector[], selector: Selector): DataViewObjectDefinitionsForSelector {\n            debug.assertValue(objects, 'objects');\n            debug.assertAnyValue(selector, 'selector');\n\n            for (let i = 0, len = objects.length; i < len; i++) {\n                let object = objects[i];\n                if (Selector.equals(object.selector, selector))\n                    return object;\n            }\n        }\n\n        function findExistingObject(objectDefns: DataViewNamedObjectDefinition[], objectName: string): DataViewNamedObjectDefinition {\n            debug.assertValue(objectDefns, 'objectDefns');\n            debug.assertValue(objectName, 'objectName');\n\n            for (let i = 0, len = objectDefns.length; i < len; i++) {\n                let objectDefn = objectDefns[i];\n\n                if (objectDefn.name === objectName)\n                    return objectDefn;\n            }\n        }\n    }\n}","/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved. \n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *   \n *  The above copyright notice and this permission notice shall be included in \n *  all copies or substantial portions of the Software.\n *   \n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\n \n\nmodule powerbi.data {\n    /** Responsible for evaluating object property expressions to be applied at various scopes in a DataView. */\n    export module DataViewObjectEvaluator {\n        const colorValueType: ValueType = ValueType.fromDescriptor({ formatting: { color: true } });\n        const numericType: ValueType = ValueType.fromDescriptor({ numeric: true });\n        const textType: ValueType = ValueType.fromDescriptor({ text: true });\n\n        export function run(\n            evalContext: IEvalContext,\n            objectDescriptor: DataViewObjectDescriptor,\n            propertyDefinitions: DataViewObjectPropertyDefinitions): DataViewObject {\n            debug.assertValue(evalContext, 'evalContext');\n            debug.assertAnyValue(objectDescriptor, 'objectDescriptor');\n            debug.assertValue(propertyDefinitions, 'propertyDefinitions');\n\n            if (!objectDescriptor)\n                return;\n\n            let object: DataViewObject,\n                propertyDescriptors = objectDescriptor.properties;\n            for (let propertyName in propertyDefinitions) {\n                let propertyDefinition = propertyDefinitions[propertyName],\n                    propertyDescriptor = propertyDescriptors[propertyName];\n\n                if (!propertyDescriptor)\n                    continue;\n\n                let propertyValue = evaluateProperty(evalContext, propertyDescriptor, propertyDefinition);\n                if (propertyValue === undefined)\n                    continue;\n\n                if (!object)\n                    object = {};\n                object[propertyName] = propertyValue;\n            }\n\n            return object;\n        }\n\n        /** Note: Exported for testability */\n        export function evaluateProperty(\n            evalContext: IEvalContext,\n            propertyDescriptor: DataViewObjectPropertyDescriptor,\n            propertyDefinition: DataViewObjectPropertyDefinition): any {\n            debug.assertValue(evalContext, 'evalContext');\n            debug.assertValue(propertyDescriptor, 'propertyDescriptor');\n            debug.assertValue(propertyDefinition, 'propertyDefinition');\n\n            let structuralType = <StructuralTypeDescriptor>propertyDescriptor.type;\n            if (structuralType && structuralType.expression)\n                return propertyDefinition;\n\n            let value = evaluateValue(evalContext, <any>propertyDefinition, ValueType.fromDescriptor(propertyDescriptor.type));\n            if (value !== undefined || (propertyDefinition instanceof RuleEvaluation))\n                return value;\n\n            return evaluateFill(evalContext, <FillDefinition>propertyDefinition, structuralType)\n                || evaluateFillRule(evalContext, <FillRuleDefinition>propertyDefinition, structuralType)\n                || evaluateImage(evalContext, <ImageDefinition>propertyDefinition, structuralType)\n                || evaluateParagraphs(evalContext, <ParagraphsDefinition>propertyDefinition, structuralType)\n                || propertyDefinition;\n        }\n\n        function evaluateFill(evalContext: IEvalContext, fillDefn: FillDefinition, type: StructuralTypeDescriptor): Fill {\n            let fillType = type.fill;\n            if (!fillType)\n                return;\n\n            if (fillType && fillType.solid && fillType.solid.color && fillDefn.solid) {\n                return {\n                    solid: {\n                        color: evaluateValue(evalContext, fillDefn.solid.color, ValueType.fromExtendedType(ExtendedType.Color)),\n                    }\n                };\n            }\n        }\n\n        function evaluateFillRule(evalContext: IEvalContext, fillRuleDefn: FillRuleDefinition, type: StructuralTypeDescriptor): FillRule {\n            if (!type.fillRule)\n                return;\n\n            if (fillRuleDefn.linearGradient2) {\n                let linearGradient2 = fillRuleDefn.linearGradient2;\n                return {\n                    linearGradient2: {\n                        min: evaluateColorStop(evalContext, linearGradient2.min),\n                        max: evaluateColorStop(evalContext, linearGradient2.max),\n                    }\n                };\n            }\n\n            if (fillRuleDefn.linearGradient3) {\n                let linearGradient3 = fillRuleDefn.linearGradient3;\n                return {\n                    linearGradient3: {\n                        min: evaluateColorStop(evalContext, linearGradient3.min),\n                        mid: evaluateColorStop(evalContext, linearGradient3.mid),\n                        max: evaluateColorStop(evalContext, linearGradient3.max),\n                    }\n                };\n            }\n        }\n\n        function evaluateColorStop(evalContext: IEvalContext, colorStop: RuleColorStopDefinition): RuleColorStop {\n            debug.assertValue(evalContext, 'evalContext');\n            debug.assertValue(colorStop, 'colorStop');\n\n            let step: RuleColorStop = {\n                color: evaluateValue(evalContext, colorStop.color, colorValueType),\n            };\n\n            let value = evaluateValue(evalContext, colorStop.value, numericType);\n            if (value != null)\n                step.value = value;\n\n            return step;\n        }\n\n        function evaluateImage(evalContext: IEvalContext, definition: ImageDefinition, type: StructuralTypeDescriptor): ImageValue {\n            debug.assertValue(evalContext, 'evalContext');\n            debug.assertAnyValue(definition, 'definition');\n            debug.assertValue(type, 'type');\n\n            if (!type.image || !definition)\n                return;\n\n            let value: ImageValue = {\n                name: evaluateValue(evalContext, definition.name, textType),\n                url: evaluateValue(evalContext, definition.url, ValueType.fromDescriptor(ImageDefinition.urlType)),\n            };\n\n            if (definition.scaling)\n                value.scaling = evaluateValue(evalContext, definition.scaling, textType);\n\n            return value;\n        }\n\n        function evaluateParagraphs(evalContext: IEvalContext, definition: ParagraphsDefinition, type: StructuralTypeDescriptor): Paragraphs {\n            debug.assertValue(evalContext, 'evalContext');\n            debug.assertAnyValue(definition, 'definition');\n            debug.assertValue(type, 'type');\n\n            if (!type.paragraphs || !definition)\n                return;\n\n            return evaluateArrayCopyOnChange(evalContext, definition, evaluateParagraph);\n        }\n\n        function evaluateParagraph(evalContext: IEvalContext, definition: ParagraphDefinition): Paragraph {\n            debug.assertValue(evalContext, 'evalContext');\n            debug.assertValue(definition, 'definition');\n\n            let evaluated: Paragraph;\n\n            let definitionTextRuns = definition.textRuns;\n            let evaluatedTextRuns: TextRun[] = evaluateArrayCopyOnChange(evalContext, definitionTextRuns, evaluateTextRun);\n            if (definitionTextRuns !== evaluatedTextRuns) {\n                evaluated = _.clone(<any>definition);\n                evaluated.textRuns = evaluatedTextRuns;\n            }\n\n            return evaluated || <Paragraph>definition;\n        }\n\n        function evaluateTextRun(evalContext: IEvalContext, definition: TextRunDefinition): TextRun {\n            debug.assertValue(evalContext, 'evalContext');\n            debug.assertValue(definition, 'definition');\n\n            let evaluated: TextRun;\n\n            let definitionValue = definition.value;\n            let evaluatedValue = evaluateValue(evalContext, <any> definitionValue, textType);\n            if (evaluatedValue !== undefined) {\n                evaluated = _.clone(<any>definition);\n                evaluated.value = evaluatedValue;\n            }\n\n            return evaluated || <TextRun>definition;\n        }\n\n        /**\n         * Evaluates an array, and lazily copies on write whenever the evaluator function returns something\n         * other than the input to it.\n         */\n        function evaluateArrayCopyOnChange<TDefinition, TEvaluated>(\n            evalContext: IEvalContext,\n            definitions: TDefinition[],\n            evaluator: (ctx: IEvalContext, defn: TDefinition) => TEvaluated): TEvaluated[] {\n            debug.assertValue(evalContext, 'evalContext');\n            debug.assertValue(definitions, 'definitions');\n            debug.assertValue(evaluator, 'evaluator');\n\n            let evaluatedValues: TEvaluated[];\n\n            for (let i = 0, len = definitions.length; i < len; i++) {\n                let definition = definitions[i];\n                let evaluated: TEvaluated = evaluator(evalContext, definition);\n\n                // NOTE: the any casts here are necessary due to the compiler not knowing the relationship\n                // between TEvaluated & TDefinition\n                if (!evaluatedValues && <any>definition !== evaluated) {\n                    evaluatedValues = _.take(<TEvaluated[]><any>definitions, i);\n                }\n\n                if (evaluatedValues) {\n                    evaluatedValues.push(evaluated);\n                }\n            }\n\n            return evaluatedValues || <TEvaluated[]><any>definitions;\n        }\n\n        function evaluateValue(evalContext: IEvalContext, definition: SQExpr | RuleEvaluation, valueType: ValueType): any {\n            if (definition instanceof SQExpr)\n                return ExpressionEvaluator.evaluate(<SQExpr>definition, evalContext);\n\n            if (definition instanceof RuleEvaluation)\n                return (<RuleEvaluation>definition).evaluate(evalContext);\n        }\n\n        /** Responsible for evaluating SQExprs into values. */\n        class ExpressionEvaluator extends DefaultSQExprVisitorWithArg<PrimitiveValue, IEvalContext> {\n            private static instance: ExpressionEvaluator = new ExpressionEvaluator();\n\n            public static evaluate(expr: SQExpr, evalContext: IEvalContext): PrimitiveValue {\n                if (expr == null)\n                    return;\n\n                return expr.accept(ExpressionEvaluator.instance, evalContext);\n            }\n\n            public visitColumnRef(expr: SQColumnRefExpr, evalContext: IEvalContext): PrimitiveValue {\n                return evalContext.getExprValue(expr);\n            }\n\n            public visitConstant(expr: SQConstantExpr, evalContext: IEvalContext): PrimitiveValue {\n                return expr.value;\n            }\n\n            public visitMeasureRef(expr: SQMeasureRefExpr, evalContext: IEvalContext): PrimitiveValue {\n                return evalContext.getExprValue(expr);\n            }\n\n            public visitAggr(expr: SQAggregationExpr, evalContext: IEvalContext): PrimitiveValue {\n                return evalContext.getExprValue(expr);\n            }\n        }\n    }\n} \n","/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved. \n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *   \n *  The above copyright notice and this permission notice shall be included in \n *  all copies or substantial portions of the Software.\n *   \n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\n\nmodule powerbi.data {\n    import inherit = Prototype.inherit;\n\n    export module DataViewPivotCategorical {\n        /**\n         * Pivots categories in a categorical DataView into valueGroupings.\n         * This is akin to a mathematical matrix transpose.\n         */\n        export function apply(dataView: DataView): DataView {\n            debug.assertValue(dataView, 'dataView');\n\n            let categorical = dataView.categorical;\n            if (!categorical)\n                return null;\n\n            let categories = categorical.categories;\n            if (!categories || categories.length !== 1)\n                return null;\n\n            let values = categorical.values;\n            if (_.isEmpty(values) || values.source)\n                return null;\n\n            let category = categories[0],\n                categoryIdentities = category.identity,\n                categoryValues = category.values,\n                pivotedColumns: DataViewMetadataColumn[] = [],\n                pivotedValues: DataViewValueColumn[] = [];\n            for (let rowIdx = 0, rowCount = categoryValues.length; rowIdx < rowCount; rowIdx++) {\n                let categoryValue = categoryValues[rowIdx],\n                    categoryIdentity = categoryIdentities[rowIdx];\n                for (let colIdx = 0, colCount = values.length; colIdx < colCount; colIdx++) {\n                    let value = values[colIdx],\n                        pivotedColumn = inherit(value.source);\n\n                    // A value has a series group, which is not implemented for pivoting -- just give up.\n                    if (value.identity)\n                        return null;\n\n                    pivotedColumn.groupName = categoryValue;\n                    let pivotedValue: DataViewValueColumn = {\n                        source: pivotedColumn,\n                        values: [value.values[rowIdx]],\n                        identity: categoryIdentity,\n                        min: value.min,\n                        max: value.max,\n                        subtotal: value.subtotal\n                    };\n\n                    let highlights = value.highlights;\n                    if (highlights) {\n                        pivotedValue.highlights = [highlights[rowIdx]];\n                    }\n\n                    pivotedColumns.push(pivotedColumn);\n                    pivotedValues.push(pivotedValue);\n                }\n            }\n\n            let pivotedMetadata = inherit(dataView.metadata);\n            pivotedMetadata.columns = pivotedColumns;\n\n            values = DataViewTransform.createValueColumns(pivotedValues, <SQExpr[]>category.identityFields, category.source);\n            return {\n                metadata: pivotedMetadata,\n                categorical: {\n                    values: values,\n                },\n                matrix: dataView.matrix\n            };\n        }\n    }\n} ","/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved. \n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *   \n *  The above copyright notice and this permission notice shall be included in \n *  all copies or substantial portions of the Software.\n *   \n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\n\nmodule powerbi.data {\n    export module DataViewPivotMatrix {\n        /** Pivots row hierarchy members in a matrix DataView into column hierarchy. */\n        export function apply(dataViewMatrix: DataViewMatrix, context: MatrixTransformationContext): void {\n            debug.assertValue(dataViewMatrix, 'dataViewMatrix');\n\n            if (!context.columnHierarchyRewritten)\n                dataViewMatrix.columns = Prototype.inherit(dataViewMatrix.columns);\n            let columns = dataViewMatrix.columns;\n\n            if (!context.rowHierarchyRewritten)\n                dataViewMatrix.rows = Prototype.inherit(dataViewMatrix.rows);\n            let rows = dataViewMatrix.rows;\n\n            if (columns.levels.length > 1)\n                return;\n\n            let pivotedRowNode: DataViewMatrixNode = {\n                level: 0\n            };\n\n            let columnLeafNodes: DataViewMatrixNode[] = columns.root.children;\n            let columnCount = columnLeafNodes.length;\n\n            if (columnCount > 0) {\n                let index = 0;\n                let callback = function (node: DataViewMatrixNode) {\n                    // Collect values and remove them from row leaves\n                    if (node.values) {\n                        if (!pivotedRowNode.values)\n                            pivotedRowNode.values = {};\n\n                        for (let i = 0; i < columnCount; i++)\n                            pivotedRowNode.values[index++] = node.values[i];\n\n                        delete node.values;\n                    }\n\n                    // Create measure headers if there are more than one measures\n                    if (columnCount > 1) {\n                        let level = node.level + 1;\n                        if (!node.children)\n                            node.children = [];\n\n                        for (let j = 0; j < columnCount; j++) {\n                            let measureHeaderLeaf: DataViewMatrixNode = { level: level };\n\n                            // Copy levelSourceIndex from columnLeafNodes (as they might have been reordered)\n                            let columnLeafNode = columnLeafNodes[j];\n                            measureHeaderLeaf.levelSourceIndex = columnLeafNode.levelSourceIndex;\n\n                            if (node.isSubtotal)\n                                measureHeaderLeaf.isSubtotal = true;\n\n                            node.children.push(measureHeaderLeaf);\n                        }\n                    }\n                };\n\n                if (context.hierarchyTreesRewritten) {\n                    forEachLeaf(rows.root, callback);\n                }\n                else {\n                    dataViewMatrix.columns.root = cloneTreeExecuteOnLeaf(rows.root, callback);\n                }\n            }\n            else {\n                if (!context.hierarchyTreesRewritten) {\n                    dataViewMatrix.columns.root = cloneTree(rows.root);\n                }\n            }\n\n            if (columnCount > 1) {\n                // Keep measure headers, but move them to the innermost level\n                let level: DataViewHierarchyLevel = { sources: columns.levels[0].sources };\n                rows.levels.push(level);\n\n                columns.levels.length = 0;\n            }\n\n            if (context.hierarchyTreesRewritten) {\n                dataViewMatrix.columns.root = rows.root;\n                dataViewMatrix.rows.root = {\n                    children: [pivotedRowNode]\n                };\n            }\n            else {\n                let updatedRowRoot = Prototype.inherit(dataViewMatrix.rows.root);\n                updatedRowRoot.children = [pivotedRowNode];\n                dataViewMatrix.rows.root = updatedRowRoot;\n            }\n\n            dataViewMatrix.columns.levels = rows.levels;\n            dataViewMatrix.rows.levels = [];\n        }\n\n        function forEachLeaf(root: DataViewMatrixNode, callback: (node: DataViewMatrixNode) => void): void {\n            let children = root.children;\n            if (children && children.length > 0) {\n                for (let i = 0, ilen = children.length; i < ilen; i++)\n                    forEachLeaf(children[i], callback);\n\n                return;\n            }\n\n            callback(root);\n        }\n\n        export function cloneTree(node: DataViewMatrixNode): DataViewMatrixNode {\n            return cloneTreeExecuteOnLeaf(node);\n        }\n\n        export function cloneTreeExecuteOnLeaf(node: DataViewMatrixNode, callback?: (node: DataViewMatrixNode) => void): DataViewMatrixNode {\n            let updatedNode = Prototype.inherit(node);\n\n            let children = node.children;\n            if (children && children.length > 0) {\n                let newChildren: DataViewTreeNode[] = [];\n\n                for (let i = 0, ilen = children.length; i < ilen; i++) {\n                    let updatedChild = cloneTreeExecuteOnLeaf(children[i], callback);\n                    newChildren.push(updatedChild);\n                }\n                updatedNode.children = newChildren;\n            }\n            else {\n                if (callback)\n                    callback(updatedNode);\n            }\n\n            return updatedNode;\n        }\n    }\n} ","/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved. \n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *   \n *  The above copyright notice and this permission notice shall be included in \n *  all copies or substantial portions of the Software.\n *   \n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\n\nmodule powerbi.data {\n    export module DataViewSelfCrossJoin {\n        /**\n         * Returns a new DataView based on the original, with a single DataViewCategorical category that is \"cross joined\"\n         * to itself as a value grouping.\n         * This is the mathematical equivalent of taking an array and turning it into an identity matrix.\n         */\n        export function apply(dataView: DataView): DataView {\n            debug.assertValue(dataView, 'dataView');\n\n            if (!dataView.categorical)\n                return;\n            let dataViewCategorical = dataView.categorical;\n            if (!dataViewCategorical.categories || dataViewCategorical.categories.length !== 1)\n                return;\n            if (dataViewCategorical.values && dataViewCategorical.values.source)\n                return;\n\n            return applyCategorical(dataView.metadata, dataViewCategorical);\n        }\n\n        function applyCategorical(dataViewMetadata: DataViewMetadata, dataViewCategorical: DataViewCategorical): DataView {\n            debug.assertValue(dataViewMetadata, 'dataViewMetadata');\n            debug.assertValue(dataViewCategorical, 'dataViewCategorical');\n            debug.assertValue(dataViewCategorical.categories, 'dataViewCategorical.categories');\n\n            let category = dataViewCategorical.categories[0],\n                categoryValues = category.values,\n                categoryLength = categoryValues.length;\n\n            if (categoryLength === 0)\n                return;\n\n            let valuesArray: DataViewValueColumn[] = dataViewCategorical.values\n                ? dataViewCategorical.values.grouped()[0].values\n                : [];\n            let transformedDataView = createCategoricalDataViewBuilder()\n                .withCategories(dataViewCategorical.categories)\n                .withGroupedValues(createGroupedValues(category, categoryValues, categoryLength, valuesArray))\n                .build();\n\n            dataViewMetadata = Prototype.inherit(dataViewMetadata);\n            dataViewMetadata.columns = transformedDataView.metadata.columns;\n\n            return {\n                metadata: dataViewMetadata,\n                categorical: transformedDataView.categorical,\n            };\n        }\n\n        function createGroupedValues(\n            category: DataViewCategoryColumn,\n            categoryValues: any[],\n            categoryLength: number,\n            valuesArray: DataViewValueColumn[]): DataViewBuilderGroupedValuesOptions {\n            debug.assertValue(category, 'category');\n            debug.assertValue(categoryValues, 'categoryValues');\n            debug.assertValue(categoryLength, 'categoryLength');\n            debug.assertValue(valuesArray, 'valuesArray');\n\n            let nullValuesArray: any[] = createNullValues(categoryLength),\n                valuesArrayLen = valuesArray.length,\n                seriesData: DataViewBuilderSeriesData[][] = [];\n\n            for (let i = 0; i < categoryLength; i++) {\n                let seriesDataItem: DataViewBuilderSeriesData[] = [];\n\n                for (let j = 0; j < valuesArrayLen; j++) {\n                    let originalValueColumn = valuesArray[j],\n                        originalHighlightValues = originalValueColumn.highlights;\n\n                    let seriesDataItemCategory: DataViewBuilderSeriesData = {\n                        values: inheritArrayWithValue(nullValuesArray, originalValueColumn.values, i),\n                    };\n                    if (originalHighlightValues)\n                        seriesDataItemCategory.highlights = inheritArrayWithValue(nullValuesArray, originalHighlightValues, i);\n\n                    seriesDataItem.push(seriesDataItemCategory);\n                }\n\n                seriesData.push(seriesDataItem);\n            }\n\n            return {\n                groupColumn: {\n                    source: category.source,\n                    identityFrom: { fields: <SQExpr[]>category.identityFields, identities: category.identity },\n                    values: category.values,\n                },\n                valueColumns: _.map(valuesArray, v => <DataViewBuilderColumnOptions>{ source: v.source }),\n                data: seriesData,\n            };\n        }\n    }\n\n    function createNullValues(length: number): any[] {\n        debug.assertValue(length, 'length');\n\n        let array = new Array(length);\n        for (let i = 0; i < length; i++)\n            array[i] = null;\n        return array;\n    }\n\n    function inheritArrayWithValue(nullValues: any[], original: any[], index: number): any[] {\n        let inherited = Prototype.inherit(nullValues);\n        inherited[index] = original[index];\n\n        return inherited;\n    }\n}","/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\n\nmodule powerbi.data {\n    import ArrayExtensions = jsCommon.ArrayExtensions;\n    import DataShapeBindingDataReduction = powerbi.data.DataShapeBindingDataReduction;\n    import RoleKindByQueryRef = DataViewAnalysis.RoleKindByQueryRef;\n\n    export module DataViewPivotCategoricalToPrimaryGroups {\n\n        /**\n         * If mapping requests cross axis data reduction and the binding has secondary grouping, mutates the binding to\n         * pivot the secondary before the primary.\n         */\n        export function pivotBinding(binding: DataShapeBinding, allMappings: CompiledDataViewMapping[], finalMapping: CompiledDataViewMapping, defaultDataVolume: number): void {\n            // unpivot is inferred from result in DataViewTransform.apply but it does not have the\n            // compiled mappings available, let alone the merged mapping, only the original\n            // DataViewMappings. to keep that inference easy, only apply pivot when there's\n            // only one matching mapping\n            if (!allMappings || allMappings.length !== 1)\n                return;\n\n            if (!finalMapping.categorical || !finalMapping.categorical.dataReductionAlgorithm)\n                return;\n\n            if (!binding)\n                return;\n\n            if (!canPivotCategorical(binding, finalMapping))\n                return;\n\n            // pivot secondary onto front of primary\n            binding.Primary.Groupings = [binding.Secondary.Groupings[0], binding.Primary.Groupings[0]];\n\n            binding.Secondary = undefined;\n        \n            // set primary to pivot reduction\n            binding.DataReduction = {\n                Primary: DataShapeBindingDataReduction.createFrom(finalMapping.categorical.dataReductionAlgorithm),\n                DataVolume: finalMapping.categorical.dataVolume || defaultDataVolume,\n            };\n        }\n\n        /** narrowly targets scatter chart scenario for now to keep code simple */\n        function isPivotableAxis(axis: powerbi.data.DataShapeBindingAxis): boolean {\n            return axis\n                && axis.Groupings\n                && axis.Groupings.length === 1\n                && !_.isEmpty(axis.Groupings[0].Projections)\n                && !axis.Groupings[0].Subtotal\n                && _.isEmpty(axis.Groupings[0].SuppressedProjections);\n        }\n\n        function canPivotCategorical(binding: DataShapeBinding, mapping: CompiledDataViewMapping): boolean {\n            if (!isPivotableAxis(binding.Primary))\n                return false;\n            if (!isPivotableAxis(binding.Secondary) || binding.Secondary.Groupings[0].Projections.length !== 1)\n                return false;\n\n            // don't pivot if either axis has a data reduction\n            if (binding.DataReduction && (binding.DataReduction.Primary || binding.DataReduction.Secondary))\n                return false;\n\n            return true;\n        }\n\n        export function unpivotResult(oldDataView: DataView, selects: DataViewSelectTransform[], dataViewMappings: DataViewMapping[], projectionActiveItems: DataViewProjectionActiveItems): DataView {\n            if (!inferUnpivotTransform(selects, dataViewMappings, oldDataView, projectionActiveItems))\n                return oldDataView;\n\n            // This returns a subsetted version of the DataView rather than using prototypal inheritance because\n            // any dataviews in the old one (including ones invented after this code is written) will correspond\n            // to a pivoted query result and therefore will be in the wrong shape for the unpivoted query the\n            // querying code made.\n            let newDataView: DataView = {\n                metadata: {\n                    columns: ArrayExtensions.copy(oldDataView.metadata.columns),\n                },\n            };\n            \n            // preserve view types that aren't affected by pivoting\n            if (oldDataView.single)\n                newDataView.single = oldDataView.single;\n            if (oldDataView.table)\n                newDataView.table = oldDataView.table;\n\n            // other views are derived from matrix\n            if (oldDataView.matrix) {\n                let newDataViewMatrix = unpivotMatrix(oldDataView.matrix);\n\n                // categorical only if there's data\n                if (!_.isEmpty(newDataViewMatrix.valueSources))\n                    newDataView.categorical = categoricalFromUnpivotedMatrix(newDataViewMatrix, newDataView.metadata.columns);\n            }\n\n            return newDataView;\n        }\n\n        /** Get roles from a role mapping */\n        function getRolesInRoleMapping(role: (roleName: string) => void, roleMapping: DataViewRoleBindMapping | DataViewRoleForMapping | DataViewGroupedRoleMapping | DataViewListRoleMapping): void {\n            if (!roleMapping)\n                return;\n\n            if ((<DataViewRoleBindMapping>roleMapping).bind)\n                role((<DataViewRoleBindMapping>roleMapping).bind.to);\n\n            if ((<DataViewRoleForMapping>roleMapping).for)\n                role((<DataViewRoleForMapping>roleMapping).for.in);\n\n            if ((<DataViewGroupedRoleMapping>roleMapping).group) {\n                role((<DataViewGroupedRoleMapping>roleMapping).group.by);\n                getRolesInRoleMappings(role, (<DataViewGroupedRoleMapping>roleMapping).group.select);\n            }\n\n            getRolesInRoleMappings(role, (<DataViewListRoleMapping>roleMapping).select);\n        }\n\n        /** Get roles from a list of role mappings */\n        function getRolesInRoleMappings(role: (roleName: string) => void, roleMappings: (DataViewRoleBindMapping | DataViewRoleForMapping)[]): void {\n            if (!_.isEmpty(roleMappings)) {\n                for (let roleMapping of roleMappings)\n                    getRolesInRoleMapping(role, roleMapping);\n            }\n        }\n\n        /**\n         * Infer from the query result and the visual mappings whether the query was pivoted.\n         * Narrowly targets scatter chart scenario for now to keep code simple\n         */\n        function inferUnpivotTransform(selects: DataViewSelectTransform[], dataViewMappings: DataViewMapping[], dataView: DataView, projectionActiveItems: DataViewProjectionActiveItems): boolean {\n            if (!selects || !dataViewMappings || !dataView)\n                return false;\n\n            // select applicable mappings based on select roles\n            let roleKinds: RoleKindByQueryRef = DataViewSelectTransform.createRoleKindFromMetadata(selects, dataView.metadata);\n            let projections: QueryProjectionsByRole = DataViewSelectTransform.projectionsFromSelects(selects, projectionActiveItems);\n            dataViewMappings = DataViewAnalysis.chooseDataViewMappings(projections, dataViewMappings, roleKinds).supportedMappings;\n\n            // NOTE: limiting to simple situation that handles scatter for now - see the other side in canPivotCategorical\n            if (!dataViewMappings || dataViewMappings.length !== 1)\n                return false;\n\n            let categoricalMapping = dataViewMappings[0].categorical;\n            if (!categoricalMapping)\n                return false;\n\n            // pivoted query will have produced a matrix\n            let matrixDataview = dataView.matrix;\n            if (!matrixDataview)\n                return false;\n\n            // matrix must have two levels of grouping\n            if (!matrixDataview.rows || !matrixDataview.rows.levels || matrixDataview.rows.levels.length !== 2)\n                return false;\n\n            // get category and value grouping roles\n            let categoryGroups: string[] = [];\n            let valueGroups: string[] = [];\n\n            let addGroupingRole = (roleName: string, groups: string[]) => {\n                let roleProjections: QueryProjectionCollection = projections[roleName];\n                if (!roleProjections)\n                    return;\n\n                for (let roleProjection of roleProjections.all()) {\n                    if (roleKinds[roleProjection.queryRef] === VisualDataRoleKind.Grouping)\n                        groups.push(roleProjection.queryRef);\n                }\n            };\n\n            getRolesInRoleMapping((roleName: string) => { addGroupingRole(roleName, categoryGroups); }, categoricalMapping.categories);\n            getRolesInRoleMapping((roleName: string) => { addGroupingRole(roleName, valueGroups); }, categoricalMapping.values);\n\n            // need both for pivot to have been done\n            if (_.isEmpty(categoryGroups) || _.isEmpty(valueGroups))\n                return false;\n\n            // if there was a pivot, there won't be any measures left in the columns\n            for (let level of matrixDataview.columns.levels) {\n                for (let source of level.sources) {\n                    if (!source.isMeasure)\n                        return false;\n                }\n            }\n\n            return true;\n        }\n\n        interface GroupValue {\n            identity: DataViewScopeIdentity;\n            value: any;\n        }\n\n        interface DataViewMatrixNodeValues {\n            [id: number]: DataViewMatrixNodeValue;\n        }\n\n        /**\n         * matrix will have two groupings in the rows, outer (series) and inner (categories), and none in the columns.\n         * this function changes that so that the categories become the rows and the series the columns.\n         */\n        function unpivotMatrix(oldMatrix: DataViewMatrix): DataViewMatrix {\n            let oldRows = oldMatrix.rows;\n            let oldRoot = oldRows.root;\n            let oldChildren = oldRoot.children;\n\n            // series are the outer grouping\n            let series: GroupValue[] = [];\n            let seriesIdLevel = oldRows.levels[0];\n            let seriesIdFields = oldRoot.childIdentityFields;\n\n            // categories are the inner grouping. \n            let categories: GroupValue[] = [];\n            let categoryIdLevel = oldRows.levels[1];\n            let categoryIdFields = oldChildren[0].childIdentityFields;\n\n            let measureCount = oldMatrix.valueSources.length;\n\n            // within each series value, the category list may not be complete so cannot simply use the inner loop index\n            // to reference it.\n            let findcat = (identity: DataViewScopeIdentity) => {\n                return _.findIndex(categories, pair => DataViewScopeIdentity.equals(pair.identity, identity));\n            };\n\n            // collect series and categories from the row hierarchy\n            for (let seriesNode of oldChildren) {\n                series.push({ value: seriesNode.value, identity: seriesNode.identity });\n\n                for (let categoryNode of seriesNode.children) {\n                    let catindex = findcat(categoryNode.identity);\n                    if (catindex === -1)\n                        categories.push({ value: categoryNode.value, identity: categoryNode.identity });\n                }\n            }\n            \n            // extract intersection values from pivoted matrix\n            // values will be indexed by categories then series\n            let matrixValues: DataViewMatrixNodeValues[][] = new Array<DataViewMatrixNodeValues[]>(categories.length);\n            for (let j = 0; j < series.length; ++j) { // outer is series\n                let seriesNode = oldChildren[j];\n                for (let categoryNode of seriesNode.children) { // inner is categories but maybe a subset\n                    let i = findcat(categoryNode.identity); // must lookup actual category index\n\n                    if (!matrixValues[i])\n                        matrixValues[i] = new Array<DataViewMatrixNodeValues>(series.length);\n\n                    matrixValues[i][j] = categoryNode.values;\n                }\n            }\n\n            // unpivoted matrix columns are the series\n            let newColumns: DataViewHierarchy = {\n                root: {\n                    children: _.map(series, (s: any) => {\n                        return {\n                            level: 0,\n                            value: s.value,\n                            identity: s.identity,\n                        };\n                    }),\n                    childIdentityFields: seriesIdFields,\n                },\n                levels: [\n                    seriesIdLevel,\n                    \n                ],\n            };\n            if (measureCount > 0) {\n                let newColChildren: DataViewMatrixNode[] = _.map(oldMatrix.columns.root.children, (srcnode: DataViewMatrixNode) => {\n                    let dstnode: DataViewMatrixNode = { level: 1 };\n                    if (srcnode.levelSourceIndex)\n                        dstnode.levelSourceIndex = srcnode.levelSourceIndex;\n                    return dstnode;\n                });\n\n                for (let i = 0; i < newColumns.root.children.length; ++i)\n                    newColumns.root.children[i].children = newColChildren;\n\n                newColumns.levels.push(oldMatrix.columns.levels[0]);\n            }\n\n            // unpivoted rows are the categories\n            let newRows: DataViewHierarchy = {\n                root: {\n                    children: _.map(categories, (s: GroupValue) => { return { level: 0, value: s.value, identity: s.identity }; }),\n                    childIdentityFields: categoryIdFields,\n                },\n                levels: [\n                    categoryIdLevel,\n                ],\n            };\n\n            // put values into rows\n            if (measureCount > 0) {\n                for (let i = 0; i < categories.length; ++i) {\n                    let row = newRows.root.children[i];\n                    let rowValues: DataViewMatrixNodeValues = {};\n\n                    for (let j = 0; j < series.length; ++j) {\n                        let mvalues = matrixValues[i][j];\n                        for (let k = 0; k < measureCount; ++k) {\n                            let l = j * measureCount + k;\n                            rowValues[l] = !mvalues\n                                ? ( k === 0 ? { value: null } : { value: null, valueSourceIndex: k } )\n                                : mvalues[k];\n                        }\n                    }\n\n                    row.values = rowValues;\n                }\n            }\n\n            let newMatrix: DataViewMatrix = {\n                rows: newRows,\n                columns: newColumns,\n                valueSources: oldMatrix.valueSources,\n            };\n\n            return newMatrix;\n        }\n\n        /** build a categorical data view from an unpivoted matrix. */\n        function categoricalFromUnpivotedMatrix(matrix: DataViewMatrix, columnMetadata: DataViewMetadataColumn[]): DataViewCategorical {\n            let seriesCount = matrix.columns.root.children.length;\n            let measureMetadata = matrix.valueSources;\n            let measureCount = measureMetadata.length;\n\n            // create categories from rows\n            let categories: DataViewCategoryColumn[] = [\n                {\n                    source: matrix.rows.levels[0].sources[0],\n                    values: _.map(matrix.rows.root.children, x => x.value),\n                    identity: _.map(matrix.rows.root.children, x => x.identity),\n                    identityFields: matrix.rows.root.childIdentityFields,\n                },\n            ];\n\n            // create grouped values\n            let groups: DataViewValueColumnGroup[] = [];\n            for (let j = 0; j < seriesCount; ++j) {\n                let seriesColumn = matrix.columns.root.children[j];\n                let group: DataViewValueColumnGroup = {\n                    values: [],\n                    identity: seriesColumn.identity,\n                    name: seriesColumn.value || null,\n                };\n\n                groups.push(group);\n\n                for (let k = 0; k < measureCount; ++k) {\n                    let valueColumnMetadataSrc = measureMetadata[k];\n                    let valueColumnMetadataDst: DataViewMetadataColumn = <DataViewMetadataColumn>{};\n                    for (let key in valueColumnMetadataSrc)\n                        valueColumnMetadataDst[key] = valueColumnMetadataSrc[key];\n                    valueColumnMetadataDst.groupName = group.name;\n\n                    columnMetadata.push(valueColumnMetadataDst);\n\n                    let valueColumn: DataViewValueColumn = {\n                        source: valueColumnMetadataDst,\n                        values: [],\n                        identity: group.identity,\n                    };\n\n                    group.values.push(valueColumn);\n\n                    // grab measure values in the group from across rows of matrix\n                    let index = k + j * measureCount;\n\n                    for (let categoryNode of matrix.rows.root.children) {\n                        let value = categoryNode.values[index].value;\n\n                        valueColumn.values.push(value);\n                    }\n                }\n            }\n\n            // and now ungrouped\n            let values: DataViewValueColumns = <DataViewValueColumns>[];\n            for (let group of groups) {\n                for (let k = 0; k < measureCount; ++k) {\n                    values.push(group.values[k]);\n                }\n            }\n\n            values.grouped = () => groups;\n            values.identityFields = matrix.columns.root.childIdentityFields;\n            values.source = matrix.columns.levels[0].sources[0];\n\n            // final assembly\n            let categorical: DataViewCategorical = {\n                categories: categories,\n                values: values,\n            };\n\n            return categorical;\n        }\n    }\n}","/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\n\nmodule powerbi.data {\n    import inherit = Prototype.inherit;\n    import inheritSingle = Prototype.inheritSingle;\n    import ArrayExtensions = jsCommon.ArrayExtensions;\n    import EnumExtensions = jsCommon.EnumExtensions;\n    import INumberDictionary = jsCommon.INumberDictionary;\n\n    export interface DataViewTransformApplyOptions {\n        prototype: DataView;\n        objectDescriptors: DataViewObjectDescriptors;\n        dataViewMappings?: DataViewMapping[];\n        transforms: DataViewTransformActions;\n        colorAllocatorFactory: IColorAllocatorFactory;\n        dataRoles: VisualDataRole[];\n    }\n\n    /** Describes the Transform actions to be done to a prototype DataView. */\n    export interface DataViewTransformActions {\n        /** Describes transform metadata for each semantic query select item, as the arrays align, by index. */\n        selects?: DataViewSelectTransform[];\n\n        /** Describes the DataViewObject definitions. */\n        objects?: DataViewObjectDefinitions;\n\n        /** Describes the splitting of a single input DataView into multiple DataViews. */\n        splits?: DataViewSplitTransform[];\n\n        /** Describes the projection metadata which includes projection ordering and active items. */\n        roles?: DataViewRoleTransformMetadata;\n    }\n\n    export interface DataViewSplitTransform {\n        selects: INumberDictionary<boolean>;\n    }\n\n    export interface DataViewProjectionOrdering {\n        [roleName: string]: number[];\n    }\n\n    export interface DataViewProjectionActiveItems {\n        [roleName: string]: string[];\n    }\n\n    export interface DataViewRoleTransformMetadata {\n        /** Describes the order of selects (referenced by query index) in each role. */\n        ordering?: DataViewProjectionOrdering;\n\n        /** Describes the active items in each role. */\n        activeItems?: DataViewProjectionActiveItems;\n    }\n\n    export interface MatrixTransformationContext {\n        rowHierarchyRewritten: boolean;\n        columnHierarchyRewritten: boolean;\n        hierarchyTreesRewritten: boolean;\n    }\n\n    interface ValueRewrite<T> {\n        from: T;\n        to: T;\n    }\n\n    interface NumberToNumberMapping {\n        [position: number]: number;\n    }\n\n    const enum CategoricalDataViewTransformation {\n        None,\n        Pivot,\n        SelfCrossJoin,\n    }\n\n    export const enum StandardDataViewKinds {\n        None = 0,\n        Categorical = 1,\n        Matrix = 1 << 1,\n        Single = 1 << 2,\n        Table = 1 << 3,\n        Tree = 1 << 4,\n    }\n\n    // TODO: refactor & focus DataViewTransform into a service with well-defined dependencies.\n    export module DataViewTransform {\n        export function apply(options: DataViewTransformApplyOptions): DataView[] {\n            debug.assertValue(options, 'options');\n\n            // TODO: Flow a context object through to capture errors/warnings about what happens here for better diagnosability.\n\n            let prototype = options.prototype,\n                objectDescriptors = options.objectDescriptors,\n                dataViewMappings = options.dataViewMappings,\n                transforms = options.transforms,\n                projectionActiveItems = transforms && transforms.roles && transforms.roles.activeItems,\n                colorAllocatorFactory = options.colorAllocatorFactory,\n                dataRoles = options.dataRoles;\n\n            if (!prototype)\n                return transformEmptyDataView(objectDescriptors, transforms, colorAllocatorFactory);\n\n            if (!transforms)\n                return [prototype];\n\n            // Transform Query DataView\n            prototype = DataViewPivotCategoricalToPrimaryGroups.unpivotResult(prototype, transforms.selects, dataViewMappings, projectionActiveItems);\n            let transformedDataViews: DataView[] = transformQueryToVisualDataView(prototype, transforms, objectDescriptors, dataViewMappings, colorAllocatorFactory, dataRoles);\n\n            // Transform and generate derived visual DataViews\n            transformedDataViews = DataViewRegression.run({\n                dataViewMappings: dataViewMappings,\n                transformedDataViews: transformedDataViews,\n                dataRoles: dataRoles,\n                objectDescriptors: objectDescriptors,\n                objectDefinitions: transforms.objects,\n                colorAllocatorFactory: colorAllocatorFactory,\n                transformSelects: transforms.selects,\n                dataView: prototype,\n                projectionActiveItems: projectionActiveItems,\n            });\n\n            return transformedDataViews;\n        }\n\n        function transformQueryToVisualDataView(\n            prototype: DataView,\n            transforms: DataViewTransformActions,\n            objectDescriptors: DataViewObjectDescriptors,\n            dataViewMappings: DataViewMapping[],\n            colorAllocatorFactory: IColorAllocatorFactory,\n            dataRoles: VisualDataRole[]): DataView[] {\n            let transformedDataViews: DataView[] = [];\n            let splits = transforms.splits;\n            if (_.isEmpty(splits)) {\n                transformedDataViews.push(transformDataView(prototype, objectDescriptors, dataViewMappings, transforms, colorAllocatorFactory, dataRoles));\n            } else {\n                for (let split of splits) {\n                    let transformed = transformDataView(prototype, objectDescriptors, dataViewMappings, transforms, colorAllocatorFactory, dataRoles, split.selects);\n                    transformedDataViews.push(transformed);\n                }\n            }\n            return transformedDataViews;\n        }\n\n        function transformEmptyDataView(objectDescriptors: DataViewObjectDescriptors, transforms: DataViewTransformActions, colorAllocatorFactory: IColorAllocatorFactory): DataView[] {\n            if (transforms && transforms.objects) {\n                let emptyDataView: DataView = {\n                    metadata: {\n                        columns: [],\n                    }\n                };\n\n                transformObjects(\n                    emptyDataView,\n                    StandardDataViewKinds.None,\n                    objectDescriptors,\n                    transforms.objects,\n                    transforms.selects,\n                    colorAllocatorFactory);\n\n                return [emptyDataView];\n            }\n\n            return [];\n        }\n\n        function transformDataView(\n            prototype: DataView,\n            objectDescriptors: DataViewObjectDescriptors,\n            roleMappings: DataViewMapping[],\n            transforms: DataViewTransformActions,\n            colorAllocatorFactory: IColorAllocatorFactory,\n            dataRoles: VisualDataRole[],\n            selectsToInclude?: INumberDictionary<boolean>): DataView {\n            debug.assertValue(prototype, 'prototype');\n\n            let targetKinds = getTargetKinds(roleMappings);\n            let transformed = inherit(prototype);\n            transformed.metadata = inherit(prototype.metadata);\n\n            let projectionOrdering = transforms.roles && transforms.roles.ordering;\n            let projectionActiveItems = transforms.roles && transforms.roles.activeItems;\n            transformed = transformSelects(transformed, roleMappings, transforms.selects, projectionOrdering, selectsToInclude);\n            transformObjects(transformed, targetKinds, objectDescriptors, transforms.objects, transforms.selects, colorAllocatorFactory);\n\n            // Note: Do this step after transformObjects() so that metadata columns in 'transformed' have roles and objects.general.formatString populated\n            transformed = DataViewConcatenateCategoricalColumns.detectAndApply(transformed, roleMappings, projectionOrdering, transforms.selects, projectionActiveItems);\n\n            DataViewNormalizeValues.apply({\n                dataview: transformed,\n                dataViewMappings: roleMappings,\n                dataRoles: dataRoles,\n            });\n\n            return transformed;\n        }\n\n        function getTargetKinds(roleMappings: DataViewMapping[]): StandardDataViewKinds {\n            debug.assertAnyValue(roleMappings, 'roleMappings');\n\n            if (!roleMappings)\n                return StandardDataViewKinds.None;\n\n            let result = StandardDataViewKinds.None;\n            for (let roleMapping of roleMappings) {\n                if (roleMapping.categorical)\n                    result |= StandardDataViewKinds.Categorical;\n                if (roleMapping.matrix)\n                    result |= StandardDataViewKinds.Matrix;\n                if (roleMapping.single)\n                    result |= StandardDataViewKinds.Single;\n                if (roleMapping.table)\n                    result |= StandardDataViewKinds.Table;\n                if (roleMapping.tree)\n                    result |= StandardDataViewKinds.Tree;\n            }\n            return result;\n        }\n\n        function transformSelects(\n            dataView: DataView,\n            roleMappings: DataViewMapping[],\n            selectTransforms: DataViewSelectTransform[],\n            projectionOrdering?: DataViewProjectionOrdering,\n            selectsToInclude?: INumberDictionary<boolean>): DataView {\n\n            let columnRewrites: ValueRewrite<DataViewMetadataColumn>[] = [];\n            if (selectTransforms) {\n                dataView.metadata.columns = applyTransformsToColumns(\n                    dataView.metadata.columns,\n                    selectTransforms,\n                    columnRewrites);\n            }\n\n            // NOTE: no rewrites necessary for Tree (it doesn't reference the columns)\n            if (dataView.categorical) {\n                dataView.categorical = applyRewritesToCategorical(dataView.categorical, columnRewrites, selectsToInclude);\n\n                // NOTE: This is slightly DSR-specific.\n                dataView = pivotIfNecessary(dataView, roleMappings);\n            }\n\n            if (dataView.matrix) {\n                let matrixTransformationContext: MatrixTransformationContext = {\n                    rowHierarchyRewritten: false,\n                    columnHierarchyRewritten: false,\n                    hierarchyTreesRewritten: false\n                };\n                dataView.matrix = applyRewritesToMatrix(dataView.matrix, columnRewrites, roleMappings, projectionOrdering, matrixTransformationContext);\n\n                if (shouldPivotMatrix(dataView.matrix, roleMappings))\n                    DataViewPivotMatrix.apply(dataView.matrix, matrixTransformationContext);\n            }\n\n            if (dataView.table)\n                dataView.table = applyRewritesToTable(dataView.table, columnRewrites, roleMappings, projectionOrdering);\n\n            return dataView;\n        }\n\n        function applyTransformsToColumns(\n            prototypeColumns: DataViewMetadataColumn[],\n            selects: DataViewSelectTransform[],\n            rewrites: ValueRewrite<DataViewMetadataColumn>[]): DataViewMetadataColumn[] {\n            debug.assertValue(prototypeColumns, 'columns');\n\n            if (!selects)\n                return prototypeColumns;\n\n            //column may contain undefined entries\n            let columns = inherit(prototypeColumns);\n\n            for (let i = 0, len = prototypeColumns.length; i < len; i++) {\n                let prototypeColumn = prototypeColumns[i];\n                let select = selects[prototypeColumn.index];\n                if (!select)\n                    continue;\n\n                let column: DataViewMetadataColumn = columns[i] = inherit(prototypeColumn);\n\n                if (select.roles)\n                    column.roles = select.roles;\n                if (select.type)\n                    column.type = select.type;\n                column.format = getFormatForColumn(select, column);\n\n                if (select.displayName)\n                    column.displayName = select.displayName;\n                if (select.queryName)\n                    column.queryName = select.queryName;\n                if (select.kpi)\n                    column.kpi = select.kpi;\n                if (select.sort)\n                    column.sort = select.sort;\n                if (select.discourageAggregationAcrossGroups)\n                    column.discourageAggregationAcrossGroups = select.discourageAggregationAcrossGroups;\n\n                rewrites.push({\n                    from: prototypeColumn,\n                    to: column,\n                });\n            }\n\n            return columns;\n        }\n\n        /**\n         * Get the column format. Order of precendence is:\n         *  1. Select format\n         *  2. Column format\n         */\n        function getFormatForColumn(select: DataViewSelectTransform, column: DataViewMetadataColumn): string {\n            // TODO: we already copied the select.Format to column.format, we probably don't need this check\n            return select.format || column.format;\n        }\n\n        function applyRewritesToCategorical(prototype: DataViewCategorical, columnRewrites: ValueRewrite<DataViewMetadataColumn>[], selectsToInclude?: INumberDictionary<boolean>): DataViewCategorical {\n            debug.assertValue(prototype, 'prototype');\n            debug.assertValue(columnRewrites, 'columnRewrites');\n\n            let categorical = inherit(prototype);\n\n            function override(value: { source?: DataViewMetadataColumn }) {\n                let rewrittenSource = findOverride(value.source, columnRewrites);\n                if (rewrittenSource) {\n                    let rewritten = inherit(value);\n                    rewritten.source = rewrittenSource;\n                    return rewritten;\n                }\n            }\n\n            let categories = Prototype.overrideArray(prototype.categories, override);\n            if (categories)\n                categorical.categories = categories;\n\n            let values = Prototype.overrideArray(prototype.values, override);\n\n            if (values) {\n                if (selectsToInclude) {\n                    for (let i = values.length - 1; i >= 0; i--) {\n                        if (!selectsToInclude[values[i].source.index])\n                            values.splice(i, 1);\n                    }\n                }\n\n                if (values.source) {\n                    if (selectsToInclude && !selectsToInclude[values.source.index]) {\n                        values.source = undefined;\n                    }\n                    else {\n                        let rewrittenValuesSource = findOverride(values.source, columnRewrites);\n                        if (rewrittenValuesSource)\n                            values.source = rewrittenValuesSource;\n                    }\n                }\n\n                categorical.values = values;\n                setGrouped(values);\n            }\n\n            return categorical;\n        }\n\n        function applyRewritesToTable(\n            prototype: DataViewTable,\n            columnRewrites: ValueRewrite<DataViewMetadataColumn>[],\n            roleMappings: DataViewMapping[],\n            projectionOrdering: DataViewProjectionOrdering): DataViewTable {\n            debug.assertValue(prototype, 'prototype');\n            debug.assertValue(columnRewrites, 'columnRewrites');\n\n            // Don't perform this potentially expensive transform unless we actually have a table.\n            // When we switch to lazy per-visual DataView creation, we'll be able to remove this check.\n            if (!roleMappings || roleMappings.length !== 1 || !roleMappings[0].table)\n                return prototype;\n\n            let table = inherit(prototype);\n\n            // Copy the rewritten columns into the table view\n            let override = (metadata: DataViewMetadataColumn) => findOverride(metadata, columnRewrites);\n            let columns = Prototype.overrideArray(prototype.columns, override);\n            if (columns)\n                table.columns = columns;\n\n            if (!projectionOrdering)\n                return table;\n\n            let newToOldPositions = createTableColumnPositionMapping(projectionOrdering, columnRewrites);\n            if (!newToOldPositions)\n                return table;\n\n            // Reorder the columns\n            let columnsClone = columns.slice(0);\n            let keys = Object.keys(newToOldPositions);\n            for (let i = 0, len = keys.length; i < len; i++) {\n                let sourceColumn = columnsClone[newToOldPositions[keys[i]]];\n\n                // In the case we've hit the end of our columns array, but still have position reordering keys,\n                // there is a duplicate column so we will need to add a new column for the duplicate data\n                if (i === columns.length)\n                    columns.push(sourceColumn);\n                else {\n                    debug.assert(i < columns.length, 'The column index is out of range for reordering.');\n                    columns[i] = sourceColumn;\n                }\n            }\n\n            // Reorder the rows\n            let rows = Prototype.overrideArray(table.rows,\n                (row: any[]) => {\n                    let newRow: any[] = [];\n                    for (let i = 0, len = keys.length; i < len; ++i)\n                        newRow[i] = row[newToOldPositions[keys[i]]];\n\n                    return newRow;\n                });\n\n            if (rows)\n                table.rows = rows;\n\n            return table;\n        }\n\n        /** Creates a mapping of new position to original position. */\n        function createTableColumnPositionMapping(\n            projectionOrdering: DataViewProjectionOrdering,\n            columnRewrites: ValueRewrite<DataViewMetadataColumn>[]): NumberToNumberMapping {\n            let roles = Object.keys(projectionOrdering);\n\n            // If we have more than one role then the ordering of columns between roles is ambiguous, so don't reorder anything.\n            if (roles.length !== 1)\n                return;\n\n            let role = roles[0],\n                originalOrder = _.map(columnRewrites, (rewrite: ValueRewrite<DataViewMetadataColumn>) => rewrite.from.index),\n                newOrder = projectionOrdering[role];\n\n            // Optimization: avoid rewriting the table if all columns are in their default positions.\n            if (ArrayExtensions.sequenceEqual(originalOrder, newOrder, (x: number, y: number) => x === y))\n                return;\n\n            return createOrderMapping(originalOrder, newOrder);\n        }\n\n        function applyRewritesToMatrix(\n            prototype: DataViewMatrix,\n            columnRewrites: ValueRewrite<DataViewMetadataColumn>[],\n            roleMappings: DataViewMapping[],\n            projectionOrdering: DataViewProjectionOrdering,\n            context: MatrixTransformationContext): DataViewMatrix {\n            debug.assertValue(prototype, 'prototype');\n            debug.assertValue(columnRewrites, 'columnRewrites');\n\n            // Don't perform this potentially expensive transform unless we actually have a matrix.\n            // When we switch to lazy per-visual DataView creation, we'll be able to remove this check.\n            if (!roleMappings || roleMappings.length < 1 || !(roleMappings[0].matrix || (roleMappings[1] && roleMappings[1].matrix)))\n                return prototype;\n\n            let matrixMapping = roleMappings[0].matrix || roleMappings[1].matrix;\n            let matrix = inherit(prototype);\n\n            function override(metadata: DataViewMetadataColumn) {\n                return findOverride(metadata, columnRewrites);\n            }\n\n            function overrideHierarchy(hierarchy: DataViewHierarchy): DataViewHierarchy {\n                let rewrittenHierarchy: DataViewHierarchy = null;\n\n                let newLevels = Prototype.overrideArray(\n                    hierarchy.levels,\n                    (level: DataViewHierarchyLevel) => {\n                        let newLevel: DataViewHierarchyLevel = null;\n                        let levelSources = Prototype.overrideArray(level.sources, override);\n                        if (levelSources)\n                            newLevel = ensureRewritten<DataViewHierarchyLevel>(newLevel, level, h => h.sources = levelSources);\n\n                        return newLevel;\n                    });\n                if (newLevels)\n                    rewrittenHierarchy = ensureRewritten<DataViewHierarchy>(rewrittenHierarchy, hierarchy, r => r.levels = newLevels);\n\n                return rewrittenHierarchy;\n            }\n\n            let rows = overrideHierarchy(matrix.rows);\n            if (rows) {\n                matrix.rows = rows;\n                context.rowHierarchyRewritten = true;\n            }\n\n            let columns = overrideHierarchy(matrix.columns);\n            if (columns) {\n                matrix.columns = columns;\n                context.columnHierarchyRewritten = true;\n            }\n\n            let valueSources = Prototype.overrideArray(matrix.valueSources, override);\n            if (valueSources) {\n                matrix.valueSources = valueSources;\n\n                // Only need to reorder if we have more than one value source, and they are all bound to the same role\n                let matrixValues = <DataViewRoleForMapping>matrixMapping.values;\n                if (projectionOrdering && valueSources.length > 1 && matrixValues && matrixValues.for) {\n                    let columnLevels = columns.levels.length;\n                    if (columnLevels > 0) {\n                        let newToOldPositions = createMatrixValuesPositionMapping(matrixValues, projectionOrdering, valueSources, columnRewrites);\n                        if (newToOldPositions) {\n                            let keys = Object.keys(newToOldPositions);\n                            let numKeys = keys.length;\n\n                            // Reorder the value columns\n                            columns.root = DataViewPivotMatrix.cloneTree(columns.root);\n                            if (columnLevels === 1)\n                                reorderChildNodes(columns.root, newToOldPositions);\n                            else\n                                forEachNodeAtLevel(columns.root, columnLevels - 2, (node: DataViewMatrixNode) => reorderChildNodes(node, newToOldPositions));\n\n                            // Reorder the value rows\n                            matrix.rows.root = DataViewPivotMatrix.cloneTreeExecuteOnLeaf(matrix.rows.root, (node: DataViewMatrixNode) => {\n\n                                if (!node.values)\n                                    return;\n\n                                let newValues: { [id: number]: DataViewTreeNodeValue } = {};\n\n                                let iterations = Object.keys(node.values).length / numKeys;\n                                for (let i = 0, len = iterations; i < len; i++) {\n                                    let offset = i * numKeys;\n                                    for (let keysIndex = 0; keysIndex < numKeys; keysIndex++)\n                                        newValues[offset + keysIndex] = node.values[offset + newToOldPositions[keys[keysIndex]]];\n                                }\n\n                                node.values = newValues;\n                            });\n\n                            context.hierarchyTreesRewritten = true;\n                        }\n                    }\n                }\n            }\n\n            return matrix;\n        }\n\n        function reorderChildNodes(node: DataViewMatrixNode, newToOldPositions: NumberToNumberMapping): void {\n            let keys = Object.keys(newToOldPositions);\n            let numKeys = keys.length;\n            let children = node.children;\n\n            let childrenClone = children.slice(0);\n            for (let i = 0, len = numKeys; i < len; i++) {\n                let sourceColumn = childrenClone[newToOldPositions[keys[i]]];\n\n                // In the case we've hit the end of our columns array, but still have position reordering keys,\n                // there is a duplicate column so we will need to add a new column for the duplicate data\n                if (i === children.length)\n                    children.push(sourceColumn);\n                else {\n                    debug.assert(i < children.length, 'The column index is out of range for reordering.');\n                    children[i] = sourceColumn;\n                }\n            }\n        }\n\n        /** Creates a mapping of new position to original position. */\n        function createMatrixValuesPositionMapping(\n            matrixValues: DataViewRoleForMapping,\n            projectionOrdering: DataViewProjectionOrdering,\n            valueSources: DataViewMetadataColumn[],\n            columnRewrites: ValueRewrite<DataViewMetadataColumn>[]): NumberToNumberMapping {\n\n            let role = matrixValues.for.in;\n\n            function matchValueSource(columnRewrite: ValueRewrite<DataViewMetadataColumn>) {\n                for (let i = 0, len = valueSources.length; i < len; i++) {\n                    let valueSource = valueSources[i];\n                    if (valueSource === columnRewrite.to)\n                        return columnRewrite;\n                }\n            }\n\n            let valueRewrites: ValueRewrite<DataViewMetadataColumn>[] = [];\n            for (let i = 0, len = columnRewrites.length; i < len; i++) {\n                let columnRewrite = columnRewrites[i];\n                if (matchValueSource(columnRewrite))\n                    valueRewrites.push(columnRewrite);\n            }\n\n            let newOrder = projectionOrdering[role];\n            let originalOrder = _.map(valueRewrites, (rewrite: ValueRewrite<DataViewMetadataColumn>) => rewrite.from.index);\n\n            // Optimization: avoid rewriting the matrix if all leaf nodes are in their default positions.\n            if (ArrayExtensions.sequenceEqual(originalOrder, newOrder, (x: number, y: number) => x === y))\n                return;\n\n            return createOrderMapping(originalOrder, newOrder);\n        }\n\n        function createOrderMapping(originalOrder: number[], newOrder: number[]): NumberToNumberMapping {\n            let mapping: NumberToNumberMapping = {};\n            for (let i = 0, len = newOrder.length; i < len; ++i) {\n                let newPosition = newOrder[i];\n                mapping[i] = originalOrder.indexOf(newPosition);\n            }\n\n            return mapping;\n        }\n\n        function forEachNodeAtLevel(node: DataViewMatrixNode, targetLevel: number, callback: (node: DataViewMatrixNode) => void): void {\n            if (node.level === targetLevel) {\n                callback(node);\n                return;\n            }\n\n            let children = node.children;\n            if (children && children.length > 0) {\n                for (let i = 0, ilen = children.length; i < ilen; i++)\n                    forEachNodeAtLevel(children[i], targetLevel, callback);\n            }\n        }\n\n        function findOverride(source: DataViewMetadataColumn, columnRewrites: ValueRewrite<DataViewMetadataColumn>[]): DataViewMetadataColumn {\n            for (let i = 0, len = columnRewrites.length; i < len; i++) {\n                let columnRewrite = columnRewrites[i];\n                if (columnRewrite.from === source)\n                    return columnRewrite.to;\n            }\n        }\n\n        function ensureRewritten<T>(rewritten: T, prototype: T, callback?: (rewritten: T) => void): T {\n            if (!rewritten)\n                rewritten = inherit(prototype);\n\n            if (callback)\n                callback(rewritten);\n\n            return rewritten;\n        }\n\n        export function transformObjects(\n            dataView: DataView,\n            targetDataViewKinds: StandardDataViewKinds,\n            objectDescriptors: DataViewObjectDescriptors,\n            objectDefinitions: DataViewObjectDefinitions,\n            selectTransforms: DataViewSelectTransform[],\n            colorAllocatorFactory: IColorAllocatorFactory): void {\n            debug.assertValue(dataView, 'dataView');\n            debug.assertValue(targetDataViewKinds, 'targetDataViewKinds');\n            debug.assertAnyValue(objectDescriptors, 'objectDescriptors');\n            debug.assertAnyValue(objectDefinitions, 'objectDefinitions');\n            debug.assertAnyValue(selectTransforms, 'selectTransforms');\n            debug.assertValue(colorAllocatorFactory, 'colorAllocatorFactory');\n\n            if (!objectDescriptors)\n                return;\n\n            let objectsForAllSelectors = DataViewObjectEvaluationUtils.groupObjectsBySelector(objectDefinitions);\n            DataViewObjectEvaluationUtils.addImplicitObjects(objectsForAllSelectors, objectDescriptors, dataView.metadata.columns, selectTransforms);\n\n            let metadataOnce = objectsForAllSelectors.metadataOnce;\n            let dataObjects = objectsForAllSelectors.data;\n            if (metadataOnce)\n                evaluateMetadataObjects(dataView, selectTransforms, objectDescriptors, metadataOnce.objects, dataObjects, colorAllocatorFactory);\n\n            let metadataObjects = objectsForAllSelectors.metadata;\n            if (metadataObjects) {\n                for (let i = 0, len = metadataObjects.length; i < len; i++) {\n                    let metadataObject = metadataObjects[i];\n                    evaluateMetadataRepetition(dataView, selectTransforms, objectDescriptors, metadataObject.selector, metadataObject.objects);\n                }\n            }\n\n            for (let i = 0, len = dataObjects.length; i < len; i++) {\n                let dataObject = dataObjects[i];\n                evaluateDataRepetition(dataView, targetDataViewKinds, selectTransforms, objectDescriptors, dataObject.selector, dataObject.rules, dataObject.objects);\n            }\n\n            let userDefined = objectsForAllSelectors.userDefined;\n            if (userDefined) {\n                // TODO: We only handle user defined objects at the metadata level, but should be able to support them with arbitrary repetition.\n                evaluateUserDefinedObjects(dataView, selectTransforms, objectDescriptors, userDefined);\n            }\n        }\n\n        function evaluateUserDefinedObjects(\n            dataView: DataView,\n            selectTransforms: DataViewSelectTransform[],\n            objectDescriptors: DataViewObjectDescriptors,\n            objectDefns: DataViewObjectDefinitionsForSelector[]): void {\n            debug.assertValue(dataView, 'dataView');\n            debug.assertAnyValue(selectTransforms, 'selectTransforms');\n            debug.assertValue(objectDescriptors, 'objectDescriptors');\n            debug.assertValue(objectDefns, 'objectDefns');\n\n            let dataViewObjects: DataViewObjects = dataView.metadata.objects;\n            if (!dataViewObjects) {\n                dataViewObjects = dataView.metadata.objects = {};\n            }\n            let evalContext = createStaticEvalContext(dataView, selectTransforms);\n\n            for (let objectDefn of objectDefns) {\n                let id = objectDefn.selector.id;\n\n                let objects = DataViewObjectEvaluationUtils.evaluateDataViewObjects(evalContext, objectDescriptors, objectDefn.objects);\n\n                for (let objectName in objects) {\n                    let object = <DataViewObject>objects[objectName];\n\n                    let map = <DataViewObjectMap>dataViewObjects[objectName];\n                    if (!map)\n                        map = dataViewObjects[objectName] = [];\n                    debug.assert(DataViewObjects.isUserDefined(map), 'expected DataViewObjectMap');\n\n                    // NOTE: We do not check for duplicate ids.\n                    map.push({ id: id, object: object });\n                }\n            }\n        }\n\n        /** Evaluates and sets properties on the DataView metadata. */\n        function evaluateMetadataObjects(\n            dataView: DataView,\n            selectTransforms: DataViewSelectTransform[],\n            objectDescriptors: DataViewObjectDescriptors,\n            objectDefns: DataViewNamedObjectDefinition[],\n            dataObjects: DataViewObjectDefinitionsForSelectorWithRule[],\n            colorAllocatorFactory: IColorAllocatorFactory): void {\n            debug.assertValue(dataView, 'dataView');\n            debug.assertAnyValue(selectTransforms, 'selectTransforms');\n            debug.assertValue(objectDescriptors, 'objectDescriptors');\n            debug.assertValue(objectDefns, 'objectDefns');\n            debug.assertValue(dataObjects, 'dataObjects');\n            debug.assertValue(colorAllocatorFactory, 'colorAllocatorFactory');\n\n            let evalContext = createStaticEvalContext(dataView, selectTransforms);\n            let objects = DataViewObjectEvaluationUtils.evaluateDataViewObjects(evalContext, objectDescriptors, objectDefns);\n            if (objects) {\n                dataView.metadata.objects = objects;\n\n                for (let objectName in objects) {\n                    let object = <DataViewObject>objects[objectName],\n                        objectDesc = objectDescriptors[objectName];\n\n                    for (let propertyName in object) {\n                        let propertyDesc = objectDesc.properties[propertyName],\n                            ruleDesc = propertyDesc.rule;\n                        if (!ruleDesc)\n                            continue;\n\n                        let definition = createRuleEvaluationInstance(\n                            dataView,\n                            colorAllocatorFactory,\n                            ruleDesc,\n                            objectName,\n                            object[propertyName],\n                            propertyDesc.type);\n                        if (!definition)\n                            continue;\n\n                        dataObjects.push(definition);\n                    }\n                }\n            }\n        }\n\n        function createRuleEvaluationInstance(\n            dataView: DataView,\n            colorAllocatorFactory: IColorAllocatorFactory,\n            ruleDesc: DataViewObjectPropertyRuleDescriptor,\n            objectName: string,\n            propertyValue: DataViewPropertyValue,\n            ruleType: StructuralTypeDescriptor): DataViewObjectDefinitionsForSelectorWithRule {\n            debug.assertValue(dataView, 'dataView');\n            debug.assertValue(colorAllocatorFactory, 'colorAllocatorFactory');\n            debug.assertValue(ruleDesc, 'ruleDesc');\n            debug.assertValue(propertyValue, 'propertyValue');\n            debug.assertValue(ruleType, 'ruleType');\n\n            let ruleOutput = ruleDesc.output;\n            if (!ruleOutput)\n                return;\n\n            let selectorToCreate = findSelectorForRuleInput(dataView, ruleOutput.selector);\n            if (!selectorToCreate)\n                return;\n\n            if (ruleType.fillRule)\n                return createRuleEvaluationInstanceFillRule(dataView, colorAllocatorFactory, ruleDesc, selectorToCreate, objectName, <FillRule>propertyValue);\n        }\n\n        function createRuleEvaluationInstanceFillRule(\n            dataView: DataView,\n            colorAllocatorFactory: IColorAllocatorFactory,\n            ruleDesc: DataViewObjectPropertyRuleDescriptor,\n            selectorToCreate: Selector,\n            objectName: string,\n            propertyValue: FillRule): DataViewObjectDefinitionsForSelectorWithRule {\n            debug.assertValue(dataView, 'dataView');\n            debug.assertValue(colorAllocatorFactory, 'colorAllocatorFactory');\n            debug.assertValue(ruleDesc, 'ruleDesc');\n            debug.assertValue(selectorToCreate, 'selectorToCreate');\n            debug.assertValue(propertyValue, 'propertyValue');\n\n            let colorAllocator: IColorAllocator;\n            if (propertyValue.linearGradient2)\n                colorAllocator = createColorAllocatorLinearGradient2(dataView, colorAllocatorFactory, ruleDesc, propertyValue, propertyValue.linearGradient2);\n            else if (propertyValue.linearGradient3)\n                colorAllocator = createColorAllocatorLinearGradient3(dataView, colorAllocatorFactory, ruleDesc, propertyValue, propertyValue.linearGradient3);\n\n            if (!colorAllocator)\n                return;\n\n            let rule = new ColorRuleEvaluation(ruleDesc.inputRole, colorAllocator);\n            let fillRuleProperties: DataViewObjectPropertyDefinitions = {};\n            fillRuleProperties[ruleDesc.output.property] = {\n                solid: { color: rule }\n            };\n\n            return {\n                selector: selectorToCreate,\n                rules: [rule],\n                objects: [{\n                    name: objectName,\n                    properties: fillRuleProperties,\n                }]\n            };\n        }\n\n        function createColorAllocatorLinearGradient2(\n            dataView: DataView,\n            colorAllocatorFactory: IColorAllocatorFactory,\n            ruleDesc: DataViewObjectPropertyRuleDescriptor,\n            propertyValueFillRule: FillRule,\n            linearGradient2: LinearGradient2): IColorAllocator {\n            debug.assertValue(dataView, 'dataView');\n            debug.assertValue(colorAllocatorFactory, 'colorAllocatorFactory');\n            debug.assertValue(ruleDesc, 'ruleDesc');\n            debug.assertValue(linearGradient2, 'linearGradient2');\n\n            linearGradient2 = propertyValueFillRule.linearGradient2;\n            if (linearGradient2.min.value === undefined ||\n                linearGradient2.max.value === undefined) {\n                let inputRange = findRuleInputColumnNumberRange(dataView, ruleDesc.inputRole);\n                if (!inputRange)\n                    return;\n\n                if (linearGradient2.min.value === undefined)\n                    linearGradient2.min.value = inputRange.min;\n                if (linearGradient2.max.value === undefined)\n                    linearGradient2.max.value = inputRange.max;\n            }\n\n            return colorAllocatorFactory.linearGradient2(propertyValueFillRule.linearGradient2);\n        }\n\n        function createColorAllocatorLinearGradient3(\n            dataView: DataView,\n            colorAllocatorFactory: IColorAllocatorFactory,\n            ruleDesc: DataViewObjectPropertyRuleDescriptor,\n            propertyValueFillRule: FillRule,\n            linearGradient3: LinearGradient3): IColorAllocator {\n            debug.assertValue(dataView, 'dataView');\n            debug.assertValue(colorAllocatorFactory, 'colorAllocatorFactory');\n            debug.assertValue(ruleDesc, 'ruleDesc');\n            debug.assertValue(linearGradient3, 'linearGradient3');\n            let splitScales: boolean = undefined;\n            linearGradient3 = propertyValueFillRule.linearGradient3;\n            if (linearGradient3.min.value === undefined ||\n                linearGradient3.mid.value === undefined ||\n                linearGradient3.max.value === undefined) {\n                let inputRange = findRuleInputColumnNumberRange(dataView, ruleDesc.inputRole);\n                if (!inputRange)\n                    return;\n\n                splitScales =\n                linearGradient3.min.value === undefined &&\n                linearGradient3.max.value === undefined &&\n                linearGradient3.mid.value !== undefined;\n\n                if (linearGradient3.min.value === undefined) {\n                    linearGradient3.min.value = inputRange.min;\n                }\n                if (linearGradient3.max.value === undefined) {\n                    linearGradient3.max.value = inputRange.max;\n                }\n                if (linearGradient3.mid.value === undefined) {\n                    let midValue: number = (linearGradient3.max.value + linearGradient3.min.value) / 2;\n                    linearGradient3.mid.value = midValue;\n                }\n            }\n\n            return colorAllocatorFactory.linearGradient3(propertyValueFillRule.linearGradient3, splitScales);\n        }\n\n        function evaluateDataRepetition(\n            dataView: DataView,\n            targetDataViewKinds: StandardDataViewKinds,\n            selectTransforms: DataViewSelectTransform[],\n            objectDescriptors: DataViewObjectDescriptors,\n            selector: Selector,\n            rules: RuleEvaluation[],\n            objectDefns: DataViewNamedObjectDefinition[]): void {\n            debug.assertValue(dataView, 'dataView');\n            debug.assertValue(targetDataViewKinds, 'targetDataViewKinds');\n            debug.assertValue(selectTransforms, 'selectTransforms');\n            debug.assertValue(objectDescriptors, 'objectDescriptors');\n            debug.assertValue(selector, 'selector');\n            debug.assertAnyValue(rules, 'rules');\n            debug.assertValue(objectDefns, 'objectDefns');\n\n            let containsWildcard = Selector.containsWildcard(selector);\n\n            let dataViewCategorical = dataView.categorical;\n            if (dataViewCategorical && EnumExtensions.hasFlag(targetDataViewKinds, StandardDataViewKinds.Categorical)) {\n                // 1) Match against categories\n                evaluateDataRepetitionCategoricalCategory(dataViewCategorical, objectDescriptors, selector, rules, containsWildcard, objectDefns);\n\n                // 2) Match against valueGrouping\n                evaluateDataRepetitionCategoricalValueGrouping(dataViewCategorical, objectDescriptors, selector, rules, containsWildcard, objectDefns);\n\n                // Consider capturing diagnostics for unmatched selectors to help debugging.\n            }\n\n            let dataViewMatrix = dataView.matrix;\n            if (dataViewMatrix && EnumExtensions.hasFlag(targetDataViewKinds, StandardDataViewKinds.Matrix)) {\n                let rewrittenMatrix = evaluateDataRepetitionMatrix(dataViewMatrix, objectDescriptors, selector, rules, containsWildcard, objectDefns);\n                if (rewrittenMatrix) {\n                    // TODO: This mutates the DataView -- the assumption is that prototypal inheritance has already occurred.  We should\n                    // revisit this, likely when we do lazy evaluation of DataView.\n                    dataView.matrix = rewrittenMatrix;\n                }\n\n                // Consider capturing diagnostics for unmatched selectors to help debugging.\n            }\n\n            let dataViewTable = dataView.table;\n            if (dataViewTable && EnumExtensions.hasFlag(targetDataViewKinds, StandardDataViewKinds.Table)) {\n                let rewrittenTable = evaluateDataRepetitionTable(dataViewTable, selectTransforms, objectDescriptors, selector, rules, containsWildcard, objectDefns);\n                if (rewrittenTable) {\n                    // TODO: This mutates the DataView -- the assumption is that prototypal inheritance has already occurred.  We should\n                    // revisit this, likely when we do lazy evaluation of DataView.\n                    dataView.table = rewrittenTable;\n                }\n\n                // Consider capturing diagnostics for unmatched selectors to help debugging.\n            }\n        }\n\n        function evaluateDataRepetitionCategoricalCategory(\n            dataViewCategorical: DataViewCategorical,\n            objectDescriptors: DataViewObjectDescriptors,\n            selector: Selector,\n            rules: RuleEvaluation[],\n            containsWildcard: boolean,\n            objectDefns: DataViewNamedObjectDefinition[]): boolean {\n            debug.assertValue(dataViewCategorical, 'dataViewCategorical');\n            debug.assertValue(objectDescriptors, 'objectDescriptors');\n            debug.assertValue(selector, 'selector');\n            debug.assertAnyValue(rules, 'rules');\n            debug.assertValue(containsWildcard, 'containsWildcard');\n            debug.assertValue(objectDefns, 'objectDefns');\n\n            if (!dataViewCategorical.categories || dataViewCategorical.categories.length === 0)\n                return;\n\n            let targetColumn = findSelectedCategoricalColumn(dataViewCategorical, selector);\n            if (!targetColumn)\n                return;\n\n            let identities = targetColumn.identities,\n                foundMatch: boolean,\n                evalContext = createCategoricalEvalContext(dataViewCategorical);\n\n            if (!identities)\n                return;\n\n            debug.assert(targetColumn.column.values.length === identities.length, 'Column length mismatch');\n\n            for (let i = 0, len = identities.length; i < len; i++) {\n                let identity = identities[i];\n\n                if (containsWildcard || Selector.matchesData(selector, [identity])) {\n                    evalContext.setCurrentRowIndex(i);\n\n                    let objects = DataViewObjectEvaluationUtils.evaluateDataViewObjects(evalContext, objectDescriptors, objectDefns);\n                    if (objects) {\n                        // TODO: This mutates the DataView -- the assumption is that prototypal inheritance has already occurred.  We should\n                        // revisit this, likely when we do lazy evaluation of DataView.\n                        if (!targetColumn.column.objects) {\n                            targetColumn.column.objects = [];\n                            targetColumn.column.objects.length = len;\n                        }\n                        targetColumn.column.objects[i] = objects;\n                    }\n\n                    if (!containsWildcard)\n                        return true;\n\n                    foundMatch = true;\n                }\n            }\n\n            return foundMatch;\n        }\n\n        function evaluateDataRepetitionCategoricalValueGrouping(\n            dataViewCategorical: DataViewCategorical,\n            objectDescriptors: DataViewObjectDescriptors,\n            selector: Selector,\n            rules: RuleEvaluation[],\n            containsWildcard: boolean,\n            objectDefns: DataViewNamedObjectDefinition[]): boolean {\n            debug.assertValue(dataViewCategorical, 'dataViewCategorical');\n            debug.assertValue(objectDescriptors, 'objectDescriptors');\n            debug.assertValue(selector, 'selector');\n            debug.assertAnyValue(rules, 'rules');\n            debug.assertValue(containsWildcard, 'containsWildcard');\n            debug.assertValue(objectDefns, 'objectDefns');\n\n            let dataViewCategoricalValues = dataViewCategorical.values;\n            if (!dataViewCategoricalValues || !dataViewCategoricalValues.identityFields)\n                return;\n\n            if (!Selector.matchesKeys(selector, <SQExpr[][]>[dataViewCategoricalValues.identityFields]))\n                return;\n\n            let valuesGrouped = dataViewCategoricalValues.grouped();\n            if (!valuesGrouped)\n                return;\n\n            // NOTE: We do not set the evalContext row index below because iteration is over value groups (i.e., columns, no rows).\n            // This should be enhanced in the future.\n            let evalContext = createCategoricalEvalContext(dataViewCategorical);\n\n            let foundMatch: boolean;\n            for (let i = 0, len = valuesGrouped.length; i < len; i++) {\n                let valueGroup = valuesGrouped[i];\n                let selectorMetadata = selector.metadata;\n                let valuesInGroup = valueGroup.values;\n                if (containsWildcard || Selector.matchesData(selector, [valueGroup.identity])) {\n                    let objects = DataViewObjectEvaluationUtils.evaluateDataViewObjects(evalContext, objectDescriptors, objectDefns);\n                    if (objects) {\n                        // TODO: This mutates the DataView -- the assumption is that prototypal inheritance has already occurred.  We should\n                        // revisit this, likely when we do lazy evaluation of DataView.\n\n                        if (selectorMetadata) {\n                            for (let j = 0, jlen = valuesInGroup.length; j < jlen; j++) {\n                                let valueColumn = valuesInGroup[j],\n                                    valueSource = valueColumn.source;\n                                if (valueSource.queryName === selectorMetadata) {\n                                    let valueSourceOverwrite = Prototype.inherit(valueSource);\n                                    valueSourceOverwrite.objects = objects;\n                                    valueColumn.source = valueSourceOverwrite;\n\n                                    foundMatch = true;\n                                    break;\n                                }\n                            }\n                        }\n                        else {\n                            valueGroup.objects = objects;\n                            setGrouped(dataViewCategoricalValues, valuesGrouped);\n\n                            foundMatch = true;\n                        }\n                    }\n\n                    if (!containsWildcard)\n                        return true;\n                }\n            }\n\n            return foundMatch;\n        }\n\n        function evaluateDataRepetitionMatrix(\n            dataViewMatrix: DataViewMatrix,\n            objectDescriptors: DataViewObjectDescriptors,\n            selector: Selector,\n            rules: RuleEvaluation[],\n            containsWildcard: boolean,\n            objectDefns: DataViewNamedObjectDefinition[]): DataViewMatrix {\n\n            let evalContext = createMatrixEvalContext(dataViewMatrix);\n            let rewrittenRows = evaluateDataRepetitionMatrixHierarchy(evalContext, dataViewMatrix.rows, objectDescriptors, selector, rules, containsWildcard, objectDefns);\n            let rewrittenCols = evaluateDataRepetitionMatrixHierarchy(evalContext, dataViewMatrix.columns, objectDescriptors, selector, rules, containsWildcard, objectDefns);\n\n            if (rewrittenRows || rewrittenCols) {\n                let rewrittenMatrix = inheritSingle(dataViewMatrix);\n\n                if (rewrittenRows)\n                    rewrittenMatrix.rows = rewrittenRows;\n                if (rewrittenCols)\n                    rewrittenMatrix.columns = rewrittenCols;\n\n                return rewrittenMatrix;\n            }\n        }\n\n        function evaluateDataRepetitionMatrixHierarchy(\n            evalContext: IEvalContext,\n            dataViewMatrixHierarchy: DataViewHierarchy,\n            objectDescriptors: DataViewObjectDescriptors,\n            selector: Selector,\n            rules: RuleEvaluation[],\n            containsWildcard: boolean,\n            objectDefns: DataViewNamedObjectDefinition[]): DataViewHierarchy {\n            debug.assertAnyValue(dataViewMatrixHierarchy, 'dataViewMatrixHierarchy');\n            debug.assertValue(objectDescriptors, 'objectDescriptors');\n            debug.assertValue(selector, 'selector');\n            debug.assertAnyValue(rules, 'rules');\n            debug.assertValue(objectDefns, 'objectDefns');\n\n            if (!dataViewMatrixHierarchy)\n                return;\n\n            let root = dataViewMatrixHierarchy.root;\n            if (!root)\n                return;\n\n            let rewrittenRoot = evaluateDataRepetitionMatrixNode(evalContext, root, objectDescriptors, selector, rules, containsWildcard, objectDefns);\n            if (rewrittenRoot) {\n                let rewrittenHierarchy = inheritSingle(dataViewMatrixHierarchy);\n                rewrittenHierarchy.root = rewrittenRoot;\n\n                return rewrittenHierarchy;\n            }\n        }\n\n        function evaluateDataRepetitionMatrixNode(\n            evalContext: IEvalContext,\n            dataViewNode: DataViewMatrixNode,\n            objectDescriptors: DataViewObjectDescriptors,\n            selector: Selector,\n            rules: RuleEvaluation[],\n            containsWildcard: boolean,\n            objectDefns: DataViewNamedObjectDefinition[]): DataViewMatrixNode {\n            debug.assertValue(evalContext, 'evalContext');\n            debug.assertValue(dataViewNode, 'dataViewNode');\n            debug.assertValue(objectDescriptors, 'objectDescriptors');\n            debug.assertValue(selector, 'selector');\n            debug.assertAnyValue(rules, 'rules');\n            debug.assertValue(objectDefns, 'objectDefns');\n\n            let childNodes = dataViewNode.children;\n            if (!childNodes)\n                return;\n\n            let rewrittenNode: DataViewMatrixNode;\n            let shouldSearchChildren: boolean;\n            let childIdentityFields = dataViewNode.childIdentityFields;\n            if (childIdentityFields) {\n                // NOTE: selector matching in matrix currently only considers the current node, and does not consider parents as part of the match.\n                shouldSearchChildren = Selector.matchesKeys(selector, <SQExpr[][]>[childIdentityFields]);\n            }\n\n            for (let i = 0, len = childNodes.length; i < len; i++) {\n                let childNode = childNodes[i],\n                    identity = childNode.identity,\n                    rewrittenChildNode: DataViewMatrixNode = null;\n\n                if (shouldSearchChildren) {\n                    if (containsWildcard || Selector.matchesData(selector, [identity])) {\n                        // TODO: Need to initialize context for rule-based properties.  Rule-based properties\n                        // (such as fillRule/gradients) are not currently implemented.\n\n                        let objects = DataViewObjectEvaluationUtils.evaluateDataViewObjects(evalContext, objectDescriptors, objectDefns);\n                        if (objects) {\n                            rewrittenChildNode = inheritSingle(childNode);\n                            rewrittenChildNode.objects = objects;\n                        }\n                    }\n                }\n                else {\n                    rewrittenChildNode = evaluateDataRepetitionMatrixNode(\n                        evalContext,\n                        childNode,\n                        objectDescriptors,\n                        selector,\n                        rules,\n                        containsWildcard,\n                        objectDefns);\n                }\n\n                if (rewrittenChildNode) {\n                    if (!rewrittenNode)\n                        rewrittenNode = inheritNodeAndChildren(dataViewNode);\n                    rewrittenNode.children[i] = rewrittenChildNode;\n\n                    if (!containsWildcard) {\n                        // NOTE: once we find a match for a non-wildcard selector, stop looking.\n                        break;\n                    }\n                }\n            }\n\n            return rewrittenNode;\n        }\n\n        function inheritNodeAndChildren(node: DataViewMatrixNode): DataViewMatrixNode {\n            if (Object.getPrototypeOf(node) !== Object.prototype) {\n                return node;\n            }\n\n            let inherited = inheritSingle(node);\n            inherited.children = inherit(node.children);\n            return inherited;\n        }\n\n        function evaluateDataRepetitionTable(\n            dataViewTable: DataViewTable,\n            selectTransforms: DataViewSelectTransform[],\n            objectDescriptors: DataViewObjectDescriptors,\n            selector: Selector,\n            rules: RuleEvaluation[],\n            containsWildcard: boolean,\n            objectDefns: DataViewNamedObjectDefinition[]): DataViewTable {\n            debug.assertValue(dataViewTable, 'dataViewTable');\n            debug.assertValue(selectTransforms, 'selectTransforms');\n            debug.assertValue(objectDescriptors, 'objectDescriptors');\n            debug.assertValue(selector, 'selector');\n            debug.assertAnyValue(rules, 'rules');\n            debug.assertValue(objectDefns, 'objectDefns');\n\n            let evalContext = createTableEvalContext(dataViewTable, selectTransforms);\n            let rewrittenRows = evaluateDataRepetitionTableRows(\n                evalContext,\n                dataViewTable.columns,\n                dataViewTable.rows,\n                dataViewTable.identity,\n                dataViewTable.identityFields,\n                objectDescriptors,\n                selector,\n                rules,\n                containsWildcard,\n                objectDefns);\n\n            if (rewrittenRows) {\n                let rewrittenTable = inheritSingle(dataViewTable);\n                rewrittenTable.rows = rewrittenRows;\n\n                return rewrittenTable;\n            }\n        }\n\n        function evaluateDataRepetitionTableRows(\n            evalContext: ITableEvalContext,\n            columns: DataViewMetadataColumn[],\n            rows: DataViewTableRow[],\n            identities: DataViewScopeIdentity[],\n            identityFields: ISQExpr[],\n            objectDescriptors: DataViewObjectDescriptors,\n            selector: Selector,\n            rules: RuleEvaluation[],\n            containsWildcard: boolean,\n            objectDefns: DataViewNamedObjectDefinition[]): DataViewTableRow[] {\n            debug.assertValue(evalContext, 'evalContext');\n            debug.assertValue(columns, 'columns');\n            debug.assertValue(rows, 'rows');\n            debug.assertAnyValue(identities, 'identities');\n            debug.assertAnyValue(identityFields, 'identityFields');\n            debug.assertValue(objectDescriptors, 'objectDescriptors');\n            debug.assertValue(selector, 'selector');\n            debug.assertAnyValue(rules, 'rules');\n            debug.assertValue(objectDefns, 'objectDefns');\n\n            if (_.isEmpty(identities) || _.isEmpty(identityFields))\n                return;\n\n            if (!selector.metadata &&\n                !Selector.matchesKeys(selector, <SQExpr[][]>[identityFields]))\n                return;\n\n            let colIdx = _.findIndex(columns, col => col.queryName === selector.metadata);\n            if (colIdx < 0)\n                return;\n\n            debug.assert(rows.length === identities.length, 'row length mismatch');\n            let colLen = columns.length;\n            let inheritedRows: DataViewTableRow[];\n\n            for (let rowIdx = 0, rowLen = identities.length; rowIdx < rowLen; rowIdx++) {\n                let identity = identities[rowIdx];\n\n                if (containsWildcard || Selector.matchesData(selector, [identity])) {\n                    evalContext.setCurrentRowIndex(rowIdx);\n\n                    let objects = DataViewObjectEvaluationUtils.evaluateDataViewObjects(evalContext, objectDescriptors, objectDefns);\n                    if (objects) {\n                        if (!inheritedRows)\n                            inheritedRows = inheritSingle(rows);\n\n                        let inheritedRow = inheritedRows[rowIdx] = inheritSingle(inheritedRows[rowIdx]);\n                        let objectsForColumns = inheritedRow.objects;\n                        if (!objectsForColumns)\n                            inheritedRow.objects = objectsForColumns = new Array(colLen);\n\n                        objectsForColumns[colIdx] = objects;\n                    }\n\n                    if (!containsWildcard)\n                        break;\n                }\n            }\n\n            return inheritedRows;\n        }\n\n        function evaluateMetadataRepetition(\n            dataView: DataView,\n            selectTransforms: DataViewSelectTransform[],\n            objectDescriptors: DataViewObjectDescriptors,\n            selector: Selector,\n            objectDefns: DataViewNamedObjectDefinition[]): void {\n            debug.assertValue(dataView, 'dataView');\n            debug.assertAnyValue(selectTransforms, 'selectTransforms');\n            debug.assertValue(objectDescriptors, 'objectDescriptors');\n            debug.assertValue(selector, 'selector');\n            debug.assertValue(objectDefns, 'objectDefns');\n\n            // TODO: This mutates the DataView -- the assumption is that prototypal inheritance has already occurred.  We should\n            // revisit this, likely when we do lazy evaluation of DataView.\n            let columns = dataView.metadata.columns,\n                metadataId = selector.metadata,\n                evalContext = createStaticEvalContext(dataView, selectTransforms);\n            for (let i = 0, len = columns.length; i < len; i++) {\n                let column = columns[i];\n                if (column.queryName === metadataId) {\n                    let objects = DataViewObjectEvaluationUtils.evaluateDataViewObjects(evalContext, objectDescriptors, objectDefns);\n                    if (objects)\n                        column.objects = objects;\n                }\n            }\n        }\n\n        /** Attempts to find a column that can possibly match the selector. */\n        function findSelectedCategoricalColumn(dataViewCategorical: DataViewCategorical, selector: Selector) {\n            debug.assertValue(dataViewCategorical.categories[0], 'dataViewCategorical.categories[0]');\n\n            let categoricalColumn = dataViewCategorical.categories[0];\n            if (!categoricalColumn.identityFields)\n                return;\n            if (!Selector.matchesKeys(selector, <SQExpr[][]>[categoricalColumn.identityFields]))\n                return;\n\n            let identities = categoricalColumn.identity,\n                targetColumn: DataViewCategoricalColumn = categoricalColumn;\n\n            let selectedMetadataId = selector.metadata;\n            if (selectedMetadataId) {\n                let valueColumns = dataViewCategorical.values;\n                if (valueColumns) {\n                    for (let i = 0, len = valueColumns.length; i < len; i++) {\n                        let valueColumn = valueColumns[i];\n                        if (valueColumn.source.queryName === selectedMetadataId) {\n                            targetColumn = valueColumn;\n                            break;\n                        }\n                    }\n                }\n            }\n\n            return {\n                column: targetColumn,\n                identities: identities,\n            };\n        }\n\n        function findSelectorForRuleInput(dataView: DataView, selectorRoles: string[]): Selector {\n            debug.assertValue(dataView, 'dataView');\n            debug.assertValue(selectorRoles, 'selectorRoles');\n\n            if (selectorRoles.length !== 1)\n                return;\n\n            let dataViewCategorical = dataView.categorical;\n            if (!dataViewCategorical)\n                return;\n\n            let categories = dataViewCategorical.categories;\n            if (!categories || categories.length !== 1)\n                return;\n\n            let categoryColumn = categories[0],\n                categoryRoles = categoryColumn.source.roles,\n                categoryIdentityFields = categoryColumn.identityFields;\n            if (!categoryRoles || !categoryIdentityFields || !categoryRoles[selectorRoles[0]])\n                return;\n\n            return { data: [DataViewScopeWildcard.fromExprs(<SQExpr[]>categoryIdentityFields)] };\n        }\n\n        /** Attempts to find the value range for the single column with the given inputRole. */\n        function findRuleInputColumnNumberRange(dataView: DataView, inputRole: string): NumberRange {\n            debug.assertValue(dataView, 'dataView');\n            debug.assertValue(inputRole, 'inputRole');\n\n            // NOTE: This implementation currently only supports categorical DataView, becuase that's the\n            // only scenario that has custom colors, as of this writing.  This would be rewritten to be more generic\n            // as required, when needed.\n            let dataViewCategorical = dataView.categorical;\n            if (!dataViewCategorical)\n                return;\n\n            let values = dataViewCategorical.values;\n            if (!values)\n                return;\n\n            for (let i = 0, len = values.length; i < len; i++) {\n                let valueCol = values[i],\n                    valueColRoles = valueCol.source.roles;\n\n                if (!valueColRoles || !valueColRoles[inputRole])\n                    continue;\n\n                let min = valueCol.min;\n                if (min === undefined)\n                    min = valueCol.minLocal;\n                if (min === undefined)\n                    continue;\n\n                let max = valueCol.max;\n                if (max === undefined)\n                    max = valueCol.maxLocal;\n                if (max === undefined)\n                    continue;\n\n                return { min: min, max: max };\n            }\n        }\n\n        export function createValueColumns(\n            values: DataViewValueColumn[] = [],\n            valueIdentityFields?: SQExpr[],\n            source?: DataViewMetadataColumn): DataViewValueColumns {\n            let result = <DataViewValueColumns>values;\n            setGrouped(<DataViewValueColumns>values);\n\n            if (valueIdentityFields)\n                result.identityFields = valueIdentityFields;\n\n            if (source)\n                result.source = source;\n\n            return result;\n        }\n\n        function setGrouped(values: DataViewValueColumns, groupedResult?: DataViewValueColumnGroup[]): void {\n            values.grouped = groupedResult\n                ? () => groupedResult\n                : () => groupValues(values);\n        }\n\n        /** Group together the values with a common identity. */\n        function groupValues(values: DataViewValueColumn[]): DataViewValueColumnGroup[] {\n            debug.assertValue(values, 'values');\n\n            let groups: DataViewValueColumnGroup[] = [],\n                currentGroup: DataViewValueColumnGroup;\n\n            for (let i = 0, len = values.length; i < len; i++) {\n                let value = values[i];\n\n                if (!currentGroup || currentGroup.identity !== value.identity) {\n                    currentGroup = {\n                        values: []\n                    };\n\n                    if (value.identity) {\n                        currentGroup.identity = value.identity;\n\n                        let source = value.source;\n\n                        // allow null, which will be formatted as (Blank).\n                        if (source.groupName !== undefined)\n                            currentGroup.name = source.groupName;\n                        else if (source.displayName)\n                            currentGroup.name = source.displayName;\n                    }\n\n                    groups.push(currentGroup);\n                }\n\n                currentGroup.values.push(value);\n            }\n\n            return groups;\n        }\n\n        function pivotIfNecessary(dataView: DataView, dataViewMappings: DataViewMapping[]): DataView {\n            debug.assertValue(dataView, 'dataView');\n\n            let transformedDataView: DataView;\n            switch (determineCategoricalTransformation(dataView.categorical, dataViewMappings)) {\n                case CategoricalDataViewTransformation.Pivot:\n                    transformedDataView = DataViewPivotCategorical.apply(dataView);\n                    break;\n\n                case CategoricalDataViewTransformation.SelfCrossJoin:\n                    transformedDataView = DataViewSelfCrossJoin.apply(dataView);\n                    break;\n            }\n\n            return transformedDataView || dataView;\n        }\n\n        function determineCategoricalTransformation(categorical: DataViewCategorical, dataViewMappings: DataViewMapping[]): CategoricalDataViewTransformation {\n            if (!categorical || _.isEmpty(dataViewMappings))\n                return;\n\n            let categories = categorical.categories;\n            if (!categories || categories.length !== 1)\n                return;\n\n            let values = categorical.values;\n            if (_.isEmpty(values))\n                return;\n\n            if (values.grouped().some(vg => !!vg.identity))\n                return;\n\n            // If we made it here, the DataView has a single category and no valueGrouping.\n            let categoryRoles = categories[0].source.roles;\n\n            for (let i = 0, len = dataViewMappings.length; i < len; i++) {\n                let roleMappingCategorical = dataViewMappings[i].categorical;\n                if (!roleMappingCategorical)\n                    continue;\n\n                if (!hasRolesGrouped(categoryRoles, <DataViewGroupedRoleMapping>roleMappingCategorical.values))\n                    continue;\n\n                // If we made it here, the DataView's single category has the value grouping role.\n                let categoriesMapping = roleMappingCategorical.categories;\n                let hasCategoryRole =\n                    hasRolesBind(categoryRoles, <DataViewRoleBindMappingWithReduction>categoriesMapping) ||\n                    hasRolesFor(categoryRoles, <DataViewRoleForMappingWithReduction>categoriesMapping);\n\n                if (hasCategoryRole)\n                    return CategoricalDataViewTransformation.SelfCrossJoin;\n\n                return CategoricalDataViewTransformation.Pivot;\n            }\n        }\n\n        function shouldPivotMatrix(matrix: DataViewMatrix, dataViewMappings: DataViewMapping[]): boolean {\n            if (!matrix || _.isEmpty(dataViewMappings))\n                return;\n\n            let rowLevels = matrix.rows.levels;\n            if (rowLevels.length < 1)\n                return;\n\n            let rows = matrix.rows.root.children;\n            if (!rows || rows.length === 0)\n                return;\n\n            let rowRoles = rowLevels[0].sources[0].roles;\n\n            for (let i = 0, len = dataViewMappings.length; i < len; i++) {\n                let roleMappingMatrix = dataViewMappings[i].matrix;\n                if (!roleMappingMatrix)\n                    continue;\n\n                if (!hasRolesFor(rowRoles, <DataViewRoleForMappingWithReduction>roleMappingMatrix.rows) &&\n                    hasRolesFor(rowRoles, <DataViewRoleForMappingWithReduction>roleMappingMatrix.columns)) {\n                    return true;\n                }\n            }\n        }\n\n        function hasRolesBind(roles: { [name: string]: boolean }, roleMapping: DataViewRoleBindMappingWithReduction): boolean {\n            if (roles && roleMapping && roleMapping.bind)\n                return roles[roleMapping.bind.to];\n        }\n\n        function hasRolesFor(roles: { [name: string]: boolean }, roleMapping: DataViewRoleForMappingWithReduction): boolean {\n            if (roles && roleMapping && roleMapping.for)\n                return roles[roleMapping.for.in];\n        }\n\n        function hasRolesGrouped(roles: { [name: string]: boolean }, roleMapping: DataViewGroupedRoleMapping): boolean {\n            if (roles && roleMapping && roleMapping.group)\n                return roles[roleMapping.group.by];\n        }\n    }\n}","/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved. \n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *   \n *  The above copyright notice and this permission notice shall be included in \n *  all copies or substantial portions of the Software.\n *   \n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\n\nmodule powerbi.data {\n    import IStringResourceProvider = jsCommon.IStringResourceProvider;\n\n    export function createDisplayNameGetter(displayNameKey: string): (IStringResourceProvider) => string {\n        return (resourceProvider: IStringResourceProvider) => resourceProvider.get(displayNameKey);\n    }\n\n    export function getDisplayName(displayNameGetter: data.DisplayNameGetter, resourceProvider: jsCommon.IStringResourceProvider): string {\n        if (typeof displayNameGetter === 'function')\n            return displayNameGetter(resourceProvider);\n\n        if (typeof displayNameGetter === 'string')\n            return displayNameGetter;\n    }\n}","/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved. \n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *   \n *  The above copyright notice and this permission notice shall be included in \n *  all copies or substantial portions of the Software.\n *   \n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\n\nmodule powerbi {\n\n    /** Enumeration of DateTimeUnits */\n    export enum DateTimeUnit {\n        Year,\n        Month,\n        Week,\n        Day,\n        Hour,\n        Minute,\n        Second,\n        Millisecond,\n    }\n\n    export interface IFormattingService {\n        /** \n         * Formats the value using provided format expression and culture\n         * @param value - value to be formatted and converted to string.\n         * @param format - format to be applied. If undefined or empty then generic format is used.        \n         */\n        formatValue(value: any, format?: string): string;\n\n        /** \n         * Replaces the indexed format tokens (for example {0:c2}) in the format string with the localized formatted arguments.\n         * @param formatWithIndexedTokens - format string with a set of indexed format tokens.\n         * @param args - array of values which should replace the tokens in the format string.\n         * @param culture - localization culture. If undefined then the current culture is used.\n         */\n        format(formatWithIndexedTokens: string, args: any[], culture?: string): string;\n\n        /** Gets a value indicating whether the specified format a standard numeric format specifier. */\n        isStandardNumberFormat(format: string): boolean;\n\n        /** Performs a custom format with a value override.  Typically used for custom formats showing scaled values. */\n        formatNumberWithCustomOverride(value: number, format: string, nonScientificOverrideFormat: string): string;\n\n        /** Gets the format string to use for dates in particular units. */\n        dateFormatString(unit: DateTimeUnit): string;\n    }\n}","/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved. \n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *   \n *  The above copyright notice and this permission notice shall be included in \n *  all copies or substantial portions of the Software.\n *   \n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\n\nmodule powerbi.data {\n    /** Represents common expression patterns for 'field' expressions such as columns, column aggregates, measures, etc. */\n    export interface FieldExprPattern {\n        column?: FieldExprColumnPattern;\n        columnAggr?: FieldExprColumnAggrPattern;\n        columnHierarchyLevelVariation?: FieldExprColumnHierarchyLevelVariation;\n        entityAggr?: FieldExprEntityAggrPattern;\n        hierarchyLevel?: FieldExprHierarchyLevelPattern;\n        hierarchyLevelAggr?: FieldExprHierarchyLevelAggrPattern;\n        hierarchy?: FieldExprHierarchyPattern;\n        measure?: FieldExprMeasurePattern;\n    }\n\n    export interface FieldExprEntityItemPattern {\n        schema: string;\n        entity: string;\n        entityVar?: string;\n    }\n\n    export interface FieldExprPropertyPattern extends FieldExprEntityItemPattern {\n        name: string;\n    }\n\n    export type FieldExprColumnPattern = FieldExprPropertyPattern;\n\n    export interface FieldExprColumnAggrPattern extends FieldExprColumnPattern {\n        aggregate: QueryAggregateFunction;\n    }\n    \n    export interface FieldExprHierarchyLevelAggrPattern extends FieldExprHierarchyLevelPattern {\n        aggregate: QueryAggregateFunction;\n    }\n\n    export module SQExprBuilder {\n        export function fieldExpr(fieldExpr: FieldExprPattern): SQExpr {\n            return wrapColumnAggr(fieldExpr)\n                || wrapColumn(fieldExpr)\n                || wrapMeasure(fieldExpr)\n                || wrapHierarchyLevel(fieldExpr)\n                || wrapHierarchy(fieldExpr)\n                || wrapEntityAggr(fieldExpr)\n                || wrapPropertyVariationSource(fieldExpr)\n                || wrapEntity(fieldExpr);\n        }\n\n        function wrapColumnAggr(fieldExpr: FieldExprPattern): SQExpr {\n            let aggr = fieldExpr.columnAggr;\n            if (aggr) {\n                let entityExpr = wrapEntity(fieldExpr.columnAggr);\n                return aggregate(columnRef(entityExpr, aggr.name), aggr.aggregate);\n            }\n        }\n\n        function wrapHierarchyLevel(fieldExpr: FieldExprPattern): SQExpr {\n            let hierarchyLevelPattern = fieldExpr.hierarchyLevel;\n            if (hierarchyLevelPattern) {\n                let hierarchyExpr = hierarchy(wrapEntity(hierarchyLevelPattern), hierarchyLevelPattern.name);\n                return hierarchyLevel(hierarchyExpr, hierarchyLevelPattern.level);\n            }\n        }\n\n        function wrapHierarchy(fieldExpr: FieldExprPattern): SQExpr {\n            let hierarchyExprPattern = fieldExpr.hierarchy;\n            if (hierarchyExprPattern) {\n                let entityExpr = wrapEntity(hierarchyExprPattern);\n                return hierarchy(entityExpr, hierarchyExprPattern.name);\n            }\n        }\n\n        function wrapPropertyVariationSource(fieldExpr: FieldExprPattern): SQExpr {\n            let variation = fieldExpr.columnHierarchyLevelVariation;\n            if (variation) {\n                let entitiyExpr = wrapEntity(variation.source);\n                return propertyVariationSource(entitiyExpr, variation.source.name, variation.level.name);\n            }\n        }\n\n        function wrapColumn(fieldExpr: FieldExprPattern): SQExpr {\n            let column = fieldExpr.column;\n            if (column) {\n                let entityExpr = wrapEntity(fieldExpr.column);\n                return columnRef(entityExpr, column.name);\n            }\n        }\n\n        function wrapMeasure(fieldExpr: FieldExprPattern): SQExpr {\n            let measure = fieldExpr.measure;\n            if (measure) {\n                let entityExpr = wrapEntity(fieldExpr.measure);\n                return measureRef(entityExpr, measure.name);\n            }\n        }\n\n        function wrapEntityAggr(fieldExpr: FieldExprPattern): SQExpr {\n            let entityAggregate = fieldExpr.entityAggr;\n\n            if (entityAggregate) {\n                let entityExpr = wrapEntity(fieldExpr.entityAggr);\n                return aggregate(entityExpr, entityAggregate.aggregate);\n            }\n        }\n\n        function wrapEntity(fieldExpr: FieldExprPattern): SQExpr {\n            let fieldExprEntityItemPattern = FieldExprPattern.toFieldExprEntityItemPattern(fieldExpr);\n            return entity(fieldExprEntityItemPattern.schema, fieldExprEntityItemPattern.entity, fieldExprEntityItemPattern.entityVar);\n        }\n    }\n\n    export interface FieldExprColumnHierarchyLevelVariation {\n        source: FieldExprColumnPattern;\n        level: FieldExprHierarchyLevelPattern;\n        variationName: string;\n    }\n\n    export interface FieldExprEntityAggrPattern extends FieldExprEntityItemPattern {\n        aggregate: QueryAggregateFunction;\n    }\n\n    export interface FieldExprHierarchyLevelPattern extends FieldExprEntityItemPattern {\n        level: string;\n        name: string;\n    }\n\n    export interface FieldExprHierarchyPattern extends FieldExprEntityItemPattern {\n        name: string;\n    }\n    export type FieldExprMeasurePattern = FieldExprPropertyPattern;\n\n    export module SQExprConverter {\n        export function asFieldPattern(sqExpr: SQExpr): FieldExprPattern {\n            // TODO: adding entity to the FieldExprPattern\n            if (sqExpr instanceof data.SQEntityExpr) {\n                return {\n                    entity: sqExpr.entity,\n                    schema: sqExpr.schema,\n                };\n            }\n\n            return sqExpr.accept(FieldExprPatternBuilder.instance);\n        }\n    }\n\n    interface FieldExprSourceVariationPattern {\n        column: FieldExprColumnPattern;\n        variationName: string;\n    }\n\n    interface SourceExprPattern {\n        entity?: FieldExprEntityItemPattern;\n\n        // TODO: Change FieldExprHierarchyPattern to FieldExprHierarchyLevelPattern\n        hierarchy?: FieldExprHierarchyPattern;\n        variation?: FieldExprSourceVariationPattern;\n    }\n\n    interface HierarchySourceExprPattern {\n        hierarchy: FieldExprHierarchyPattern;\n        variation?: FieldExprSourceVariationPattern;\n    }\n\n    class FieldExprPatternBuilder extends DefaultSQExprVisitor<FieldExprPattern> {\n        public static instance: FieldExprPatternBuilder = new FieldExprPatternBuilder();\n\n        public visitColumnRef(expr: SQColumnRefExpr): FieldExprPattern {\n            let sourceRef = expr.source.accept(SourceExprPatternBuilder.instance);\n            if (!sourceRef)\n                return;\n\n            if (sourceRef.entity) {\n                let columnRef = <FieldExprColumnPattern>sourceRef.entity;\n                columnRef.name = expr.ref;\n\n                return { column: columnRef };\n            }\n        }\n\n        public visitMeasureRef(expr: SQMeasureRefExpr): FieldExprPattern {\n            let sourceRef = expr.source.accept(SourceExprPatternBuilder.instance);\n            if (!sourceRef)\n                return;\n\n            if (sourceRef.entity) {\n                let measureRef = <FieldExprMeasurePattern>sourceRef.entity;\n                measureRef.name = expr.ref;\n\n                return { measure: measureRef };\n            }\n        }\n\n        public visitAggr(expr: SQAggregationExpr): FieldExprPattern {\n            let fieldPattern: FieldExprPattern = expr.arg.accept(this);\n            if (fieldPattern && fieldPattern.column) {\n                let argAggr = <FieldExprColumnAggrPattern>fieldPattern.column;\n                argAggr.aggregate = expr.func;\n                return { columnAggr: argAggr };\n            } else if (fieldPattern && fieldPattern.columnAggr) {\n                let argAggr = <FieldExprColumnAggrPattern>fieldPattern.columnAggr;\n                argAggr.aggregate = expr.func;\n                return { columnAggr: argAggr };\n            } else if (fieldPattern && fieldPattern.hierarchyLevel) {\n                let argAggr = <FieldExprHierarchyLevelAggrPattern>fieldPattern.hierarchyLevel;\n                argAggr.aggregate = expr.func;\n                return { hierarchyLevelAggr: argAggr };\n            }\n\n            let sourcePattern = expr.arg.accept(SourceExprPatternBuilder.instance);\n            if (sourcePattern && sourcePattern.entity) {\n                let argAggr = <FieldExprEntityAggrPattern>sourcePattern.entity;\n                argAggr.aggregate = expr.func;\n\n                return { entityAggr: argAggr };\n            }\n        }\n\n        public visitHierarchy(expr: SQHierarchyExpr): FieldExprPattern {\n            let sourcePattern = expr.arg.accept(SourceExprPatternBuilder.instance);\n\n            if (sourcePattern && sourcePattern.entity) {\n                let hierarchyRef = <FieldExprHierarchyPattern>(sourcePattern.entity);\n                hierarchyRef.name = expr.hierarchy;\n                return { hierarchy: hierarchyRef };\n            }\n        }\n\n        public visitHierarchyLevel(expr: SQHierarchyLevelExpr): FieldExprPattern {\n            let hierarchySourceExprPattern: HierarchySourceExprPattern = expr.arg.accept(HierarchyExprPatternBuiler.instance);\n            if (!hierarchySourceExprPattern)\n                return;\n\n            let hierarchyLevel: FieldExprHierarchyLevelPattern;\n            if (hierarchySourceExprPattern.hierarchy) {\n                hierarchyLevel = {\n                    entity: hierarchySourceExprPattern.hierarchy.entity,\n                    schema: hierarchySourceExprPattern.hierarchy.schema,\n                    name: hierarchySourceExprPattern.hierarchy.name,\n                    level: expr.level,\n                };\n            }\n\n            if (hierarchySourceExprPattern.variation) {\n                return {\n                    columnHierarchyLevelVariation: {\n                        source: {\n                            entity: hierarchySourceExprPattern.variation.column.entity,\n                            schema: hierarchySourceExprPattern.variation.column.schema,\n                            name: hierarchySourceExprPattern.variation.column.name,\n                        },\n                        level: hierarchyLevel,\n                        variationName: hierarchySourceExprPattern.variation.variationName,\n                    }\n                };\n            }\n\n            return { hierarchyLevel: hierarchyLevel };\n        }\n    }\n\n    class SourceExprPatternBuilder extends DefaultSQExprVisitor<SourceExprPattern> {\n        public static instance: SourceExprPatternBuilder = new SourceExprPatternBuilder();\n\n        public visitEntity(expr: SQEntityExpr): SourceExprPattern {\n            let entityRef: FieldExprEntityItemPattern = {\n                schema: expr.schema,\n                entity: expr.entity\n            };\n            if (expr.variable)\n                entityRef.entityVar = expr.variable;\n\n            return { entity: entityRef };\n        }\n\n        public visitPropertyVariationSource(expr: SQPropertyVariationSourceExpr): SourceExprPattern {\n            let entityExpr = <SQEntityExpr>expr.arg;\n\n            if (entityExpr instanceof SQEntityExpr) {\n                let propertyVariationSource: FieldExprColumnPattern = {\n                    schema: entityExpr.schema,\n                    entity: entityExpr.entity,\n                    name: expr.property,\n                };\n\n                if (entityExpr.variable)\n                    propertyVariationSource.entityVar = entityExpr.variable;\n\n                return {\n                    variation: {\n                        column: propertyVariationSource,\n                        variationName: expr.name,\n                    }\n                };\n            }\n        }\n    }\n\n    class HierarchyExprPatternBuiler extends DefaultSQExprVisitor<HierarchySourceExprPattern> {\n        public static instance: HierarchyExprPatternBuiler = new HierarchyExprPatternBuiler();\n\n        public visitHierarchy(expr: SQHierarchyExpr): HierarchySourceExprPattern {\n            let exprPattern = expr.arg.accept(SourceExprPatternBuilder.instance);\n            let hierarchyRef: FieldExprHierarchyPattern;\n            let variationRef: FieldExprSourceVariationPattern;\n\n            if (exprPattern.variation) {\n                hierarchyRef = {\n                    name: expr.hierarchy,\n                    schema: exprPattern.variation.column.schema,\n                    entity: exprPattern.variation.column.entity,\n                };\n                variationRef = exprPattern.variation;\n            }\n            else\n                hierarchyRef = {\n                    name: expr.hierarchy,\n                    schema: exprPattern.entity.schema,\n                    entity: exprPattern.entity.entity,\n                };\n\n            return {\n                hierarchy: hierarchyRef,\n                variation: variationRef\n            };\n        }\n    }\n\n    export module FieldExprPattern {\n        export function hasFieldExprName(fieldExpr: FieldExprPattern): boolean {\n            return (fieldExpr.column ||\n                fieldExpr.columnAggr ||\n                fieldExpr.measure) !== undefined;\n        }\n\n        export function getPropertyName(fieldExpr: FieldExprPattern): string {\n            let column = (fieldExpr.column ||\n                fieldExpr.columnAggr ||\n                fieldExpr.measure);\n\n            if (column)\n                return column.name;\n        }\n\n        export function getHierarchyName(fieldExpr: FieldExprPattern): string {\n            let hierarchy = fieldExpr.hierarchy;\n            if (hierarchy)\n                return hierarchy.name;\n        }\n\n        export function getColumnRef(fieldExpr: FieldExprPattern): FieldExprPropertyPattern {\n            if (fieldExpr.columnHierarchyLevelVariation)\n                return fieldExpr.columnHierarchyLevelVariation.source;\n\n            return fieldExpr.column || fieldExpr.measure || fieldExpr.columnAggr;\n        }\n\n        export function getFieldExprName(fieldExpr: FieldExprPattern): string {\n            let name = getPropertyName(fieldExpr);\n\n            if (name)\n                return name;\n\n            // In case it is an entity\n            return toFieldExprEntityItemPattern(fieldExpr).entity;\n        }\n\n        export function toFieldExprEntityItemPattern(fieldExpr: FieldExprPattern): FieldExprEntityItemPattern {\n            let field = <FieldExprEntityItemPattern>(fieldExpr.column ||\n                fieldExpr.columnAggr ||\n                fieldExpr.entityAggr ||\n                fieldExpr.hierarchy ||\n                fieldExpr.hierarchyLevel ||\n                fieldExpr.hierarchyLevelAggr ||\n                fieldExpr.measure ||\n                (fieldExpr.columnHierarchyLevelVariation && fieldExpr.columnHierarchyLevelVariation.source) ||\n                fieldExpr); // fieldExpr for entity\n\n            return {\n                schema: field.schema,\n                entity: field.entity,\n                entityVar: field.entityVar,\n            };\n        }\n    }\n}","/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved. \n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *   \n *  The above copyright notice and this permission notice shall be included in \n *  all copies or substantial portions of the Software.\n *   \n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\n\nmodule powerbi {\n    export module DataViewAnalysis {\n        import ArrayExtensions = jsCommon.ArrayExtensions;\n        import QueryProjectionsByRole = powerbi.data.QueryProjectionsByRole;\n        import DataViewObjectDescriptors = powerbi.data.DataViewObjectDescriptors;\n        import DataViewObjectDefinitions = powerbi.data.DataViewObjectDefinitions;\n\n        export interface ValidateAndReshapeResult {\n            dataView?: DataView;\n            isValid: boolean;\n        }\n\n        export interface RoleKindByQueryRef {\n            [queryRef: string]: VisualDataRoleKind;\n        }\n\n        export interface DataViewMappingResult {\n            supportedMappings: DataViewMapping[];\n\n            /** A set of mapping errors if there are no supported mappings */\n            mappingErrors: DataViewMappingMatchError[];\n        }\n\n        export enum DataViewMappingMatchErrorCode {\n            conditionRangeTooLarge,\n            conditionRangeTooSmall,\n            conditionKindExpectedMeasure,\n            conditionKindExpectedGrouping,\n            conditionKindExpectedGroupingOrMeasure,\n        }\n\n        export interface DataViewMappingMatchError {\n            code: DataViewMappingMatchErrorCode;\n            roleName: string;\n            mappingIndex?: number;\n            conditionIndex?: number;\n        }\n\n        /** Reshapes the data view to match the provided schema if possible. If not, returns null */\n        export function validateAndReshape(dataView: DataView, dataViewMappings: DataViewMapping[]): ValidateAndReshapeResult {\n            if (!dataViewMappings || dataViewMappings.length === 0)\n                return { dataView: dataView, isValid: true };\n\n            if (dataView) {\n                for (let dataViewMapping of dataViewMappings) {\n                    // Keep the original when possible.\n                    if (supports(dataView, dataViewMapping))\n                        return { dataView: dataView, isValid: true };\n\n                    if (dataViewMapping.categorical && dataView.categorical)\n                        return reshapeCategorical(dataView, dataViewMapping);\n\n                    if (dataViewMapping.tree && dataView.tree)\n                        return reshapeTree(dataView, dataViewMapping.tree);\n\n                    if (dataViewMapping.single && dataView.single)\n                        return reshapeSingle(dataView, dataViewMapping.single);\n\n                    if (dataViewMapping.table && dataView.table)\n                        return reshapeTable(dataView, dataViewMapping.table);\n                }\n            }\n            else if (ScriptResultUtil.findScriptResult(dataViewMappings)) {\n                // Currently, PBI Service treats R Script Visuals as static images.\n                // This causes validation to fail, since in PBI service no DataView is generated, but there are DataViewMappings,\n                // to support the PBI Desktop scenario.\n                // This code will be removed once PBI Service fully supports R Script Visuals.\n                // VSTS: 6217994 - [R Viz] Remove temporary DataViewAnalysis validation workaround of static R Script Visual mappings\n                return { dataView: dataView, isValid: true };\n            }\n\n            return { isValid: false };\n        }\n\n        function reshapeCategorical(dataView: DataView, dataViewMapping: DataViewMapping): ValidateAndReshapeResult {\n            debug.assertValue(dataViewMapping, 'dataViewMapping');\n\n            //The functionality that used to compare categorical.values.length to schema.values doesn't apply any more, we don't want to use the same logic for re-shaping.\n            let categoryRoleMapping = dataViewMapping.categorical;\n            let categorical = dataView.categorical;\n            if (!categorical)\n                return { isValid: false };\n\n            let rowCount;\n            if (categoryRoleMapping.rowCount) {\n                rowCount = categoryRoleMapping.rowCount.supported;\n                if (rowCount && rowCount.max) {\n                    let updated: DataViewCategorical;\n                    let categories = categorical.categories;\n                    let maxRowCount = rowCount.max;\n                    let originalLength = undefined;\n                    if (categories) {\n                        for (let i = 0, len = categories.length; i < len; i++) {\n                            let category = categories[i];\n                            originalLength = category.values.length;\n                            if (maxRowCount !== undefined && originalLength > maxRowCount) {\n\n                                // Row count too large: Trim it to fit.\n                                let updatedCategories = ArrayExtensions.range(category.values, 0, maxRowCount - 1);\n\n                                updated = updated || { categories: [] };\n                                updated.categories.push({\n                                    source: category.source,\n                                    values: updatedCategories\n                                });\n                            }\n                        }\n                    }\n\n                    if (categorical.values && categorical.values.length > 0 && maxRowCount) {\n                        if (!originalLength)\n                            originalLength = categorical.values[0].values.length;\n\n                        if (maxRowCount !== undefined && originalLength > maxRowCount) {\n                            updated = updated || {};\n                            updated.values = data.DataViewTransform.createValueColumns();\n\n                            for (let i = 0, len = categorical.values.length; i < len; i++) {\n                                let column = categorical.values[i],\n                                    updatedColumn: DataViewValueColumn = {\n                                        source: column.source,\n                                        values: ArrayExtensions.range(column.values, 0, maxRowCount - 1)\n                                    };\n\n                                if (column.min !== undefined)\n                                    updatedColumn.min = column.min;\n                                if (column.max !== undefined)\n                                    updatedColumn.max = column.max;\n                                if (column.subtotal !== undefined)\n                                    updatedColumn.subtotal = column.subtotal;\n\n                                updated.values.push(updatedColumn);\n                            }\n                        }\n                    }\n\n                    if (updated) {\n                        dataView = {\n                            metadata: dataView.metadata,\n                            categorical: updated,\n                        };\n                    }\n                }\n            }\n\n            if (supportsCategorical(dataView, dataViewMapping))\n                return { dataView: dataView, isValid: true };\n\n            return null;\n        }\n\n        function reshapeSingle(dataView: DataView, singleRoleMapping: DataViewSingleMapping): ValidateAndReshapeResult {\n            debug.assertValue(dataView, 'dataView');\n            debug.assertValue(singleRoleMapping, 'singleRoleMapping');\n\n            if (dataView.single)\n                return { dataView: dataView, isValid: true };\n\n            return { isValid: false };\n        }\n\n        function reshapeTree(dataView: DataView, treeRoleMapping: DataViewTreeMapping): ValidateAndReshapeResult {\n            debug.assertValue(dataView, 'dataView');\n            debug.assertValue(treeRoleMapping, 'treeRoleMapping');\n\n            // TODO: Need to implement the reshaping of Tree\n            let metadata = dataView.metadata;\n            if (validateRange(countGroups(metadata.columns), treeRoleMapping.depth) == null /*&& conforms(countMeasures(metadata.columns), treeRoleMapping.aggregates)*/)\n                return { dataView: dataView, isValid: true };\n\n            return { isValid: false };\n        }\n\n        function reshapeTable(dataView: DataView, tableRoleMapping: DataViewTableMapping): ValidateAndReshapeResult {\n            debug.assertValue(dataView, 'dataView');\n            debug.assertValue(tableRoleMapping, 'tableRoleMapping');\n\n            if (dataView.table)\n                return { dataView: dataView, isValid: true };\n\n            return { isValid: false };\n        }\n\n        export function countGroups(columns: DataViewMetadataColumn[]): number {\n            let count = 0;\n\n            for (let i = 0, len = columns.length; i < len; i++) {\n                if (!columns[i].isMeasure)\n                    ++count;\n            }\n\n            return count;\n        }\n\n        export function countMeasures(columns: DataViewMetadataColumn[]): number {\n            let count = 0;\n\n            for (let i = 0, len = columns.length; i < len; i++) {\n                if (columns[i].isMeasure)\n                    ++count;\n            }\n\n            return count;\n        }\n\n        /** Indicates whether the dataView conforms to the specified schema. */\n        export function supports(dataView: DataView, roleMapping: DataViewMapping, usePreferredDataViewSchema?: boolean): boolean {\n            if (!roleMapping || !dataView)\n                return false;\n\n            if (roleMapping.scriptResult && !supportsScriptResult(dataView.scriptResult, roleMapping.scriptResult))\n                return false;\n\n            if (roleMapping.categorical && !supportsCategorical(dataView, roleMapping.categorical, usePreferredDataViewSchema))\n                return false;\n\n            if (roleMapping.tree && !supportsTree(dataView, roleMapping.tree))\n                return false;\n\n            if (roleMapping.single && !supportsSingle(dataView.single, roleMapping.single))\n                return false;\n\n            if (roleMapping.table && !supportsTable(dataView.table, roleMapping.table, usePreferredDataViewSchema))\n                return false;\n\n            return true;\n        }\n\n        function supportsCategorical(dataView: DataView, categoryRoleMapping: DataViewCategoricalMapping, usePreferredDataViewSchema?: boolean): boolean {\n            debug.assertValue(categoryRoleMapping, 'categoryRoleMapping');\n\n            let dataViewCategorical = dataView.categorical;\n            if (!dataViewCategorical)\n                return false;\n\n            // TODO: Disabling this implementation isn't right.\n            //if (!conforms(countMeasures(dataView.metadata.columns), categoryRoleMapping.values.roles.length))\n            //    return false;\n\n            if (categoryRoleMapping.rowCount) {\n                let rowCount = categoryRoleMapping.rowCount.supported;\n                if (usePreferredDataViewSchema && categoryRoleMapping.rowCount.preferred)\n                    rowCount = categoryRoleMapping.rowCount.preferred;\n\n                if (rowCount) {\n                    let len: number = 0;\n                    if (dataViewCategorical.values && dataViewCategorical.values.length)\n                        len = dataViewCategorical.values[0].values.length;\n                    else if (dataViewCategorical.categories && dataViewCategorical.categories.length)\n                        len = dataViewCategorical.categories[0].values.length;\n\n                    if (validateRange(len, rowCount) != null)\n                        return false;\n                }\n            }\n\n            return true;\n        }\n\n        function supportsSingle(dataViewSingle: DataViewSingle, singleRoleMapping: DataViewSingleMapping): boolean {\n            debug.assertValue(singleRoleMapping, 'singleRoleMapping');\n\n            if (!dataViewSingle)\n                return false;\n\n            return true;\n        }\n\n        function supportsTree(dataView: DataView, treeRoleMapping: DataViewTreeMapping): boolean {\n            debug.assertValue(treeRoleMapping, 'treeRoleMapping');\n\n            let metadata = dataView.metadata;\n            return validateRange(countGroups(metadata.columns), treeRoleMapping.depth) == null;\n        }\n\n        function supportsTable(dataViewTable: DataViewTable, tableRoleMapping: DataViewTableMapping, usePreferredDataViewSchema?: boolean): boolean {\n            debug.assertValue(tableRoleMapping, 'tableRoleMapping');\n\n            if (!dataViewTable)\n                return false;\n\n            if (tableRoleMapping.rowCount) {\n                let rowCount = tableRoleMapping.rowCount.supported;\n                if (usePreferredDataViewSchema && tableRoleMapping.rowCount.preferred)\n                    rowCount = tableRoleMapping.rowCount.preferred;\n\n                if (rowCount) {\n                    let len: number = 0;\n                    if (dataViewTable.rows && dataViewTable.rows.length)\n                        len = dataViewTable.rows.length;\n\n                    if (validateRange(len, rowCount) != null)\n                        return false;\n                }\n            }\n\n            return true;\n        }\n\n        function supportsScriptResult(dataView: DataViewScriptResultData, scriptResultRoleMapping: DataViewScriptResultMapping): boolean {\n            debug.assertValue(scriptResultRoleMapping, 'scriptResultRoleMapping');\n\n            if (!dataView)\n                return false;\n\n            if (!dataView.imageBase64)\n                return false;\n\n            return true;\n        }\n\n        /** \n         * Determines whether the value conforms to the range in the role condition, returning undefined\n         * if so or an appropriate error code if not.\n         */\n        export function validateRange(value: number, roleCondition: RoleCondition, ignoreMin?: boolean): DataViewMappingMatchErrorCode {\n            debug.assertValue(value, 'value');\n\n            if (!roleCondition)\n                return;\n\n            if (!ignoreMin && roleCondition.min !== undefined && roleCondition.min > value)\n                return DataViewMappingMatchErrorCode.conditionRangeTooSmall;\n\n            if (roleCondition.max !== undefined && roleCondition.max < value)\n                return DataViewMappingMatchErrorCode.conditionRangeTooLarge;\n        }\n\n        /** \n         * Determines whether the value conforms to the kind in the role condition, returning undefined\n         * if so or an appropriate error code if not.\n         */\n        function validateKind(roleCondition: RoleCondition, roleName: string, projections: QueryProjectionsByRole, roleKindByQueryRef: RoleKindByQueryRef): DataViewMappingMatchErrorCode {\n            if (!roleCondition || roleCondition.kind === undefined) {\n                return;\n            }\n            let expectedKind = roleCondition.kind;\n            let roleCollection = projections[roleName];\n            if (roleCollection) {\n                let roleProjections = roleCollection.all();\n                for (let roleProjection of roleProjections) {\n                    if (roleKindByQueryRef[roleProjection.queryRef] !== expectedKind) {\n                        switch (expectedKind) {\n                            case VisualDataRoleKind.Measure:\n                                return DataViewMappingMatchErrorCode.conditionKindExpectedMeasure;\n                            case VisualDataRoleKind.Grouping:\n                                return DataViewMappingMatchErrorCode.conditionKindExpectedGrouping;\n                            case VisualDataRoleKind.GroupingOrMeasure:\n                                return DataViewMappingMatchErrorCode.conditionKindExpectedGroupingOrMeasure;\n                        }\n                    }\n                }\n            }\n        }\n\n        /** Determines the appropriate DataViewMappings for the projections. */\n        export function chooseDataViewMappings(\n            projections: QueryProjectionsByRole,\n            mappings: DataViewMapping[],\n            roleKindByQueryRef: RoleKindByQueryRef,\n            objectDescriptors?: DataViewObjectDescriptors,\n            objectDefinitions?: DataViewObjectDefinitions): DataViewMappingResult {\n            debug.assertValue(projections, 'projections');\n            debug.assertValue(mappings, 'mappings');\n\n            let supportedMappings: DataViewMapping[] = [];\n            let errors: DataViewMappingMatchError[] = [];\n\n            for (let mappingIndex = 0, mappingCount = mappings.length; mappingIndex < mappingCount; mappingIndex++) {\n                let mapping = mappings[mappingIndex],\n                    mappingConditions = mapping.conditions,\n                    requiredProperties = mapping.requiredProperties;\n                let allPropertiesValid: boolean = areAllPropertiesValid(requiredProperties, objectDescriptors, objectDefinitions);\n                let conditionsMet: DataViewMappingCondition[] = [];\n\n                if (!_.isEmpty(mappingConditions)) {\n                    for (let conditionIndex = 0, conditionCount = mappingConditions.length; conditionIndex < conditionCount; conditionIndex++) {\n                        let condition = mappingConditions[conditionIndex];\n                        let currentConditionErrors = checkForConditionErrors(projections, condition, roleKindByQueryRef);\n                        if (!_.isEmpty(currentConditionErrors)) {\n                            for (let error of currentConditionErrors) {\n                                error.mappingIndex = mappingIndex;\n                                error.conditionIndex = conditionIndex;\n                                errors.push(error);\n                            }\n                        }\n                        else\n                            conditionsMet.push(condition);\n                    }\n                }\n                else {\n                    conditionsMet.push({});\n                }\n\n                if (!_.isEmpty(conditionsMet) && allPropertiesValid) {\n                    let supportedMapping = _.cloneDeep(mapping);\n\n                    let updatedConditions = _.filter(conditionsMet, (condition) => Object.keys(condition).length > 0);\n                    if (!_.isEmpty(updatedConditions))\n                        supportedMapping.conditions = updatedConditions;\n                    supportedMappings.push(supportedMapping);\n                }\n            }\n\n            return {\n                supportedMappings: ArrayExtensions.emptyToNull(supportedMappings),\n                mappingErrors: ArrayExtensions.emptyToNull(errors),\n            };\n        }\n\n        function checkForConditionErrors(projections: QueryProjectionsByRole, condition: DataViewMappingCondition, roleKindByQueryRef: RoleKindByQueryRef): DataViewMappingMatchError[] {\n            debug.assertValue(projections, 'projections');\n            debug.assertValue(condition, 'condition');\n\n            let conditionRoles = Object.keys(condition);\n            let errors: DataViewMappingMatchError[] = [];\n\n            for (let i = 0, len = conditionRoles.length; i < len; i++) {\n                let roleName: string = conditionRoles[i],\n                    isDrillable = projections[roleName] && !_.isEmpty(projections[roleName].activeProjectionRefs),\n                    roleCondition = condition[roleName];\n\n                let roleCount = getPropertyCount(roleName, projections, isDrillable);\n                let rangeError = validateRange(roleCount, roleCondition);\n                if (rangeError != null) {\n                    errors.push({\n                        code: rangeError,\n                        roleName: roleName,\n                    });\n                }\n                let kindError = validateKind(roleCondition, roleName, projections, roleKindByQueryRef);\n                if (kindError != null) {\n                    errors.push({\n                        code: kindError,\n                        roleName: roleName,\n                    });\n                }\n            }\n\n            return errors;\n        }\n\n        function areAllPropertiesValid(requiredProperties: DataViewObjectPropertyIdentifier[], objectDescriptors: DataViewObjectDescriptors, objectDefinitions?: DataViewObjectDefinitions): boolean {\n            if (_.isEmpty(requiredProperties))\n                return true;\n\n            if (!objectDescriptors || !objectDefinitions)\n                return false;\n\n            let staticEvalContext: data.IEvalContext = data.createStaticEvalContext();\n\n            return _.every(requiredProperties, (requiredProperty) => {\n                let objectDescriptorValue = null;\n                let objectDescriptorProperty = objectDescriptors[requiredProperty.objectName];\n                if (objectDescriptorProperty)\n                    objectDescriptorValue = objectDescriptorProperty.properties[requiredProperty.propertyName];\n                let objectDefinitionValue = DataViewObjectDefinitions.getValue(objectDefinitions, requiredProperty, null);\n\n                if (!objectDescriptorValue || !objectDefinitionValue)\n                    return false;\n\n                return data.DataViewObjectEvaluator.evaluateProperty(staticEvalContext, objectDescriptorValue, objectDefinitionValue);\n            });\n        }\n\n        export function getPropertyCount(roleName: string, projections: QueryProjectionsByRole, useActiveIfAvailable?: boolean): number {\n            debug.assertValue(roleName, 'roleName');\n            debug.assertValue(projections, 'projections');\n\n            let projectionsForRole = projections[roleName];\n            if (projectionsForRole) {\n                if (useActiveIfAvailable)\n                    return 1;\n                return projectionsForRole.all().length;\n            }\n\n            return 0;\n        }\n\n        export function hasSameCategoryIdentity(dataView1: DataView, dataView2: DataView): boolean {\n            if (dataView1\n                && dataView2\n                && dataView1.categorical\n                && dataView2.categorical) {\n                let dv1Categories = dataView1.categorical.categories;\n                let dv2Categories = dataView2.categorical.categories;\n                if (dv1Categories\n                    && dv2Categories\n                    && dv1Categories.length === dv2Categories.length) {\n                    for (let i = 0, len = dv1Categories.length; i < len; i++) {\n                        let dv1Identity = dv1Categories[i].identity;\n                        let dv2Identity = dv2Categories[i].identity;\n\n                        let dv1Length = getLengthOptional(dv1Identity);\n                        if (dv1Length !== getLengthOptional(dv2Identity))\n                            return false;\n\n                        for (let j = 0; j < dv1Length; j++) {\n                            if (!DataViewScopeIdentity.equals(dv1Identity[j], dv2Identity[j]))\n                                return false;\n                        }\n                    }\n\n                    return true;\n                }\n            }\n\n            return false;\n        }\n\n        function getLengthOptional(identity: DataViewScopeIdentity[]): number {\n            if (identity)\n                return identity.length;\n\n            return 0;\n        }\n\n        export function areMetadataColumnsEquivalent(column1: DataViewMetadataColumn, column2: DataViewMetadataColumn): boolean {\n            if (!column1 && !column2)\n                return true;\n\n            if (!column1 || !column2)\n                return false;\n\n            if (column1.displayName !== column2.displayName)\n                return false;\n\n            if (column1.queryName !== column2.queryName)\n                return false;\n\n            if (column1.isMeasure !== column2.isMeasure)\n                return false;\n\n            if (column1.type !== column2.type)\n                return false;\n\n            if (column1.sort !== column2.sort)\n                return false;\n\n            return true;\n        }\n\n        /* Returns true if the metadata columns at the same positions in the array are equivalent. */\n        export function isMetadataEquivalent(metadata1: DataViewMetadata, metadata2: DataViewMetadata): boolean {\n            if (!metadata1 && !metadata2)\n                return true;\n\n            if (!metadata1 || !metadata2)\n                return false;\n\n            let previousColumnsLength = metadata1.columns.length;\n            let newColumnsLength = metadata2.columns.length;\n\n            if (previousColumnsLength !== newColumnsLength)\n                return false;\n\n            for (let i: number = 0; i < newColumnsLength; i++) {\n                if (!DataViewAnalysis.areMetadataColumnsEquivalent(metadata1.columns[i], metadata2.columns[i]))\n                    return false;\n            }\n\n            return true;\n        }\n    }\n}","/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved. \n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *   \n *  The above copyright notice and this permission notice shall be included in \n *  all copies or substantial portions of the Software.\n *   \n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\n\nmodule powerbi {\n\n    export module DataViewScopeIdentity {\n        /** Compares the two DataViewScopeIdentity values for equality. */\n        export function equals(x: DataViewScopeIdentity, y: DataViewScopeIdentity, ignoreCase?: boolean): boolean {\n            // Normalize falsy to null\n            x = x || null;\n            y = y || null;\n\n            if (x === y)\n                return true;\n\n            if (!x !== !y)\n                return false;\n\n            debug.assertValue(x, 'x');\n            debug.assertValue(y, 'y');\n\n            return data.SQExpr.equals(<data.SQExpr>x.expr, <data.SQExpr>y.expr, ignoreCase);\n        }\n\n        export function filterFromIdentity(identities: DataViewScopeIdentity[], isNot?: boolean): data.SemanticFilter {\n            if (_.isEmpty(identities))\n                return;\n            \n            let exprs: data.SQExpr[] = [];\n            for (let identity of identities) {\n                exprs.push(<data.SQExpr>identity.expr);\n            }\n\n            return filterFromExprs(exprs, isNot);\n        }\n\n        export function filterFromExprs(orExprs: data.SQExpr[], isNot?: boolean): data.SemanticFilter {\n            if (_.isEmpty(orExprs))\n                return;\n\n            let resultExpr: data.SQExpr;\n            for (let orExpr of orExprs) {\n                let inExpr = data.ScopeIdentityExtractor.getInExpr(orExpr);\n                if (resultExpr)\n                    resultExpr = data.SQExprBuilder.or(resultExpr, inExpr);\n                else\n                    resultExpr = inExpr || orExpr;\n            }\n            \n            if (resultExpr) {\n                if (isNot)\n                    resultExpr = powerbi.data.SQExprBuilder.not(resultExpr);\n            }\n\n            return powerbi.data.SemanticFilter.fromSQExpr(resultExpr);\n        }\n    }\n\n    export module data {\n        import Lazy = jsCommon.Lazy;\n\n        export function createDataViewScopeIdentity(expr: SQExpr): DataViewScopeIdentity {\n            return new DataViewScopeIdentityImpl(expr);\n        }\n\n        class DataViewScopeIdentityImpl implements DataViewScopeIdentity {\n            private _expr: SQExpr;\n            private _key: Lazy<string>;\n\n            public constructor(expr: SQExpr) {\n                debug.assertValue(expr, 'expr');\n\n                this._expr = expr;\n                this._key = new Lazy(() => SQExprShortSerializer.serialize(expr));\n            }\n\n            public get expr(): SQExpr {\n                return this._expr;\n            }\n\n            public get key(): string {\n                return this._key.getValue();\n            }\n        }\n    }\n}","/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved. \n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *   \n *  The above copyright notice and this permission notice shall be included in \n *  all copies or substantial portions of the Software.\n *   \n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\n\nmodule powerbi.data {\n    import Lazy = jsCommon.Lazy;\n\n    export module DataViewScopeWildcard {\n        export function matches(wildcard: DataViewScopeWildcard, instance: DataViewScopeIdentity): boolean {\n            let instanceExprs = ScopeIdentityExtractor.getKeys(<SQExpr>instance.expr);\n            if (!instanceExprs)\n                return false;\n\n            return SQExprUtils.sequenceEqual(<SQExpr[]>wildcard.exprs, instanceExprs);\n        }\n\n        export function fromExprs(exprs: SQExpr[]): DataViewScopeWildcard {\n            return new DataViewScopeWildcardImpl(exprs);\n        }\n\n        class DataViewScopeWildcardImpl implements DataViewScopeWildcard {\n            private _exprs: SQExpr[];\n            private _key: Lazy<string>;\n\n            public constructor(exprs: SQExpr[]) {\n                debug.assertValue(exprs, 'exprs');\n\n                this._exprs = exprs;\n                this._key = new Lazy(() => SQExprShortSerializer.serializeArray(exprs));\n            }\n\n            public get exprs(): SQExpr[] {\n                return this._exprs;\n            }\n\n            public get key(): string {\n                return this._key.getValue();\n            }\n        }\n    }\n}","/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\n\nmodule powerbi.data {\n    import RoleKindByQueryRef = DataViewAnalysis.RoleKindByQueryRef;\n\n    export interface DataViewRegressionRunOptions {\n        dataViewMappings: DataViewMapping[];\n        transformedDataViews: DataView[];\n        dataRoles: VisualDataRole[];\n        objectDescriptors: DataViewObjectDescriptors;\n        objectDefinitions: DataViewObjectDefinitions;\n        colorAllocatorFactory: IColorAllocatorFactory;\n        transformSelects: DataViewSelectTransform[];\n        dataView: DataView;\n        projectionActiveItems: DataViewProjectionActiveItems;\n    }\n\n    export module DataViewRegression {\n        // TODO VSTS 6842046: Currently we are using a constant queryName since we don't have a way to generate\n        // unique ones. There is a bug filed to do this by lawong, so this part will be fixed with that bug.\n        const regressionXQueryName: string = 'RegressionX';\n        export const regressionYQueryName: string = 'RegressionY';\n\n        export function run(options: DataViewRegressionRunOptions): DataView[] {\n            debug.assertValue(options, 'options');\n\n            let dataViewMappings: DataViewMapping[] = options.dataViewMappings;\n            let transformedDataViews: DataView[] = options.transformedDataViews;\n            let dataRoles: VisualDataRole[] = options.dataRoles;\n            let objectDescriptors: DataViewObjectDescriptors = options.objectDescriptors;\n            let objectDefinitions: DataViewObjectDefinitions = options.objectDefinitions;\n            let colorAllocatorFactory: IColorAllocatorFactory = options.colorAllocatorFactory;\n            let transformSelects: DataViewSelectTransform[] = options.transformSelects;\n            let projectionActiveItems = options.projectionActiveItems;\n            let dataView: DataView = options.dataView;\n\n            if (transformedDataViews.length === 1  && transformSelects && dataView.metadata) {\n                // compute linear regression line if applicable\n                let roleKindByQueryRef: RoleKindByQueryRef = DataViewSelectTransform.createRoleKindFromMetadata(transformSelects, dataView.metadata);\n                let projections: QueryProjectionsByRole = DataViewSelectTransform.projectionsFromSelects(transformSelects, projectionActiveItems);\n                if (!roleKindByQueryRef || !projections || !dataViewMappings || !objectDescriptors || !objectDefinitions)\n                    return transformedDataViews;\n\n                let applicableDataViewMappings: DataViewMapping[] = DataViewAnalysis.chooseDataViewMappings(projections, dataViewMappings, roleKindByQueryRef, objectDescriptors, objectDefinitions).supportedMappings;\n\n                if (applicableDataViewMappings) {\n                    let regressionDataViewMapping: DataViewMapping = _.find(applicableDataViewMappings, (dataViewMapping) => {\n                        return dataViewMapping.usage && dataViewMapping.usage.regression;\n                    });\n\n                    if (regressionDataViewMapping) {\n                        let regressionSource = transformedDataViews[0];\n                        let regressionDataView: DataView = this.linearRegressionTransform(regressionSource, dataRoles, regressionDataViewMapping, objectDescriptors, objectDefinitions, colorAllocatorFactory);\n\n                        if (regressionDataView)\n                            transformedDataViews.push(regressionDataView);\n                    }\n                }\n            }\n\n            return transformedDataViews;\n        }\n\n        /**\n         * This function will compute the linear regression algorithm on the sourceDataView and create a new dataView.\n         * It works on scalar axis only.\n         * The algorithm is as follows\n         *\n         * 1. Find the cartesian X and Y roles and the columns that correspond to those roles\n         * 2. Order the X-Y value pairs by the X values\n         * 3. Linearly map dates to their respective times and normalize since regression cannot be directly computed on dates\n         * 4. Compute the actual regression:\n         *    i.   xBar: average of X values, yBar: average of Y values\n         *    ii.  ssXX: sum of squares of X values = Sum(xi - xBar)^2\n         *    iii. ssXY: sum of squares of X and Y values  = Sum((xi - xBar)(yi - yBar)\n         *    iv.  Slope: ssXY / ssXX\n         *    v.   Intercept: yBar - xBar * slope\n         * 5. Compute the X and Y points for regression line using Y = Slope * X + Intercept\n         * 6. Create the new dataView using the points computed above\n         */\n        export function linearRegressionTransform(\n            sourceDataView: DataView,\n            dataRoles: VisualDataRole[],\n            regressionDataViewMapping: DataViewMapping,\n            objectDescriptors: DataViewObjectDescriptors,\n            objectDefinitions: DataViewObjectDefinitions,\n            colorAllocatorFactory: IColorAllocatorFactory): DataView {\n            debug.assertValue(sourceDataView, 'sourceDataView');\n            debug.assertValue(sourceDataView.categorical, 'sourceDataView.categorical');\n            debug.assertValue(dataRoles, 'dataRoles');\n            debug.assertValue(objectDescriptors, 'objectDescriptors');\n            debug.assertValue(objectDefinitions, 'objectDefinitions');\n            debug.assertValue(colorAllocatorFactory, 'colorAllocatorFactory');\n\n            // Step 1\n            let xRole: string = findRoleWithCartesianAxis(CartesianRoleKind.X, dataRoles);\n            let yRole: string = findRoleWithCartesianAxis(CartesianRoleKind.Y, dataRoles);\n\n            if (!xRole || !yRole)\n                return;\n\n            let xColumn = getColumnForCategoricalRole(xRole, sourceDataView.categorical);\n            let yColumn = getColumnForCategoricalRole(yRole, sourceDataView.categorical);\n\n            if (!xColumn || !yColumn)\n                return;\n\n            let unsortedXValues = xColumn.values;\n            let unsortedYValues = yColumn.values;\n\n            if (_.isEmpty(unsortedXValues) || _.isEmpty(unsortedYValues))\n                return;\n\n            // get the data type for each column; we will have null type when dataPoints have different type or if a value is null\n            let xDataType: string = getDataType(unsortedXValues);\n            if (!xDataType)\n                return;\n            let yDataType: string = getDataType(unsortedYValues);\n            if (!yDataType)\n                return;\n\n            // Step 2\n            let { xValues, yValues } = sortValues(unsortedXValues, unsortedYValues);\n            let minCategoryValue = xValues[0];\n            let maxCategoryValue = xValues[xValues.length - 1];\n\n            // Step 3\n            if (xDataType === 'Date')\n                xValues = normalizeDateValues(xValues);\n\n            // Step 4\n            let { slope, intercept } = computeRegressionLine(xValues, yValues);\n\n            // Step 5\n            let minXValue = xValues[0];\n            let maxXValue = xValues[xValues.length - 1];\n\n            let newCategories = [minCategoryValue, maxCategoryValue];\n            let newValues = [minXValue * slope + intercept, maxXValue * slope + intercept];\n\n            // Step 6\n            let regressionDataView: DataView = createRegressionDataView(xColumn, yColumn, newCategories, newValues, sourceDataView, regressionDataViewMapping, objectDescriptors, objectDefinitions, colorAllocatorFactory);\n\n            return regressionDataView;\n        }\n\n        function findRoleWithCartesianAxis(cartesianRole: CartesianRoleKind, dataRoles: VisualDataRole[]): string {\n            debug.assertValue(cartesianRole, 'cartesianRole');\n            debug.assertValue(dataRoles, 'dataRoles');\n\n            for (let dataRole of dataRoles) {\n                if (dataRole.cartesianKind === cartesianRole)\n                    return dataRole.name;\n            }\n        }\n\n        function getColumnForCategoricalRole(roleName: string, categorical: DataViewCategorical): DataViewCategoryColumn | DataViewValueColumn {\n            debug.assertValue(roleName, 'roleName');\n            debug.assertValue(categorical, 'categorical');\n            debug.assertValue(categorical.categories, 'categorical.categories');\n            debug.assertValue(categorical.values, 'categorical.values');\n\n            let categoryColumn = getRoleFromColumn(roleName, categorical.categories);\n            if (categoryColumn)\n                return categoryColumn;\n\n            // Regression is not supported for multiple series yet, so return null column back\n            if (categorical.values.source)\n                return null;\n\n            let valueColumn = getRoleFromColumn(roleName, categorical.values);\n            if (valueColumn)\n                return valueColumn;\n\n            return null;\n        }\n\n        function getRoleFromColumn(roleName: string, columns: DataViewCategoricalColumn[] | DataViewValueColumn[]): DataViewCategoryColumn | DataViewValueColumn {\n            debug.assertValue(roleName, 'roleName');\n            debug.assertValue(columns, 'columns');\n\n            return _.find(columns, (column) => {\n                return column.source.roles[roleName];\n            });\n        }\n\n        function getDataType(values: any[]): string {\n            if (_.isEmpty(values) || values[0] == null)\n                return;\n\n            let dataType: string = typeof values[0];\n\n            if (_.some(values, (value) => value === null || typeof value !== dataType))\n                return;\n\n            return dataType;\n        }\n\n        function sortValues(unsortedXValues: any[], unsortedYValues: any[]): { xValues: any[], yValues: any[] } {\n            debug.assertValue(unsortedXValues, 'unsortedXValues');\n            debug.assertValue(unsortedYValues, 'unsortedYValues');\n\n            let zippedValues = _.zip(unsortedXValues, unsortedYValues);\n            let sortedValues = _.sortBy(zippedValues, (valuePair) => {\n                return valuePair[0];\n            });\n            let [xValues, yValues] = _.unzip(sortedValues);\n            return {\n                xValues: xValues,\n                yValues: yValues\n            };\n        }\n\n        function normalizeDateValues(xValues: any[]): number[] {\n            debug.assertValue(xValues, 'xValues');\n\n            let initialTime = (<Date>xValues[0]).getTime();\n            for (let i = 0; i < xValues.length; i++) {\n                xValues[i] = (<Date>xValues[i]).getTime() - initialTime;\n            }\n            return xValues;\n        }\n\n        function computeRegressionLine(xValues: number[], yValues: number[]): { slope: number, intercept: number } {\n            debug.assertValue(xValues, 'xValues');\n            debug.assertValue(yValues, 'yValues');\n\n            let xBar = _.sum(xValues) / xValues.length;\n            let yBar = _.sum(yValues) / yValues.length;\n\n            let ssXX = _.chain(xValues)\n                .map((x) => {\n                    return (x - xBar) ** 2;\n                })\n                .sum();\n\n            let ssXY = _.chain(xValues)\n                .map((x, i) => {\n                    return (x - xBar) * (yValues[i] - yBar);\n                })\n                .sum();\n\n            let slope = ssXY / ssXX;\n            let intercept = yBar - (xBar * slope);\n\n            return {\n                slope: slope,\n                intercept: intercept\n            };\n        }\n\n        function createRegressionDataView(\n            xColumn: DataViewCategoryColumn | DataViewValueColumn,\n            yColumn: DataViewCategoryColumn | DataViewValueColumn,\n            newCategories: any[],\n            newValues: any[],\n            sourceDataView: DataView,\n            regressionDataViewMapping: DataViewMapping,\n            objectDescriptors: DataViewObjectDescriptors,\n            objectDefinitions: DataViewObjectDefinitions,\n            colorAllocatorFactory: IColorAllocatorFactory): DataView {\n            debug.assertValue(xColumn, 'xColumn');\n            debug.assertValue(yColumn, 'yColumn');\n            debug.assertValue(newCategories, 'newCategories');\n            debug.assertValue(newValues, 'newValues');\n            debug.assertValue(sourceDataView, 'sourceDataView');\n            debug.assertValue(objectDescriptors, 'objectDescriptors');\n            debug.assertValue(objectDefinitions, 'objectDefinitions');\n            debug.assertValue(colorAllocatorFactory, 'colorAllocatorFactory');\n\n            let xRole: string = (<DataViewRoleForMapping>regressionDataViewMapping.categorical.categories).for.in;\n            let yRole: string = (<DataViewRoleForMapping>regressionDataViewMapping.categorical.values).for.in;\n            let categoricalRoles: { [name: string]: boolean } = {};\n            categoricalRoles[xRole] = true;\n            let valueRoles: { [name: string]: boolean } = {};\n            valueRoles[yRole] = true;\n\n            let regressionDataView: DataView = createCategoricalDataViewBuilder()\n                .withCategories([{\n                    source: {\n                        displayName: xColumn.source.displayName,\n                        queryName: regressionXQueryName,\n                        type: xColumn.source.type,\n                        isMeasure: xColumn.source.isMeasure,\n                        roles: categoricalRoles\n                    },\n                    values: newCategories\n                }])\n                .withValues({\n                    columns: [{\n                        source: {\n                            displayName: yColumn.source.displayName,\n                            queryName: regressionYQueryName,\n                            type: yColumn.source.type,\n                            isMeasure: yColumn.source.isMeasure,\n                            roles: valueRoles\n                        },\n                        values: newValues\n                    }]\n                })\n                .build();\n            DataViewTransform.transformObjects(regressionDataView, data.StandardDataViewKinds.Categorical, objectDescriptors, objectDefinitions, [], colorAllocatorFactory);\n            return regressionDataView;\n        }\n    }\n}\n","/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\n\nmodule powerbi.data {\n    import RoleKindByQueryRef = DataViewAnalysis.RoleKindByQueryRef;\n\n    export interface DataViewSelectTransform {\n        displayName?: string;\n        queryName?: string;\n        format?: string;\n        type?: ValueType;\n        roles?: { [roleName: string]: boolean };\n        kpi?: DataViewKpiColumnMetadata;\n        sort?: SortDirection;\n        expr?: SQExpr;\n        discourageAggregationAcrossGroups?: boolean;\n\n        /** Describes the default value applied to a column, if any. */\n        defaultValue?: DefaultValueDefinition;\n    }\n\n    export module DataViewSelectTransform {\n        /** Convert selection info to projections */\n        export function projectionsFromSelects(selects: DataViewSelectTransform[], projectionActiveItems: DataViewProjectionActiveItems): QueryProjectionsByRole {\n            debug.assertAnyValue(selects, \"selects\");\n            debug.assertAnyValue(projectionActiveItems, \"projectionActiveItems\");\n\n            let projections: QueryProjectionsByRole = {};\n            for (let select of selects) {\n                let roles = select.roles;\n                if (!roles)\n                    continue;\n\n                for (let roleName in roles) {\n                    if (roles[roleName]) {\n                        let qp = projections[roleName];\n                        if (!qp)\n                            qp = projections[roleName] = new QueryProjectionCollection([]);\n                        qp.all().push({ queryRef: select.queryName });\n\n                        if (projectionActiveItems && projectionActiveItems[roleName])\n                            qp.activeProjectionRefs = projectionActiveItems[roleName];\n                    }\n                }\n            }\n\n            return projections;\n        }\n\n        /** Use selections and metadata to fashion query role kinds */\n        export function createRoleKindFromMetadata(selects: DataViewSelectTransform[], metadata: DataViewMetadata): RoleKindByQueryRef {\n            let roleKindByQueryRef: DataViewAnalysis.RoleKindByQueryRef = {};\n            for (let column of metadata.columns) {\n                if ((!column.index && column.index !== 0) || column.index < 0 || column.index >= selects.length)\n                    continue;\n\n                let select = selects[column.index];\n                if (select) {\n                    let queryRef = select.queryName;\n                    if (queryRef && roleKindByQueryRef[queryRef] === undefined) {\n                        roleKindByQueryRef[queryRef] = column.isMeasure ? VisualDataRoleKind.Measure : VisualDataRoleKind.Grouping;\n                    }\n                }\n            }\n            return roleKindByQueryRef;\n        }\n    }\n}","/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved. \n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *   \n *  The above copyright notice and this permission notice shall be included in \n *  all copies or substantial portions of the Software.\n *   \n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\n\nmodule powerbi.data {\n    export interface ICategoricalEvalContext extends IEvalContext {\n        setCurrentRowIndex(index: number): void;\n    }\n\n    export function createCategoricalEvalContext(dataViewCategorical: DataViewCategorical): ICategoricalEvalContext {\n        return new CategoricalEvalContext(dataViewCategorical);\n    }\n\n    class CategoricalEvalContext implements ICategoricalEvalContext {\n        private dataView: DataViewCategorical;\n        private columnsByRole: { [name: string]: DataViewCategoricalColumn };\n        private index: number;\n\n        constructor(dataView: DataViewCategorical) {\n            debug.assertValue(dataView, 'dataView');\n\n            this.dataView = dataView;\n            this.columnsByRole = {};\n        }\n\n        public getExprValue(expr: SQExpr): PrimitiveValue {\n            return;\n        }\n\n        public getRoleValue(roleName: string): PrimitiveValue {\n            let columnsByRole = this.columnsByRole;\n            let column = columnsByRole[roleName];\n            if (!column)\n                column = columnsByRole[roleName] = findRuleInputColumn(this.dataView, roleName);\n            \n            if (!column)\n                return;\n\n            let index = this.index;\n            if (index != null)\n                return column.values[this.index];\n        }\n\n        public setCurrentRowIndex(index: number): void {\n            debug.assertValue(index, 'index');\n\n            this.index = index;\n        }\n    }\n\n    function findRuleInputColumn(dataViewCategorical: DataViewCategorical, inputRole: string): DataViewCategoricalColumn {\n        debug.assertValue(dataViewCategorical, 'dataViewCategorical');\n\n        return findRuleInputInColumns(dataViewCategorical.values, inputRole) ||\n            findRuleInputInColumns(dataViewCategorical.categories, inputRole);\n    }\n\n    function findRuleInputInColumns(columns: DataViewCategoricalColumn[], inputRole: string): DataViewCategoricalColumn {\n        debug.assertAnyValue(columns, 'columns');\n\n        if (!columns)\n            return;\n\n        for (let column of columns) {\n            let roles = column.source.roles;\n            if (!roles || !roles[inputRole])\n                continue;\n\n            return column;\n        }\n    }\n}","/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved. \n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *   \n *  The above copyright notice and this permission notice shall be included in \n *  all copies or substantial portions of the Software.\n *   \n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\n\nmodule powerbi.data {\n    import SQExpr = powerbi.data.SQExpr;\n\n    export interface ITableEvalContext extends IEvalContext {\n        setCurrentRowIndex(index: number): void;\n    }\n\n    export function createTableEvalContext(dataViewTable: DataViewTable, selectTransforms: DataViewSelectTransform[]): ITableEvalContext {\n        return new TableEvalContext(dataViewTable, selectTransforms);\n    }\n\n    class TableEvalContext implements ITableEvalContext {\n        private dataView: DataViewTable;\n        private rowIdx: number;\n        private selectTransforms: DataViewSelectTransform[];\n\n        constructor(dataView: DataViewTable, selectTransforms: DataViewSelectTransform[]) {\n            debug.assertValue(dataView, 'dataView');\n            debug.assertValue(selectTransforms, 'selectTransforms');\n\n            this.dataView = dataView;\n            this.selectTransforms = selectTransforms;\n        }\n\n        public getExprValue(expr: SQExpr): PrimitiveValue {\n            debug.assertValue(expr, 'expr');\n\n            let rowIdx = this.rowIdx;\n            if (rowIdx == null)\n                return;\n\n            return getExprValueFromTable(expr, this.selectTransforms, this.dataView, rowIdx);\n        }\n\n        public getRoleValue(roleName: string): PrimitiveValue {\n            return;\n        }\n\n        public setCurrentRowIndex(index: number): void {\n            debug.assertValue(index, 'index');\n\n            this.rowIdx = index;\n        }\n    }\n}","/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved. \n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *   \n *  The above copyright notice and this permission notice shall be included in \n *  all copies or substantial portions of the Software.\n *   \n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\n\nmodule powerbi.data {\n    export class RuleEvaluation {\n        // NOTE: even though this class has no behaviour, we still use a class to facilitate instanceof checks.\n\n        public evaluate(evalContext: IEvalContext): any {\n            debug.assertFail('Abstract method RuleEvaluation.evaluate not implemented.');\n        }\n    }\n}","/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved. \n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *   \n *  The above copyright notice and this permission notice shall be included in \n *  all copies or substantial portions of the Software.\n *   \n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\n\nmodule powerbi.data {\n    export class ColorRuleEvaluation extends RuleEvaluation {\n        private inputRole: string;\n        private allocator: IColorAllocator;\n\n        constructor(inputRole: string, allocator: IColorAllocator) {\n            debug.assertValue(inputRole, 'inputRole');\n            debug.assertValue(allocator, 'allocator');\n\n            super();\n            this.inputRole = inputRole;\n            this.allocator = allocator;\n        }\n\n        public evaluate(evalContext: IEvalContext): any {\n            debug.assertValue(evalContext, 'evalContext');\n\n            let value: any = evalContext.getRoleValue(this.inputRole);\n            if (value !== undefined)\n                return this.allocator.color(value);\n        }\n    }\n}","/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved. \n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *   \n *  The above copyright notice and this permission notice shall be included in \n *  all copies or substantial portions of the Software.\n *   \n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\n\nmodule powerbi.data.utils {\n    export module DataViewMatrixUtils {\n        /**\n         * Invokes the specified callback once per descendent leaf node of the specified matrixNode, with an optional \n         * index parameter in the callback that is the 0-based index of the particular leaf node in the context of this \n         * visitLeafNodes(...) invocation.\n         */\n        export function visitLeafNodes(matrixNode: DataViewMatrixNode, callback: (leafNode: DataViewMatrixNode, index?: number) => void): void {\n            debug.assertValue(matrixNode, 'matrixNode');\n            debug.assertValue(callback, 'callback');\n\n            visitLeafNodesRecursive(matrixNode, 0, callback);\n        }\n\n        function visitLeafNodesRecursive(matrixNode: DataViewMatrixNode, nextIndex: number, callback: (leafNode: DataViewMatrixNode, index?: number) => void): number {\n            debug.assertValue(matrixNode, 'matrixNode');\n            debug.assertValue(callback, 'callback');\n\n            if (_.isEmpty(matrixNode.children)) {\n                callback(matrixNode, nextIndex);\n                nextIndex++;\n            }\n            else {\n                let children = matrixNode.children;\n                for (var i = 0, len = children.length; i < len; i++) {\n                    var nextChild = children[i];\n                    if (nextChild) {\n                        nextIndex = visitLeafNodesRecursive(nextChild, nextIndex, callback);\n                    }\n                }\n            }\n\n            return nextIndex;\n        }\n    }\n} ","/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved. \n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *   \n *  The above copyright notice and this permission notice shall be included in \n *  all copies or substantial portions of the Software.\n *   \n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\n\nmodule powerbi.data {\n    import ArrayNamedItems = jsCommon.ArrayNamedItems;\n\n    export class ConceptualSchema {\n        public entities: ArrayNamedItems<ConceptualEntity>;\n        public capabilities: ConceptualCapabilities;\n\n        /** Indicates whether the user can edit this ConceptualSchema.  This is used to enable/disable model authoring UX. */\n        public canEdit: boolean;\n\n        public findProperty(entityName: string, propertyName: string): ConceptualProperty {\n            let entity = this.entities.withName(entityName);\n            if (!entity || _.isEmpty(entity.properties))\n                return;\n\n            return entity.properties.withName(propertyName);\n        }\n\n        public findHierarchy(entityName: string, name: string): ConceptualHierarchy {\n            let entity = this.entities.withName(entityName);\n            if (!entity || _.isEmpty(entity.hierarchies))\n                return;\n\n            return entity.hierarchies.withName(name);\n        }\n\n        public findHierarchyByVariation(\n            variationEntityName: string,\n            variationColumnName: string,\n            variationName: string,\n            hierarchyName: string): ConceptualHierarchy {\n\n            let variationEntity = this.entities.withName(variationEntityName);\n            if (!variationEntity || _.isEmpty(variationEntity.properties))\n                return;\n\n            let variationProperty = variationEntity.properties.withName(variationColumnName);\n            if (!variationProperty)\n                return;\n\n            let variationColumn = variationProperty.column;\n            if (!variationColumn || _.isEmpty(variationColumn.variations))\n                return;\n\n            let variation = variationColumn.variations.withName(variationName);\n            if (variation) {\n                let targetEntity = variation.navigationProperty ? variation.navigationProperty.targetEntity : variationEntity;\n                if (!targetEntity || _.isEmpty(targetEntity.hierarchies))\n                    return;\n\n                return targetEntity.hierarchies.withName(hierarchyName);\n            }\n        }\n\n        /**\n        * Returns the first property of the entity whose kpi is tied to kpiProperty\n        */\n        public findPropertyWithKpi(entityName: string, kpiProperty: ConceptualProperty): ConceptualProperty {\n            debug.assertValue(kpiProperty, 'kpiProperty');\n\n            let entity = this.entities.withName(entityName);\n            if (!entity || _.isEmpty(entity.properties))\n                return;\n\n            for (let prop of entity.properties) {\n                if (prop &&\n                    prop.measure &&\n                    prop.measure.kpi &&\n                    (prop.measure.kpi.status === kpiProperty || prop.measure.kpi.goal === kpiProperty))\n                    return prop;\n            }\n\n            return;\n        }\n    }\n\n    export interface ConceptualCapabilities {\n        discourageQueryAggregateUsage: boolean;\n        normalizedFiveStateKpiRange: boolean;\n        supportsMedian: boolean;\n        supportsPercentile: boolean;\n    }\n\n    export interface ConceptualPropertyItemContainer {\n        properties: ArrayNamedItems<ConceptualProperty>;\n        hierarchies?: ArrayNamedItems<ConceptualHierarchy>;\n        displayFolders?: ArrayNamedItems<ConceptualDisplayFolder>;\n    }\n\n    export interface ConceptualPropertyItem {\n        name: string;\n        displayName: string;\n        hidden?: boolean;\n    }\n\n    export interface ConceptualEntity extends ConceptualPropertyItemContainer {\n        name: string;\n        displayName: string;\n        visibility?: ConceptualVisibility;\n        calculated?: boolean;\n        queryable?: ConceptualQueryableState;\n        navigationProperties?: ArrayNamedItems<ConceptualNavigationProperty>;\n    }\n\n    export interface ConceptualDisplayFolder extends ConceptualPropertyItem, ConceptualPropertyItemContainer {\n    }\n\n    export interface ConceptualProperty extends ConceptualPropertyItem {\n        type: ValueType;\n        kind: ConceptualPropertyKind;\n        format?: string;\n        column?: ConceptualColumn;\n        queryable?: ConceptualQueryableState;\n        measure?: ConceptualMeasure;\n        kpiValue?: ConceptualProperty;\n    }\n\n    export interface ConceptualHierarchy extends ConceptualPropertyItem {\n        levels: ArrayNamedItems<ConceptualHierarchyLevel>;\n    }\n\n    export interface ConceptualHierarchyLevel extends ConceptualPropertyItem {\n        column: ConceptualProperty;\n    }\n\n    export interface ConceptualNavigationProperty {\n        name: string;\n        isActive: boolean;\n        sourceColumn?: ConceptualColumn;\n        targetEntity: ConceptualEntity;\n        sourceMultiplicity: ConceptualMultiplicity;\n        targetMultiplicity: ConceptualMultiplicity;\n    }\n\n    export interface ConceptualVariationSource {\n        name: string;\n        isDefault: boolean;\n        navigationProperty?: ConceptualNavigationProperty;\n        defaultHierarchy?: ConceptualHierarchy;\n        defaultProperty?: ConceptualProperty;\n    }\n\n    export interface ConceptualColumn {\n        defaultAggregate?: ConceptualDefaultAggregate;\n        keys?: ArrayNamedItems<ConceptualProperty>;\n        idOnEntityKey?: boolean;\n        calculated?: boolean;\n        defaultValue?: SQConstantExpr;\n        variations?: ArrayNamedItems<ConceptualVariationSource>;\n        aggregateBehavior?: ConceptualAggregateBehavior;\n    }\n\n    export interface ConceptualMeasure {\n        kpi?: ConceptualPropertyKpi;\n    }\n\n    export interface ConceptualPropertyKpi {\n        statusMetadata: DataViewKpiColumnMetadata;\n        trendMetadata?: DataViewKpiColumnMetadata;\n        status?: ConceptualProperty;\n        goal?: ConceptualProperty;\n        trend?: ConceptualProperty;\n    }\n\n    export const enum ConceptualVisibility {\n        Visible = 0,\n        Hidden = 1,\n        ShowAsVariationsOnly = 2,\n        IsPrivate = 4,\n    }\n\n    export const enum ConceptualQueryableState {\n        Queryable = 0,\n        Error = 1,\n    }\n\n    export const enum ConceptualMultiplicity {\n        ZeroOrOne = 0,\n        One = 1,\n        Many = 2,\n    }\n\n    export const enum ConceptualPropertyKind {\n        Column,\n        Measure,\n        Kpi,\n    }\n\n    export const enum ConceptualDefaultAggregate {\n        Default,\n        None,\n        Sum,\n        Count,\n        Min,\n        Max,\n        Average,\n        DistinctCount,\n    }\n\n    // TODO: Remove this (replaced by ValueType)\n    export enum ConceptualDataCategory {\n        None,\n        Address,\n        City,\n        Company,\n        Continent,\n        Country,\n        County,\n        Date,\n        Image,\n        ImageUrl,\n        Latitude,\n        Longitude,\n        Organization,\n        Place,\n        PostalCode,\n        Product,\n        StateOrProvince,\n        WebUrl,\n    }\n\n    export const enum ConceptualAggregateBehavior {\n        Default,\n        DiscourageAcrossGroups,\n    }\n}","/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved. \n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *   \n *  The above copyright notice and this permission notice shall be included in \n *  all copies or substantial portions of the Software.\n *   \n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\n\nmodule powerbi {\n    import ArrayNamedItems = jsCommon.ArrayNamedItems;\n    import StringExtensions = jsCommon.StringExtensions;\n    import FederatedConceptualSchema = powerbi.data.FederatedConceptualSchema;\n    import DefaultSQExprVisitor = powerbi.data.DefaultSQExprVisitor;\n    import SQEntityExpr = powerbi.data.SQEntityExpr;\n    import SQExprConverter = powerbi.data.SQExprConverter;\n    import SQAggregationExpr = powerbi.data.SQAggregationExpr;\n    import SQColumnRefExpr = powerbi.data.SQColumnRefExpr;\n    import SQMeasureRefExpr = powerbi.data.SQMeasureRefExpr;\n    import SQPropRefExpr = powerbi.data.SQPropRefExpr;\n    import SQHierarchyLevelExpr = powerbi.data.SQHierarchyLevelExpr;\n    import SQHierarchyExpr = powerbi.data.SQHierarchyExpr;\n    import FieldExprPattern = powerbi.data.FieldExprPattern;\n    import QueryProjectionsByRole = data.QueryProjectionsByRole;\n\n    export interface ScriptResult {\n        source: string;\n        provider: string;\n    }\n\n    export module ScriptResultUtil {\n\n        export function findScriptResult(dataViewMappings: DataViewMapping[]| data.CompiledDataViewMapping[]): DataViewScriptResultMapping | data.CompiledDataViewScriptResultMapping {\n            if (dataViewMappings && dataViewMappings.length === 1) {\n                return dataViewMappings[0].scriptResult;\n            }\n\n            return undefined;\n        }\n\n        export function extractScriptResult(dataViewMappings: data.CompiledDataViewMapping[]): ScriptResult {\n            let scriptResult = findScriptResult(dataViewMappings);\n            if (scriptResult) {\n                let objects = dataViewMappings[0].metadata.objects;\n                let source: string = DataViewObjects.getValue<string>(objects, scriptResult.script.source);\n                let provider: string = DataViewObjects.getValue<string>(objects, scriptResult.script.provider);\n                return {\n                    source: source,\n                    provider: provider\n                };\n            }\n\n            return undefined;\n        }\n\n        export function extractScriptResultFromVisualConfig(dataViewMappings: DataViewMapping[], objects: powerbi.data.DataViewObjectDefinitions): ScriptResult {\n            let scriptResult = findScriptResult(dataViewMappings);\n            if (scriptResult && objects) {\n                let scriptSource= <data.SQConstantExpr>data.DataViewObjectDefinitions.getValue(objects, scriptResult.script.source, null);\n                let provider = <data.SQConstantExpr>data.DataViewObjectDefinitions.getValue(objects, scriptResult.script.provider, null);\n                return {\n                    source: scriptSource ? scriptSource.value : null,\n                    provider: provider ? provider.value : null\n                };\n            }\n\n            return undefined;\n        }\n\n        export function getScriptInput(projections: QueryProjectionsByRole, selects: ArrayNamedItems<data.NamedSQExpr>, schema: FederatedConceptualSchema): data.ScriptInput {\n            let scriptInput: data.ScriptInput = {\n                VariableName: \"dataset\",\n                Columns: []\n            };\n\n            // Go over all the projections, and create an input column according to the order\n            // of the projections (including duplicate expressions)\n            if (projections && selects && !_.isEmpty(selects)) {\n                let scriptInputColumnNames: string[] = [];\n                let scriptInputColumns: data.ScriptInputColumn[] = [];\n                for (let role in projections) {\n                    for (let projection of projections[role].all()) {\n                        let select = selects.withName(projection.queryRef);\n                        if (select) {\n                            let scriptInputColumn = <data.ScriptInputColumn>{\n                                QueryName: select.name,\n                                Name: select.expr.accept(new ScriptInputColumnNameVisitor(schema))\n                            };\n\n                            scriptInputColumns.push(scriptInputColumn);\n                            scriptInputColumnNames.push(scriptInputColumn.Name);\n                        }\n                    }\n                }\n\n                // Make sure the names of the columns are unique\n                scriptInputColumnNames = StringExtensions.ensureUniqueNames(scriptInputColumnNames);\n\n                // Update the names of the columns\n                for (let i = 0; i < scriptInputColumnNames.length; i++) {\n                    let scriptInputColumn = scriptInputColumns[i];\n                    scriptInputColumn.Name = scriptInputColumnNames[i];\n                }\n\n                scriptInput.Columns = scriptInputColumns;\n            }\n\n            return scriptInput;\n        }\n\n        class ScriptInputColumnNameVisitor extends DefaultSQExprVisitor<string>\n        {\n            private federatedSchema: FederatedConceptualSchema;\n\n            constructor(federatedSchema: FederatedConceptualSchema) {\n                super();\n                this.federatedSchema = federatedSchema;\n            }\n\n            public visitEntity(expr: SQEntityExpr): string {\n                return expr.entity;\n            }\n\n            public visitColumnRef(expr: SQColumnRefExpr): string {\n                return ScriptInputColumnNameVisitor.getNameForProperty(expr, this.federatedSchema);\n            }\n\n            public visitMeasureRef(expr: SQMeasureRefExpr): string {\n                return ScriptInputColumnNameVisitor.getNameForProperty(expr, this.federatedSchema);\n            }\n\n            public visitAggr(expr: SQAggregationExpr): string {\n                return ScriptInputColumnNameVisitor.getNameForAggregate(expr, this.federatedSchema);\n            }\n\n            public visitHierarchy(expr: SQHierarchyExpr): string {\n                return ScriptInputColumnNameVisitor.getNameForHierarchy(expr, this.federatedSchema);\n            }\n\n            public visitHierarchyLevel(expr: SQHierarchyLevelExpr): string {\n                return ScriptInputColumnNameVisitor.getNameForHierarchyLevel(expr, this.federatedSchema);\n            }\n\n            public static getNameForProperty(expr: SQPropRefExpr, federatedSchema: FederatedConceptualSchema): string {\n                debug.assertValue(expr, 'expr');\n\n                let fieldExpr = SQExprConverter.asFieldPattern(expr);\n                let fieldExprItem = fieldExpr.column || fieldExpr.measure;\n\n                let schema = federatedSchema.schema(fieldExprItem.schema),\n                    property = schema.findProperty(fieldExprItem.entity, fieldExprItem.name);\n\n                if (property)\n                    return property.name;\n            }\n\n            public static getNameForAggregate(expr: SQAggregationExpr, federatedSchema: FederatedConceptualSchema): string {\n                debug.assertValue(expr, 'expr');\n\n                let field = SQExprConverter.asFieldPattern(expr);\n                let fieldAggregate = field.columnAggr || field.entityAggr;\n                let entity = federatedSchema\n                    .schema(fieldAggregate.schema)\n                    .entities\n                    .withName(fieldAggregate.entity);\n\n                if (!entity)\n                    return;\n\n                let backingProperty = entity.properties.withName(FieldExprPattern.getFieldExprName(field));\n\n                return backingProperty.name;\n            }\n\n            public static getNameForHierarchy(expr: SQHierarchyExpr, federatedScheam: FederatedConceptualSchema): string {\n                let fieldExpr = SQExprConverter.asFieldPattern(expr);\n                let fieldExprItem = fieldExpr.hierarchy;\n\n                if (fieldExprItem) {\n                    let schema = federatedScheam.schema(fieldExprItem.schema),\n                        hierarchy = schema.findHierarchy(fieldExprItem.entity, fieldExprItem.name);\n\n                    if (hierarchy)\n                        return hierarchy.name;\n                }\n            }\n\n            public static getNameForHierarchyLevel(expr: SQHierarchyLevelExpr, federatedScheam: FederatedConceptualSchema): string {\n                debug.assertValue(expr, 'expr');\n\n                let field = SQExprConverter.asFieldPattern(expr);\n                if (field.columnHierarchyLevelVariation) {\n                    return ScriptInputColumnNameVisitor.getVariationLevelName(expr, federatedScheam);\n                }\n\n                /*Hierarchies are not supported yet*/\n            }\n\n            private static getVariationLevelName(expr: SQHierarchyLevelExpr, federatedSchema: FederatedConceptualSchema): string {\n                debug.assertValue(expr, 'expr');\n\n                let field = SQExprConverter.asFieldPattern(expr);\n                let fieldEntity = FieldExprPattern.toFieldExprEntityItemPattern(field);\n\n                if (field.columnHierarchyLevelVariation) {\n                    let prop = federatedSchema.schema(fieldEntity.schema).findProperty(fieldEntity.entity, field.columnHierarchyLevelVariation.source.name);\n                    if (!prop)\n                        return;\n\n                    let variations = prop.column.variations;\n                    for (let variation of variations)\n                        if (variation.name === field.columnHierarchyLevelVariation.variationName)\n                            for (let level of variation.defaultHierarchy.levels)\n                                if (level.name === field.columnHierarchyLevelVariation.level.level)\n                                    return level.column.name;\n                }\n            }\n        }\n    }\n}","/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved. \n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *   \n *  The above copyright notice and this permission notice shall be included in \n *  all copies or substantial portions of the Software.\n *   \n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\n\nmodule powerbi.data.segmentation {\n\n    export interface DataViewTableSegment extends DataViewTable {\n        /** \n         * Index of the last item that had a merge flag in the underlying data.\n         * We assume merge flags are not random but adjacent to each other. \n         */\n        lastMergeIndex?: number;\n    }\n\n    export interface DataViewTreeSegmentNode extends DataViewTreeNode {\n        /** Indicates whether the node is a duplicate of a node from a previous segment. */\n        isMerge?: boolean;\n    }\n\n    export interface DataViewCategoricalSegment extends DataViewCategorical {\n        /** \n         * Index of the last item that had a merge flag in the underlying data.\n         * We assume merge flags are not random but adjacent to each other. \n         */\n        lastMergeIndex?: number;\n    }\n\n    export interface DataViewMatrixSegmentNode extends DataViewMatrixNode {\n        /**\n         * Index of the last item that had a merge flag in the underlying data.\n         * We assume merge flags are not random but adjacent to each other. \n         */\n        isMerge?: boolean;\n    }\n\n    export module DataViewMerger {\n\n        export function mergeDataViews(source: DataView, segment: DataView): void {\n\n            if (!DataViewAnalysis.isMetadataEquivalent(source.metadata, segment.metadata)) {\n                debug.assertFail(\"Cannot merge data views with different metadata columns\");\n            }\n\n            // The last segment is complete. We mark the source as complete.\n            if (!segment.metadata.segment)\n                delete source.metadata.segment;\n\n            if (source.table && segment.table)\n                mergeTables(source.table, <DataViewTableSegment>segment.table);\n\n            if (source.categorical && segment.categorical)\n                mergeCategorical(source.categorical, <DataViewCategoricalSegment>segment.categorical);\n\n            // Tree cannot support subtotals hence we can get into situations\n            // where a node has no children in one segment and more than 1 child\n            // in another segment.\n            if (source.tree && segment.tree)\n                mergeTreeNodes(source.tree.root, segment.tree.root, true /*allowDifferentStructure*/);\n\n            if (source.matrix && segment.matrix)\n                mergeTreeNodes(source.matrix.rows.root, segment.matrix.rows.root, false /*allowDifferentStructure*/);\n        }\n\n        /** Note: Public for testability */\n        export function mergeTables(source: DataViewTable, segment: DataViewTableSegment): void {\n            debug.assertValue(source, 'source');\n            debug.assertValue(segment, 'segment');\n\n            if (segment.rows.length === 0)\n                return;\n\n            merge(source.rows, segment.rows, segment.lastMergeIndex + 1);\n        }\n\n        /**\n         * Merge categories values and identities\n         * \n         * Note: Public for testability \n         */\n        export function mergeCategorical(source: DataViewCategorical, segment: DataViewCategoricalSegment): void {\n            debug.assertValue(source, 'source');\n            debug.assertValue(segment, 'segment');\n\n            // Merge categories values and identities\n            if (source.categories && segment.categories) {\n                let segmentCategoriesLength = segment.categories.length;\n                debug.assert(source.categories.length === segmentCategoriesLength, \"Source and segment categories have different lengths.\");\n\n                for (let categoryIndex: number = 0; categoryIndex < segmentCategoriesLength; categoryIndex++) {\n                    let segmentCategory = segment.categories[categoryIndex];\n                    let sourceCategory = source.categories[categoryIndex];\n\n                    debug.assert(DataViewAnalysis.areMetadataColumnsEquivalent(sourceCategory.source, segmentCategory.source), \"Source and segment category have different sources.\");\n\n                    if (!sourceCategory.values && segmentCategory.values) {\n                        sourceCategory.values = [];\n                        debug.assert(!sourceCategory.identity, \"Source category is missing values but has identities.\");\n                    }\n\n                    if (segmentCategory.values) {\n                        merge(sourceCategory.values, segmentCategory.values, segment.lastMergeIndex + 1);\n                    }\n\n                    if (!sourceCategory.identity && segmentCategory.identity) {\n                        sourceCategory.identity = [];\n                    }\n\n                    if (segmentCategory.identity) {\n                        merge(sourceCategory.identity, segmentCategory.identity, segment.lastMergeIndex + 1);\n                    }\n                }\n            }\n\n            // Merge values for each value column\n            if (source.values && segment.values) {\n                let segmentValuesLength = segment.values.length;\n                debug.assert(source.values.length === segmentValuesLength, \"Source and segment values have different lengths.\");\n\n                for (let valueIndex: number = 0; valueIndex < segmentValuesLength; valueIndex++) {\n                    let segmentValue = segment.values[valueIndex];\n                    let sourceValue = source.values[valueIndex];\n\n                    debug.assert(jsCommon.JsonComparer.equals(sourceValue.source, segmentValue.source), \"Source and segment value have different sources.\");\n\n                    if (!sourceValue.values && segmentValue.values) {\n                        sourceValue.values = [];\n                    }\n\n                    if (segmentValue.values) {\n                        merge(sourceValue.values, segmentValue.values, segment.lastMergeIndex + 1);\n                    }\n\n                    if (segmentValue.highlights) {\n                        merge(sourceValue.highlights, segmentValue.highlights, segment.lastMergeIndex + 1);\n                    }\n                }\n            }\n        }\n\n        /**\n         * Merges the segment array starting at the specified index into the source array \n         * and returns the segment slice that wasn't merged.\n         * The segment array is spliced up to specified index in the process.\n         */\n        function merge(source: any[], segment: any[], index?: number): any[] {\n            if (index >= segment.length)\n                return segment;\n\n            let result: any[] = [];\n            if (index !== undefined)\n                result = segment.splice(0, index);\n\n            Array.prototype.push.apply(source, segment);\n\n            return result;\n        }\n\n        /** Note: Public for testability */\n        export function mergeTreeNodes(sourceRoot: DataViewTreeNode, segmentRoot: DataViewTreeNode, allowDifferentStructure: boolean): void {\n            debug.assertValue(sourceRoot, 'sourceRoot');\n            debug.assertValue(segmentRoot, 'segmentRoot');\n\n            if (!segmentRoot.children || segmentRoot.children.length === 0)\n                return;\n\n            if (allowDifferentStructure && (!sourceRoot.children || sourceRoot.children.length === 0)) {\n                sourceRoot.children = segmentRoot.children;\n                return;\n            }\n\n            debug.assert(sourceRoot.children && sourceRoot.children.length >= 0,\n                \"Source tree has different structure than segment.\");\n\n            let firstAppendIndex = findFirstAppendIndex(segmentRoot.children);\n            let lastSourceChild = sourceRoot.children[sourceRoot.children.length - 1];\n            let mergedChildren = merge(sourceRoot.children, segmentRoot.children, firstAppendIndex);\n\n            if (mergedChildren.length > 0)\n                mergeTreeNodes(lastSourceChild, mergedChildren[mergedChildren.length - 1], allowDifferentStructure);\n        }\n\n        function findFirstAppendIndex(children: DataViewTreeNode[]): number {\n            if (children.length === 0)\n                return 0;\n\n            let i: number = 0;\n            for (; i < children.length; i++) {\n                let childSegment: DataViewTreeSegmentNode = <DataViewTreeSegmentNode>children[i];\n                if (!childSegment.isMerge)\n                    break;\n            }\n\n            return i;\n        }\n    }\n} ","/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved. \n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *   \n *  The above copyright notice and this permission notice shall be included in \n *  all copies or substantial portions of the Software.\n *   \n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\n\nmodule powerbi.data {\n    import ArrayExtensions = jsCommon.ArrayExtensions;\n\n    /** Rewrites an expression tree, including all descendant nodes. */\n    export class SQExprRewriter implements ISQExprVisitor<SQExpr> {\n        public visitColumnRef(expr: SQColumnRefExpr): SQExpr {\n            let origArg = expr.source,\n                rewrittenArg = origArg.accept(this);\n\n            if (origArg === rewrittenArg)\n                return expr;\n\n            return new SQColumnRefExpr(rewrittenArg, expr.ref);\n        }\n\n        public visitMeasureRef(expr: SQMeasureRefExpr): SQExpr {\n            let origArg = expr.source,\n                rewrittenArg = origArg.accept(this);\n\n            if (origArg === rewrittenArg)\n                return expr;\n\n            return new SQMeasureRefExpr(rewrittenArg, expr.ref);\n        }\n\n        public visitAggr(expr: SQAggregationExpr): SQExpr {\n            let origArg = expr.arg,\n                rewrittenArg = origArg.accept(this);\n\n            if (origArg === rewrittenArg)\n                return expr;\n\n            return new SQAggregationExpr(rewrittenArg, expr.func);\n        }\n\n        public visitHierarchy(expr: SQHierarchyExpr): SQExpr {\n            let origArg = expr.arg,\n                rewrittenArg = origArg.accept(this);\n\n            if (origArg === rewrittenArg)\n                return expr;\n\n            return new SQHierarchyExpr(rewrittenArg, expr.hierarchy);\n        }\n\n        public visitHierarchyLevel(expr: SQHierarchyLevelExpr): SQExpr {\n            let origArg = expr.arg,\n                rewrittenArg = origArg.accept(this);\n\n            if (origArg === rewrittenArg)\n                return expr;\n\n            return new SQHierarchyLevelExpr(rewrittenArg, expr.level);\n        }\n\n        public visitPropertyVariationSource(expr: SQPropertyVariationSourceExpr): SQExpr {\n            let origArg = expr.arg,\n                rewrittenArg = origArg.accept(this);\n\n            if (origArg === rewrittenArg)\n                return expr;\n\n            return new SQPropertyVariationSourceExpr(rewrittenArg, expr.name, expr.property);\n        }\n\n        public visitEntity(expr: SQEntityExpr): SQExpr {\n            return expr;\n        }\n\n        public visitAnd(orig: SQAndExpr): SQExpr {\n            let origLeft = orig.left,\n                rewrittenLeft = origLeft.accept(this),\n                origRight = orig.right,\n                rewrittenRight = origRight.accept(this);\n\n            if (origLeft === rewrittenLeft && origRight === rewrittenRight)\n                return orig;\n\n            return new SQAndExpr(rewrittenLeft, rewrittenRight);\n        }\n\n        public visitBetween(orig: SQBetweenExpr): SQExpr {\n            let origArg = orig.arg,\n                rewrittenArg = origArg.accept(this),\n                origLower = orig.lower,\n                rewrittenLower = origLower.accept(this),\n                origUpper = orig.upper,\n                rewrittenUpper = origUpper.accept(this);\n\n            if (origArg === rewrittenArg && origLower === rewrittenLower && origUpper === rewrittenUpper)\n                return orig;\n\n            return new SQBetweenExpr(rewrittenArg, rewrittenLower, rewrittenUpper);\n        }\n\n        public visitIn(orig: SQInExpr): SQExpr {\n            let origArgs = orig.args,\n                rewrittenArgs = this.rewriteAll(origArgs),\n                origValues: SQExpr[][] = orig.values,\n                rewrittenValues: SQExpr[][];\n\n            for (let i = 0, len = origValues.length; i < len; i++) {\n                let origValueTuple = origValues[i],\n                    rewrittenValueTuple = this.rewriteAll(origValueTuple);\n\n                if (origValueTuple !== rewrittenValueTuple && !rewrittenValues)\n                    rewrittenValues = ArrayExtensions.take(origValues, i);\n\n                if (rewrittenValues)\n                    rewrittenValues.push(rewrittenValueTuple);\n            }\n\n            if (origArgs === rewrittenArgs && !rewrittenValues)\n                return orig;\n\n            return new SQInExpr(rewrittenArgs, rewrittenValues || origValues);\n        }\n\n        private rewriteAll(origExprs: SQExpr[]): SQExpr[]{\n            debug.assertValue(origExprs, 'origExprs');\n\n            let rewrittenResult: SQExpr[];\n            for (let i = 0, len = origExprs.length; i < len; i++) {\n                let origExpr = origExprs[i],\n                    rewrittenExpr = origExpr.accept(this);\n\n                if (origExpr !== rewrittenExpr && !rewrittenResult)\n                    rewrittenResult = ArrayExtensions.take(origExprs, i);\n\n                if (rewrittenResult)\n                    rewrittenResult.push(rewrittenExpr);\n            }\n\n            return rewrittenResult || origExprs;\n        }\n\n        public visitOr(orig: SQOrExpr): SQExpr {\n            let origLeft = orig.left,\n                rewrittenLeft = origLeft.accept(this),\n                origRight = orig.right,\n                rewrittenRight = origRight.accept(this);\n\n            if (origLeft === rewrittenLeft && origRight === rewrittenRight)\n                return orig;\n\n            return new SQOrExpr(rewrittenLeft, rewrittenRight);\n        }\n\n        public visitCompare(orig: SQCompareExpr): SQExpr {\n            let origLeft = orig.left,\n                rewrittenLeft = origLeft.accept(this),\n                origRight = orig.right,\n                rewrittenRight = origRight.accept(this);\n\n            if (origLeft === rewrittenLeft && origRight === rewrittenRight)\n                return orig;\n\n            return new SQCompareExpr(orig.comparison, rewrittenLeft, rewrittenRight);\n        }\n\n        public visitContains(orig: SQContainsExpr): SQExpr {\n            let origLeft = orig.left,\n                rewrittenLeft = origLeft.accept(this),\n                origRight = orig.right,\n                rewrittenRight = origRight.accept(this);\n\n            if (origLeft === rewrittenLeft && origRight === rewrittenRight)\n                return orig;\n\n            return new SQContainsExpr(rewrittenLeft, rewrittenRight);\n        }\n\n        public visitExists(orig: SQExistsExpr): SQExpr {\n            let origArg = orig.arg,\n                rewrittenArg = origArg.accept(this);\n\n            if (origArg === rewrittenArg)\n                return orig;\n\n            return new SQExistsExpr(rewrittenArg);\n        }\n\n        public visitNot(orig: SQNotExpr): SQExpr {\n            let origArg = orig.arg,\n                rewrittenArg = origArg.accept(this);\n\n            if (origArg === rewrittenArg)\n                return orig;\n\n            return new SQNotExpr(rewrittenArg);\n        }\n\n        public visitStartsWith(orig: SQStartsWithExpr): SQExpr {\n            let origLeft = orig.left,\n                rewrittenLeft = origLeft.accept(this),\n                origRight = orig.right,\n                rewrittenRight = origRight.accept(this);\n\n            if (origLeft === rewrittenLeft && origRight === rewrittenRight)\n                return orig;\n\n            return new SQStartsWithExpr(rewrittenLeft, rewrittenRight);\n        }\n\n        public visitConstant(expr: SQConstantExpr): SQExpr {\n            return expr;\n        }\n\n        public visitDateSpan(orig: SQDateSpanExpr): SQExpr {\n            let origArg = orig.arg,\n                rewrittenArg = origArg.accept(this);\n\n            if (origArg === rewrittenArg)\n                return orig;\n\n            return new SQDateSpanExpr(orig.unit, rewrittenArg);\n        }\n\n        public visitDateAdd(orig: SQDateAddExpr): SQExpr {\n            let origArg = orig.arg,\n                rewrittenArg = origArg.accept(this);\n\n            if (origArg === rewrittenArg)\n                return orig;\n\n            return new SQDateAddExpr(orig.unit, orig.amount, rewrittenArg);\n        }\n\n        public visitNow(orig: SQNowExpr): SQExpr {\n            return orig;\n        }\n\n        public visitDefaultValue(orig: SQDefaultValueExpr): SQExpr {\n            return orig;\n        }\n\n        public visitAnyValue(orig: SQAnyValueExpr): SQExpr {\n            return orig;\n        }\n    }\n}","/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved. \n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *   \n *  The above copyright notice and this permission notice shall be included in \n *  all copies or substantial portions of the Software.\n *   \n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\n\nmodule powerbi.data {\n    /** Responsible for writing equality comparisons against a field to an SQInExpr. */\n    export module EqualsToInRewriter {\n        export function run(expr: SQExpr): SQExpr {\n            debug.assertValue(expr, 'expr');\n\n            return expr.accept(new Rewriter());\n        }\n\n        class Rewriter extends SQExprRewriter {\n            private current: InBuilder;\n\n            constructor() {\n                super();\n            }\n\n            public visitCompare(expr: SQCompareExpr): SQExpr {\n                if (expr.comparison !== QueryComparisonKind.Equal)\n                    return this.visitUnsupported(expr);\n                if (!this.isSupported(expr.left) || !this.isSupported(expr.right))\n                    return this.visitUnsupported(expr);\n\n                let leftIsComparand = this.isComparand(expr.left);\n                let rightIsComparand = this.isComparand(expr.right);\n                if (leftIsComparand === rightIsComparand)\n                    return this.visitUnsupported(expr);\n\n                let operand: SQExpr = leftIsComparand\n                    ? expr.left\n                    : expr.right;\n                let value: SQExpr = leftIsComparand\n                    ? expr.right\n                    : expr.left;\n\n                let current = this.current;\n                if (!current) {\n                    return SQExprBuilder.inExpr([operand], [[value]]);\n                }\n\n                current.add(operand, value);\n\n                return expr;\n            }\n\n            public visitOr(expr: SQOrExpr): SQExpr {\n                if (!this.isSupported(expr.left) || !this.isSupported(expr.right))\n                    return this.visitUnsupported(expr);\n\n                let current: InBuilder;\n                if (!this.current) {\n                    current = this.current = new InBuilder();\n                }\n\n                expr.left.accept(this);\n                expr.right.accept(this);\n\n                if (current) {\n                    this.current = null;\n                    return current.complete() || expr;\n                }\n\n                return expr;\n            }\n\n            public visitAnd(expr: SQAndExpr): SQExpr {\n                if (!this.isSupported(expr.left) || !this.isSupported(expr.right))\n                    return this.visitUnsupported(expr);\n\n                let current = this.current;\n                if (current) {\n                    // NOTE: Composite keys are not supported by this algorithm.\n                    current.cancel();\n                    return expr;\n                }\n\n                return super.visitAnd(expr);\n            }\n\n            private visitUnsupported(expr: SQExpr): SQExpr {\n                let current = this.current;\n                if (current)\n                    current.cancel();\n\n                return expr;\n            }\n\n            private isSupported(expr: SQExpr): boolean {\n                debug.assertValue(expr, 'expr');\n\n                return expr instanceof SQCompareExpr\n                    || expr instanceof SQColumnRefExpr\n                    || expr instanceof SQConstantExpr\n                    || expr instanceof SQHierarchyLevelExpr\n                    || expr instanceof SQOrExpr\n                    || expr instanceof SQAndExpr;\n            }\n\n            private isComparand(expr: SQExpr): boolean {\n                return expr instanceof SQColumnRefExpr\n                    || expr instanceof SQHierarchyLevelExpr;\n            }\n        }\n\n        class InBuilder {\n            private operand: SQExpr;\n            private values: SQExpr[];\n            private cancelled: boolean;\n\n            public add(operand: SQExpr, value: SQExpr): void {\n                debug.assertValue(operand, 'operand');\n                debug.assertValue(value, 'value');\n\n                if (this.cancelled)\n                    return;\n\n                if (this.operand && !SQExpr.equals(operand, this.operand)) {\n                    this.cancel();\n                    return;\n                }\n\n                this.operand = operand;\n\n                let values = this.values;\n                if (!values)\n                    values = this.values = [];\n\n                values.push(value);\n            }\n\n            public cancel(): void {\n                this.cancelled = true;\n            }\n\n            public complete(): SQInExpr {\n                if (this.cancelled || !this.operand)\n                    return;\n\n                return SQExprBuilder.inExpr([this.operand], _.map(this.values, v => [v]));\n            }\n        }\n    }\n}","/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved. \n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *   \n *  The above copyright notice and this permission notice shall be included in \n *  all copies or substantial portions of the Software.\n *   \n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\n\nmodule powerbi.data {\n\n    export interface FilterValueScopeIdsContainer {\n            isNot: boolean;\n            scopeIds: DataViewScopeIdentity[];\n        }\n\n    export module SQExprConverter {\n        export function asScopeIdsContainer(filter: SemanticFilter, fieldSQExprs: SQExpr[]): FilterValueScopeIdsContainer {\n            debug.assertValue(filter, 'filter');\n            debug.assertValue(fieldSQExprs, 'fieldSQExprs');\n            debug.assert(fieldSQExprs.length > 0, 'There should be at least 1 field expression.');\n\n            let filterItems = filter.conditions();\n            debug.assert(filterItems.length === 1, 'There should be exactly 1 filter expression.');\n            let filterItem = filterItems[0];\n            if (filterItem) {\n                let visitor = new FilterScopeIdsCollectorVisitor(fieldSQExprs);\n                if (filterItem.accept(visitor))\n                    return visitor.getResult();\n            }\n        }\n\n        /** Gets a comparand value from the given DataViewScopeIdentity. */\n        export function getFirstComparandValue(identity: DataViewScopeIdentity): any {\n            debug.assertValue(identity, 'identity');\n\n            let comparandExpr = (<SQExpr>identity.expr).accept(new FindComparandVisitor());\n            if (comparandExpr)\n                return comparandExpr.value;\n        }\n    }\n\n    /** Collect filter values from simple semantic filter that is similar to 'is any of' or 'is not any of', getResult() returns a collection of scopeIds.**/\n    class FilterScopeIdsCollectorVisitor extends DefaultSQExprVisitor<boolean>{\n        private isRoot: boolean;\n        private isNot: boolean;\n        private keyExprsCount: number;\n        private valueExprs: SQExpr[];\n        private fieldExprs: SQExpr[];\n\n        constructor(fieldSQExprs:SQExpr[]) {\n            super();\n            this.isRoot = true;\n            this.isNot = false;\n            this.keyExprsCount = null;\n            this.valueExprs = [];\n\n            // Need to drop the entitylet before create the scopeIdentity. The ScopeIdentity created on the client is used to\n            // compare the ScopeIdentity came from the server. But server doesn't have the entity variable concept, so we will\n            // need to drop it in order to use JsonComparer.\n            this.fieldExprs = [];\n            for (let field of fieldSQExprs) {\n                this.fieldExprs.push(SQExprBuilder.removeEntityVariables(field));\n            }\n        }\n\n        public getResult(): FilterValueScopeIdsContainer {\n            debug.assert(this.fieldExprs.length > 0, 'fieldExprs has at least one fieldExpr');            \n\n            let valueExprs = this.valueExprs,\n                scopeIds: DataViewScopeIdentity[] = [];\n            let valueCount: number = this.keyExprsCount || 1;\n\n            for (let startIndex = 0, endIndex = valueCount, len = valueExprs.length; startIndex < len && endIndex <= len;) {\n                let values = valueExprs.slice(startIndex, endIndex);\n                let scopeId = FilterScopeIdsCollectorVisitor.getScopeIdentity(this.fieldExprs, values);\n\n                if (!jsCommon.ArrayExtensions.isInArray(scopeIds, scopeId, DataViewScopeIdentity.equals))\n                    scopeIds.push(scopeId);\n\n                startIndex += valueCount;\n                endIndex += valueCount;\n            }\n\n            return {\n                isNot: this.isNot,\n                scopeIds: scopeIds,\n            };\n        }\n\n        private static getScopeIdentity(fieldExprs: SQExpr[], valueExprs: SQExpr[]): DataViewScopeIdentity {\n            debug.assert(valueExprs.length > 0, 'valueExprs has at least one valueExpr');\n            debug.assert(valueExprs.length === fieldExprs.length, 'fieldExpr and valueExpr count should match');\n\n            let compoundSQExpr: SQExpr;\n            for (let i = 0, len = fieldExprs.length; i < len; i++) {\n                let equalsExpr = SQExprBuilder.equal(fieldExprs[i], valueExprs[i]);\n                if (!compoundSQExpr)\n                    compoundSQExpr = equalsExpr;\n                else\n                    compoundSQExpr = SQExprBuilder.and(compoundSQExpr, equalsExpr);\n            }\n\n            return createDataViewScopeIdentity(compoundSQExpr);\n        }\n\n        public visitOr(expr: SQOrExpr): boolean {\n            if (this.keyExprsCount !== null)\n                return this.unsupportedSQExpr();\n\n            this.isRoot = false;\n            return expr.left.accept(this) && expr.right.accept(this);\n        }\n\n        public visitNot(expr: SQNotExpr): boolean {\n            if (!this.isRoot)\n                return this.unsupportedSQExpr();\n\n            this.isNot = true;\n            return expr.arg.accept(this);\n        }\n\n        public visitConstant(expr: SQConstantExpr): boolean {\n            if (this.isRoot && expr.type.primitiveType === PrimitiveType.Null)\n                return this.unsupportedSQExpr();\n\n            this.valueExprs.push(expr);            \n            return true;\n        }\n\n        public visitCompare(expr: SQCompareExpr): boolean {\n            if (this.keyExprsCount !== null)\n                return this.unsupportedSQExpr();\n\n            this.isRoot = false;\n\n            if (expr.comparison !== QueryComparisonKind.Equal)\n                return this.unsupportedSQExpr();\n\n            return expr.left.accept(this) && expr.right.accept(this);\n        }\n\n        public visitIn(expr: SQInExpr): boolean {\n            this.keyExprsCount = 0;\n            let result: boolean;\n            this.isRoot = false;\n            for (let arg of expr.args) {\n                result = arg.accept(this);\n                if (!result)\n                    return this.unsupportedSQExpr();\n\n                this.keyExprsCount++;\n            }\n\n            if (this.keyExprsCount !== this.fieldExprs.length)\n                return this.unsupportedSQExpr();\n\n            let values = expr.values;\n            for (let valueTuple of values) {\n                let jlen = valueTuple.length;\n                debug.assert(jlen === this.keyExprsCount, \"keys count and values count should match\");\n\n                for (let value of valueTuple) {\n                    result = value.accept(this);\n                    if (!result)\n                        return this.unsupportedSQExpr();\n                }\n            }\n\n            return result;\n        }\n\n        public visitColumnRef(expr: SQColumnRefExpr): boolean {\n            if (this.isRoot)\n                return this.unsupportedSQExpr();\n\n            let fixedExpr = SQExprBuilder.removeEntityVariables(expr);\n            if (this.keyExprsCount !== null)\n                return SQExpr.equals(this.fieldExprs[this.keyExprsCount], fixedExpr);\n\n            return SQExpr.equals(this.fieldExprs[0], fixedExpr);\n        }\n\n        public visitDefaultValue(expr: SQDefaultValueExpr): boolean {\n            if (this.isRoot || this.keyExprsCount !== null)\n                return this.unsupportedSQExpr();\n\n            this.valueExprs.push(expr);\n            return true;\n        }\n\n        public visitAnyValue(expr: SQAnyValueExpr): boolean {\n            if (this.isRoot || this.keyExprsCount !== null)\n                return this.unsupportedSQExpr();\n\n            this.valueExprs.push(expr);\n            return true;\n        }\n\n        public visitDefault(expr: SQExpr): boolean {\n            return this.unsupportedSQExpr();\n        }\n\n        private unsupportedSQExpr(): boolean {\n            return false;\n        }\n    }\n\n    class FindComparandVisitor extends DefaultSQExprVisitor<SQConstantExpr> {\n        public visitAnd(expr: SQAndExpr): SQConstantExpr {\n            return expr.left.accept(this) || expr.right.accept(this);\n        }\n\n        public visitCompare(expr: SQCompareExpr): SQConstantExpr {\n            if (expr.comparison === QueryComparisonKind.Equal) {\n                if (expr.right instanceof SQConstantExpr)\n                    return <SQConstantExpr>expr.right;\n                if (expr.left instanceof SQConstantExpr)\n                    return <SQConstantExpr>expr.left;\n            }\n        }\n    }\n}","/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved. \n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *   \n *  The above copyright notice and this permission notice shall be included in \n *  all copies or substantial portions of the Software.\n *   \n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\n\nmodule powerbi.data {\n    import ArrayExtensions = jsCommon.ArrayExtensions;\n\n    /** Recognizes DataViewScopeIdentity expression trees to extract comparison keys. */\n    export module ScopeIdentityExtractor {\n        export function getKeys(expr: SQExpr): SQExpr[] {\n            let extractor = new ScopeIdExtractorImpl();\n            expr.accept(extractor);\n\n            if (extractor.malformed)\n                return null;\n\n            return ArrayExtensions.emptyToNull(extractor.keys);\n        }\n\n        export function getInExpr(expr: SQExpr): SQInExpr{\n            let extractor = new ScopeIdExtractorImpl();\n            expr.accept(extractor);\n\n            if (extractor.malformed)\n                return;\n            \n            let keys = ArrayExtensions.emptyToNull(extractor.keys);\n            let keyValues = ArrayExtensions.emptyToNull(extractor.values);\n\n            if (keys && keyValues)\n                return data.SQExprBuilder.inExpr(keys, [keyValues]);\n        }\n\n        /**\n         * Recognizes expressions of the form:\n         * 1) Equals(ColRef, Constant)\n         * 2) And(Equals(ColRef1, Constant1), Equals(ColRef2, Constant2))\n         * or And(And(Equals(ColRef1, Constant1), Equals(ColRef2, Constant2)), Equals(ColRef3, Constant3)) etc..\n         */\n        class ScopeIdExtractorImpl extends DefaultSQExprVisitor<void> {\n            public keys: SQExpr[] = [];\n            public values: SQConstantExpr[] = [];\n            public malformed: boolean;\n\n            public visitAnd(expr: SQAndExpr): void {\n                expr.left.accept(this);\n                expr.right.accept(this);\n            }\n\n            public visitCompare(expr: SQCompareExpr): void {\n                if (expr.comparison !== QueryComparisonKind.Equal) {\n                    this.visitDefault(expr);\n                    return;\n                }\n                debug.assert(expr.left instanceof SQExpr && expr.right instanceof SQConstantExpr, 'invalid compare expr operands');\n                expr.left.accept(this);\n                expr.right.accept(this);\n            }\n\n            public visitColumnRef(expr: SQColumnRefExpr): void {\n                this.keys.push(expr);\n            }\n\n            public visitHierarchyLevel(expr: SQHierarchyLevelExpr): void {\n                this.keys.push(expr);\n            }\n\n            public visitConstant(expr: SQConstantExpr): void {\n                this.values.push(expr);\n            }\n\n            public visitDefault(expr: SQExpr): void {\n                this.malformed = true;\n            }\n        }\n    }\n}","/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved. \n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *   \n *  The above copyright notice and this permission notice shall be included in \n *  all copies or substantial portions of the Software.\n *   \n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\n\nmodule powerbi.data {\n    export module PrimitiveValueEncoding {\n        const SingleQuoteRegex = /'/g;\n\n        export function decimal(value: number): string {\n            debug.assertValue(value, 'value');\n\n            return value + 'M';\n        }\n\n        export function double(value: number): string {\n            debug.assertValue(value, 'value');\n\n            return value + 'D';\n        }\n\n        export function integer(value: number): string {\n            debug.assertValue(value, 'value');\n\n            return value + 'L';\n        }\n\n        export function dateTime(value: Date): string {\n            debug.assertValue(value, 'value');\n\n            // Currently, server doesn't support timezone. All date time data on the server don't have time zone information.\n            // So, when we construct a dateTime object on the client, we will need to ignor user's time zone and force it to be UTC time.\n            // When we subtract the timeZone offset, the date time object will remain the same value as you entered but dropped the local timeZone.\n            let date = new Date(value.getTime() - (value.getTimezoneOffset() * 60000));\n            let dateTimeString = date.toISOString();\n\n            // If it ends with Z, we want to get rid of it, because with trailing Z, it will assume the dateTime is UTC, but we don't want any timeZone information, so\n            // we will drop it.\n            // Also, we need to add Prefix and Suffix to match the dsr value format for dateTime object.\n            if (jsCommon.StringExtensions.endsWith(dateTimeString, 'Z'))\n                dateTimeString = dateTimeString.substr(0, dateTimeString.length - 1);\n            return \"datetime'\" + dateTimeString + \"'\";\n        }\n\n        export function text(value: string): string {\n            debug.assertValue(value, 'value');\n\n            return \"'\" + value.replace(SingleQuoteRegex, \"''\") + \"'\";\n        }\n\n        export function nullEncoding(): string {\n            return 'null';\n        }\n\n        export function boolean(value: boolean): string {\n            return value ? 'true' : 'false';\n        }\n    }\n}","/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved. \n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *   \n *  The above copyright notice and this permission notice shall be included in \n *  all copies or substantial portions of the Software.\n *   \n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\n\nmodule powerbi.data {\n\n    export module SQHierarchyExprUtils {\n        export function getConceptualHierarchyLevelFromExpr(\n            conceptualSchema: FederatedConceptualSchema,\n            fieldExpr: FieldExprPattern): ConceptualHierarchyLevel {\n            let fieldExprItem = FieldExprPattern.toFieldExprEntityItemPattern(fieldExpr);\n            let hierarchyLevel = fieldExpr.hierarchyLevel || fieldExpr.hierarchyLevelAggr;\n            if (hierarchyLevel)\n                return SQHierarchyExprUtils.getConceptualHierarchyLevel(\n                    conceptualSchema,\n                    fieldExprItem.schema,\n                    fieldExprItem.entity,\n                    hierarchyLevel.name,\n                    hierarchyLevel.level);\n        }\n\n        export function getConceptualHierarchyLevel(\n            conceptualSchema: FederatedConceptualSchema,\n            schemaName: string,\n            entity: string,\n            hierarchy: string,\n            hierarchyLevel: string): ConceptualHierarchyLevel {\n\n            let schema = conceptualSchema.schema(schemaName);\n            let conceptualHierarchy = schema.findHierarchy(entity, hierarchy);\n            if (conceptualHierarchy) {\n                return conceptualHierarchy.levels.withName(hierarchyLevel);\n            }\n        }\n\n        export function getConceptualHierarchy(sqExpr: SQExpr, federatedSchema: FederatedConceptualSchema): ConceptualHierarchy {\n            if (sqExpr instanceof SQHierarchyExpr) {\n                let hierarchy = <SQHierarchyExpr>sqExpr;\n\n                if (sqExpr.arg instanceof SQEntityExpr) {\n                    let entityExpr = <SQEntityExpr>sqExpr.arg;\n                    return federatedSchema\n                        .schema(entityExpr.schema)\n                        .findHierarchy(entityExpr.entity, hierarchy.hierarchy);\n                } else if (sqExpr.arg instanceof SQPropertyVariationSourceExpr) {\n                    let variationExpr = <SQPropertyVariationSourceExpr>sqExpr.arg;\n                    let sourceEntityExpr = <SQEntityExpr>variationExpr.arg;\n                    return federatedSchema\n                        .schema(sourceEntityExpr.schema)\n                        .findHierarchyByVariation(sourceEntityExpr.entity, variationExpr.property, variationExpr.name, hierarchy.hierarchy);\n                }\n            }\n        }\n\n        export function expandExpr(schema: FederatedConceptualSchema, expr: SQExpr, suppressHierarchyLevelExpansion?: boolean): SQExpr | SQExpr[] {\n            return SQExprHierarchyToHierarchyLevelConverter.convert(expr, schema) ||\n                SQExprVariationConverter.expand(expr, schema) ||\n                // If we are calling expandExpr from suppressHierarchyLevelExpansion, we should not expand the hierarchylevels\n                (!suppressHierarchyLevelExpansion && SQExprHierarchyLevelConverter.expand(expr, schema)) ||\n                expr;\n        }\n\n        export function isHierarchyOrVariation(schema: FederatedConceptualSchema, expr: SQExpr): boolean {\n            if (expr instanceof SQHierarchyExpr || expr instanceof SQHierarchyLevelExpr)\n                return true;\n\n            let conceptualProperty = expr.getConceptualProperty(schema);\n            if (conceptualProperty) {\n                let column = conceptualProperty.column;\n                if (column && column.variations && column.variations.length > 0)\n                    return true;\n            }\n\n            return false;\n        }\n\n        // Return column reference expression for hierarchy level expression.\n        export function getSourceVariationExpr(hierarchyLevelExpr: data.SQHierarchyLevelExpr): SQColumnRefExpr {\n            let fieldExprPattern: data.FieldExprPattern = data.SQExprConverter.asFieldPattern(hierarchyLevelExpr);\n            if (fieldExprPattern.columnHierarchyLevelVariation) {\n                let entity: data.SQExpr = SQExprBuilder.entity(fieldExprPattern.columnHierarchyLevelVariation.source.schema, fieldExprPattern.columnHierarchyLevelVariation.source.entity);\n\n                return SQExprBuilder.columnRef(entity, fieldExprPattern.columnHierarchyLevelVariation.source.name);\n            }\n        }\n\n        // Return hierarchy expression for hierarchy level expression.\n        export function getSourceHierarchy(hierarchyLevelExpr: data.SQHierarchyLevelExpr): SQHierarchyExpr {\n            let fieldExprPattern: data.FieldExprPattern = data.SQExprConverter.asFieldPattern(hierarchyLevelExpr);\n            let hierarchyLevel = fieldExprPattern.hierarchyLevel;\n            if (hierarchyLevel) {\n                let entity: data.SQExpr = SQExprBuilder.entity(hierarchyLevel.schema, hierarchyLevel.entity, hierarchyLevel.entityVar);\n                return SQExprBuilder.hierarchy(entity, hierarchyLevel.name);\n            }\n        }\n\n        export function getHierarchySourceAsVariationSource(hierarchyLevelExpr: SQHierarchyLevelExpr): SQPropertyVariationSourceExpr {\n\n            // Make sure the hierarchy level source is a hierarchy\n            if (!(hierarchyLevelExpr.arg instanceof SQHierarchyExpr))\n                return;\n                        \n            // Check if the hierarchy source if a variation\n            let hierarchyRef = <SQHierarchyExpr>hierarchyLevelExpr.arg;\n            if (hierarchyRef.arg instanceof SQPropertyVariationSourceExpr)\n                return <SQPropertyVariationSourceExpr>hierarchyRef.arg;\n        }\n\n        /**\n        * Returns true if firstExpr and secondExpr are levels in the same hierarchy and firstExpr is before secondExpr in allLevels.\n        */\n        export function areHierarchyLevelsOrdered(allLevels: SQHierarchyLevelExpr[], firstExpr: SQExpr, secondExpr: SQExpr): boolean {\n\n            // Validate that both items hierarchy levels\n            if (!(firstExpr instanceof SQHierarchyLevelExpr) || !(secondExpr instanceof SQHierarchyLevelExpr))\n                return false;\n\n            let firstLevel = <SQHierarchyLevelExpr>firstExpr;\n            let secondLevel = <SQHierarchyLevelExpr>secondExpr;\n\n            // Validate that both items belong to the same hierarchy\n            if (!SQExpr.equals(firstLevel.arg, secondLevel.arg))\n                return false;\n\n            // Determine the order\n            let firstIndex = SQExprUtils.indexOfExpr(allLevels, firstLevel);\n            let secondIndex = SQExprUtils.indexOfExpr(allLevels, secondLevel);\n\n            return firstIndex !== -1 && secondIndex !== -1 && firstIndex < secondIndex;\n        }\n\n        /**\n         * Given an ordered set of levels and an ordered subset of those levels, returns the index where\n         * expr should be inserted into the subset to maintain the correct order.\n         */\n        export function getInsertionIndex(allLevels: SQHierarchyLevelExpr[], orderedSubsetOfLevels: SQHierarchyLevelExpr[], expr: SQHierarchyLevelExpr): number {\n\n            let insertIndex = 0;\n\n            // Loop through the supplied levels until the insertion would no longer be in the correct order\n            while (insertIndex < orderedSubsetOfLevels.length &&\n                areHierarchyLevelsOrdered(allLevels, orderedSubsetOfLevels[insertIndex], expr)) {\n                insertIndex++;\n            }\n\n            return insertIndex;\n        }\n    }\n\n    export module SQExprHierarchyToHierarchyLevelConverter {\n        export function convert(sqExpr: SQExpr, federatedSchema: FederatedConceptualSchema): SQExpr[] {\n            debug.assertValue(sqExpr, 'sqExpr');\n            debug.assertValue(federatedSchema, 'federatedSchema');\n\n            if (sqExpr instanceof SQHierarchyExpr) {\n                let hierarchyExpr = <SQHierarchyExpr>sqExpr;\n\n                let conceptualHierarchy = SQHierarchyExprUtils.getConceptualHierarchy(hierarchyExpr, federatedSchema);\n                if (conceptualHierarchy)\n                    return _.map(conceptualHierarchy.levels, hierarchyLevel => SQExprBuilder.hierarchyLevel(sqExpr, hierarchyLevel.name));\n            }\n        }\n    }\n\n    module SQExprHierarchyLevelConverter {\n        export function expand(expr: SQExpr, schema: FederatedConceptualSchema): SQExpr[] {\n            debug.assertValue(expr, 'sqExpr');\n            debug.assertValue(schema, 'federatedSchema');\n            let exprs: SQExpr[] = [];\n\n            if (expr instanceof SQHierarchyLevelExpr) {\n                let fieldExpr = SQExprConverter.asFieldPattern(expr);\n                if (fieldExpr.hierarchyLevel) {\n                    let fieldExprItem = FieldExprPattern.toFieldExprEntityItemPattern(fieldExpr);\n                    let hierarchy = schema\n                        .schema(fieldExprItem.schema)\n                        .findHierarchy(fieldExprItem.entity, fieldExpr.hierarchyLevel.name);\n\n                    if (hierarchy) {\n                        let hierarchyLevels = hierarchy.levels;\n                        for (let hierarchyLevel of hierarchyLevels) {\n                            if (hierarchyLevel.name === fieldExpr.hierarchyLevel.level) {\n                                exprs.push(expr);\n                                break;\n                            }\n                            else\n                                exprs.push(\n                                    SQExprBuilder.hierarchyLevel(\n                                        SQExprBuilder.hierarchy(\n                                            SQExprBuilder.entity(fieldExprItem.schema, fieldExprItem.entity, fieldExprItem.entityVar),\n                                            hierarchy.name),\n                                        hierarchyLevel.name)\n                                );\n                        }\n                    }\n                }\n            }\n\n            if (!_.isEmpty(exprs))\n                return exprs;\n        }\n    }\n\n    module SQExprVariationConverter {\n        export function expand(expr: SQExpr, schema: FederatedConceptualSchema): SQExpr[] {\n            debug.assertValue(expr, 'sqExpr');\n            debug.assertValue(schema, 'federatedSchema');\n\n            let exprs: SQExpr[];\n            let conceptualProperty = expr.getConceptualProperty(schema);\n\n            if (conceptualProperty) {\n                let column = conceptualProperty.column;\n                if (column && column.variations && column.variations.length > 0) {\n                    let variations = column.variations;\n\n                    // for SU11, we support only one variation\n                    debug.assert(variations.length === 1, \"variations.length\");\n                    let variation = variations[0];\n\n                    let fieldExpr = SQExprConverter.asFieldPattern(expr);\n                    let fieldExprItem = FieldExprPattern.toFieldExprEntityItemPattern(fieldExpr);\n\n                    exprs = [];\n                    if (variation.defaultHierarchy) {\n                        let hierarchyExpr = SQExprBuilder.hierarchy(\n                            SQExprBuilder.propertyVariationSource(\n                                SQExprBuilder.entity(fieldExprItem.schema, fieldExprItem.entity, fieldExprItem.entityVar),\n                                variation.name, conceptualProperty.name),\n                            variation.defaultHierarchy.name);\n\n                        for (let level of variation.defaultHierarchy.levels)\n                            exprs.push(SQExprBuilder.hierarchyLevel(hierarchyExpr, level.name));\n                    }\n                }\n            }\n\n            return exprs;\n        }\n    }\n}","/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved. \n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *   \n *  The above copyright notice and this permission notice shall be included in \n *  all copies or substantial portions of the Software.\n *   \n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\n\nmodule powerbi.data {\n    // A group can consist of either a single expression, or a collection of hierarchy expressions\n    export interface SQExprGroup {\n        expr: SQExpr;\n        children: SQHierarchyLevelExpr[];\n\n        /** Index of expression in the query. */\n        selectQueryIndex: number;\n    };\n\n    export module SQExprGroupUtils {\n        /** Group all projections. Eacch group can consist of either a single property, or a collection of hierarchy items. */\n        export function groupExprs(schema: FederatedConceptualSchema, exprs: SQExpr[]): SQExprGroup[] {\n            let groups: SQExprGroup[] = [];\n            for (let i = 0, len = exprs.length; i < len; i++) {\n                let expr = exprs[i];\n                debug.assertValue(expr, \"Expression not found\");\n\n                if (!(expr instanceof SQHierarchyLevelExpr)) {\n                    groups.push({ expr: expr, children: null, selectQueryIndex: i });\n                }\n                else {\n                    addChildToGroup(schema, groups, expr, i);\n                }\n            }\n\n            return groups;\n        }\n\n        function addChildToGroup(\n            schema: FederatedConceptualSchema,\n            groups: SQExprGroup[],\n            expr: SQHierarchyLevelExpr,\n            selectQueryIndex: number): void {\n\n            // shouldAddExpressionToNewGroup is used to control whether we should add the passed expr to \n            // a new Group or to the last Group\n            let shouldAddExpressionToNewGroup = true;\n            let exprSource = SQHierarchyExprUtils.getSourceVariationExpr(expr) || SQHierarchyExprUtils.getSourceHierarchy(expr);\n            let lastGroup = _.last(groups);\n\n            // The relevant group is always the last added. If it has the same source hierarchy,\n            // and is properly ordered within that hierarchy, we will need to add to this group.\n            if (lastGroup && lastGroup.children && SQExpr.equals(lastGroup.expr, exprSource)) {\n                let expandedExpr = SQHierarchyExprUtils.expandExpr(schema, expr.arg);\n                if (expandedExpr instanceof Array) {\n                    let allHierarchyLevels = <SQHierarchyLevelExpr[]>expandedExpr;\n                    shouldAddExpressionToNewGroup = !SQHierarchyExprUtils.areHierarchyLevelsOrdered(allHierarchyLevels, _.last(lastGroup.children), expr);\n                }\n            }\n\n            if (shouldAddExpressionToNewGroup)\n                // Use the Sourcevariation as the expression for the group.\n                groups.push({ expr: exprSource, children: [expr], selectQueryIndex: selectQueryIndex });\n            else {\n                debug.assertValue(lastGroup, 'There should be a group to add the variation to');\n                debug.assertValue(lastGroup.children, 'The group should have children to add the variation to');\n                lastGroup.children.push(expr);\n            }\n        }\n    }\n}","/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved. \n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *   \n *  The above copyright notice and this permission notice shall be included in \n *  all copies or substantial portions of the Software.\n *   \n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\n\nmodule powerbi.data {\n    import StringExtensions = jsCommon.StringExtensions;\n\n    /** Represents an immutable expression within a SemanticQuery. */\n    export abstract class SQExpr implements ISQExpr {\n        private _kind: SQExprKind;\n\n        constructor(kind: SQExprKind) {\n            debug.assertValue(kind, 'kind');\n\n            this._kind = kind;\n        }\n\n        public static equals(x: SQExpr, y: SQExpr, ignoreCase?: boolean): boolean {\n            return SQExprEqualityVisitor.run(x, y, ignoreCase);\n        }\n      \n        public validate(schema: FederatedConceptualSchema, errors?: SQExprValidationError[]): SQExprValidationError[] {\n            let validator = new SQExprValidationVisitor(schema, errors);\n            this.accept(validator);\n            return validator.errors;\n        }\n\n        public accept<T, TArg>(visitor: ISQExprVisitorWithArg<T, TArg>, arg?: TArg): T {\n            debug.assertFail('abstract method');\n            return;\n        }\n\n        public get kind(): SQExprKind {\n            return this._kind;\n        }\n\n        public static isColumn(expr: SQExpr): expr is SQColumnRefExpr {\n            debug.assertValue(expr, 'expr');\n\n            return expr.kind === SQExprKind.ColumnRef;\n        }\n\n        public static isConstant(expr: SQExpr): expr is SQConstantExpr {\n            debug.assertValue(expr, 'expr');\n\n            return expr.kind === SQExprKind.Constant;\n        }\n\n        public static isEntity(expr: SQExpr): expr is SQEntityExpr {\n            debug.assertValue(expr, 'expr');\n\n            return expr.kind === SQExprKind.Entity;\n        }\n\n        public static isHierarchy(expr: SQExpr): expr is SQHierarchyExpr {\n            debug.assertValue(expr, 'expr');\n\n            return expr.kind === SQExprKind.Hierarchy;\n        }\n\n        public static isHierarchyLevel(expr: SQExpr): expr is SQHierarchyLevelExpr {\n            debug.assertValue(expr, 'expr');\n\n            return expr.kind === SQExprKind.HierarchyLevel;\n        }\n\n        public getMetadata(federatedSchema: FederatedConceptualSchema): SQExprMetadata {\n            debug.assertValue(federatedSchema, 'federatedSchema');\n\n            let field = SQExprConverter.asFieldPattern(this);\n            if (!field)\n                return;\n\n            if (field.column || field.columnAggr || field.measure)\n                return this.getMetadataForProperty(field, federatedSchema);\n\n            if (field.hierarchyLevel || field.hierarchyLevelAggr)\n                return this.getMetadataForHierarchyLevel(field, federatedSchema);\n\n            if (field.columnHierarchyLevelVariation)\n                return this.getMetadataForVariation(field, federatedSchema);\n\n            return SQExpr.getMetadataForEntity(field, federatedSchema);\n        }\n\n        public getDefaultAggregate(federatedSchema: FederatedConceptualSchema, forceAggregation: boolean = false): QueryAggregateFunction {\n            debug.assertValue(federatedSchema, 'federatedSchema');\n\n            let property = this.getConceptualProperty(federatedSchema) || this.getHierarchyLevelConceptualProperty(federatedSchema);\n            if (!property)\n                return;\n\n            let aggregate: QueryAggregateFunction;\n\n            if (property && property.kind === ConceptualPropertyKind.Column) {\n                let propertyDefaultAggregate = property.column ? property.column.defaultAggregate : null;\n\n                if ((property.type.integer || property.type.numeric) &&\n                    propertyDefaultAggregate !== ConceptualDefaultAggregate.None) {\n                    aggregate = defaultAggregateToQueryAggregateFunction(propertyDefaultAggregate);\n                    if (aggregate === undefined)\n                        aggregate = defaultAggregateForDataType(property.type);\n                }\n\n                // If we haven't found an appropriate aggregate, and want to force aggregation anyway, \n                // aggregate on CountNonNull.\n                if (aggregate === undefined && forceAggregation) {\n                    aggregate = QueryAggregateFunction.CountNonNull;\n                }\n            }\n\n            return aggregate;\n        }\n\n        /** Return the SQExpr[] of group on columns if it has group on keys otherwise return the SQExpr of the column.*/\n        public getKeyColumns(schema: FederatedConceptualSchema): SQExpr[] {\n            let columnRefExpr = SQExprColumnRefInfoVisitor.getColumnRefSQExpr(schema, this);\n            if (!columnRefExpr)\n                return;\n\n            let keySQExprs: SQExpr[] = [];\n            let keys = this.getPropertyKeys(schema);\n            if (keys && keys.length > 0) {\n                for (let i = 0, len = keys.length; i < len; i++) {\n                    keySQExprs.push(SQExprBuilder.columnRef(columnRefExpr.source, keys[i].name));\n                }\n            }\n            else\n                keySQExprs.push(columnRefExpr);\n\n            return keySQExprs;\n        }\n\n        /** Returns a value indicating whether the expression would group on keys other than itself.*/\n        public hasGroupOnKeys(schema: FederatedConceptualSchema): boolean {\n            let columnRefExpr = SQExprColumnRefInfoVisitor.getColumnRefSQExpr(schema, this);\n            if (!columnRefExpr)\n                return;\n            let keys = this.getPropertyKeys(schema);\n\n            if (!keys || keys.length < 1)\n                return false;\n\n            if (keys.length > 1)\n                return true;\n\n            let keySqExpr = SQExprBuilder.columnRef(columnRefExpr.source, keys[0].name);\n            return !SQExpr.equals(keySqExpr, this);\n        }\n\n        private getPropertyKeys(schema: FederatedConceptualSchema): jsCommon.ArrayNamedItems<ConceptualProperty> {\n            let property = this.getConceptualProperty(schema) || this.getHierarchyLevelConceptualProperty(schema);\n            if (!property)\n                return;\n\n            return property.column ? property.column.keys : undefined;\n        }\n\n        public getConceptualProperty(federatedSchema: FederatedConceptualSchema): ConceptualProperty {\n            let field = SQExprConverter.asFieldPattern(this);\n            if (!field)\n                return;\n\n            let fieldExprItem = FieldExprPattern.toFieldExprEntityItemPattern(field);\n            let propertyName = FieldExprPattern.getPropertyName(field);\n\n            if (propertyName)\n                return federatedSchema\n                    .schema(fieldExprItem.schema)\n                    .findProperty(fieldExprItem.entity, propertyName);\n        }\n\n        public getTargetEntityForVariation(federatedSchema: FederatedConceptualSchema, variationName: string): string {\n            let property = this.getConceptualProperty(federatedSchema);\n            if (property && property.column && !_.isEmpty(property.column.variations)) {\n                let variations = property.column.variations;\n                for (let variation of variations)\n                    if (variation.name === variationName)\n                        return variation.navigationProperty.targetEntity.name;\n            }\n        }\n\n        private getHierarchyLevelConceptualProperty(federatedSchema: FederatedConceptualSchema): ConceptualProperty {\n            let field = SQExprConverter.asFieldPattern(this);\n            if (!field)\n                return;\n\n            let fieldExprHierachyLevel = field.hierarchyLevel || field.hierarchyLevelAggr;\n            if (fieldExprHierachyLevel) {\n                let fieldExprEntity = FieldExprPattern.toFieldExprEntityItemPattern(field);\n\n                let hierarchy = federatedSchema\n                    .schema(fieldExprEntity.schema)\n                    .findHierarchy(fieldExprEntity.entity, fieldExprHierachyLevel.name);\n\n                if (hierarchy) {\n                    let hierarchyLevel = hierarchy.levels.withName(fieldExprHierachyLevel.level);\n                    if (hierarchyLevel)\n                        return hierarchyLevel.column;\n                }\n            }\n        }\n\n        private getMetadataForVariation(field: data.FieldExprPattern, federatedSchema: FederatedConceptualSchema): SQExprMetadata {\n            debug.assertValue(field, 'field');\n            debug.assertValue(federatedSchema, 'federatedSchema');\n\n            let columnHierarchyLevelVariation = field.columnHierarchyLevelVariation;\n            let fieldExprItem = FieldExprPattern.toFieldExprEntityItemPattern(field);\n            let sourceProperty = federatedSchema\n                .schema(fieldExprItem.schema)\n                .findProperty(fieldExprItem.entity, columnHierarchyLevelVariation.source.name);\n\n            if (sourceProperty && sourceProperty.column && sourceProperty.column.variations) {\n                for (let variation of sourceProperty.column.variations) {\n                    if (variation.defaultHierarchy && variation.defaultHierarchy.levels) {\n                        for (let level of variation.defaultHierarchy.levels) {\n                            if (level.name === columnHierarchyLevelVariation.level.level) {\n                                let property = level.column;\n                                return {\n                                    kind: (property.kind === ConceptualPropertyKind.Measure) ? FieldKind.Measure : FieldKind.Column,\n                                    type: property.type,\n                                    format: property.format,\n                                    idOnEntityKey: property.column ? property.column.idOnEntityKey : false,\n                                    defaultAggregate: property.column ? property.column.defaultAggregate : null\n                                };\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        private getMetadataForHierarchyLevel(field: FieldExprPattern, federatedSchema: FederatedConceptualSchema): SQExprMetadata {\n            debug.assertValue(field, 'field');\n            debug.assertValue(federatedSchema, 'federatedSchema');\n\n            let property = this.getHierarchyLevelConceptualProperty(federatedSchema);\n            if (!property)\n                return;\n\n            return this.getPropertyMetadata(field, property);\n        }\n\n        private getPropertyMetadata(field: FieldExprPattern, property: ConceptualProperty): SQExprMetadata {\n            let format = property.format;\n            let type = property.type;\n            let columnAggregate = field.columnAggr || field.hierarchyLevelAggr;\n\n            if (columnAggregate) {\n                switch (columnAggregate.aggregate) {\n                    case QueryAggregateFunction.Count:\n                    case QueryAggregateFunction.CountNonNull:\n                        type = ValueType.fromExtendedType(ExtendedType.Integer);\n                        format = undefined;\n                        break;\n                    case QueryAggregateFunction.Avg:\n                        if (type.integer)\n                            type = ValueType.fromExtendedType(ExtendedType.Double);\n                        break;\n                }\n            }\n\n            return {\n                kind: (property.kind === ConceptualPropertyKind.Measure || (columnAggregate && columnAggregate.aggregate !== undefined)) ? FieldKind.Measure : FieldKind.Column,\n                type: type,\n                format: format,\n                idOnEntityKey: property.column ? property.column.idOnEntityKey : false,\n                aggregate: columnAggregate ? columnAggregate.aggregate : undefined,\n                defaultAggregate: property.column ? property.column.defaultAggregate : null\n            };\n        }\n\n        private getMetadataForProperty(field: FieldExprPattern, federatedSchema: FederatedConceptualSchema): SQExprMetadata {\n            debug.assertValue(field, 'field');\n            debug.assertValue(federatedSchema, 'federatedSchema');\n\n            let property = this.getConceptualProperty(federatedSchema);\n            if (!property)\n                return;\n\n            return this.getPropertyMetadata(field, property);\n        }\n\n        private static getMetadataForEntity(field: FieldExprPattern, federatedSchema: FederatedConceptualSchema): SQExprMetadata {\n            debug.assertValue(field, 'field');\n            debug.assertValue(federatedSchema, 'federatedSchema');\n\n            let fieldExprItem = FieldExprPattern.toFieldExprEntityItemPattern(field);\n            let entity = federatedSchema\n                .schema(fieldExprItem.schema)\n                .entities\n                .withName(fieldExprItem.entity);\n\n            if (!entity)\n                return;\n            \n            // We only support count and countnonnull for entity.\n            if (field.entityAggr) {\n                switch (field.entityAggr.aggregate) {\n                    case QueryAggregateFunction.Count:\n                    case QueryAggregateFunction.CountNonNull:\n                        return {\n                            kind: FieldKind.Measure,\n                            type: ValueType.fromExtendedType(ExtendedType.Integer),\n                            format: undefined,\n                            idOnEntityKey: false,\n                            aggregate: field.entityAggr.aggregate\n                        };\n                }\n            }\n        }\n    }\n\n    export const enum SQExprKind {\n        Entity,\n        ColumnRef,\n        MeasureRef,\n        Aggregation,\n        PropertyVariationSource,\n        Hierarchy,\n        HierarchyLevel,\n        And,\n        Between,\n        In,\n        Or,\n        Contains,\n        Compare,\n        StartsWith,\n        Exists,\n        Not,\n        Constant,\n        DateSpan,\n        DateAdd,\n        Now,\n        AnyValue,\n        DefaultValue,\n    }\n\n    export interface SQExprMetadata {\n        kind: FieldKind;\n        type: ValueType;\n        format?: string;\n        idOnEntityKey?: boolean;\n        aggregate?: QueryAggregateFunction;\n        defaultAggregate?: ConceptualDefaultAggregate;\n    }\n\n    export const enum FieldKind {\n        /** Indicates the field references a column, which evaluates to a distinct set of values (e.g., Year, Name, SalesQuantity, etc.). */\n        Column,\n\n        /** Indicates the field references a measure, which evaluates to a single value (e.g., SalesYTD, Sum(Sales), etc.). */\n        Measure,\n    }\n\n    /** Note: Exported for testability */\n    export function defaultAggregateForDataType(type: ValueType): QueryAggregateFunction {\n        if (type.integer || type.numeric)\n            return QueryAggregateFunction.Sum;\n\n        return QueryAggregateFunction.Count;\n    }\n\n    /** Note: Exported for testability */\n    export function defaultAggregateToQueryAggregateFunction(aggregate: ConceptualDefaultAggregate): QueryAggregateFunction {\n        switch (aggregate) {\n            case ConceptualDefaultAggregate.Average:\n                return QueryAggregateFunction.Avg;\n            case ConceptualDefaultAggregate.Count:\n                return QueryAggregateFunction.CountNonNull;\n            case ConceptualDefaultAggregate.DistinctCount:\n                return QueryAggregateFunction.Count;\n            case ConceptualDefaultAggregate.Max:\n                return QueryAggregateFunction.Max;\n            case ConceptualDefaultAggregate.Min:\n                return QueryAggregateFunction.Min;\n            case ConceptualDefaultAggregate.Sum:\n                return QueryAggregateFunction.Sum;\n            default:\n                return;\n        }\n    }\n\n    export class SQEntityExpr extends SQExpr {\n        public schema: string;\n        public entity: string;\n        public variable: string;\n\n        constructor(schema: string, entity: string, variable?: string) {\n            debug.assertValue(entity, 'entity');\n\n            super(SQExprKind.Entity);\n            this.schema = schema;\n            this.entity = entity;\n            if (variable)\n                this.variable = variable;\n        }\n\n        public accept<T, TArg>(visitor: ISQExprVisitorWithArg<T, TArg>, arg?: TArg): T {\n            return visitor.visitEntity(this, arg);\n        }\n    }\n\n    export abstract class SQPropRefExpr extends SQExpr {\n        public ref: string;\n        public source: SQExpr;\n\n        constructor(kind: SQExprKind, source: SQExpr, ref: string) {\n            debug.assertValue(kind, 'kind');\n            debug.assertValue(source, 'source');\n            debug.assertValue(ref, 'ref');\n\n            super(kind);\n            this.source = source;\n            this.ref = ref;\n        }\n    }\n\n    export class SQColumnRefExpr extends SQPropRefExpr {\n        constructor(source: SQExpr, ref: string) {\n            super(SQExprKind.ColumnRef, source, ref);\n        }\n\n        public accept<T, TArg>(visitor: ISQExprVisitorWithArg<T, TArg>, arg?: TArg): T {\n            return visitor.visitColumnRef(this, arg);\n        }\n    }\n\n    export class SQMeasureRefExpr extends SQPropRefExpr {\n        constructor(source: SQExpr, ref: string) {\n            super(SQExprKind.MeasureRef, source, ref);\n        }\n\n        public accept<T, TArg>(visitor: ISQExprVisitorWithArg<T, TArg>, arg?: TArg): T {\n            return visitor.visitMeasureRef(this, arg);\n        }\n    }\n\n    export class SQAggregationExpr extends SQExpr {\n        public arg: SQExpr;\n        public func: QueryAggregateFunction;\n\n        constructor(arg: SQExpr, func: QueryAggregateFunction) {\n            debug.assertValue(arg, 'arg');\n            debug.assertValue(func, 'func');\n\n            super(SQExprKind.Aggregation);\n            this.arg = arg;\n            this.func = func;\n        }\n\n        public accept<T, TArg>(visitor: ISQExprVisitorWithArg<T, TArg>, arg?: TArg): T {\n            return visitor.visitAggr(this, arg);\n        }\n    }\n\n    export class SQPropertyVariationSourceExpr extends SQExpr {\n        public arg: SQExpr;\n        public name: string;\n        public property: string;\n\n        constructor(arg: SQExpr, name: string, property: string) {\n            debug.assertValue(arg, 'arg');\n            debug.assertValue(name, 'name');\n            debug.assertValue(property, 'property');\n\n            super(SQExprKind.PropertyVariationSource);\n            this.arg = arg;\n            this.name = name;\n            this.property = property;\n        }\n\n        public accept<T, TArg>(visitor: ISQExprVisitorWithArg<T, TArg>, arg?: TArg): T {\n            return visitor.visitPropertyVariationSource(this, arg);\n        }\n    }\n\n    export class SQHierarchyExpr extends SQExpr {\n        public arg: SQExpr;\n        public hierarchy: string;\n\n        constructor(arg: SQExpr, hierarchy: string) {\n            debug.assertValue(arg, 'arg');\n            debug.assertValue(hierarchy, 'hierarchy');\n\n            super(SQExprKind.Hierarchy);\n            this.arg = arg;\n            this.hierarchy = hierarchy;\n        }\n\n        public accept<T, TArg>(visitor: ISQExprVisitorWithArg<T, TArg>, arg?: TArg): T {\n            return visitor.visitHierarchy(this, arg);\n        }\n    }\n\n    export class SQHierarchyLevelExpr extends SQExpr {\n        public arg: SQExpr;\n        public level: string;\n\n        constructor(arg: SQExpr, level: string) {\n            debug.assertValue(arg, 'arg');\n            debug.assertValue(level, 'level');\n\n            super(SQExprKind.HierarchyLevel);\n            this.arg = arg;\n            this.level = level;\n        }\n\n        public accept<T, TArg>(visitor: ISQExprVisitorWithArg<T, TArg>, arg?: TArg): T {\n            return visitor.visitHierarchyLevel(this, arg);\n        }\n    }\n\n    export class SQAndExpr extends SQExpr {\n        left: SQExpr;\n        right: SQExpr;\n\n        constructor(left: SQExpr, right: SQExpr) {\n            debug.assertValue(left, 'left');\n            debug.assertValue(right, 'right');\n\n            super(SQExprKind.And);\n            this.left = left;\n            this.right = right;\n        }\n\n        public accept<T, TArg>(visitor: ISQExprVisitorWithArg<T, TArg>, arg?: TArg): T {\n            return visitor.visitAnd(this, arg);\n        }\n    }\n\n    export class SQBetweenExpr extends SQExpr {\n        arg: SQExpr;\n        lower: SQExpr;\n        upper: SQExpr;\n\n        constructor(arg: SQExpr, lower: SQExpr, upper: SQExpr) {\n            debug.assertValue(arg, 'arg');\n            debug.assertValue(lower, 'lower');\n            debug.assertValue(upper, 'upper');\n\n            super(SQExprKind.Between);\n            this.arg = arg;\n            this.lower = lower;\n            this.upper = upper;\n        }\n\n        public accept<T, TArg>(visitor: ISQExprVisitorWithArg<T, TArg>, arg?: TArg): T {\n            return visitor.visitBetween(this, arg);\n        }\n    }\n\n    export class SQInExpr extends SQExpr {\n        args: SQExpr[];\n        values: SQExpr[][];\n\n        constructor(args: SQExpr[], values: SQExpr[][]) {\n            debug.assertValue(args, 'args');\n            debug.assertValue(values, 'values');\n\n            super(SQExprKind.In);\n            this.args = args;\n            this.values = values;\n        }\n\n        public accept<T, TArg>(visitor: ISQExprVisitorWithArg<T, TArg>, arg?: TArg): T {\n            return visitor.visitIn(this, arg);\n        }\n    }\n\n    export class SQOrExpr extends SQExpr {\n        left: SQExpr;\n        right: SQExpr;\n\n        constructor(left: SQExpr, right: SQExpr) {\n            debug.assertValue(left, 'left');\n            debug.assertValue(right, 'right');\n\n            super(SQExprKind.Or);\n            this.left = left;\n            this.right = right;\n        }\n\n        public accept<T, TArg>(visitor: ISQExprVisitorWithArg<T, TArg>, arg?: TArg): T {\n            return visitor.visitOr(this, arg);\n        }\n    }\n\n    export class SQCompareExpr extends SQExpr {\n        comparison: QueryComparisonKind;\n        left: SQExpr;\n        right: SQExpr;\n\n        constructor(comparison: QueryComparisonKind, left: SQExpr, right: SQExpr) {\n            debug.assertValue(comparison, 'kind');\n            debug.assertValue(left, 'left');\n            debug.assertValue(right, 'right');\n\n            super(SQExprKind.Compare);\n            this.comparison = comparison;\n            this.left = left;\n            this.right = right;\n        }\n\n        public accept<T, TArg>(visitor: ISQExprVisitorWithArg<T, TArg>, arg?: TArg): T {\n            return visitor.visitCompare(this, arg);\n        }\n    }\n\n    export class SQContainsExpr extends SQExpr {\n        left: SQExpr;\n        right: SQExpr;\n\n        constructor(left: SQExpr, right: SQExpr) {\n            debug.assertValue(left, 'left');\n            debug.assertValue(right, 'right');\n\n            super(SQExprKind.Contains);\n            this.left = left;\n            this.right = right;\n        }\n\n        public accept<T, TArg>(visitor: ISQExprVisitorWithArg<T, TArg>, arg?: TArg): T {\n            return visitor.visitContains(this, arg);\n        }\n    }\n\n    export class SQStartsWithExpr extends SQExpr {\n        left: SQExpr;\n        right: SQExpr;\n\n        constructor(left: SQExpr, right: SQExpr) {\n            debug.assertValue(left, 'left');\n            debug.assertValue(right, 'right');\n\n            super(SQExprKind.StartsWith);\n            this.left = left;\n            this.right = right;\n        }\n\n        public accept<T, TArg>(visitor: ISQExprVisitorWithArg<T, TArg>, arg?: TArg): T {\n            return visitor.visitStartsWith(this, arg);\n        }\n    }\n\n    export class SQExistsExpr extends SQExpr {\n        arg: SQExpr;\n\n        constructor(arg: SQExpr) {\n            debug.assertValue(arg, 'arg');\n\n            super(SQExprKind.Exists);\n            this.arg = arg;\n        }\n\n        public accept<T, TArg>(visitor: ISQExprVisitorWithArg<T, TArg>, arg?: TArg): T {\n            return visitor.visitExists(this, arg);\n        }\n    }\n\n    export class SQNotExpr extends SQExpr {\n        arg: SQExpr;\n\n        constructor(arg: SQExpr) {\n            debug.assertValue(arg, 'arg');\n\n            super(SQExprKind.Not);\n            this.arg = arg;\n        }\n\n        public accept<T, TArg>(visitor: ISQExprVisitorWithArg<T, TArg>, arg?: TArg): T {\n            return visitor.visitNot(this, arg);\n        }\n    }\n\n    export class SQConstantExpr extends SQExpr implements ISQConstantExpr {\n        public type: ValueType;\n\n        /** The native JavaScript representation of the value. */\n        public value: any;\n\n        /** The string encoded, lossless representation of the value. */\n        public valueEncoded: string;\n\n        constructor(type: ValueType, value: any, valueEncoded: string) {\n            debug.assertValue(type, 'type');\n\n            super(SQExprKind.Constant);\n            this.type = type;\n            this.value = value;\n            this.valueEncoded = valueEncoded;\n        }\n\n        public accept<T, TArg>(visitor: ISQExprVisitorWithArg<T, TArg>, arg?: TArg): T {\n            return visitor.visitConstant(this, arg);\n        }\n\n        public getMetadata(federatedSchema: FederatedConceptualSchema): SQExprMetadata {\n            debug.assertValue(federatedSchema, 'federatedSchema');\n\n            return {\n                // Returning Measure as the kind for a SQConstantExpr is slightly ambiguous allowing the return object to conform to SQEXprMetadata.\n                // A getType or similiar function in the future would be more appropriate. \n                kind: FieldKind.Measure,\n                type: this.type,\n            };\n        }\n    }\n\n    export class SQDateSpanExpr extends SQExpr {\n        public unit: TimeUnit;\n        public arg: SQExpr;\n\n        constructor(unit: TimeUnit, arg: SQExpr) {\n            debug.assertValue(unit, 'unit');\n            debug.assertValue(arg, 'arg');\n\n            super(SQExprKind.DateSpan);\n            this.unit = unit;\n            this.arg = arg;\n        }\n\n        public accept<T, TArg>(visitor: ISQExprVisitorWithArg<T, TArg>, arg?: TArg): T {\n            return visitor.visitDateSpan(this, arg);\n        }\n    }\n\n    export class SQDateAddExpr extends SQExpr {\n        public unit: TimeUnit;\n        public amount: number;\n        public arg: SQExpr;\n\n        constructor(unit: TimeUnit, amount: number, arg: SQExpr) {\n            debug.assertValue(unit, 'unit');\n            debug.assertValue(amount, 'amount');\n            debug.assertValue(arg, 'arg');\n\n            super(SQExprKind.DateAdd);\n            this.unit = unit;\n            this.arg = arg;\n            this.amount = amount;\n        }\n\n        public accept<T, TArg>(visitor: ISQExprVisitorWithArg<T, TArg>, arg?: TArg): T {\n            return visitor.visitDateAdd(this, arg);\n        }\n    }\n\n    export class SQNowExpr extends SQExpr {\n        constructor() {\n            super(SQExprKind.Now);\n        }\n\n        public accept<T, TArg>(visitor: ISQExprVisitorWithArg<T, TArg>, arg?: TArg): T {\n            return visitor.visitNow(this, arg);\n        }\n    }\n\n    export class SQDefaultValueExpr extends SQExpr {\n        constructor() {\n            super(SQExprKind.DefaultValue);\n        }\n\n        public accept<T, TArg>(visitor: ISQExprVisitorWithArg<T, TArg>, arg?: TArg): T {\n            return visitor.visitDefaultValue(this, arg);\n        }\n    }\n\n    export class SQAnyValueExpr extends SQExpr {\n        constructor() {\n            super(SQExprKind.AnyValue);\n        }\n\n        public accept<T, TArg>(visitor: ISQExprVisitorWithArg<T, TArg>, arg?: TArg): T {\n            return visitor.visitAnyValue(this, arg);\n        }\n    }\n\n    /** Provides utilities for creating & manipulating expressions. */\n    export module SQExprBuilder {\n        export function entity(schema: string, entity: string, variable?: string): SQEntityExpr {\n            return new SQEntityExpr(schema, entity, variable);\n        }\n\n        export function columnRef(source: SQExpr, prop: string): SQColumnRefExpr {\n            return new SQColumnRefExpr(source, prop);\n        }\n\n        export function measureRef(source: SQExpr, prop: string): SQMeasureRefExpr {\n            return new SQMeasureRefExpr(source, prop);\n        }\n\n        export function aggregate(source: SQExpr, aggregate: QueryAggregateFunction): SQAggregationExpr {\n            return new SQAggregationExpr(source, aggregate);\n        }\n\n        export function hierarchy(source: SQExpr, hierarchy: string): SQHierarchyExpr {\n            return new SQHierarchyExpr(source, hierarchy);\n        }\n\n        export function propertyVariationSource(source: SQExpr, name: string, property: string): SQPropertyVariationSourceExpr {\n            return new SQPropertyVariationSourceExpr(source, name, property);\n        }\n\n        export function hierarchyLevel(source: SQExpr, level: string): SQHierarchyLevelExpr {\n            return new SQHierarchyLevelExpr(source, level);\n        }\n\n        export function and(left: SQExpr, right: SQExpr): SQExpr {\n            if (!left)\n                return right;\n            if (!right)\n                return left;\n\n            return new SQAndExpr(left, right);\n        }\n\n        export function between(arg: SQExpr, lower: SQExpr, upper: SQExpr): SQBetweenExpr {\n            return new SQBetweenExpr(arg, lower, upper);\n        }\n\n        export function inExpr(args: SQExpr[], values: SQExpr[][]): SQInExpr {\n            return new SQInExpr(args, values);\n        }\n\n        export function or(left: SQExpr, right: SQExpr): SQExpr {\n            if (!left)\n                return right;\n            if (!right)\n                return left;\n            if (left instanceof SQInExpr && right instanceof SQInExpr) {\n                let inExpr = tryUseInExprs(<SQInExpr>left, <SQInExpr>right);\n                if (inExpr)\n                    return inExpr;\n            }\n\n            return new SQOrExpr(left, right);\n        }\n\n        function tryUseInExprs(left: SQInExpr, right: SQInExpr): SQInExpr {\n            if (!left.args || !right.args)\n                return;\n\n            let leftArgLen = left.args.length;\n            let rightArgLen = right.args.length;\n            if (leftArgLen !== rightArgLen)\n                return;\n\n            for (let i = 0; i < leftArgLen; ++i) {\n                if (!SQExpr.equals(left.args[i], right.args[i]))\n                    return;\n            }\n\n            let combinedValues = left.values.concat(right.values);\n            return SQExprBuilder.inExpr(left.args, combinedValues);\n        }\n\n        export function compare(kind: QueryComparisonKind, left: SQExpr, right: SQExpr): SQCompareExpr {\n            return new SQCompareExpr(kind, left, right);\n        }\n\n        export function contains(left: SQExpr, right: SQExpr): SQContainsExpr {\n            return new SQContainsExpr(left, right);\n        }\n\n        export function exists(arg: SQExpr): SQExistsExpr {\n            return new SQExistsExpr(arg);\n        }\n\n        export function equal(left: SQExpr, right: SQExpr): SQCompareExpr {\n            return compare(QueryComparisonKind.Equal, left, right);\n        }\n\n        export function not(arg: SQExpr): SQNotExpr {\n            return new SQNotExpr(arg);\n        }\n\n        export function startsWith(left: SQExpr, right: SQExpr): SQStartsWithExpr {\n            return new SQStartsWithExpr(left, right);\n        }\n\n        export function nullConstant(): SQConstantExpr {\n            return new SQConstantExpr(\n                ValueType.fromExtendedType(ExtendedType.Null),\n                null,\n                PrimitiveValueEncoding.nullEncoding());\n        }\n\n        export function now(): SQNowExpr {\n            return new SQNowExpr();\n        }\n\n        export function defaultValue(): SQDefaultValueExpr {\n            return new SQDefaultValueExpr();\n        }\n\n        export function anyValue(): SQAnyValueExpr {\n            return new SQAnyValueExpr();\n        }\n\n        export function boolean(value: boolean): SQConstantExpr {\n            return new SQConstantExpr(\n                ValueType.fromExtendedType(ExtendedType.Boolean),\n                value,\n                PrimitiveValueEncoding.boolean(value));\n        }\n\n        export function dateAdd(unit: TimeUnit, amount: number, arg: SQExpr): SQDateAddExpr {\n            return new SQDateAddExpr(unit, amount, arg);\n        }\n\n        export function dateTime(value: Date, valueEncoded?: string): SQConstantExpr {\n            if (valueEncoded === undefined)\n                valueEncoded = PrimitiveValueEncoding.dateTime(value);\n\n            return new SQConstantExpr(ValueType.fromExtendedType(ExtendedType.DateTime), value, valueEncoded);\n        }\n\n        export function dateSpan(unit: TimeUnit, arg: SQExpr): SQDateSpanExpr {\n            return new SQDateSpanExpr(unit, arg);\n        }\n\n        export function decimal(value: number, valueEncoded?: string): SQConstantExpr {\n            if (valueEncoded === undefined)\n                valueEncoded = PrimitiveValueEncoding.decimal(value);\n\n            return new SQConstantExpr(ValueType.fromExtendedType(ExtendedType.Decimal), value, valueEncoded);\n        }\n\n        export function double(value: number, valueEncoded?: string): SQConstantExpr {\n            if (valueEncoded === undefined)\n                valueEncoded = PrimitiveValueEncoding.double(value);\n\n            return new SQConstantExpr(ValueType.fromExtendedType(ExtendedType.Double), value, valueEncoded);\n        }\n\n        export function integer(value: number, valueEncoded?: string): SQConstantExpr {\n            if (valueEncoded === undefined)\n                valueEncoded = PrimitiveValueEncoding.integer(value);\n\n            return new SQConstantExpr(ValueType.fromExtendedType(ExtendedType.Integer), value, valueEncoded);\n        }\n\n        export function text(value: string, valueEncoded?: string): SQConstantExpr {\n            debug.assert(!valueEncoded || valueEncoded === PrimitiveValueEncoding.text(value), 'Incorrect encoded value specified.');\n\n            return new SQConstantExpr(\n                ValueType.fromExtendedType(ExtendedType.Text),\n                value,\n                valueEncoded || PrimitiveValueEncoding.text(value));\n        }\n\n        /** Returns an SQExpr that evaluates to the constant value. */\n        export function typedConstant(value: PrimitiveValue, type: ValueTypeDescriptor): SQConstantExpr {\n            if (value == null)\n                return nullConstant();\n\n            if (_.isBoolean(value)) {\n                return boolean(<boolean>value);\n            }\n\n            if (_.isString(value)) {\n                return text(<string>value);\n            }\n\n            if (_.isNumber(value)) {\n                if (type.integer && Double.isInteger(<number>value))\n                    return integer(<number>value);\n\n                return double(<number>value);\n            }\n\n            if (value instanceof Date) {\n                return dateTime(value);\n            }\n        }\n\n        export function setAggregate(expr: SQExpr, aggregate: QueryAggregateFunction): SQExpr {\n            return SQExprChangeAggregateRewriter.rewrite(expr, aggregate);\n        }\n\n        export function removeAggregate(expr: SQExpr): SQExpr {\n            return SQExprRemoveAggregateRewriter.rewrite(expr);\n        }\n\n        export function removeEntityVariables(expr: SQExpr): SQExpr {\n            return SQExprRemoveEntityVariablesRewriter.rewrite(expr);\n        }\n\n        export function createExprWithAggregate(\n            expr: SQExpr,\n            schema: FederatedConceptualSchema,\n            aggregateNonNumericFields: boolean,\n            preferredAggregate?: QueryAggregateFunction): SQExpr {\n\n            debug.assertValue(expr, 'expr');\n            debug.assertValue(expr, 'schema');\n\n            let aggregate: QueryAggregateFunction;\n            if (preferredAggregate != null && SQExprUtils.isSupportedAggregate(expr, schema, preferredAggregate)) {\n                aggregate = preferredAggregate;\n            }\n            else {\n                aggregate = expr.getDefaultAggregate(schema, aggregateNonNumericFields);\n            }\n            if (aggregate !== undefined)\n                expr = SQExprBuilder.aggregate(expr, aggregate);\n\n            return expr;\n        }\n    }\n\n    /** Provides utilities for obtaining information about expressions. */\n    export module SQExprInfo {\n        export function getAggregate(expr: SQExpr): QueryAggregateFunction {\n            return SQExprAggregateInfoVisitor.getAggregate(expr);\n        }\n    }\n\n    class SQExprEqualityVisitor implements ISQExprVisitorWithArg<boolean, SQExpr> {\n        private static instance: SQExprEqualityVisitor = new SQExprEqualityVisitor(/* ignoreCase */ false);\n        private static ignoreCaseInstance: SQExprEqualityVisitor = new SQExprEqualityVisitor(true);\n        private ignoreCase: boolean;\n\n        public static run(x: SQExpr, y: SQExpr, ignoreCase?: boolean): boolean {\n            // Normalize falsy to null\n            x = x || null;\n            y = y || null;\n\n            if (x === y)\n                return true;\n\n            if (!x !== !y)\n                return false;\n\n            debug.assertValue(x, 'x');\n            debug.assertValue(y, 'y');\n            if (ignoreCase)\n                return x.accept(SQExprEqualityVisitor.ignoreCaseInstance, y);\n\n            return x.accept(SQExprEqualityVisitor.instance, y);\n        }\n\n        constructor(ignoreCase: boolean) {\n            this.ignoreCase = ignoreCase;\n        }\n\n        public visitColumnRef(expr: SQColumnRefExpr, comparand: SQColumnRefExpr): boolean {\n            return comparand instanceof SQColumnRefExpr &&\n                expr.ref === (<SQColumnRefExpr>comparand).ref &&\n                this.equals(expr.source, (<SQColumnRefExpr>comparand).source);\n        }\n\n        public visitMeasureRef(expr: SQMeasureRefExpr, comparand: SQMeasureRefExpr): boolean {\n            return comparand instanceof SQMeasureRefExpr &&\n                expr.ref === (<SQMeasureRefExpr>comparand).ref &&\n                this.equals(expr.source, (<SQMeasureRefExpr>comparand).source);\n        }\n\n        public visitAggr(expr: SQAggregationExpr, comparand: SQExpr): boolean {\n            return comparand instanceof SQAggregationExpr &&\n                expr.func === (<SQAggregationExpr>comparand).func &&\n                this.equals(expr.arg, (<SQAggregationExpr>comparand).arg);\n        }\n\n        public visitHierarchy(expr: SQHierarchyExpr, comparand: SQHierarchyExpr): boolean {\n            return comparand instanceof SQHierarchyExpr &&\n                expr.hierarchy === comparand.hierarchy &&\n                this.equals(expr.arg, comparand.arg);\n        }\n\n        public visitHierarchyLevel(expr: SQHierarchyLevelExpr, comparand: SQHierarchyLevelExpr): boolean {\n            return comparand instanceof SQHierarchyLevelExpr &&\n                expr.level === comparand.level &&\n                this.equals(expr.arg, comparand.arg);\n        }\n\n        public visitPropertyVariationSource(expr: SQPropertyVariationSourceExpr, comparand: SQPropertyVariationSourceExpr): boolean {\n            return comparand instanceof SQPropertyVariationSourceExpr &&\n                expr.name === comparand.name &&\n                expr.property === comparand.property &&\n                this.equals(expr.arg, comparand.arg);\n        }\n\n        public visitBetween(expr: SQBetweenExpr, comparand: SQExpr): boolean {\n            return comparand instanceof SQBetweenExpr &&\n                this.equals(expr.arg, (<SQBetweenExpr>comparand).arg) &&\n                this.equals(expr.lower, (<SQBetweenExpr>comparand).lower) &&\n                this.equals(expr.upper, (<SQBetweenExpr>comparand).upper);\n        }\n\n        public visitIn(expr: SQInExpr, comparand: SQExpr): boolean {\n            if (!(comparand instanceof SQInExpr) || !this.equalsAll(expr.args, (<SQInExpr>comparand).args))\n                return false;\n\n            let values = expr.values,\n                compareValues = (<SQInExpr>comparand).values;\n            if (values.length !== compareValues.length)\n                return false;\n\n            for (let i = 0, len = values.length; i < len; i++) {\n                if (!this.equalsAll(values[i], compareValues[i]))\n                    return false;\n            }\n\n            return true;\n        }\n\n        public visitEntity(expr: SQEntityExpr, comparand: SQExpr): boolean {\n            return comparand instanceof SQEntityExpr &&\n                expr.schema === (<SQEntityExpr>comparand).schema &&\n                expr.entity === (<SQEntityExpr>comparand).entity &&\n                this.optionalEqual(expr.variable, (<SQEntityExpr>comparand).variable);\n        }\n\n        public visitAnd(expr: SQAndExpr, comparand: SQExpr): boolean {\n            return comparand instanceof SQAndExpr &&\n                this.equals(expr.left, (<SQAndExpr>comparand).left) &&\n                this.equals(expr.right, (<SQAndExpr>comparand).right);\n        }\n\n        public visitOr(expr: SQOrExpr, comparand: SQExpr): boolean {\n            return comparand instanceof SQOrExpr &&\n                this.equals(expr.left, (<SQOrExpr>comparand).left) &&\n                this.equals(expr.right, (<SQOrExpr>comparand).right);\n        }\n\n        public visitCompare(expr: SQCompareExpr, comparand: SQExpr): boolean {\n            return comparand instanceof SQCompareExpr &&\n                expr.comparison === (<SQCompareExpr>comparand).comparison &&\n                this.equals(expr.left, (<SQCompareExpr>comparand).left) &&\n                this.equals(expr.right, (<SQCompareExpr>comparand).right);\n        }\n\n        public visitContains(expr: SQContainsExpr, comparand: SQExpr): boolean {\n            return comparand instanceof SQContainsExpr &&\n                this.equals(expr.left, (<SQContainsExpr>comparand).left) &&\n                this.equals(expr.right, (<SQContainsExpr>comparand).right);\n        }\n\n        public visitDateSpan(expr: SQDateSpanExpr, comparand: SQExpr): boolean {\n            return comparand instanceof SQDateSpanExpr &&\n                expr.unit === (<SQDateSpanExpr>comparand).unit &&\n                this.equals(expr.arg, (<SQDateSpanExpr>comparand).arg);\n        }\n\n        public visitDateAdd(expr: SQDateAddExpr, comparand: SQExpr): boolean {\n            return comparand instanceof SQDateAddExpr &&\n                expr.unit === (<SQDateAddExpr>comparand).unit &&\n                expr.amount === (<SQDateAddExpr>comparand).amount &&\n                this.equals(expr.arg, (<SQDateAddExpr>comparand).arg);\n        }\n\n        public visitExists(expr: SQExistsExpr, comparand: SQExpr): boolean {\n            return comparand instanceof SQExistsExpr &&\n                this.equals(expr.arg, (<SQExistsExpr>comparand).arg);\n        }\n\n        public visitNot(expr: SQNotExpr, comparand: SQExpr): boolean {\n            return comparand instanceof SQNotExpr &&\n                this.equals(expr.arg, (<SQNotExpr>comparand).arg);\n        }\n\n        public visitNow(expr: SQNowExpr, comparand: SQExpr): boolean {\n            return comparand instanceof SQNowExpr;\n        }\n\n        public visitDefaultValue(expr: SQDefaultValueExpr, comparand: SQExpr): boolean {\n            return comparand instanceof SQDefaultValueExpr;\n        }\n\n        public visitAnyValue(expr: SQAnyValueExpr, comparand: SQExpr): boolean {\n            return comparand instanceof SQAnyValueExpr;\n        }\n\n        public visitStartsWith(expr: SQStartsWithExpr, comparand: SQExpr): boolean {\n            return comparand instanceof SQStartsWithExpr &&\n                this.equals(expr.left, (<SQStartsWithExpr>comparand).left) &&\n                this.equals(expr.right, (<SQStartsWithExpr>comparand).right);\n        }\n\n        public visitConstant(expr: SQConstantExpr, comparand: SQExpr): boolean {\n            if (comparand instanceof SQConstantExpr && expr.type === (<SQConstantExpr>comparand).type)\n                return expr.type.text && this.ignoreCase ?\n                    StringExtensions.equalIgnoreCase(expr.valueEncoded, (<SQConstantExpr>comparand).valueEncoded) :\n                    expr.valueEncoded === (<SQConstantExpr>comparand).valueEncoded;\n\n            return false;\n        }\n\n        private optionalEqual(x: string, y: string) {\n            // Only check equality if both values are specified.\n            if (x && y)\n                return x === y;\n\n            return true;\n        }\n\n        private equals(x: SQExpr, y: SQExpr): boolean {\n            return x.accept(this, y);\n        }\n\n        private equalsAll(x: SQExpr[], y: SQExpr[]): boolean {\n            let len = x.length;\n            if (len !== y.length)\n                return false;\n\n            for (let i = 0; i < len; i++) {\n                if (!this.equals(x[i], y[i]))\n                    return false;\n            }\n\n            return true;\n        }\n    }\n\n    /** Rewrites a root-level expression. */\n    class SQExprRootRewriter extends DefaultSQExprVisitor<SQExpr> {\n        public visitDefault(expr: SQExpr): SQExpr {\n            return expr;\n        }\n    }\n\n    export const enum SQExprValidationError {\n        invalidAggregateFunction,\n        invalidSchemaReference,\n        invalidEntityReference,\n        invalidColumnReference,\n        invalidMeasureReference,\n        invalidHierarchyReference,\n        invalidHierarchyLevelReference,\n        invalidLeftOperandType,\n        invalidRightOperandType,\n        invalidValueType,\n    }\n\n    export class SQExprValidationVisitor extends SQExprRewriter {\n        public errors: SQExprValidationError[];\n        private schema: FederatedConceptualSchema;\n\n        constructor(schema: FederatedConceptualSchema, errors?: SQExprValidationError[]) {\n            debug.assertValue(schema, 'schema');\n\n            super();\n            this.schema = schema;\n            if (errors)\n                this.errors = errors;\n        }\n\n        public visitIn(expr: SQInExpr): SQExpr {\n            let inExpr = <SQInExpr>super.visitIn(expr);\n            let args = inExpr.args;\n            let values = inExpr.values;\n            for (let valueTuple of values) {\n                debug.assert(valueTuple.length === args.length, 'args and value tuple are not the same length');\n                for (let i = 0, len = valueTuple.length; i < len; ++i)\n                    this.validateCompatibleType(args[i], valueTuple[i]);\n            }\n\n            return inExpr;\n        }\n\n        public visitCompare(expr: SQCompareExpr): SQExpr {\n            let compareExpr = <SQCompareExpr>super.visitCompare(expr);\n            this.validateCompatibleType(compareExpr.left, compareExpr.right);\n\n            return compareExpr;\n        }\n\n        public visitColumnRef(expr: SQColumnRefExpr): SQExpr {\n            let fieldExpr = SQExprConverter.asFieldPattern(expr);\n            if (fieldExpr) {\n                let fieldExprItem = FieldExprPattern.toFieldExprEntityItemPattern(fieldExpr);\n                let entity = this.validateEntity(fieldExprItem.schema, fieldExprItem.entity);\n                if (entity) {\n                    let prop = entity.properties.withName(fieldExpr.column.name);\n                    if (!prop ||\n                        prop.kind !== ConceptualPropertyKind.Column ||\n                        !this.isQueryable(fieldExpr))\n                        this.register(SQExprValidationError.invalidColumnReference);\n                }\n            }\n            return expr;\n        }\n\n        public visitMeasureRef(expr: SQMeasureRefExpr): SQExpr {\n            let fieldExpr = SQExprConverter.asFieldPattern(expr);\n            if (fieldExpr) {\n                let fieldExprItem = FieldExprPattern.toFieldExprEntityItemPattern(fieldExpr);\n                let entity = this.validateEntity(fieldExprItem.schema, fieldExprItem.entity);\n                if (entity) {\n                    let prop = entity.properties.withName(fieldExpr.measure.name);\n                    if (!prop ||\n                        prop.kind !== ConceptualPropertyKind.Measure ||\n                        !this.isQueryable(fieldExpr))\n                        this.register(SQExprValidationError.invalidMeasureReference);\n                }\n            }\n            return expr;\n        }\n\n        public visitAggr(expr: SQAggregationExpr): SQExpr {\n            let aggregateExpr = <SQAggregationExpr>super.visitAggr(expr);\n\n            let columnRefExpr = SQExprColumnRefInfoVisitor.getColumnRefSQExpr(this.schema, aggregateExpr.arg);\n            if (columnRefExpr) {\n                if (!SQExprUtils.isSupportedAggregate(expr, this.schema, expr.func))\n                    this.register(SQExprValidationError.invalidAggregateFunction);\n            }\n\n            return aggregateExpr;\n        }\n\n        public visitHierarchy(expr: SQHierarchyExpr): SQExpr {\n            let fieldExpr = SQExprConverter.asFieldPattern(expr);\n            if (fieldExpr) {\n                let fieldExprItem: FieldExprHierarchyPattern = <FieldExprHierarchyPattern>fieldExpr.hierarchy;\n                if (fieldExprItem) {\n                    this.validateHierarchy(fieldExprItem.schema, fieldExprItem.entity, fieldExprItem.name);\n                } else {\n                    this.register(SQExprValidationError.invalidHierarchyReference);\n                }\n            }\n            return expr;\n        }\n\n        public visitHierarchyLevel(expr: SQHierarchyLevelExpr): SQExpr {\n            let fieldExpr = SQExprConverter.asFieldPattern(expr);\n            if (fieldExpr) {\n                let hierarchyLevelFieldExprItem: FieldExprHierarchyLevelPattern = <FieldExprHierarchyLevelPattern>fieldExpr.hierarchyLevel;\n                if (hierarchyLevelFieldExprItem) {\n                    this.validateHierarchyLevel(hierarchyLevelFieldExprItem.schema, hierarchyLevelFieldExprItem.entity, hierarchyLevelFieldExprItem.name, hierarchyLevelFieldExprItem.level);\n                } else if (!fieldExpr.columnHierarchyLevelVariation) {\n                    this.register(SQExprValidationError.invalidHierarchyLevelReference);\n                }\n            }\n            return expr;\n        }\n\n        public visitEntity(expr: SQEntityExpr): SQExpr {\n            this.validateEntity(expr.schema, expr.entity);\n            return expr;\n        }\n\n        public visitContains(expr: SQContainsExpr): SQExpr {\n            this.validateOperandsAndTypeForStartOrContains(expr.left, expr.right);\n            return expr;\n        }\n\n        public visitStartsWith(expr: SQContainsExpr): SQExpr {\n            this.validateOperandsAndTypeForStartOrContains(expr.left, expr.right);\n            return expr;\n        }\n\n        private validateOperandsAndTypeForStartOrContains(left: SQExpr, right: SQExpr): void {\n            if (left instanceof SQColumnRefExpr) {\n                this.visitColumnRef(<SQColumnRefExpr>left);\n            } else if (left instanceof SQHierarchyLevelExpr) {\n                this.visitHierarchyLevel(<SQHierarchyLevelExpr>left);\n            } else {\n                this.register(SQExprValidationError.invalidLeftOperandType);\n            }\n\n            if (!(right instanceof SQConstantExpr) || !(<SQConstantExpr>right).type.text)\n                this.register(SQExprValidationError.invalidRightOperandType);\n            else\n                this.validateCompatibleType(left, right);\n        }\n\n        private validateCompatibleType(left: SQExpr, right: SQExpr): void {\n            let leftMetadata = left.getMetadata(this.schema),\n                leftType = leftMetadata && leftMetadata.type,\n                rightMetadata = right.getMetadata(this.schema),\n                rightType = rightMetadata && rightMetadata.type;\n\n            if (leftType && rightType && !leftType.isCompatibleFrom(rightType))\n                this.register(SQExprValidationError.invalidValueType);\n        }\n\n        private validateEntity(schemaName: string, entityName: string): ConceptualEntity {\n            let schema = this.schema.schema(schemaName);\n            if (schema) {\n                let entity = schema.entities.withName(entityName);\n                if (entity)\n                    return entity;\n\n                this.register(SQExprValidationError.invalidEntityReference);\n            }\n            else {\n                this.register(SQExprValidationError.invalidSchemaReference);\n            }\n        }\n\n        private validateHierarchy(schemaName: string, entityName: string, hierarchyName: string): ConceptualHierarchy {\n            let entity = this.validateEntity(schemaName, entityName);\n            if (entity) {\n                let hierarchy = entity.hierarchies.withName(hierarchyName);\n                if (hierarchy)\n                    return hierarchy;\n\n                this.register(SQExprValidationError.invalidHierarchyReference);\n            }\n        }\n\n        private validateHierarchyLevel(schemaName: string, entityName: string, hierarchyName: string, levelName: string): ConceptualHierarchyLevel {\n            let hierarchy = this.validateHierarchy(schemaName, entityName, hierarchyName);\n            if (hierarchy) {\n                let hierarchyLevel = hierarchy.levels.withName(levelName);\n                if (hierarchyLevel)\n                    return hierarchyLevel;\n\n                this.register(SQExprValidationError.invalidHierarchyLevelReference);\n            }\n        }\n\n        private register(error: SQExprValidationError) {\n            if (!this.errors)\n                this.errors = [];\n            this.errors.push(error);\n        }\n\n        private isQueryable(fieldExpr: FieldExprPattern): boolean {\n            let fieldExprItem = FieldExprPattern.toFieldExprEntityItemPattern(fieldExpr);\n            if (fieldExpr.hierarchyLevel || fieldExpr.hierarchyLevelAggr) {\n                let hierarchyLevelConceptualProperty = SQHierarchyExprUtils.getConceptualHierarchyLevelFromExpr(this.schema, fieldExpr);\n                return hierarchyLevelConceptualProperty && hierarchyLevelConceptualProperty.column.queryable !== ConceptualQueryableState.Error;\n            }\n\n            return this.schema.schema(fieldExprItem.schema).findProperty(fieldExprItem.entity, FieldExprPattern.getPropertyName(fieldExpr)).queryable !== ConceptualQueryableState.Error;\n        }\n    }\n\n    /** Returns an expression's aggregate function, or undefined if it doesn't have one. */\n    class SQExprAggregateInfoVisitor extends DefaultSQExprVisitor<QueryAggregateFunction> {\n        public visitAggr(expr: SQAggregationExpr): QueryAggregateFunction {\n            return expr.func;\n        }\n\n        public visitDefault(expr: SQExpr): QueryAggregateFunction {\n            return;\n        }\n\n        public static getAggregate(expr: SQExpr): QueryAggregateFunction {\n            let visitor = new SQExprAggregateInfoVisitor();\n            return expr.accept(visitor);\n        }\n    }\n\n    /** Returns a SQExprColumnRef expression or undefined.*/\n    class SQExprColumnRefInfoVisitor extends DefaultSQExprVisitor<SQColumnRefExpr> {\n        private schema: FederatedConceptualSchema;\n\n        constructor(schema: FederatedConceptualSchema) {\n            super();\n            this.schema = schema;\n        }\n\n        public visitColumnRef(expr: SQColumnRefExpr): SQColumnRefExpr {\n            return expr;\n        }\n\n        public visitHierarchyLevel(expr: SQHierarchyLevelExpr): SQColumnRefExpr {\n            let ref: string = expr.level;\n            let hierarchy = <SQHierarchyExpr>(expr.arg);\n            let sourceExpr: SQColumnRefExpr = hierarchy.accept(this);\n\n            if (hierarchy && hierarchy.arg instanceof SQPropertyVariationSourceExpr) {\n                let propertyVariationSource = <SQPropertyVariationSourceExpr>hierarchy.arg;\n                let targetEntity = sourceExpr.getTargetEntityForVariation(this.schema, propertyVariationSource.name);\n\n                if (sourceExpr && targetEntity) {\n                    let schemaName = (<SQEntityExpr>(sourceExpr.source)).schema;\n                    let targetEntityExpr = SQExprBuilder.entity(schemaName, targetEntity);\n                    let schemaHierarchy = this.schema.schema(schemaName).findHierarchy(targetEntity, hierarchy.hierarchy);\n\n                    if (schemaHierarchy) {\n                        for (let level of schemaHierarchy.levels)\n                            if (level.name === ref)\n                                return new SQColumnRefExpr(targetEntityExpr, level.column.name);\n                    }\n                }\n            }\n            else {\n                let entityExpr = <SQEntityExpr>(hierarchy.arg);\n                let hierarchyLevelRef = SQHierarchyExprUtils.getConceptualHierarchyLevel(this.schema,\n                    entityExpr.schema,\n                    entityExpr.entity,\n                    hierarchy.hierarchy,\n                    expr.level);\n\n                if (hierarchyLevelRef)\n                    return new SQColumnRefExpr(hierarchy.arg, hierarchyLevelRef.column.name);\n            }\n        }\n\n        public visitHierarchy(expr: SQHierarchyExpr): SQColumnRefExpr {\n            return expr.arg.accept(this);\n        }\n\n        public visitPropertyVariationSource(expr: SQPropertyVariationSourceExpr): SQColumnRefExpr {\n            let propertyName = expr.property;\n            return new SQColumnRefExpr(expr.arg, propertyName);\n        }\n\n        public visitDefault(expr: SQExpr): SQColumnRefExpr {\n            return;\n        }\n\n        public static getColumnRefSQExpr(schema: FederatedConceptualSchema, expr: SQExpr): SQColumnRefExpr {\n            let visitor = new SQExprColumnRefInfoVisitor(schema);\n            return expr.accept(visitor);\n        }\n    }\n\n    class SQExprChangeAggregateRewriter extends SQExprRootRewriter {\n        private func: QueryAggregateFunction;\n\n        constructor(func: QueryAggregateFunction) {\n            debug.assertValue(func, 'func');\n\n            super();\n            this.func = func;\n        }\n\n        public visitAggr(expr: SQAggregationExpr): SQExpr {\n            if (expr.func === this.func)\n                return expr;\n\n            return new SQAggregationExpr(expr.arg, this.func);\n        }\n\n        public visitColumnRef(expr: SQColumnRefExpr): SQExpr {\n            return new SQAggregationExpr(expr, this.func);\n        }\n\n        public static rewrite(expr: SQExpr, func: QueryAggregateFunction): SQExpr {\n            debug.assertValue(expr, 'expr');\n            debug.assertValue(func, 'func');\n\n            let rewriter = new SQExprChangeAggregateRewriter(func);\n            return expr.accept(rewriter);\n        }\n    }\n\n    class SQExprRemoveAggregateRewriter extends SQExprRootRewriter {\n        private static instance: SQExprRemoveAggregateRewriter = new SQExprRemoveAggregateRewriter();\n\n        public visitAggr(expr: SQAggregationExpr): SQExpr {\n            return expr.arg;\n        }\n\n        public static rewrite(expr: SQExpr): SQExpr {\n            debug.assertValue(expr, 'expr');\n\n            return expr.accept(SQExprRemoveAggregateRewriter.instance);\n        }\n    }\n\n    class SQExprRemoveEntityVariablesRewriter extends SQExprRewriter {\n        private static instance: SQExprRemoveEntityVariablesRewriter = new SQExprRemoveEntityVariablesRewriter();\n\n        public visitEntity(expr: SQEntityExpr): SQExpr {\n            if (expr.variable)\n                return SQExprBuilder.entity(expr.schema, expr.entity);\n\n            return expr;\n        }\n\n        public static rewrite(expr: SQExpr): SQExpr {\n            debug.assertValue(expr, 'expr');\n\n            return expr.accept(SQExprRemoveEntityVariablesRewriter.instance);\n        }\n    }\n}","/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved. \n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *   \n *  The above copyright notice and this permission notice shall be included in \n *  all copies or substantial portions of the Software.\n *   \n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\n\nmodule powerbi.data {\n    import StringExtensions = jsCommon.StringExtensions;\n\n    export module SQExprUtils {\n        /** Returns an array of supported aggregates for a given expr and role. */\n        export function getSupportedAggregates(\n            expr: SQExpr,\n            schema: FederatedConceptualSchema): QueryAggregateFunction[] {\n            let emptyList: QueryAggregateFunction[] = [];\n\n            let metadata = getMetadataForUnderlyingType(expr, schema);\n\n            // don't use expr.validate as validate will be using this function and we end up in a recursive loop\n            if (!metadata)\n                return emptyList;\n\n            let valueType = metadata.type,\n                fieldKind = metadata.kind,\n                isPropertyIdentity = metadata.idOnEntityKey,\n                Agg = QueryAggregateFunction; // alias\n\n            if (!valueType)\n                return emptyList;\n\n            // Cannot aggregate on model measures\n            if (fieldKind === FieldKind.Measure)\n                return emptyList;\n\n            if (valueType.numeric || valueType.integer) {\n                let aggregates = [Agg.Sum, Agg.Avg, Agg.Min, Agg.Max, Agg.Count, Agg.CountNonNull, Agg.StandardDeviation, Agg.Variance];\n                let fieldExpr = SQExprConverter.asFieldPattern(expr);\n                let fieldExprItem = FieldExprPattern.toFieldExprEntityItemPattern(fieldExpr);\n\n                let currentSchema = schema.schema(fieldExprItem.schema);\n                if (currentSchema.capabilities.supportsMedian)\n                    aggregates.push(Agg.Median);\n                return aggregates;\n            } else if (valueType.text || valueType.bool || valueType.dateTime) {\n                // The supported aggregation types for an identity field are restricted to 'Count Non-Null' (e.g. for the field well aggregation options)\n                // but a valid semantic query can return a less-restricted aggregation option which we should honor. (e.g. this results from Q&A)\n                let distinctCountAggExists = SQExprInfo.getAggregate(expr) === Agg.Count;\n                if (isPropertyIdentity && !distinctCountAggExists)\n                    return [Agg.CountNonNull];\n                return [Agg.Count, Agg.CountNonNull];\n            }\n\n            debug.assertFail(\"Unexpected expr or role.\");\n            return emptyList;\n        }\n\n        export function isSupportedAggregate(\n            expr: SQExpr,\n            schema: FederatedConceptualSchema,\n            aggregate: QueryAggregateFunction): boolean {\n            let supportedAggregates = getSupportedAggregates(expr, schema);\n            return _.contains(supportedAggregates, aggregate);\n        }\n\n        export function indexOfExpr(items: SQExpr[], searchElement: SQExpr): number {\n            debug.assertValue(items, 'items');\n            debug.assertValue(searchElement, 'searchElement');\n\n            for (let i = 0, len = items.length; i < len; i++) {\n                if (SQExpr.equals(items[i], searchElement))\n                    return i;\n            }\n            return -1;\n        }\n\n        export function sequenceEqual(x: SQExpr[], y: SQExpr[]): boolean {\n            debug.assertValue(x, 'x');\n            debug.assertValue(y, 'y');\n\n            let len = x.length;\n            if (len !== y.length)\n                return false;\n\n            for (let i = 0; i < len; i++) {\n                if (!SQExpr.equals(x[i], y[i]))\n                    return false;\n            }\n\n            return true;\n        }\n        \n        export function uniqueName(namedItems: NamedSQExpr[], expr: SQExpr, exprDefaultName?: string): string {\n            debug.assertValue(namedItems, 'namedItems');\n\n            // Determine all names\n            let names: { [name: string]: boolean } = {};\n            for (let i = 0, len = namedItems.length; i < len; i++)\n                names[namedItems[i].name] = true;\n\n            return StringExtensions.findUniqueName(names, exprDefaultName || defaultName(expr));\n        }\n\n        /** Generates a default expression name  */\n        export function defaultName(expr: SQExpr, fallback: string = 'select'): string {\n            if (!expr)\n                return fallback;\n\n            return expr.accept(SQExprDefaultNameGenerator.instance, fallback);\n        }\n\n        /** Gets a value indicating whether the expr is a model measure or an aggregate. */\n        export function isMeasure(expr: SQExpr): boolean {\n            debug.assertValue(expr, 'expr');\n\n            return expr.accept(IsMeasureVisitor.instance);\n        }\n\n        /** Gets a value indicating whether the expr is an AnyValue or equals comparison to AnyValue*/\n        export function isAnyValue(expr: SQExpr): boolean {\n            debug.assertValue(expr, 'expr');\n\n            return expr.accept(IsAnyValueVisitor.instance);\n        }\n\n        /** Gets a value indicating whether the expr is a DefaultValue or equals comparison to DefaultValue*/\n        export function isDefaultValue(expr: SQExpr): boolean {\n            debug.assertValue(expr, 'expr');\n\n            return expr.accept(IsDefaultValueVisitor.instance);\n        }\n\n        export function discourageAggregation(expr: SQExpr, schema: FederatedConceptualSchema): boolean {\n            let capabilities = getSchemaCapabilities(expr, schema);\n            return capabilities && capabilities.discourageQueryAggregateUsage;\n        }\n\n        export function getAggregateBehavior(expr: SQExpr, schema: FederatedConceptualSchema): ConceptualAggregateBehavior {\n            debug.assertValue(expr, 'expr');\n            debug.assertValue(schema, 'schema');\n\n            let column = getConceptualColumn(expr, schema);\n            if (column)\n                return column.aggregateBehavior;\n        }\n\n        export function getSchemaCapabilities(expr: SQExpr, schema: FederatedConceptualSchema): ConceptualCapabilities {\n            debug.assertValue(expr, 'expr');\n            debug.assertValue(schema, 'schema');\n\n            let field = SQExprConverter.asFieldPattern(expr);\n            if (!field)\n                return;\n\n            let fieldExprItem = FieldExprPattern.toFieldExprEntityItemPattern(field);\n            let conceptualSchema = schema.schema(fieldExprItem.schema);\n            if (conceptualSchema)\n                return conceptualSchema.capabilities;\n        }\n\n        export function getKpiMetadata(expr: SQExpr, schema: FederatedConceptualSchema): DataViewKpiColumnMetadata {\n            let kpiStatusProperty = getKpiStatusProperty(expr, schema);\n            if (kpiStatusProperty)\n                return kpiStatusProperty.kpiValue.measure.kpi.statusMetadata;\n\n            let kpiTrendProperty = getKpiTrendProperty(expr, schema);\n            if (kpiTrendProperty)\n                return kpiTrendProperty.kpiValue.measure.kpi.trendMetadata;\n        }\n\n        function getKpiStatusProperty(expr: SQExpr, schema: FederatedConceptualSchema): ConceptualProperty {\n            let property = expr.getConceptualProperty(schema);\n            if (!property)\n                return;\n\n            let kpiValue = property.kpiValue;\n            if (kpiValue && kpiValue.measure.kpi.status === property)\n                return property;\n        }\n\n        function getKpiTrendProperty(expr: SQExpr, schema: FederatedConceptualSchema): ConceptualProperty {\n            let property = expr.getConceptualProperty(schema);\n            if (!property)\n                return;\n\n            let kpiValue = property.kpiValue;\n            if (kpiValue && kpiValue.measure.kpi.trend === property)\n                return property;\n        }\n\n        function getMetadataForUnderlyingType(expr: SQExpr, schema: FederatedConceptualSchema): SQExprMetadata {\n            // Unwrap the aggregate (if the expr has one), and look at the underlying type.\n            let metadata = SQExprBuilder.removeAggregate(expr).getMetadata(schema);\n\n            if (!metadata)\n                metadata = expr.getMetadata(schema);\n\n            return metadata;\n        }\n\n        export function getDefaultValue(fieldSQExpr: SQExpr, schema: FederatedConceptualSchema): SQConstantExpr {\n            let column = getConceptualColumn(fieldSQExpr, schema);\n            if (column)\n                return column.defaultValue;\n        }\n\n        function getConceptualColumn(fieldSQExpr: SQExpr, schema: FederatedConceptualSchema): ConceptualColumn {\n            if (!fieldSQExpr || !schema)\n                return;\n\n            let sqField = SQExprConverter.asFieldPattern(fieldSQExpr);\n            if (!sqField)\n                return;\n\n            let column: FieldExprPropertyPattern = sqField.column;\n\n            if (column) {\n                if (schema.schema(column.schema) && sqField.column.name) {\n                    let property = schema.schema(column.schema).findProperty(column.entity, sqField.column.name);\n\n                    if (property)\n                        return property.column;\n                }\n            }\n            else {\n                let hierarchyLevelField: FieldExprHierarchyLevelPattern = sqField.hierarchyLevel;\n                if (hierarchyLevelField) {\n                    let fieldExprItem = FieldExprPattern.toFieldExprEntityItemPattern(sqField);\n                    let schemaName = fieldExprItem.schema;\n                    if (schema.schema(schemaName)) {\n                        let hierarchy = schema.schema(schemaName)\n                            .findHierarchy(fieldExprItem.entity, hierarchyLevelField.name);\n\n                        if (hierarchy) {\n                            let hierarchyLevel: ConceptualHierarchyLevel = hierarchy.levels.withName(hierarchyLevelField.level);\n                            if (hierarchyLevel && hierarchyLevel.column)\n                                return hierarchyLevel.column.column;\n                        }\n                    }\n                }\n            }\n        }\n\n        export function getDefaultValues(fieldSQExprs: SQExpr[], schema: FederatedConceptualSchema): SQConstantExpr[] {\n            if (_.isEmpty(fieldSQExprs) || !schema)\n                return;\n            let result: SQConstantExpr[] = [];\n            for (let sqExpr of fieldSQExprs) {\n                let defaultValue = getDefaultValue(sqExpr, schema);\n                if (defaultValue)\n                    result.push(defaultValue);\n            }\n            return result;\n        }\n\n        /** Return compare or and expression for key value pairs. */\n        export function getDataViewScopeIdentityComparisonExpr(fieldsExpr: SQExpr[], values: SQConstantExpr[]): SQExpr {\n            debug.assert(fieldsExpr.length === values.length, \"fileds and values need to be the same size\");\n\n            let compareExprs: SQCompareExpr[] = [];\n            for (let i = 0; i < fieldsExpr.length; i++) {\n                compareExprs.push(SQExprBuilder.compare(QueryComparisonKind.Equal, fieldsExpr[i], values[i]));\n            }\n\n            if (_.isEmpty(compareExprs))\n                return;\n\n            let resultExpr: SQExpr;\n            for (let compareExpr of compareExprs) {\n                resultExpr = SQExprBuilder.and(resultExpr, compareExpr);\n            }\n\n            return resultExpr;\n        }\n\n        export function getActiveTablesNames(queryDefn: data.SemanticQuery): string[] {\n            let tables: string[] = [];\n            if (queryDefn) {\n                let selectedItems = queryDefn.from();\n                if (selectedItems !== undefined) {\n                    for (let key of selectedItems.keys()) {\n                        let entityObj = selectedItems.entity(key);\n                        if (tables.indexOf(entityObj.entity) < 0)\n                            tables.push(entityObj.entity);\n                    }\n                }\n            }\n            return tables;\n        }\n\n        class SQExprDefaultNameGenerator extends DefaultSQExprVisitorWithArg<string, string> {\n            public static instance: SQExprDefaultNameGenerator = new SQExprDefaultNameGenerator();\n\n            public visitEntity(expr: SQEntityExpr): string {\n                return expr.entity;\n            }\n\n            public visitColumnRef(expr: SQColumnRefExpr): string {\n                return expr.source.accept(this) + '.' + expr.ref;\n            }\n\n            public visitMeasureRef(expr: SQMeasureRefExpr, fallback: string): string {\n                return expr.source.accept(this) + '.' + expr.ref;\n            }\n\n            public visitAggr(expr: SQAggregationExpr, fallback: string): string {\n                return QueryAggregateFunction[expr.func] + '(' + expr.arg.accept(this) + ')';\n            }\n\n            public visitConstant(expr: SQConstantExpr): string {\n                return 'const';\n            }\n\n            public visitDefault(expr: SQExpr, fallback: string): string {\n                return fallback || 'expr';\n            }\n        }\n\n        class IsMeasureVisitor extends DefaultSQExprVisitor<boolean> {\n            public static instance: IsMeasureVisitor = new IsMeasureVisitor();\n\n            public visitMeasureRef(expr: SQMeasureRefExpr): boolean {\n                return true;\n            }\n\n            public visitAggr(expr: SQAggregationExpr): boolean {\n                return true;\n            }\n\n            public visitDefault(expr: SQExpr): boolean {\n                return false;\n            }\n        }\n\n        class IsDefaultValueVisitor extends DefaultSQExprVisitor<boolean> {\n            public static instance: IsDefaultValueVisitor = new IsDefaultValueVisitor();\n\n            public visitCompare(expr: SQCompareExpr): boolean {\n                if (expr.comparison !== QueryComparisonKind.Equal)\n                    return false;\n\n                return expr.right.accept(this);\n            }\n\n            public visitAnd(expr: SQAndExpr): boolean {\n                return expr.left.accept(this) && expr.right.accept(this);\n            }\n\n            public visitDefaultValue(expr: SQDefaultValueExpr): boolean {\n                return true;\n            }\n\n            public visitDefault(expr: SQExpr): boolean {\n                return false;\n            }\n        }\n\n        class IsAnyValueVisitor extends DefaultSQExprVisitor<boolean> {\n            public static instance: IsAnyValueVisitor = new IsAnyValueVisitor();\n\n            public visitCompare(expr: SQCompareExpr): boolean {\n                if (expr.comparison !== QueryComparisonKind.Equal)\n                    return false;\n\n                return expr.right.accept(this);\n            }\n\n            public visitAnd(expr: SQAndExpr): boolean {\n                return expr.left.accept(this) && expr.right.accept(this);\n            }\n\n            public visitAnyValue(expr: SQAnyValueExpr): boolean {\n                return true;\n            }\n\n            public visitDefault(expr: SQExpr): boolean {\n                return false;\n            }\n        }\n    }\n}","/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved. \n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *   \n *  The above copyright notice and this permission notice shall be included in \n *  all copies or substantial portions of the Software.\n *   \n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\n\nmodule powerbi.data {\n\n    export class SemanticQueryRewriter {\n        private exprRewriter: ISQExprVisitor<SQExpr>;\n\n        constructor(exprRewriter: ISQExprVisitor<SQExpr>) {\n            this.exprRewriter = exprRewriter;\n        }\n\n        public rewriteFrom(fromValue: SQFrom): SQFrom {\n            let fromContents: { [name: string]: SQFromEntitySource } = {};\n            let originalFrom = fromValue,\n                originalFromKeys = originalFrom.keys();\n            for (let i = 0, len = originalFromKeys.length; i < len; i++) {\n                let keyName = originalFromKeys[i],\n                    originalEntityRef = originalFrom.entity(keyName),\n                    originalEntityExpr = SQExprBuilder.entity(originalEntityRef.schema, originalEntityRef.entity, keyName),\n                    updatedEntityExpr = <SQEntityExpr>originalEntityExpr.accept(this.exprRewriter);\n                \n                fromContents[keyName] = {\n                    schema: updatedEntityExpr.schema,\n                    entity: updatedEntityExpr.entity,\n                };\n            }\n            return new SQFrom(fromContents);\n        }\n\n        public rewriteSelect(selectItems: NamedSQExpr[], from: SQFrom): NamedSQExpr[]{\n            debug.assertValue(selectItems, 'selectItems');\n            debug.assertValue(from, 'from');\n\n            return this.rewriteNamedSQExpressions(selectItems, from);\n        }\n\n        public rewriteGroupBy(groupByitems: NamedSQExpr[], from: SQFrom): NamedSQExpr[] {\n            debug.assertAnyValue(groupByitems, 'groupByitems');\n            debug.assertValue(from, 'from');\n\n            if (_.isEmpty(groupByitems))\n                return;\n\n            return this.rewriteNamedSQExpressions(groupByitems, from);\n        }\n\n        private rewriteNamedSQExpressions(expressions: NamedSQExpr[], from: SQFrom): NamedSQExpr[] {\n            debug.assertValue(expressions, 'expressions');\n\n            return _.map(expressions, item => {\n                return {\n                    name: item.name,\n                    expr: SQExprRewriterWithSourceRenames.rewrite(item.expr.accept(this.exprRewriter), from)\n                };\n            });\n        }\n\n        public rewriteOrderBy(orderByItems: SQSortDefinition[], from: SQFrom): SQSortDefinition[]{\n            debug.assertAnyValue(orderByItems, 'orderByItems');\n            debug.assertValue(from, 'from');\n\n            if (_.isEmpty(orderByItems))\n                return;\n\n            let orderBy: SQSortDefinition[] = [];\n            for (let i = 0, len = orderByItems.length; i < len; i++) {\n                let item = orderByItems[i],\n                    updatedExpr = SQExprRewriterWithSourceRenames.rewrite(item.expr.accept(this.exprRewriter), from);\n                orderBy.push({\n                        direction: item.direction,\n                        expr: updatedExpr,\n                    });\n            }\n\n            return orderBy;\n        }\n\n        public rewriteWhere(whereItems: SQFilter[], from: SQFrom): SQFilter[]{\n            debug.assertAnyValue(whereItems, 'whereItems');\n            debug.assertValue(from, 'from');\n\n            if (_.isEmpty(whereItems))\n                return;\n\n            let where: SQFilter[] = [];\n            for (let i = 0, len = whereItems.length; i < len; i++) {\n                let originalWhere = whereItems[i];\n\n                let updatedWhere: SQFilter = {\n                    condition: SQExprRewriterWithSourceRenames.rewrite(originalWhere.condition.accept(this.exprRewriter), from),\n                };\n\n                if (originalWhere.target)\n                    updatedWhere.target = _.map(originalWhere.target, e => SQExprRewriterWithSourceRenames.rewrite(e.accept(this.exprRewriter), from));\n\n                where.push(updatedWhere);\n            }\n\n            return where;\n        }\n    }\n} ","/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved. \n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *   \n *  The above copyright notice and this permission notice shall be included in \n *  all copies or substantial portions of the Software.\n *   \n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\n\nmodule powerbi.data {\n    import ArrayExtensions = jsCommon.ArrayExtensions;\n    import ArrayNamedItems = jsCommon.ArrayNamedItems;\n\n    export interface NamedSQExpr {\n        name: string;\n        expr: SQExpr;\n    }\n\n    export interface SQFilter {\n        target?: SQExpr[];\n        condition: SQExpr;\n    }\n\n    /** Represents an entity reference in SemanticQuery from. */\n    export interface SQFromEntitySource {\n        entity: string;\n        schema: string;\n    }\n\n    /** Represents a sort over an expression. */\n    export interface SQSortDefinition {\n        expr: SQExpr;\n        direction: SortDirection;\n    }\n\n    export interface QueryFromEnsureEntityResult {\n        name: string;\n        new?: boolean;\n    }\n\n    export interface SQSourceRenames {\n        [from: string]: string;\n    }\n\n    /**\n     * Represents a semantic query that is:\n     * 1) Round-trippable with a JSON QueryDefinition.\n     * 2) Immutable\n     * 3) Long-lived and does not have strong references to a conceptual model (only names).\n     */\n    export class SemanticQuery {\n        private static empty: SemanticQuery;\n        private fromValue: SQFrom;\n        private whereItems: SQFilter[];\n        private orderByItems: SQSortDefinition[];\n        private selectItems: NamedSQExpr[];\n        private groupByItems: NamedSQExpr[];\n\n        constructor(from: SQFrom, where: SQFilter[], orderBy: SQSortDefinition[], select: NamedSQExpr[], groupBy: NamedSQExpr[]) {\n            debug.assertValue(from, 'from');\n            debug.assertValue(select, 'select');\n\n            this.fromValue = from;\n            this.whereItems = where;\n            this.orderByItems = orderBy;\n            this.selectItems = select;\n            this.groupByItems = groupBy;\n        }\n\n        public static create(): SemanticQuery {\n            if (!SemanticQuery.empty)\n                SemanticQuery.empty = new SemanticQuery(new SQFrom(), null, null, [], null);\n\n            return SemanticQuery.empty;\n        }\n\n        private static createWithTrimmedFrom(\n            from: SQFrom,\n            where: SQFilter[],\n            orderBy: SQSortDefinition[],\n            select: NamedSQExpr[],\n            groupBy: NamedSQExpr[]): SemanticQuery {\n\n            let unreferencedKeyFinder = new UnreferencedKeyFinder(from.keys());\n\n            // Where\n            if (where) {\n                for (let i = 0, len = where.length; i < len; i++) {\n                    let filter = where[i];\n\n                    filter.condition.accept(unreferencedKeyFinder);\n\n                    let filterTarget = filter.target;\n                    if (filterTarget) {\n                        for (let j = 0, jlen = filterTarget.length; j < jlen; j++)\n                            if (filterTarget[j])\n                                filterTarget[j].accept(unreferencedKeyFinder);\n                    }\n                }\n            }\n\n            // OrderBy\n            if (orderBy) {\n                for (let i = 0, len = orderBy.length; i < len; i++)\n                    orderBy[i].expr.accept(unreferencedKeyFinder);\n            }\n\n            // Select\n            for (let i = 0, len = select.length; i < len; i++)\n                select[i].expr.accept(unreferencedKeyFinder);\n\n            // GroupBy\n            if (groupBy) {\n                for (let i = 0, len = groupBy.length; i < len; i++)\n                    groupBy[i].expr.accept(unreferencedKeyFinder);\n            }\n\n            let unreferencedKeys = unreferencedKeyFinder.result();\n            for (let i = 0, len = unreferencedKeys.length; i < len; i++)\n                from.remove(unreferencedKeys[i]);\n\n            return new SemanticQuery(from, where, orderBy, select, groupBy);\n        }\n\n        public from(): SQFrom {\n            return this.fromValue.clone();\n        }\n\n        /** Returns a query equivalent to this, with the specified selected items. */\n        select(values: NamedSQExpr[]): SemanticQuery;\n        /** Gets the items being selected in this query. */\n        select(): ArrayNamedItems<NamedSQExpr>;\n        public select(values?: NamedSQExpr[]): any {\n            if (_.isEmpty(arguments))\n                return this.getSelect();\n\n            return this.setSelect(values);\n        }\n\n        private getSelect(): ArrayNamedItems<NamedSQExpr> {\n            return SemanticQuery.createNamedExpressionArray(this.selectItems);\n        }\n\n        private static createNamedExpressionArray(items: NamedSQExpr[]): ArrayNamedItems<NamedSQExpr> {\n            return ArrayExtensions.extendWithName<NamedSQExpr>(_.map(items, s => {\n                return {\n                    name: s.name,\n                    expr: s.expr,\n                };\n            }));\n        }\n\n        private setSelect(values: NamedSQExpr[]): SemanticQuery {\n            let from = this.fromValue.clone();\n            let selectItems = SemanticQuery.rewriteExpressionsWithSourceRenames(values, from);\n            return SemanticQuery.createWithTrimmedFrom(from, this.whereItems, this.orderByItems, selectItems, this.groupByItems);\n        }\n\n        private static rewriteExpressionsWithSourceRenames(values: NamedSQExpr[], from: SQFrom): NamedSQExpr[] {\n            let items: NamedSQExpr[] = [];\n\n            for (let i = 0, len = values.length; i < len; i++) {\n                let value = values[i];\n                items.push({\n                    name: value.name,\n                    expr: SQExprRewriterWithSourceRenames.rewrite(value.expr, from)\n                });\n            }\n\n            return items;\n        } \n\n        /** Removes the given expression from the select. */\n        public removeSelect(expr: SQExpr): SemanticQuery {\n            debug.assertValue(expr, 'expr');\n\n            let originalItems = this.selectItems,\n                selectItems: NamedSQExpr[] = [];\n            for (let i = 0, len = originalItems.length; i < len; i++) {\n                let originalExpr = originalItems[i];\n                if (SQExpr.equals(originalExpr.expr, expr))\n                    continue;\n\n                selectItems.push(originalExpr);\n            }\n\n            return SemanticQuery.createWithTrimmedFrom(this.fromValue.clone(), this.whereItems, this.orderByItems, selectItems, this.groupByItems);\n        }\n\n        /** Removes the given expression from order by. */\n        public removeOrderBy(expr: SQExpr): SemanticQuery {\n            let sorts = this.orderBy();\n            for (let i = sorts.length - 1; i >= 0; i--) {\n                if (SQExpr.equals(sorts[i].expr, expr))\n                    sorts.splice(i, 1);\n            }\n\n            return SemanticQuery.createWithTrimmedFrom(this.fromValue.clone(), this.whereItems, sorts, this.selectItems, this.groupByItems);\n        }\n\n        public selectNameOf(expr: SQExpr): string {\n            let index = SQExprUtils.indexOfExpr(_.map(this.selectItems, s => s.expr), expr);\n            if (index >= 0)\n                return this.selectItems[index].name;\n        }\n\n        public setSelectAt(index: number, expr: SQExpr): SemanticQuery {\n            debug.assertValue(expr, 'expr');\n\n            if (index >= this.selectItems.length)\n                return;\n\n            let select = this.select(),\n                from = this.fromValue.clone(),\n                originalName = select[index].name;\n            select[index] = {\n                name: originalName,\n                expr: SQExprRewriterWithSourceRenames.rewrite(expr, from)\n            };\n\n            return SemanticQuery.createWithTrimmedFrom(from, this.whereItems, this.orderByItems, select, this.groupByItems);\n        }\n\n        /** Adds a the expression to the select clause. */\n        public addSelect(expr: SQExpr, exprName?: string): SemanticQuery {\n            debug.assertValue(expr, 'expr');\n\n            let selectItems = this.select(),\n                from = this.fromValue.clone();\n            selectItems.push({\n                name: SQExprUtils.uniqueName(selectItems, expr, exprName),\n                expr: SQExprRewriterWithSourceRenames.rewrite(expr, from)\n            });\n\n            return SemanticQuery.createWithTrimmedFrom(from, this.whereItems, this.orderByItems, selectItems, this.groupByItems);\n        }\n\n        /** Returns a query equivalent to this, with the specified groupBy items. */\n        groupBy(values: NamedSQExpr[]): SemanticQuery;\n        /** Gets the groupby items in this query. */\n        groupBy(): ArrayNamedItems<NamedSQExpr>;\n        public groupBy(values?: NamedSQExpr[]): any {\n            if (_.isEmpty(arguments))\n                return this.getGroupBy();\n\n            return this.setGroupBy(values);\n        }\n\n        private getGroupBy(): ArrayNamedItems<NamedSQExpr> {\n            return SemanticQuery.createNamedExpressionArray(this.groupByItems);\n        }\n\n        private setGroupBy(values: NamedSQExpr[]): SemanticQuery {\n            let from = this.fromValue.clone();\n            let groupByItems = SemanticQuery.rewriteExpressionsWithSourceRenames(values, from);\n            return SemanticQuery.createWithTrimmedFrom(from, this.whereItems, this.orderByItems, this.selectItems, groupByItems);\n        }\n\n        /** Gets or sets the sorting for this query. */\n        orderBy(values: SQSortDefinition[]): SemanticQuery;\n        orderBy(): SQSortDefinition[];\n\n        public orderBy(values?: SQSortDefinition[]): any {\n            if (_.isEmpty(arguments))\n                return this.getOrderBy();\n\n            return this.setOrderBy(values);\n        }\n\n        private getOrderBy(): SQSortDefinition[] {\n            let result: SQSortDefinition[] = [];\n\n            let orderBy = this.orderByItems;\n            if (orderBy) {\n                for (let i = 0, len = orderBy.length; i < len; i++) {\n                    let clause = orderBy[i];\n\n                    result.push({\n                        expr: clause.expr,\n                        direction: clause.direction,\n                    });\n                }\n            }\n\n            return result;\n        }\n\n        private setOrderBy(values: SQSortDefinition[]): SemanticQuery {\n            debug.assertValue(values, 'values');\n\n            let updatedOrderBy: SQSortDefinition[] = [],\n                from = this.fromValue.clone();\n            for (let i = 0, len = values.length; i < len; i++) {\n                let clause = values[i];\n                updatedOrderBy.push({\n                    expr: SQExprRewriterWithSourceRenames.rewrite(clause.expr, from),\n                    direction: clause.direction,\n                });\n            }\n\n            return SemanticQuery.createWithTrimmedFrom(from, this.whereItems, updatedOrderBy, this.selectItems, this.groupByItems);\n        }\n\n        /** Gets or sets the filters for this query. */\n        where(values: SQFilter[]): SemanticQuery;\n        where(): SQFilter[];\n\n        public where(values?: SQFilter[]): any {\n            if (_.isEmpty(arguments))\n                return this.getWhere();\n\n            return this.setWhere(values);\n        }\n\n        private getWhere(): SQFilter[] {\n            let result: SQFilter[] = [];\n\n            let whereItems = this.whereItems;\n            if (whereItems) {\n                for (let i = 0, len = whereItems.length; i < len; i++)\n                    result.push(whereItems[i]);\n            }\n\n            return result;\n        }\n\n        private setWhere(values: SQFilter[]): SemanticQuery {\n            debug.assertValue(values, 'values');\n\n            let updatedWhere: SQFilter[] = [],\n                from = this.fromValue.clone();\n            for (let i = 0, len = values.length; i < len; i++) {\n                let filter = values[i];\n                let updatedFilter: SQFilter = {\n                    condition: SQExprRewriterWithSourceRenames.rewrite(filter.condition, from),\n                };\n\n                let filterTarget = filter.target;\n                if (filterTarget) {\n                    updatedFilter.target = [];\n                    for (let j = 0, jlen = filterTarget.length; j < jlen; j++)\n                        if (filterTarget[j]) {\n                            let updatedTarget = SQExprRewriterWithSourceRenames.rewrite(filterTarget[j], from);\n                            updatedFilter.target.push(updatedTarget);\n                        }\n                }\n\n                updatedWhere.push(updatedFilter);\n            }\n\n            return SemanticQuery.createWithTrimmedFrom(from, updatedWhere, this.orderByItems, this.selectItems, this.groupByItems);\n        }\n\n        public addWhere(filter: SemanticFilter): SemanticQuery {\n            debug.assertValue(filter, 'filter');\n\n            let updatedWhere: SQFilter[] = this.where(),\n                incomingWhere: SQFilter[] = filter.where(),\n                from = this.fromValue.clone();\n\n            for (let i = 0, len = incomingWhere.length; i < len; i++) {\n                let clause = incomingWhere[i];\n\n                let updatedClause: SQFilter = {\n                    condition: SQExprRewriterWithSourceRenames.rewrite(clause.condition, from),\n                };\n\n                if (clause.target)\n                    updatedClause.target = _.map(clause.target, t => SQExprRewriterWithSourceRenames.rewrite(t, from));\n\n                updatedWhere.push(updatedClause);\n            }\n\n            return SemanticQuery.createWithTrimmedFrom(from, updatedWhere, this.orderByItems, this.selectItems, this.groupByItems);\n        }\n\n        public rewrite(exprRewriter: ISQExprVisitor<SQExpr>): SemanticQuery {\n            let rewriter = new SemanticQueryRewriter(exprRewriter);\n            let from = rewriter.rewriteFrom(this.fromValue);\n            let where = rewriter.rewriteWhere(this.whereItems, from);\n            let orderBy = rewriter.rewriteOrderBy(this.orderByItems, from);\n            let select = rewriter.rewriteSelect(this.selectItems, from);\n            let groupBy = rewriter.rewriteGroupBy(this.groupByItems, from);\n\n            return SemanticQuery.createWithTrimmedFrom(from, where, orderBy, select, groupBy);\n        }\n    }\n\n    /** Represents a semantic filter condition.  Round-trippable with a JSON FilterDefinition.  Instances of this class are immutable. */\n    export class SemanticFilter implements ISemanticFilter {\n        private fromValue: SQFrom;\n        private whereItems: SQFilter[];\n\n        constructor(from: SQFrom, where: SQFilter[]) {\n            debug.assertValue(from, 'from');\n            debug.assertValue(where, 'where');\n\n            this.fromValue = from;\n            this.whereItems = where;\n        }\n\n        public static fromSQExpr(contract: SQExpr): SemanticFilter {\n            debug.assertValue(contract, 'contract');\n\n            let from = new SQFrom();\n\n            let rewrittenContract = SQExprRewriterWithSourceRenames.rewrite(contract, from);\n            // DEVNOTE targets of some filters are visual specific and will get resolved only during query generation.\n            //         Thus not setting a target here.\n            let where: SQFilter[] = [{\n                condition: rewrittenContract\n            }];\n\n            return new SemanticFilter(from, where);\n        }\n\n        public static getDefaultValueFilter(fieldSQExprs: SQExpr | SQExpr[]): SemanticFilter {\n            return SemanticFilter.getDataViewScopeIdentityComparisonFilters(fieldSQExprs, SQExprBuilder.defaultValue());\n        }\n\n        public static getAnyValueFilter(fieldSQExprs: SQExpr | SQExpr[]): SemanticFilter {\n            return SemanticFilter.getDataViewScopeIdentityComparisonFilters(fieldSQExprs, SQExprBuilder.anyValue());\n        }\n\n        private static getDataViewScopeIdentityComparisonFilters(fieldSQExprs: SQExpr | SQExpr[], value: SQExpr): SemanticFilter {\n            debug.assertValue(fieldSQExprs, 'fieldSQExprs');\n            debug.assertValue(value, 'value');\n\n            if (fieldSQExprs instanceof Array) {\n                let values: SQConstantExpr[] = Array.apply(null, Array(fieldSQExprs.length)).map(() => { return value; });\n                return SemanticFilter.fromSQExpr(SQExprUtils.getDataViewScopeIdentityComparisonExpr(<SQExpr[]>fieldSQExprs, values));\n            }\n\n            return SemanticFilter.fromSQExpr(SQExprBuilder.equal(<SQExpr>fieldSQExprs, value));\n        }\n\n        public from(): SQFrom {\n            return this.fromValue.clone();\n        }\n\n        public conditions(): SQExpr[] {\n            let expressions: SQExpr[] = [];\n\n            let where = this.whereItems;\n            for (let i = 0, len = where.length; i < len; i++) {\n                let filter = where[i];\n                expressions.push(filter.condition);\n            }\n            return expressions;\n        }\n\n        public where(): SQFilter[] {\n            let result: SQFilter[] = [];\n\n            let whereItems = this.whereItems;\n            for (let i = 0, len = whereItems.length; i < len; i++)\n                result.push(whereItems[i]);\n\n            return result;\n        }\n\n        public rewrite(exprRewriter: ISQExprVisitor<SQExpr>): SemanticFilter {\n            let rewriter = new SemanticQueryRewriter(exprRewriter);\n            let from = rewriter.rewriteFrom(this.fromValue);\n            let where = rewriter.rewriteWhere(this.whereItems, from);\n\n            return new SemanticFilter(from, where);\n        }\n\n        public validate(schema: FederatedConceptualSchema, errors?: SQExprValidationError[]): SQExprValidationError[] {\n            let validator = new SQExprValidationVisitor(schema, errors);\n            this.rewrite(validator);\n            return validator.errors;\n        }\n\n        /** Merges a list of SemanticFilters into one. */\n        public static merge(filters: SemanticFilter[]): SemanticFilter {\n            if (_.isEmpty(filters))\n                return null;\n\n            if (filters.length === 1)\n                return filters[0];\n\n            let firstFilter = filters[0];\n            let from = firstFilter.from(),\n                where: SQFilter[] = ArrayExtensions.take(firstFilter.whereItems, firstFilter.whereItems.length);\n\n            for (let i = 1, len = filters.length; i < len; i++)\n                SemanticFilter.applyFilter(filters[i], from, where);\n\n            return new SemanticFilter(from, where);\n        }\n\n        public static isDefaultFilter(filter: SemanticFilter): boolean {\n            if (!filter || filter.where().length !== 1)\n                return false;\n\n            return SQExprUtils.isDefaultValue(filter.where()[0].condition);\n        }\n\n        public static isAnyFilter(filter: SemanticFilter): boolean {\n            if (!filter || filter.where().length !== 1)\n                return false;\n\n            return SQExprUtils.isAnyValue(filter.where()[0].condition);\n        }\n\n        public static isSameFilter(leftFilter: SemanticFilter, rightFilter: SemanticFilter): boolean {\n            if (jsCommon.JsonComparer.equals<SemanticFilter>(leftFilter, rightFilter)) {\n                return !((SemanticFilter.isDefaultFilter(leftFilter) && SemanticFilter.isAnyFilter(rightFilter))\n                    || (SemanticFilter.isAnyFilter(leftFilter) && SemanticFilter.isDefaultFilter(rightFilter)));\n            }\n            return false;\n        }\n\n        private static applyFilter(filter: SemanticFilter, from: SQFrom, where: SQFilter[]): void {\n            debug.assertValue(filter, 'filter');\n            debug.assertValue(from, 'from');\n            debug.assertValue(where, 'where');\n\n            // Where\n            let filterWhereItems = filter.whereItems;\n            for (let i = 0; i < filterWhereItems.length; i++) {\n                let filterWhereItem = filterWhereItems[i];\n\n                let updatedWhereItem: SQFilter = {\n                    condition: SQExprRewriterWithSourceRenames.rewrite(filterWhereItem.condition, from),\n                };\n\n                if (filterWhereItem.target)\n                    updatedWhereItem.target = _.map(filterWhereItem.target, e => SQExprRewriterWithSourceRenames.rewrite(e, from));\n\n                where.push(updatedWhereItem);\n            }\n        }\n    }\n\n    /** Represents a SemanticQuery/SemanticFilter from clause. */\n    export class SQFrom {\n        private items: { [name: string]: SQFromEntitySource };\n\n        constructor(items?: { [name: string]: SQFromEntitySource }) {\n            this.items = items || {};\n        }\n\n        public keys(): string[] {\n            return Object.keys(this.items);\n        }\n\n        public entity(key: string): SQFromEntitySource {\n            return this.items[key];\n        }\n\n        public ensureEntity(entity: SQFromEntitySource, desiredVariableName?: string): QueryFromEnsureEntityResult {\n            debug.assertValue(entity, 'entity');\n\n            // 1) Reuse a reference to the entity among the already referenced\n            let keys = this.keys();\n            for (let i = 0, len = keys.length; i < len; i++) {\n                let key = keys[i],\n                    item = this.items[key];\n                if (item && entity.entity === item.entity && entity.schema === item.schema)\n                    return { name: key };\n            }\n\n            // 2) Add a reference to the entity\n            let candidateName = desiredVariableName || this.candidateName(entity.entity),\n                uniqueName: string = candidateName,\n                i = 2;\n            while (this.items[uniqueName]) {\n                uniqueName = candidateName + i++;\n            }\n\n            this.items[uniqueName] = entity;\n            return { name: uniqueName, new: true };\n        }\n\n        public remove(key: string): void {\n            delete this.items[key];\n        }\n\n        /** Converts the entity name into a short reference name.  Follows the Semantic Query convention of a short name. */\n        private candidateName(ref: string): string {\n            debug.assertValue(ref, 'ref');\n\n            let idx = ref.lastIndexOf('.');\n            if (idx >= 0 && (idx !== ref.length - 1))\n                ref = ref.substr(idx + 1);\n\n            return ref.substring(0, 1).toLowerCase();\n        }\n\n        public clone(): SQFrom {\n            // NOTE: consider deprecating this method and instead making QueryFrom be CopyOnWrite (currently we proactively clone).\n            let cloned = new SQFrom();\n\n            // NOTE: we use extend rather than prototypical inheritance on items because we use Object.keys.\n            $.extend(cloned.items, this.items);\n\n            return cloned;\n        }\n    }\n\n    export class SQExprRewriterWithSourceRenames extends SQExprRewriter {\n        private renames: SQSourceRenames;\n\n        constructor(renames: SQSourceRenames) {\n            debug.assertValue(renames, 'renames');\n\n            super();\n            this.renames = renames;\n        }\n\n        public visitEntity(expr: SQEntityExpr): SQExpr {\n            let updatedName = this.renames[expr.entity];\n\n            if (updatedName)\n                return new SQEntityExpr(expr.schema, expr.entity, updatedName);\n\n            return super.visitEntity(expr);\n        }\n\n        public rewriteFilter(filter: SQFilter): SQFilter {\n            debug.assertValue(filter, 'filter');\n\n            let updatedTargets = undefined;\n            if (filter.target)\n                updatedTargets = this.rewriteArray(filter.target);\n\n            let updatedCondition = filter.condition.accept(this);\n\n            if (filter.condition === updatedCondition && filter.target === updatedTargets)\n                return filter;\n\n            let updatedFilter: SQFilter = {\n                condition: updatedCondition,\n            };\n\n            if (updatedTargets)\n                updatedFilter.target = updatedTargets;\n\n            return updatedFilter;\n        }\n\n        public rewriteArray(exprs: SQExpr[]): SQExpr[] {\n            debug.assertValue(exprs, 'exprs');\n\n            let updatedExprs: SQExpr[];\n\n            for (let i = 0, len = exprs.length; i < len; i++) {\n                let expr = exprs[i],\n                    rewrittenExpr = expr.accept(this);\n\n                if (expr !== rewrittenExpr && !updatedExprs)\n                    updatedExprs = ArrayExtensions.take(exprs, i);\n\n                if (updatedExprs)\n                    updatedExprs.push(rewrittenExpr);\n            }\n\n            return updatedExprs || exprs;\n        }\n\n        public static rewrite(expr: SQExpr, from: SQFrom): SQExpr {\n            debug.assertValue(expr, 'expr');\n            debug.assertValue(from, 'from');\n\n            let renames = QuerySourceRenameDetector.run(expr, from);\n            let rewriter = new SQExprRewriterWithSourceRenames(renames);\n            return expr.accept(rewriter);\n        }\n    }\n\n    /** Responsible for updating a QueryFrom based on SQExpr references. */\n    class QuerySourceRenameDetector extends DefaultSQExprVisitorWithTraversal {\n        private from: SQFrom;\n        private renames: SQSourceRenames;\n\n        public static run(expr: SQExpr, from: SQFrom): SQSourceRenames {\n            let detector = new QuerySourceRenameDetector(from);\n            expr.accept(detector);\n\n            return detector.renames;\n        }\n\n        constructor(from: SQFrom) {\n            debug.assertValue(from, 'from');\n            super();\n\n            this.from = from;\n            this.renames = {};\n        }\n\n        public visitEntity(expr: SQEntityExpr): void {\n            // TODO: Renames must take the schema into account, not just entity set name.\n            let existingEntity = this.from.entity(expr.variable);\n            if (existingEntity && existingEntity.schema === expr.schema && existingEntity.entity === expr.entity)\n                return;\n\n            let actualEntity = this.from.ensureEntity(\n                {\n                    schema: expr.schema,\n                    entity: expr.entity,\n                },\n                expr.variable);\n\n            this.renames[expr.entity] = actualEntity.name;\n        }\n    }\n\n    /** Visitor for finding unreferenced sources. */\n    class UnreferencedKeyFinder extends DefaultSQExprVisitorWithTraversal {\n        private keys: string[];\n\n        constructor(keys: string[]) {\n            debug.assertValue(keys, 'keys');\n\n            super();\n            this.keys = keys;\n        }\n\n        public visitEntity(expr: SQEntityExpr): void {\n            let index = this.keys.indexOf(expr.variable);\n            if (index >= 0)\n                this.keys.splice(index, 1);\n        }\n\n        public result(): string[] {\n            return this.keys;\n        }\n    }\n}","/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved. \n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *   \n *  The above copyright notice and this permission notice shall be included in \n *  all copies or substantial portions of the Software.\n *   \n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\n\nmodule powerbi.data {\n    import DataViewTransform = powerbi.data.DataViewTransform;\n    import SQExprBuilder = powerbi.data.SQExprBuilder;\n\n    /** Utility for creating a DataView from columns of data. */\n    export interface IDataViewBuilderCategorical {\n        withCategory(options: DataViewBuilderCategoryColumnOptions): IDataViewBuilderCategorical;\n        withCategories(categories: DataViewCategoryColumn[]): IDataViewBuilderCategorical;\n        withValues(options: DataViewBuilderValuesOptions): IDataViewBuilderCategorical;\n        withGroupedValues(options: DataViewBuilderGroupedValuesOptions): IDataViewBuilderCategorical;\n\n        build(): DataView;\n    }\n\n    export interface DataViewBuilderColumnOptions {\n        source: DataViewMetadataColumn;\n    }\n\n    export interface DataViewBuilderCategoryColumnOptions extends DataViewBuilderColumnOptions {\n        values: PrimitiveValue[];\n        identityFrom: DataViewBuilderColumnIdentitySource;\n    }\n\n    export interface DataViewBuilderValuesOptions {\n        columns: DataViewBuilderValuesColumnOptions[];\n    }\n\n    export interface DataViewBuilderGroupedValuesOptions {\n        groupColumn: DataViewBuilderCategoryColumnOptions;\n        valueColumns: DataViewBuilderColumnOptions[];\n        data: DataViewBuilderSeriesData[][];\n    }\n\n    /** Indicates the source set of identities. */\n    export interface DataViewBuilderColumnIdentitySource {\n        fields: SQExpr[];\n        identities?: DataViewScopeIdentity[];\n    }\n\n    export interface DataViewBuilderValuesColumnOptions extends DataViewBuilderColumnOptions, DataViewBuilderSeriesData {\n    }\n\n    export interface DataViewBuilderSeriesData {\n        values: PrimitiveValue[];\n        highlights?: PrimitiveValue[];\n\n        /** Client-computed maximum value for a column. */\n        maxLocal?: any;\n\n        /** Client-computed maximum value for a column. */\n        minLocal?: any;\n    }\n\n    export function createCategoricalDataViewBuilder(): IDataViewBuilderCategorical {\n        return new CategoricalDataViewBuilder();\n    }\n\n    interface ColumnMetadata {\n        column: DataViewMetadataColumn;\n        identityFrom: DataViewBuilderColumnIdentitySource;\n        values: PrimitiveValue[];\n    }\n\n    class CategoricalDataViewBuilder implements IDataViewBuilderCategorical {\n        private categories: DataViewCategoryColumn[];\n        private measureColumns: DataViewMetadataColumn[];\n        private hasDynamicSeries: boolean;\n        private dynamicSeriesMetadata: ColumnMetadata;\n        private columnIndex: number;\n        private data: DataViewBuilderValuesColumnOptions[]| DataViewBuilderSeriesData[][];\n\n        constructor() {\n            this.categories = [];\n            this.measureColumns = [];\n            this.columnIndex = 0;\n        }\n\n        public withCategory(options: DataViewBuilderCategoryColumnOptions): IDataViewBuilderCategorical {\n            let categoryValues = options.values,\n                identityFrom = options.identityFrom,\n                type = options.source.type;\n\n            let categoryColumn: DataViewCategoryColumn = {\n                source: options.source,\n                identityFields: options.identityFrom.fields,\n                identity: options.identityFrom.identities || [],\n                values: categoryValues,\n            };\n\n            if (!options.identityFrom.identities) {\n                for (let categoryIndex = 0, categoryLength = categoryValues.length; categoryIndex < categoryLength; categoryIndex++) {\n                    categoryColumn.identity.push(\n                        getScopeIdentity(identityFrom, categoryIndex, categoryValues[categoryIndex], type));\n                }\n            }\n\n            if (!this.categories)\n                this.categories = [];\n\n            this.categories.push(categoryColumn);\n\n            return this;\n        }\n\n        public withCategories(categories: DataViewCategoryColumn[]): IDataViewBuilderCategorical {\n            if (_.isEmpty(this.categories))\n                this.categories = categories;\n            else\n                Array.prototype.push.apply(this.categories, categories);\n\n            return this;\n        }\n\n        public withValues(options: DataViewBuilderValuesOptions): IDataViewBuilderCategorical {\n            debug.assertValue(options, 'options');\n\n            let columns = options.columns;\n            debug.assertValue(columns, 'columns');\n\n            for (let column of columns) {\n                this.measureColumns.push(column.source);\n            }\n\n            this.data = columns;\n\n            return this;\n        }\n\n        public withGroupedValues(options: DataViewBuilderGroupedValuesOptions): IDataViewBuilderCategorical {\n            debug.assertValue(options, 'options');\n\n            this.hasDynamicSeries = true;\n\n            let groupColumn = options.groupColumn;\n            debug.assertValue(groupColumn, 'groupColumn');\n\n            this.dynamicSeriesMetadata = {\n                column: groupColumn.source,\n                identityFrom: groupColumn.identityFrom,\n                values: groupColumn.values,\n            };\n\n            let valueColumns = options.valueColumns;\n            for (let valueColumn of valueColumns) {\n                this.measureColumns.push(valueColumn.source);\n            }\n\n            this.data = options.data;\n\n            return this;\n        }\n\n        private fillData(dataViewValues: DataViewValueColumns, groups: DataViewMetadataColumn[]) {\n            let categoryColumn = _.first(this.categories);\n            let categoryLength = (categoryColumn && categoryColumn.values) ? categoryColumn.values.length : 1;\n\n            if (this.hasDynamicSeries) {\n                // Dynamic series\n                let data = <DataViewBuilderSeriesData[][]>this.data;\n                for (let seriesIndex = 0; seriesIndex < this.dynamicSeriesMetadata.values.length; seriesIndex++) {\n                    let seriesMeasures = data[seriesIndex];\n                    debug.assert(seriesMeasures.length === this.measureColumns.length, 'seriesMeasures.length === this.measureColumns.length');\n\n                    for (let measureIndex = 0, measuresLen = this.measureColumns.length; measureIndex < measuresLen; measureIndex++) {\n                        let groupIndex = seriesIndex * measuresLen + measureIndex;\n\n                        applySeriesData(dataViewValues[groupIndex], seriesMeasures[measureIndex], categoryLength);\n                    }\n                }\n            }\n            else {\n                // Static series\n                let data = <DataViewBuilderValuesColumnOptions[]>this.data;\n                for (let measureIndex = 0, measuresLen = this.measureColumns.length; measureIndex < measuresLen; measureIndex++) {\n                    applySeriesData(dataViewValues[measureIndex], data[measureIndex], categoryLength);\n                }\n            }\n        }\n\n        public build(): DataView {\n            let metadataColumns: DataViewMetadataColumn[] = [];\n            let categorical: DataViewCategorical = {};\n            let groups: DataViewMetadataColumn[];\n\n            let categoryMetadata = this.categories;\n            let dynamicSeriesMetadata = this.dynamicSeriesMetadata;\n\n            // --- Build metadata columns and value groups ---\n            for (let columnMetadata of categoryMetadata) {\n                pushIfNotExists(metadataColumns, columnMetadata.source);\n            }\n\n            if (this.hasDynamicSeries) {\n                pushIfNotExists(metadataColumns, dynamicSeriesMetadata.column);\n            }\n\n            if (this.hasDynamicSeries) {\n                // Dynamic series\n                categorical.values = DataViewTransform.createValueColumns([], dynamicSeriesMetadata.identityFrom.fields, dynamicSeriesMetadata.column);\n\n                let measures = this.measureColumns;\n                groups = [];\n\n                // For each series value we will make one column per measure\n                let seriesValues = dynamicSeriesMetadata.values;\n                for (let seriesIndex = 0; seriesIndex < seriesValues.length; seriesIndex++) {\n                    let seriesValue = seriesValues[seriesIndex];\n                    let seriesIdentity = getScopeIdentity(dynamicSeriesMetadata.identityFrom, seriesIndex, seriesValue, dynamicSeriesMetadata.column.type);\n\n                    for (let measure of measures) {\n                        let column = _.clone(measure);\n                        column.groupName = <string>seriesValue;\n                        groups.push(column);\n\n                        pushIfNotExists(metadataColumns, column);\n                        categorical.values.push({\n                            source: column,\n                            values: [],\n                            identity: seriesIdentity,\n                        });\n                    }\n                }\n            }\n            else {\n                // Static series / no series\n                categorical.values = DataViewTransform.createValueColumns();\n                groups = this.measureColumns;\n                for (let measure of groups) {\n                    let column = measure;\n                    pushIfNotExists(metadataColumns, column);\n                    categorical.values.push({\n                        source: column,\n                        values: [],\n                    });\n                }\n            }\n\n            let categories = this.categories;\n            if (!_.isEmpty(categories))\n                categorical.categories = categories;\n\n            // --- Fill in data point values ---\n            this.fillData(categorical.values, groups);\n\n            return {\n                metadata: {\n                    columns: metadataColumns,\n                },\n                categorical: categorical,\n            };\n        }\n    }\n\n    function getScopeIdentity(\n        source: DataViewBuilderColumnIdentitySource,\n        index: number,\n        value: PrimitiveValue,\n        valueType: ValueTypeDescriptor): DataViewScopeIdentity {\n        let identities = source.identities;\n        if (identities) {\n            return identities[index];\n        }\n\n        debug.assert(source.fields && source.fields.length === 1, 'Inferring identity, expect exactly one field.');\n\n        return createDataViewScopeIdentity(\n            SQExprBuilder.equal(\n                source.fields[0],\n                SQExprBuilder.typedConstant(value, valueType)));\n    }\n\n    function pushIfNotExists(items: DataViewMetadataColumn[], itemToAdd: DataViewMetadataColumn): void {\n        if (_.contains(items, itemToAdd))\n            return;\n\n        items.push(itemToAdd);\n    }\n\n    function applySeriesData(target: DataViewValueColumn, source: DataViewBuilderSeriesData, categoryLength: number): void {\n        debug.assertValue(target, 'target');\n        debug.assertValue(source, 'source');\n        debug.assertValue(categoryLength, 'categoryLength');\n\n        let values = source.values;\n        debug.assert(categoryLength === values.length, 'categoryLength === values.length');\n\n        target.values = values;\n\n        let highlights = source.highlights;\n        if (highlights) {\n            debug.assert(categoryLength === highlights.length, 'categoryLength === highlights.length');\n\n            target.highlights = highlights;\n        }\n\n        if (source.minLocal !== undefined)\n            target.minLocal = source.minLocal;\n\n        if (source.maxLocal !== undefined)\n            target.maxLocal = source.maxLocal;\n    }\n}","/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved. \n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *   \n *  The above copyright notice and this permission notice shall be included in \n *  all copies or substantial portions of the Software.\n *   \n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\n\nmodule powerbi.data {\n    import SQExpr = powerbi.data.SQExpr;\n\n    export function createStaticEvalContext(): IEvalContext;\n    export function createStaticEvalContext(dataView: DataView, selectTransforms: DataViewSelectTransform[]): IEvalContext;\n    export function createStaticEvalContext(dataView?: DataView, selectTransforms?: DataViewSelectTransform[]): IEvalContext {\n        return new StaticEvalContext(dataView || { metadata: { columns: [] } }, selectTransforms);\n    }\n\n    /**\n     * Represents an eval context over a potentially empty DataView.  Only static repetition data view objects\n     * are supported.\n     */\n    class StaticEvalContext implements IEvalContext {\n        private dataView: DataView;\n        private selectTransforms: DataViewSelectTransform[];\n\n        constructor(dataView: DataView, selectTransforms: DataViewSelectTransform[]) {\n            debug.assertValue(dataView, 'dataView');\n            debug.assertAnyValue(selectTransforms, 'selectTransforms');\n\n            this.dataView = dataView;\n            this.selectTransforms = selectTransforms;\n        }\n\n        public getExprValue(expr: SQExpr): PrimitiveValue {\n            let dataView = this.dataView,\n                selectTransforms = this.selectTransforms;\n            if (dataView && dataView.table && selectTransforms)\n                return getExprValueFromTable(expr, selectTransforms, dataView.table, /*rowIdx*/ 0);\n        }\n\n        public getRoleValue(roleName: string): PrimitiveValue {\n            return;\n        }\n    }\n\n    export function getExprValueFromTable(expr: SQExpr, selectTransforms: DataViewSelectTransform[], table: DataViewTable, rowIdx: number): PrimitiveValue {\n        debug.assertValue(expr, 'expr');\n        debug.assertValue(selectTransforms, 'selectTransforms');\n        debug.assertValue(table, 'table');\n        debug.assertValue(rowIdx, 'rowIdx');\n\n        let rows = table.rows;\n        if (_.isEmpty(rows) || rows.length <= rowIdx)\n            return;\n\n        let cols = table.columns;\n        for (let selectIdx = 0, selectLen = selectTransforms.length; selectIdx < selectLen; selectIdx++) {\n            let selectTransform = selectTransforms[selectIdx];\n            if (!SQExpr.equals(selectTransform.expr, expr) || !selectTransform.queryName)\n                continue;\n\n            for (let colIdx = 0, colLen = cols.length; colIdx < colLen; colIdx++) {\n                if (selectIdx !== cols[colIdx].index)\n                    continue;\n\n                return rows[rowIdx][colIdx];\n            }\n        }\n\n    }\n}","/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved. \n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *   \n *  The above copyright notice and this permission notice shall be included in \n *  all copies or substantial portions of the Software.\n *   \n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\n\nmodule powerbi.data {\n    export function createMatrixEvalContext(dataViewMatrix: DataViewMatrix): IEvalContext {\n        // NOTE: Matrix context-sensitive evaluation is not yet implemented.\n        return createStaticEvalContext();\n    }\n}","/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\n\nmodule powerbi {\n\n    import StringExtensions = jsCommon.StringExtensions;\n    import Formatting = jsCommon.Formatting;\n    import RegExpExtensions = jsCommon.RegExpExtensions;\n\n    /** Culture interfaces. These match the Globalize library interfaces intentionally. */\n    export interface Culture {\n        name: string;\n        calendar: Calendar;\n        calendars: CalendarDictionary;\n        numberFormat: NumberFormatInfo;\n    }\n\n    export interface Calendar {\n        patterns: any;\n        firstDay: number;\n    }\n\n    export interface CalendarDictionary {\n        [key: string]: Calendar;\n    }\n\n    export interface NumberFormatInfo {\n        decimals: number;\n        groupSizes: number[];\n        negativeInfinity: string;\n        positiveInfinity: string;\n    }\n\n    /**\n     *  Creating a dummy module to declare cultureInfo string, so we could do a strongly typed usage in Visuals\n     */\n    declare module powerbi.common {\n        let cultureInfo: string;\n    }\n\n    /** Formatting Encoder */\n    module FormattingEncoder {\n        export function preserveEscaped(format: string, specialChars: string): string {\n            // Unicode U+E000 - U+F8FF is a private area and so we can use the chars from the range to encode the escaped sequences\n            let length = specialChars.length;\n            for (let i = 0; i < length; i++) {\n                let oldText = \"\\\\\" + specialChars[i];\n                let newText = String.fromCharCode(0xE000 + i);\n                format = StringExtensions.replaceAll(format, oldText, newText);\n            }\n            return format;\n        }\n\n        export function restoreEscaped(format: string, specialChars: string): string {\n            // After formatting is complete we should restore the encoded escaped chars into the unescaped chars\n            let length = specialChars.length;\n            for (let i = 0; i < length; i++) {\n                let oldText = String.fromCharCode(0xE000 + i);\n                let newText = specialChars[i];\n                format = StringExtensions.replaceAll(format, oldText, newText);\n            }\n            return StringExtensions.replaceAll(format, \"\\\\\", \"\");\n        }\n\n        export function preserveLiterals(format: string, literals: string[]): string {\n            // Unicode U+E000 - U+F8FF is a private area and so we can use the chars from the range to encode the escaped sequences\n            format = StringExtensions.replaceAll(format, \"\\\"\", \"'\");\n            for (let i = 0; ; i++) {\n                let fromIndex = format.indexOf(\"'\");\n                if (fromIndex < 0) {\n                    break;\n                }\n                let toIndex = format.indexOf(\"'\", fromIndex + 1);\n                if (toIndex < 0) {\n                    break;\n                }\n                let literal = format.substring(fromIndex, toIndex + 1);\n                literals.push(literal.substring(1, toIndex - fromIndex));\n                let token = String.fromCharCode(0xE100 + i);\n                format = format.replace(literal, token);\n            }\n            return format;\n        }\n\n        export function restoreLiterals(format: string, literals: string[]): string {\n            let count = literals.length;\n            for (let i = 0; i < count; i++) {\n                let token = String.fromCharCode(0xE100 + i);\n                let literal = literals[i];\n                format = format.replace(token, literal);\n            }\n            return format;\n        }\n    }\n\n    const IndexedTokensRegex = /({{)|(}})|{(\\d+[^}]*)}/g;\n    const ZeroPlaceholder = '0';\n    const DigitPlaceholder = '#';\n    const ExponentialFormatChar = 'E';\n    const NumericPlaceholders = [ZeroPlaceholder, DigitPlaceholder];\n    const NumericPlaceholderRegex = new RegExp(NumericPlaceholders.join('|'), 'g');\n\n    /** Formatting Service */\n    class FormattingService implements IFormattingService {\n\n        _currentCultureSelector: string;\n        _currentCulture: Culture;\n        _dateTimeScaleFormatInfo: DateTimeScaleFormatInfo;\n\n        public formatValue(value: any, format?: string, culture?: string): string {\n            // Handle special cases\n            if (value === undefined || value === null) {\n                return '';\n            }\n            let gculture = this.getCulture(culture);\n\n            if (DateTimeFormat.canFormat(value)) {\n                // Dates\n                return DateTimeFormat.format(value, format, gculture);\n            } else if (NumberFormat.canFormat(value)) {\n                // Numbers\n                return NumberFormat.format(value, format, gculture);\n            } else {\n                // Other data types - return as string\n                return value.toString();\n            }\n        }\n\n        public format(formatWithIndexedTokens: string, args: any[], culture?: string): string {\n            if (!formatWithIndexedTokens) {\n                return \"\";\n            }\n            let result = formatWithIndexedTokens.replace(IndexedTokensRegex, (match: string, left: string, right: string, argToken: string) => {\n                if (left) {\n                    return \"{\";\n                } else if (right) {\n                    return \"}\";\n                } else {\n                    let parts = argToken.split(\":\");\n                    let argIndex = parseInt(parts[0], 10);\n                    let argFormat = parts[1];\n                    return this.formatValue(args[argIndex], argFormat, culture);\n                }\n                return \"\";\n            });\n\n            return result;\n        }\n\n        public isStandardNumberFormat(format: string): boolean {\n            return NumberFormat.isStandardFormat(format);\n        }\n\n        public formatNumberWithCustomOverride(value: number, format: string, nonScientificOverrideFormat: string, culture?: string): string {\n            let gculture = this.getCulture(culture);\n\n            return NumberFormat.formatWithCustomOverride(value, format, nonScientificOverrideFormat, gculture);\n        }\n\n        public dateFormatString(unit: DateTimeUnit): string {\n            return this._dateTimeScaleFormatInfo.getFormatString(unit);\n        }\n\n        /**\n         * Sets the current localization culture\n         * @param cultureSelector - name of a culture: \"en\", \"en-UK\", \"fr-FR\" etc. (See National Language Support (NLS) for full lists. Use \"default\" for invariant culture).\n         */\n        private setCurrentCulture(cultureSelector: string): void {\n            if (this._currentCultureSelector !== cultureSelector) {\n                this._currentCulture = this.getCulture(cultureSelector);\n                this._currentCultureSelector = cultureSelector;\n                this._dateTimeScaleFormatInfo = new DateTimeScaleFormatInfo(this._currentCulture);\n            }\n        }\n\n        /**\n         * Gets the culture assotiated with the specified cultureSelector (\"en\", \"en-US\", \"fr-FR\" etc).\n         * @param cultureSelector - name of a culture: \"en\", \"en-UK\", \"fr-FR\" etc. (See National Language Support (NLS) for full lists. Use \"default\" for invariant culture).\n         * Exposing this function for testability of unsupported cultures\n         */\n        public getCulture(cultureSelector?: string): Culture {\n            if (cultureSelector == null) {\n                if (this._currentCulture == null) {\n                    this.initialize();\n                }\n                return this._currentCulture;\n            } else {\n                let culture = Globalize.findClosestCulture(cultureSelector);\n                if (!culture)\n                    culture = Globalize.culture(\"en-US\");\n                return culture;\n            }\n        }\n\n        /** By default the Globalization module initializes to the culture/calendar provided in the language/culture URL params */\n        private initialize() {\n            let cultureName = this.getCurrentCulture();\n            this.setCurrentCulture(cultureName);\n            let calendarName = this.getUrlParam(\"calendar\");\n            if (calendarName) {\n                let culture = this._currentCulture;\n                let c = culture.calendars[calendarName];\n                if (c) {\n                    culture.calendar = c;\n                }\n            }\n        }\n\n        /**\n         *  Exposing this function for testability \n         */\n        public getCurrentCulture(): string {\n            let urlParam = this.getUrlParam(\"language\");\n\n            if (urlParam) {\n                return urlParam;\n            }\n\n            if (powerbi && powerbi.common && powerbi.common.cultureInfo) {\n                // Get cultureInfo set in powerbi\n                return powerbi.common.cultureInfo;\n            }\n\n            return window.navigator.userLanguage || window.navigator[\"language\"] || Globalize.culture().name;\n        }\n\n        /**\n         *  Exposing this function for testability\n         *  @param name: queryString name\n         */\n        public getUrlParam(name: string): string {\n            let param = window.location.search.match(RegExp(\"[?&]\" + name + \"=([^&]*)\"));\n            return param ? param[1] : undefined;\n        }\n    }\n\n    /**\n     * DateTimeFormat module contains the static methods for formatting the DateTimes.\n     * It extends the JQuery.Globalize functionality to support complete set of .NET\n     * formatting expressions for dates.\n     */\n    module DateTimeFormat {\n\n        let _currentCachedFormat: string;\n        let _currentCachedProcessedFormat: string;\n\n        /** Evaluates if the value can be formatted using the NumberFormat */\n        export function canFormat(value: any) {\n            let result = value instanceof Date;\n            return result;\n        }\n\n        /** Formats the date using provided format and culture */\n        export function format(value: Date, format: string, culture: Culture): string {\n            format = format || \"G\";\n            let isStandard = format.length === 1;\n            try {\n                if (isStandard) {\n                    return formatDateStandard(value, format, culture);\n                } else {\n                    return formatDateCustom(value, format, culture);\n                }\n            } catch (e) {\n                return formatDateStandard(value, \"G\", culture);\n            }\n        }\n\n        /** Formats the date using standard format expression */\n        function formatDateStandard(value: Date, format: string, culture: Culture) {\n            // In order to provide parity with .NET we have to support additional set of DateTime patterns.\n            let patterns = culture.calendar.patterns;\n            // Extend supported set of patterns\n            ensurePatterns(culture.calendar);\n            // Handle extended set of formats\n            let output = Formatting.findDateFormat(value, format, culture.name);\n            if (output.format.length === 1)\n                format = patterns[output.format];\n            else\n                format = output.format;\n            //need to revisit when globalization is enabled\n            culture = Globalize.culture(\"en-US\");\n            return Globalize.format(output.value, format, culture);\n        }\n\n        /** Formats the date using custom format expression */\n        function formatDateCustom(value: Date, format: string, culture: Culture): string {\n            let result: string;\n            let literals: string[] = [];\n            format = FormattingEncoder.preserveEscaped(format, \"\\\\dfFghHKmstyz:/%'\\\"\");\n            format = FormattingEncoder.preserveLiterals(format, literals);\n            format = StringExtensions.replaceAll(format, \"\\\"\", \"'\");\n            if (format.indexOf(\"F\") > -1) {\n                // F is not supported so we need to replace the F with f based on the milliseconds\n                // Replace all sequences of F longer than 3 with \"FFF\"\n                format = StringExtensions.replaceAll(format, \"FFFF\", \"FFF\");\n                // Based on milliseconds update the format to use fff\n                let milliseconds = value.getMilliseconds();\n                if (milliseconds % 10 >= 1) {\n                    format = StringExtensions.replaceAll(format, \"FFF\", \"fff\");\n                }\n                format = StringExtensions.replaceAll(format, \"FFF\", \"FF\");\n                if ((milliseconds % 100) / 10 >= 1) {\n                    format = StringExtensions.replaceAll(format, \"FF\", \"ff\");\n                }\n                format = StringExtensions.replaceAll(format, \"FF\", \"F\");\n                if ((milliseconds % 1000) / 100 >= 1) {\n                    format = StringExtensions.replaceAll(format, \"F\", \"f\");\n                }\n                format = StringExtensions.replaceAll(format, \"F\", \"\");\n                if (format === \"\" || format === \"%\")\n                    return \"\";\n            }\n            format = processCustomDateTimeFormat(format);\n            result = Globalize.format(value, format, culture);\n            result = localize(result, culture.calendar);\n            result = FormattingEncoder.restoreLiterals(result, literals);\n            result = FormattingEncoder.restoreEscaped(result, \"\\\\dfFghHKmstyz:/%'\\\"\");\n            return result;\n        }\n\n        /** Translates unsupported .NET custom format expressions to the custom expressions supported by JQuery.Globalize */\n        function processCustomDateTimeFormat(format: string): string {\n            if (format === _currentCachedFormat) {\n                return _currentCachedProcessedFormat;\n            }\n            _currentCachedFormat = format;\n            format = Formatting.fixDateTimeFormat(format);\n            _currentCachedProcessedFormat = format;\n            return format;\n        }\n\n        /** Localizes the time separator symbol */\n        function localize(value: string, dictionary: any): string {\n            let timeSeparator = dictionary[\":\"];\n            if (timeSeparator === \":\") {\n                return value;\n            }\n            let result = \"\";\n            let count = value.length;\n            for (let i = 0; i < count; i++) {\n                let char = value.charAt(i);\n                switch (char) {\n                    case \":\":\n                        result += timeSeparator;\n                        break;\n                    default:\n                        result += char;\n                        break;\n                }\n            }\n            return result;\n        }\n\n        function ensurePatterns(calendar: GlobalizeCalendar) {\n            let patterns = calendar.patterns;\n            if (patterns[\"g\"] === undefined) {\n                patterns[\"g\"] = patterns[\"f\"].replace(patterns[\"D\"], patterns[\"d\"]);  // Generic: Short date, short time\n                patterns[\"G\"] = patterns[\"F\"].replace(patterns[\"D\"], patterns[\"d\"]);  // Generic: Short date, long time\n            }\n        }\n\n    }\n\n    /**\n     * NumberFormat module contains the static methods for formatting the numbers.\n     * It extends the JQuery.Globalize functionality to support complete set of .NET\n     * formatting expressions for numeric types including custom formats.\n     */\n    export module NumberFormat {\n\n        const NonScientificFormatRegex = /^\\{.+\\}.*/;\n        const NumericalPlaceHolderRegex = /\\{.+\\}/;\n        const ScientificFormatRegex = /e[+-]*[0#]+/i;\n        const StandardFormatRegex = /^[a-z]\\d{0,2}$/i; // a letter + up to 2 digits for precision specifier\n        const TrailingZerosRegex = /0+$/;\n        const DecimalFormatRegex = /\\.([0#]*)/g;\n        const NumericFormatRegex = /[0#,\\.]+[0,#]*/g;\n        const LastNumericPlaceholderRegex = /(0|#)([^(0|#)]*)$/;\n        const DecimalFormatCharacter = '.';\n\n        export const NumberFormatComponentsDelimeter = ';';\n\n        export interface NumericFormatMetadata {\n            format: string;\n            hasEscapes: boolean;\n            hasQuotes: boolean;\n            hasE: boolean;\n            hasCommas: boolean;\n            hasDots: boolean;\n            hasPercent: boolean;\n            hasPermile: boolean;\n            precision: number;\n            scale: number;\n        }\n\n        export interface NumberFormatComponents {\n            hasNegative: boolean;\n            positive: string;\n            negative: string;\n            zero: string;\n        }\n\n        function getNonScientificFormatWithPrecision(baseFormat: string, numericFormat: string): string {\n            if (!numericFormat || baseFormat === undefined)\n                return baseFormat;\n\n            let newFormat = \"{0:\" + numericFormat + \"}\";\n\n            return baseFormat.replace(\"{0}\", newFormat);\n        }\n\n        export function getNumericFormat(value: number, baseFormat: string): string {\n            if (baseFormat == null)\n                return baseFormat;\n\n            if (hasFormatComponents(baseFormat)) {\n                let {positive, negative, zero} = NumberFormat.getComponents(baseFormat);\n\n                if (value > 0)\n                    return getNumericFormatFromComponent(value, positive);\n                else if (value === 0)\n                    return getNumericFormatFromComponent(value, zero);\n\n                return getNumericFormatFromComponent(value, negative);\n            }\n\n            return getNumericFormatFromComponent(value, baseFormat);\n        }\n\n        function getNumericFormatFromComponent(value: number, format: string): string {\n            let match = RegExpExtensions.run(NumericFormatRegex, format);\n            if (match)\n                return match[0];\n\n            return format;\n        }\n\n        export function addDecimalsToFormat(baseFormat: string, decimals: number, trailingZeros: boolean): string {\n            if (decimals == null)\n                return baseFormat;\n\n            // Default format string\n            if (baseFormat == null)\n                baseFormat = ZeroPlaceholder;\n\n            if (hasFormatComponents(baseFormat)) {\n                let {positive, negative, zero} = NumberFormat.getComponents(baseFormat);\n                let formats = [positive, negative, zero];\n                for (let i = 0; i < formats.length; i++) {\n                    // Update format in formats array\n                    formats[i] = addDecimalsToFormatComponent(formats[i], decimals, trailingZeros);\n                }\n\n                return formats.join(NumberFormat.NumberFormatComponentsDelimeter);\n            }\n\n            return addDecimalsToFormatComponent(baseFormat, decimals, trailingZeros);\n        }\n\n        function addDecimalsToFormatComponent(format: string, decimals: number, trailingZeros: boolean): string {\n            decimals = Math.abs(decimals);\n\n            if (decimals >= 0) {\n                let placeholder = trailingZeros ? ZeroPlaceholder : DigitPlaceholder;\n                let decimalPlaceholders = StringExtensions.repeat(placeholder, Math.abs(decimals));\n\n                let match = RegExpExtensions.run(DecimalFormatRegex, format);\n                if (match) {\n                    let beforeDecimal = format.substr(0, match.index);\n                    let formatDecimal = format.substr(match.index + 1, match[1].length);\n                    let afterDecimal = format.substr(match.index + match[0].length);\n\n                    if (trailingZeros)\n                        // Use explicit decimals argument as placeholders\n                        formatDecimal = decimalPlaceholders;\n                    else {\n                        let decimalChange = decimalPlaceholders.length - formatDecimal.length;\n                        if (decimalChange > 0)\n                            // Append decimalPlaceholders to existing decimal portion of format string\n                            formatDecimal = formatDecimal + decimalPlaceholders.slice(-decimalChange);\n                        else if (decimalChange < 0)\n                            // Remove decimals from formatDecimal\n                            formatDecimal = formatDecimal.slice(0, decimalChange);\n                    }\n\n                    if (formatDecimal.length > 0)\n                        formatDecimal = DecimalFormatCharacter + formatDecimal;\n\n                    return beforeDecimal + formatDecimal + afterDecimal;\n                }\n                else if (decimalPlaceholders.length > 0)\n                    // Replace last numeric placeholder with decimal portion\n                    return format.replace(LastNumericPlaceholderRegex, '$1' + DecimalFormatCharacter + decimalPlaceholders);\n            }\n\n            return format;\n        }\n\n        export function hasFormatComponents(format: string): boolean {\n            return format.indexOf(NumberFormat.NumberFormatComponentsDelimeter) !== -1;\n        }\n\n        export function getComponents(format: string): NumberFormatComponents {\n            let signFormat: NumberFormatComponents = {\n                hasNegative: false,\n                positive: format,\n                negative: format,\n                zero: format,\n            };\n\n            let signSpecificFormats = format.split(NumberFormatComponentsDelimeter);\n            let formatCount = signSpecificFormats.length;\n            debug.assert(!(formatCount > 3), 'format string should be of form positive[;negative;zero]');\n\n            if (formatCount > 1) {\n                signFormat.hasNegative = true;\n\n                signFormat.positive = signFormat.zero = signSpecificFormats[0];\n                signFormat.negative = signSpecificFormats[1];\n\n                if (formatCount > 2)\n                    signFormat.zero = signSpecificFormats[2];\n            }\n\n            return signFormat;\n        }\n\n        let _lastCustomFormatMeta: NumericFormatMetadata;\n\n        /** Evaluates if the value can be formatted using the NumberFormat */\n        export function canFormat(value: any) {\n            let result = typeof (value) === \"number\";\n            return result;\n        }\n\n        export function isStandardFormat(format: string): boolean {\n            debug.assertValue(format, 'format');\n            return StandardFormatRegex.test(format);\n        }\n\n        /** Formats the number using specified format expression and culture */\n        export function format(\n            value: number,\n            format: string,\n            culture: Culture): string {\n            format = format || \"G\";\n            try {\n                if (isStandardFormat(format))\n                    return formatNumberStandard(value, format, culture);\n\n                return formatNumberCustom(value, format, culture);\n            } catch (e) {\n                return Globalize.format(value, undefined, culture);\n            }\n        }\n\n        /** Performs a custom format with a value override.  Typically used for custom formats showing scaled values. */\n        export function formatWithCustomOverride(\n            value: number,\n            format: string,\n            nonScientificOverrideFormat: string,\n            culture: Culture): string {\n            debug.assertValue(value, 'value');\n            debug.assertValue(format, 'format');\n            debug.assertValue(nonScientificOverrideFormat, 'nonScientificOverrideFormat');\n            debug.assertValue(culture, 'culture');\n            debug.assert(!isStandardFormat(format), 'Standard format');\n\n            return formatNumberCustom(value, format, culture, nonScientificOverrideFormat);\n        }\n\n        /** Formats the number using standard format expression */\n        function formatNumberStandard(value: number, format: string, culture: Culture): string {\n            let result: string;\n            let precision = <number>(format.length > 1 ? parseInt(format.substr(1, format.length - 1), 10) : undefined);\n            let numberFormatInfo = culture.numberFormat;\n            let formatChar = format.charAt(0);\n            switch (formatChar) {\n                case \"e\":\n                case \"E\":\n                    if (precision === undefined) {\n                        precision = 6;\n                    }\n                    let mantissaDecimalDigits = StringExtensions.repeat(\"0\", precision);\n                    format = \"0.\" + mantissaDecimalDigits + formatChar + \"+000\";\n                    result = formatNumberCustom(value, format, culture);\n                    break;\n                case \"f\":\n                case \"F\":\n                    result = precision !== undefined ? value.toFixed(precision) : value.toFixed(numberFormatInfo.decimals);\n                    result = localize(result, numberFormatInfo);\n                    break;\n                case \"g\":\n                case \"G\":\n                    let abs = Math.abs(value);\n                    if (abs === 0 || (1E-4 <= abs && abs < 1E15)) {\n                        // For the range of 0.0001 to 1,000,000,000,000,000 - use the normal form\n                        result = precision !== undefined ? value.toPrecision(precision) : value.toString();\n                    } else {\n                        // Otherwise use exponential\n                        result = precision !== undefined ? value.toExponential(precision) : value.toExponential();\n                        result = result.replace(\"e\", \"E\");\n                    }\n                    result = localize(result, numberFormatInfo);\n                    break;\n                case \"r\":\n                case \"R\":\n                    result = value.toString();\n                    result = localize(result, numberFormatInfo);\n                    break;\n                case \"x\":\n                case \"X\":\n                    result = value.toString(16);\n                    if (formatChar === \"X\") {\n                        result = result.toUpperCase();\n                    }\n                    if (precision !== undefined) {\n                        let actualPrecision = result.length;\n                        let isNegative = value < 0;\n                        if (isNegative) {\n                            actualPrecision--;\n                        }\n                        let paddingZerosCount = precision - actualPrecision;\n                        let paddingZeros = undefined;\n                        if (paddingZerosCount > 0) {\n                            paddingZeros = StringExtensions.repeat(\"0\", paddingZerosCount);\n                        }\n                        if (isNegative) {\n                            result = \"-\" + paddingZeros + result.substr(1);\n                        } else {\n                            result = paddingZeros + result;\n                        }\n                    }\n                    result = localize(result, numberFormatInfo);\n                    break;\n                default:\n                    result = Globalize.format(value, format, culture);\n            }\n            return result;\n        }\n\n        /** Formats the number using custom format expression */\n        function formatNumberCustom(\n            value: number,\n            format: string,\n            culture: Culture,\n            nonScientificOverrideFormat?: string): string {\n            let result: string;\n            let numberFormatInfo = culture.numberFormat;\n            if (isFinite(value)) {\n                // Split format by positive[;negative;zero] pattern\n                let formatComponents = getComponents(format);\n\n                // Pick a format based on the sign of value\n                if (value > 0) {\n                    format = formatComponents.positive;\n                } else if (value === 0) {\n                    format = formatComponents.zero;\n                } else {\n                    format = formatComponents.negative;\n                }\n\n                // Normalize value if we have an explicit negative format\n                if (formatComponents.hasNegative)\n                    value = Math.abs(value);\n\n                // Get format metadata\n                let formatMeta = getCustomFormatMetadata(format, true /*calculatePrecision*/);\n\n                // Preserve literals and escaped chars\n                if (formatMeta.hasEscapes) {\n                    format = FormattingEncoder.preserveEscaped(format, \"\\\\0#.,%‰\");\n                }\n                let literals: string[] = [];\n                if (formatMeta.hasQuotes) {\n                    format = FormattingEncoder.preserveLiterals(format, literals);\n                }\n\n                // Scientific format\n                if (formatMeta.hasE && !nonScientificOverrideFormat) {\n                    let scientificMatch = RegExpExtensions.run(ScientificFormatRegex, format);\n                    if (scientificMatch) {\n                        // Case 2.1. Scientific custom format\n                        let formatM = format.substr(0, scientificMatch.index);\n                        let formatE = format.substr(scientificMatch.index + 2); // E(+|-)\n                        let precision = getCustomFormatPrecision(formatM, formatMeta);\n                        let scale = getCustomFormatScale(formatM, formatMeta);\n                        if (scale !== 1) {\n                            value = value * scale;\n                        }\n                        let s = value.toExponential(precision);\n                        let indexOfE = s.indexOf(\"e\");\n                        let mantissa = s.substr(0, indexOfE);\n                        let exp = s.substr(indexOfE + 1);\n                        let resultM = fuseNumberWithCustomFormat(mantissa, formatM, numberFormatInfo);\n                        let resultE = fuseNumberWithCustomFormat(exp, formatE, numberFormatInfo);\n                        if (resultE.charAt(0) === \"+\" && scientificMatch[0].charAt(1) !== \"+\") {\n                            resultE = resultE.substr(1);\n                        }\n                        let e = scientificMatch[0].charAt(0);\n                        result = resultM + e + resultE;\n                    }\n                }\n\n                // Non scientific format\n                if (result === undefined) {\n                    let valueFormatted: string;\n                    let isValueGlobalized: boolean = false;\n                    let precision = getCustomFormatPrecision(format, formatMeta);\n                    let scale = getCustomFormatScale(format, formatMeta);\n\n                    if (scale !== 1)\n                        value = value * scale;\n\n                    // Rounding\n                    value = parseFloat(toNonScientific(value, precision));\n\n                    if (nonScientificOverrideFormat) {\n                        // Get numeric format from format string\n                        let numericFormat = NumberFormat.getNumericFormat(value, format);\n\n                        // Add separators and decimalFormat to nonScientificFormat\n                        nonScientificOverrideFormat = getNonScientificFormatWithPrecision(nonScientificOverrideFormat, numericFormat);\n\n                        // Format the value\n                        valueFormatted = formattingService.format(nonScientificOverrideFormat, [value], culture.name);\n                        isValueGlobalized = true;\n                    }\n                    else\n                        valueFormatted = toNonScientific(value, precision);\n\n                    result = fuseNumberWithCustomFormat(valueFormatted, format, numberFormatInfo, nonScientificOverrideFormat, isValueGlobalized);\n                }\n                if (formatMeta.hasQuotes) {\n                    result = FormattingEncoder.restoreLiterals(result, literals);\n                }\n                if (formatMeta.hasEscapes) {\n                    result = FormattingEncoder.restoreEscaped(result, \"\\\\0#.,%‰\");\n                }\n\n                _lastCustomFormatMeta = formatMeta;\n            } else {\n                return Globalize.format(value, undefined);\n            }\n            return result;\n        }\n\n        /** Returns string with the fixed point respresentation of the number */\n        function toNonScientific(value: number, precision: number): string {\n            let result = \"\";\n            let precisionZeros = 0;\n            // Double precision numbers support actual 15-16 decimal digits of precision.\n            if (precision > 16) {\n                precisionZeros = precision - 16;\n                precision = 16;\n            }\n            let digitsBeforeDecimalPoint = Double.log10(Math.abs(value));\n            if (digitsBeforeDecimalPoint < 16) {\n                if (digitsBeforeDecimalPoint > 0) {\n                    let maxPrecision = 16 - digitsBeforeDecimalPoint;\n                    if (precision > maxPrecision) {\n                        precisionZeros += precision - maxPrecision;\n                        precision = maxPrecision;\n                    }\n                }\n                result = value.toFixed(precision);\n            } else if (digitsBeforeDecimalPoint === 16) {\n                result = value.toFixed(0);\n                precisionZeros += precision;\n                if (precisionZeros > 0) {\n                    result += \".\";\n                }\n            } else { // digitsBeforeDecimalPoint > 16\n                // Different browsers have different implementations of the toFixed().\n                // In IE it returns fixed format no matter what's the number. In FF and Chrome the method returns exponential format for numbers greater than 1E21.\n                // So we need to check for range and convert the to exponential with the max precision.\n                // Then we convert exponential string to fixed by removing the dot and padding with \"power\" zeros.\n                result = value.toExponential(15);\n                let indexOfE = result.indexOf(\"e\");\n                if (indexOfE > 0) {\n                    let indexOfDot = result.indexOf(\".\");\n                    let mantissa = result.substr(0, indexOfE);\n                    let exp = result.substr(indexOfE + 1);\n                    let powerZeros = parseInt(exp, 10) - (mantissa.length - indexOfDot - 1);\n                    result = mantissa.replace(\".\", \"\") + StringExtensions.repeat(\"0\", powerZeros);\n                    if (precision > 0) {\n                        result = result + \".\" + StringExtensions.repeat(\"0\", precision);\n                    }\n                }\n            }\n            if (precisionZeros > 0) {\n                result = result + StringExtensions.repeat(\"0\", precisionZeros);\n            }\n            return result;\n        }\n\n        /**\n         * Returns the formatMetadata of the format\n         * When calculating precision and scale, if format string of\n         * positive[;negative;zero] => positive format will be used\n         * @param (required) format - format string\n         * @param (optional) calculatePrecision - calculate precision of positive format\n         * @param (optional) calculateScale - calculate scale of positive format\n         */\n        export function getCustomFormatMetadata(format: string, calculatePrecision?: boolean, calculateScale?: boolean): NumericFormatMetadata {\n            if (_lastCustomFormatMeta !== undefined && format === _lastCustomFormatMeta.format) {\n                return _lastCustomFormatMeta;\n            }\n\n            let result = {\n                format: format,\n                hasEscapes: false,\n                hasQuotes: false,\n                hasE: false,\n                hasCommas: false,\n                hasDots: false,\n                hasPercent: false,\n                hasPermile: false,\n                precision: undefined,\n                scale: undefined,\n            };\n\n            for (let i = 0, length = format.length; i < length; i++) {\n                let c = format.charAt(i);\n                switch (c) {\n                    case \"\\\\\":\n                        result.hasEscapes = true;\n                        break;\n                    case \"'\":\n                    case \"\\\"\":\n                        result.hasQuotes = true;\n                        break;\n                    case \"e\":\n                    case \"E\":\n                        result.hasE = true;\n                        break;\n                    case \",\":\n                        result.hasCommas = true;\n                        break;\n                    case \".\":\n                        result.hasDots = true;\n                        break;\n                    case \"%\":\n                        result.hasPercent = true;\n                        break;\n                    case \"‰\":\n                        result.hasPermile = true;\n                        break;\n                }\n            }\n\n            // Use positive format for calculating these values\n            let formatComponents = getComponents(format);\n\n            if (calculatePrecision)\n                result.precision = getCustomFormatPrecision(formatComponents.positive, result);\n            if (calculateScale)\n                result.scale = getCustomFormatScale(formatComponents.positive, result);\n\n            return result;\n        }\n\n        /** Returns the decimal precision of format based on the number of # and 0 chars after the decimal point\n          * Important: The input format string needs to be split to the appropriate pos/neg/zero portion to work correctly */\n        function getCustomFormatPrecision(format: string, formatMeta: NumericFormatMetadata): number {\n            if (formatMeta.precision > -1) {\n                return formatMeta.precision;\n            }\n            let result = 0;\n            if (formatMeta.hasDots) {\n                let dotIndex = format.indexOf(\".\");\n                if (dotIndex > -1) {\n                    let count = format.length;\n                    for (let i = dotIndex; i < count; i++) {\n                        let char = format.charAt(i);\n                        if (char.match(NumericPlaceholderRegex))\n                            result++;\n                        // 0.00E+0 :: Break before counting 0 in\n                        // exponential portion of format string\n                        if (char === ExponentialFormatChar)\n                            break;\n                    }\n                    result = Math.min(19, result);\n                }\n            }\n\n            formatMeta.precision = result;\n            return result;\n        }\n\n        /** Returns the scale factor of the format based on the \"%\" and scaling \",\" chars in the format */\n        function getCustomFormatScale(format: string, formatMeta: NumericFormatMetadata): number {\n            if (formatMeta.scale > -1) {\n                return formatMeta.scale;\n            }\n            let result = 1;\n            if (formatMeta.hasPercent && format.indexOf(\"%\") > -1) {\n                result = result * 100;\n            }\n            if (formatMeta.hasPermile && format.indexOf(\"‰\") > -1) {\n                result = result * 1000;\n            }\n            if (formatMeta.hasCommas) {\n                let dotIndex = format.indexOf(\".\");\n                if (dotIndex === -1) {\n                    dotIndex = format.length;\n                }\n                for (let i = dotIndex - 1; i > -1; i--) {\n                    let char = format.charAt(i);\n                    if (char === \",\") {\n                        result = result / 1000;\n                    } else {\n                        break;\n                    }\n                }\n            }\n            formatMeta.scale = result;\n            return result;\n        }\n\n        function fuseNumberWithCustomFormat(value: string, format: string, numberFormatInfo: GlobalizeNumberFormat, nonScientificOverrideFormat?: string, isValueGlobalized?: boolean): string {\n            let suppressModifyValue = !!nonScientificOverrideFormat;\n            let formatParts = format.split(\".\", 2);\n            if (formatParts.length === 2) {\n                let wholeFormat = formatParts[0];\n                let fractionFormat = formatParts[1];\n                let displayUnit = \"\";\n\n                // Remove display unit from value before splitting on \".\" as localized display units sometimes end with \".\"\n                if (nonScientificOverrideFormat) {\n                    debug.assert(NonScientificFormatRegex.test(nonScientificOverrideFormat), \"Number should always precede the display unit\");\n                    displayUnit = nonScientificOverrideFormat.replace(NumericalPlaceHolderRegex, \"\");\n                    value = value.replace(displayUnit, \"\");\n                }\n\n                let globalizedDecimalSeparator = numberFormatInfo[\".\"];\n                let decimalSeparator = isValueGlobalized ? globalizedDecimalSeparator : \".\";\n                let valueParts = value.split(decimalSeparator, 2);\n                let wholeValue = valueParts.length === 1 ? valueParts[0] + displayUnit : valueParts[0];\n                let fractionValue = valueParts.length === 2 ? valueParts[1] + displayUnit : \"\";\n                fractionValue = fractionValue.replace(TrailingZerosRegex, \"\");\n\n                let wholeFormattedValue = fuseNumberWithCustomFormatLeft(wholeValue, wholeFormat, numberFormatInfo, suppressModifyValue);\n                let fractionFormattedValue = fuseNumberWithCustomFormatRight(fractionValue, fractionFormat, suppressModifyValue);\n\n                if (fractionFormattedValue.fmtOnly || fractionFormattedValue.value === \"\")\n                    return wholeFormattedValue + fractionFormattedValue.value;\n\n                return wholeFormattedValue + globalizedDecimalSeparator + fractionFormattedValue.value;\n            }\n            return fuseNumberWithCustomFormatLeft(value, format, numberFormatInfo, suppressModifyValue);\n        }\n\n        function fuseNumberWithCustomFormatLeft(value: string, format: string, numberFormatInfo: GlobalizeNumberFormat, suppressModifyValue?: boolean): string {\n            let groupSymbolIndex = format.indexOf(\",\");\n            let enableGroups = groupSymbolIndex > -1 && groupSymbolIndex < Math.max(format.lastIndexOf(\"0\"), format.lastIndexOf(\"#\")) && numberFormatInfo[\",\"];\n            let groupDigitCount = 0;\n            let groupIndex = 0;\n            let groupSizes = numberFormatInfo.groupSizes || [3];\n            let groupSize = groupSizes[0];\n            let groupSeparator = numberFormatInfo[\",\"];\n            let sign = \"\";\n            let firstChar = value.charAt(0);\n            if (firstChar === \"+\" || firstChar === \"-\") {\n                sign = numberFormatInfo[firstChar];\n                value = value.substr(1);\n            }\n            let isZero = value === \"0\";\n            let result = \"\";\n            let leftBuffer = \"\";\n            let vi = value.length - 1;\n            let fmtOnly = true;\n            // Iterate through format chars and replace 0 and # with the digits from the value string\n            for (let fi = format.length - 1; fi > -1; fi--) {\n                let formatChar = format.charAt(fi);\n                switch (formatChar) {\n                    case ZeroPlaceholder:\n                    case DigitPlaceholder:\n                        fmtOnly = false;\n                        if (leftBuffer !== \"\") {\n                            result = leftBuffer + result;\n                            leftBuffer = \"\";\n                        }\n                        if (!suppressModifyValue) {\n                            if (vi > -1 || formatChar === ZeroPlaceholder) {\n                                if (enableGroups) {\n                                    // If the groups are enabled we'll need to keep track of the current group index and periodically insert group separator,\n                                    if (groupDigitCount === groupSize) {\n                                        result = groupSeparator + result;\n                                        groupIndex++;\n                                        if (groupIndex < groupSizes.length) {\n                                            groupSize = groupSizes[groupIndex];\n                                        }\n                                        groupDigitCount = 1;\n                                    } else {\n                                        groupDigitCount++;\n                                    }\n                                }\n                            }\n                            if (vi > -1) {\n                                if (isZero && formatChar === DigitPlaceholder) {\n                                    // Special case - if we need to format a zero value and the # symbol is used - we don't copy it into the result)\n                                } else {\n                                    result = value.charAt(vi) + result;\n                                }\n                                vi--;\n                            } else if (formatChar !== DigitPlaceholder) {\n                                result = formatChar + result;\n                            }\n                        }\n                        break;\n                    case \",\":\n                        // We should skip all the , chars\n                        break;\n                    default:\n                        leftBuffer = formatChar + leftBuffer;\n                        break;\n                }\n            }\n\n            // If the value didn't fit into the number of zeros provided in the format then we should insert the missing part of the value into the result\n            if (!suppressModifyValue) {\n                if (vi > -1 && result !== \"\") {\n                    if (enableGroups) {\n                        while (vi > -1) {\n                            if (groupDigitCount === groupSize) {\n                                result = groupSeparator + result;\n                                groupIndex++;\n                                if (groupIndex < groupSizes.length) {\n                                    groupSize = groupSizes[groupIndex];\n                                }\n                                groupDigitCount = 1;\n                            } else {\n                                groupDigitCount++;\n                            }\n                            result = value.charAt(vi) + result;\n                            vi--;\n                        }\n                    } else {\n                        result = value.substr(0, vi + 1) + result;\n                    }\n                }\n                // Insert sign in front of the leftBuffer and result\n                return sign + leftBuffer + result;\n            }\n\n            if (fmtOnly)\n                // If the format doesn't specify any digits to be displayed, then just return the format we've parsed up until now.\n                return sign + leftBuffer + result;\n\n            return sign + leftBuffer + value + result;\n        }\n\n        function fuseNumberWithCustomFormatRight(value: string, format: string, suppressModifyValue?: boolean): { value: string; fmtOnly?: boolean } {\n            let vi = 0;\n            let fCount = format.length;\n            let vCount = value.length;\n\n            if (suppressModifyValue) {\n                debug.assert(fCount > 0, \"Empty formatting string\");\n\n                let lastChar = format.charAt(fCount - 1);\n                if (!lastChar.match(NumericPlaceholderRegex))\n                    return {\n                        value: value + lastChar,\n                        fmtOnly: value === \"\",\n                    };\n\n                return {\n                    value: value,\n                    fmtOnly: value === \"\",\n                };\n            }\n\n            let result = \"\",\n                fmtOnly: boolean = true;\n            for (let fi = 0; fi < fCount; fi++) {\n                let formatChar = format.charAt(fi);\n                if (vi < vCount) {\n                    switch (formatChar) {\n                        case ZeroPlaceholder:\n                        case DigitPlaceholder:\n                            result += value[vi++];\n                            fmtOnly = false;\n                            break;\n                        default:\n                            result += formatChar;\n                    }\n                } else {\n                    if (formatChar !== DigitPlaceholder) {\n                        result += formatChar;\n                        fmtOnly = fmtOnly && (formatChar !== ZeroPlaceholder);\n                    }\n                }\n            }\n\n            return {\n                value: result,\n                fmtOnly: fmtOnly,\n            };\n        }\n\n        function localize(value: string, dictionary: any): string {\n            let plus = dictionary[\"+\"];\n            let minus = dictionary[\"-\"];\n            let dot = dictionary[\".\"];\n            let comma = dictionary[\",\"];\n            if (plus === \"+\" && minus === \"-\" && dot === \".\" && comma === \",\") {\n                return value;\n            }\n            let count = value.length;\n            let result = \"\";\n            for (let i = 0; i < count; i++) {\n                let char = value.charAt(i);\n                switch (char) {\n                    case \"+\":\n                        result = result + plus;\n                        break;\n                    case \"-\":\n                        result = result + minus;\n                        break;\n                    case \".\":\n                        result = result + dot;\n                        break;\n                    case \",\":\n                        result = result + comma;\n                        break;\n                    default:\n                        result = result + char;\n                        break;\n                }\n            }\n            return result;\n        }\n\n    }\n\n    /** DateTimeScaleFormatInfo is used to calculate and keep the Date formats used for different units supported by the DateTimeScaleModel */\n    class DateTimeScaleFormatInfo {\n\n        // Fields\n        public YearPattern: string;\n        public MonthPattern: string;\n        public DayPattern: string;\n        public HourPattern: string;\n        public MinutePattern: string;\n        public SecondPattern: string;\n        public MillisecondPattern: string;\n\n        // Constructor\n        /**\n         * Creates new instance of the DateTimeScaleFormatInfo class.\n         * @param culture - culture which calendar info is going to be used to derive the formats.\n         */\n        constructor(culture: Culture) {\n            let calendar: Calendar = culture.calendar;\n            let patterns: any = calendar.patterns;\n            let monthAbbreviations: any = calendar[\"months\"][\"namesAbbr\"];\n            let cultureHasMonthAbbr: boolean = monthAbbreviations && monthAbbreviations[0];\n            let yearMonthPattern: string = patterns[\"Y\"];\n            let monthDayPattern: string = patterns[\"M\"];\n            let fullPattern: string = patterns[\"f\"];\n            let longTimePattern: string = patterns[\"T\"];\n            let shortTimePattern: string = patterns[\"t\"];\n            let separator: string = fullPattern.indexOf(\",\") > -1 ? \", \" : \" \";\n\n            let hasYearSymbol: boolean = yearMonthPattern.indexOf(\"yyyy'\") === 0 && yearMonthPattern.length > 6 && yearMonthPattern[6] === '\\'';\n            this.YearPattern = hasYearSymbol ? yearMonthPattern.substr(0, 7) : \"yyyy\";\n\n            let yearPos: number = fullPattern.indexOf(\"yy\");\n            let monthPos: number = fullPattern.indexOf(\"MMMM\");\n            this.MonthPattern = cultureHasMonthAbbr && monthPos > -1 ? (yearPos > monthPos ? \"MMM yyyy\" : \"yyyy MMM\") : yearMonthPattern;\n\n            this.DayPattern = cultureHasMonthAbbr ? monthDayPattern.replace(\"MMMM\", \"MMM\") : monthDayPattern;\n\n            let minutePos: number = fullPattern.indexOf(\"mm\");\n            let pmPos: number = fullPattern.indexOf(\"tt\");\n            let shortHourPattern: string = pmPos > -1 ? shortTimePattern.replace(\":mm \", \"\") : shortTimePattern;\n            this.HourPattern = yearPos < minutePos ? this.DayPattern + separator + shortHourPattern : shortHourPattern + separator + this.DayPattern;\n\n            this.MinutePattern = shortTimePattern;\n\n            this.SecondPattern = longTimePattern;\n\n            this.MillisecondPattern = longTimePattern.replace(\"ss\", \"ss.fff\");\n\n            // Special cases\n            switch (culture.name) {\n                case \"fi-FI\":\n                    this.DayPattern = this.DayPattern.replace(\"'ta'\", \"\"); // Fix for finish 'ta' suffix for month names.\n                    this.HourPattern = this.HourPattern.replace(\"'ta'\", \"\");\n                    break;\n            }\n        }\n\n        // Methods\n\n        /**\n         * Returns the format string of the provided DateTimeUnit.\n         * @param unit - date or time unit\n         */\n        public getFormatString(unit: DateTimeUnit): string {\n            switch (unit) {\n                case DateTimeUnit.Year:\n                    return this.YearPattern;\n                case DateTimeUnit.Month:\n                    return this.MonthPattern;\n                case DateTimeUnit.Week:\n                case DateTimeUnit.Day:\n                    return this.DayPattern;\n                case DateTimeUnit.Hour:\n                    return this.HourPattern;\n                case DateTimeUnit.Minute:\n                    return this.MinutePattern;\n                case DateTimeUnit.Second:\n                    return this.SecondPattern;\n                case DateTimeUnit.Millisecond:\n                    return this.MillisecondPattern;\n            }\n\n            debug.assertFail('Unexpected unit: ' + unit);\n        }\n    }\n\n    export var formattingService: IFormattingService = new FormattingService();\n}","/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved. \n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *   \n *  The above copyright notice and this permission notice shall be included in \n *  all copies or substantial portions of the Software.\n *   \n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\n\nmodule powerbi.data {\n    /** Serializes SQExpr in a form optimized in-memory comparison, but not intended for storage on disk. */\n    export module SQExprShortSerializer {\n        export function serialize(expr: SQExpr): string {\n            return JSON.stringify(expr.accept(SQExprSerializer.instance));\n        }\n\n        export function serializeArray(exprs: SQExpr[]): string {\n            let str = '[';\n            for (let i = 0, len = exprs.length; i < len; i++) {\n                if (i > 0)\n                    str += ',';\n                str += SQExprShortSerializer.serialize(exprs[i]);\n            }\n            return str + ']';\n        }\n\n        /** Responsible for serializing an SQExpr into a comparable string. */\n        class SQExprSerializer extends DefaultSQExprVisitor<{}> {\n            public static instance: SQExprSerializer = new SQExprSerializer();\n\n            public visitColumnRef(expr: SQColumnRefExpr): {} {\n                return {\n                    col: {\n                        s: expr.source.accept(this),\n                        r: expr.ref,\n                    }\n                };\n            }\n\n            public visitMeasureRef(expr: SQMeasureRefExpr): {} {\n                return {\n                    measure: {\n                        s: expr.source.accept(this),\n                        r: expr.ref,\n                    }\n                };\n            }\n\n            public visitAggr(expr: SQAggregationExpr): {} {\n                return {\n                    agg: {\n                        a: expr.arg.accept(this),\n                        f: expr.func,\n                    }\n                };\n            }\n\n            public visitEntity(expr: SQEntityExpr): {} {\n                debug.assertValue(expr, 'expr');\n                debug.assertValue(expr.entity, 'expr.entity');\n\n                return {\n                    e: expr.entity\n                };\n            }\n\n            public visitAnd(expr: SQAndExpr): {} {\n                debug.assertValue(expr, 'expr');\n\n                return {\n                    and: {\n                        l: expr.left.accept(this),\n                        r: expr.right.accept(this),\n                    }\n                };\n            }\n\n            public visitCompare(expr: SQCompareExpr): {} {\n                debug.assertValue(expr, 'expr');\n\n                return {\n                    comp: {\n                        k: expr.comparison,\n                        l: expr.left.accept(this),\n                        r: expr.right.accept(this),\n                    }\n                };\n            }\n\n            public visitConstant(expr: SQConstantExpr): {} {\n                debug.assertValue(expr, 'expr');\n\n                return {\n                    const: {\n                        t: expr.type.primitiveType,\n                        v: expr.value,\n                    }\n                };\n            }\n\n            public visitDefault(expr: SQExpr): {} {\n                debug.assertFail('Unexpected expression type found in DataViewScopeIdentity.');\n\n                return;\n            }\n        }\n    }\n}"],"sourceRoot":"/source/"}